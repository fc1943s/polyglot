// // # listm

// // ## /@

inl (/@) a b = b |> listm.append a

// // ## init_series

inl init_series start end inc =
    inl total : f64 = conv ((end - start) / inc) + 1
    listm.init total (conv >> (*) inc >> (+) start)

// // ## try_item

inl rec try_item i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item (i - 1) xs
    | Nil => None

// // ## list_item

inl item i =
    try_item i >> optionm.value

// // ## try_item_

let rec try_item_ i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item_ (i - 1) xs
    | Nil => None

// // ## item_

inl item_ i =
    try_item_ i >> optionm.value

// // ## sum

inl sum list =
    list |> listm.fold (+) 0

// // ## unzip

inl unzip list =
    list
    |> listm.fold
        (fun (acc_x, acc_y) (x, y) =>
            x :: acc_x, y :: acc_y
        )
        ([], [])
    |> fun x, y =>
        x |> listm.rev, y |> listm.rev

inl unzip_ list =
    let rec loop acc_x acc_y = function
        | Cons ((x, y), xs) => loop (x :: acc_x) (y :: acc_y) xs
        | Nil => acc_x |> listm.rev, acc_y |> listm.rev
    loop [] [] list

// // ## try_index_of

inl try_index_of item list =
    inl rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of item =
    try_index_of item >> optionm.value

inl try_index_of_ item list =
    let rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of_ item =
    try_index_of_ item >> optionm.value

inl try_index_of__ item list =
    inl i = mut 0
    inl list = mut list
    inl result = mut None
    let rec loop () =
        match *list with
        | [] => result <- None
        | x :: xs =>
            if x = item
            then result <- Some *i
            else
                i <- *i + 1
                list <- xs
                loop ()
    loop ()
    *result

inl index_of__ item =
    try_index_of__ item >> optionm.value

// // ## try_find

inl try_find fn list =
    inl rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

inl try_find_ fn list =
    let rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

inl find x =
    try_find x >> optionm.value

inl find_ x =
    try_find_ x >> optionm.value

// // ## choose

inl choose f l =
    (l, [])
    ||> listm.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc

inl choose_ f l =
    let rec loop acc = function
        | [] => acc |> listm.rev
        | x :: xs =>
            match f x with
            | Some y => loop (y :: acc) xs
            | None => loop acc xs
    loop [] l

// // ## zip_with

inl zip_with fn xs ys =
    inl rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

inl zip_with_ fn xs ys =
    let rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

// // ## zip

inl zip xs ys =
    zip_with pair xs ys

inl zip_ xs ys =
    zip_with_ pair xs ys

// // ## indexed

inl indexed list =
    list
    |> listm.fold
        (fun (acc, i) x =>
            (i, x) :: acc, i + 1
        )
        ([], 0)
    |> fst
    |> listm.rev
