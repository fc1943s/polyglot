#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

# am

#!spiral

// // test

open testing

prototype append t : t -> t -> t

#!spiral

open rust_operators

#!markdown

## append

#!spiral

instance append a dim {int; number} t =
    am.append

#!markdown

## /@

#!spiral

inl (/@) a b =
    b |> append a

#!spiral

// // test

a ;[ "a"; "b" ] /@ a ;[ "c"; "d" ]
|> _equal (a ;[ "a"; "b"; "c"; "d" ] : _ i32 _)

#!markdown

## collect

#!spiral

inl collect forall t r. (fn : t -> a i32 r) (items : a i32 t) : a i32 r =
    items
    |> am.map fn
    |> am.fold (/@) (a ;[])

#!markdown

## choose

#!spiral

inl choose f l =
    (l, [])
    ||> am.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc
    |> listm.toArray

#!spiral

// // test

(am.init 10i32 id : a _ _)
|> choose (fun x => if x % 2 = 0 then Some x else None)
|> _equal (a ;[ 0; 2; 4; 6; 8 ] : _ i32 _)

#!markdown

## sum

#!spiral

inl sum (a' : a _ _) =
    a' |> am.fold (+) 0

#!spiral

// // test

am.init 10i32 id
|> sum
|> _equal 45

#!markdown

## init_series

#!spiral

inl init_series start end inc =
    inl total = conv ((end - start) / inc) + 1
    am.init total (conv >> (*) inc >> (+) start) : a i32 _

#!spiral

// // test

init_series 0 1 0.5
|> _equal (a ;[0f64; 0.5; 1])

#!markdown

## last

#!spiral

inl last (array : a _ _) =
    index array (length array - 1)

#!spiral

// // test

am.init 10i32 id
|> last
|> _equal 9

#!markdown

## indexed

#!spiral

inl indexed (array : a _ _) =
    (([], 0), array)
    ||> am.fold fun (acc, i) x =>
        (i, x) :: acc, i + 1
    |> fst
    |> listm.rev
    |> listm.toArray

#!spiral

// // test

am.init 3i32 ((*) 2)
|> indexed
|> _equal (a ;[0i32, 0; 1, 2; 2, 4] : a i32 _)

#!markdown

## try_pick

#!spiral

inl try_pick forall t u. (fn : t -> option u) (array : a _ t) : option u =
    (array, None)
    ||> am.foldBack fun x acc =>
        match acc with
        | Some _ => acc
        | None => x |> fn

#!spiral

// // test

am.init 10i32 id
|> try_pick (fun x => if x = 5i32 then Some x else None)
|> _equal (Some 5i32)

#!markdown

## from_vec

#!spiral

inl from_vec forall dim el. (vec : rust.vec el) : a dim el =
    inl vec = join vec
    !\($'"fable_library_rust::NativeArray_::array_from(!vec)"')

#!markdown

## map_base

#!spiral

inl map_base forall t u. (fn : t -> u) (x : array t) : array u =
    a x
    |> am.map fn
    |> fun (a x : _ i64 _) => x
