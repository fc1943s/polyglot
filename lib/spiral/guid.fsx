let rec closure0 () (v0 : string) : System.Guid =
    let v1 : System.Guid = v0 |> System.Guid 
    v1
and method0 (v0 : string) : System.Guid =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = v0.PadLeft (32, '0')
    let v16 : (string -> int32) = String.length
    let v17 : int32 = v16 v2
    let v20 : int32 = 0 |> int32 
    let v27 : int32 = 8 |> int32 
    let v34 : int32 = v27 - 1
    let v35 : string = v2.[int v20..int v34]
    let v39 : (string -> int32) = String.length
    let v40 : int32 = v39 v2
    let v43 : int32 = 8 |> int32 
    let v50 : int32 = 12 |> int32 
    let v57 : int32 = v50 - 1
    let v58 : string = v2.[int v43..int v57]
    let v62 : (string -> int32) = String.length
    let v63 : int32 = v62 v2
    let v66 : int32 = 12 |> int32 
    let v73 : int32 = 16 |> int32 
    let v80 : int32 = v73 - 1
    let v81 : string = v2.[int v66..int v80]
    let v85 : (string -> int32) = String.length
    let v86 : int32 = v85 v2
    let v89 : int32 = 16 |> int32 
    let v96 : int32 = 20 |> int32 
    let v103 : int32 = v96 - 1
    let v104 : string = v2.[int v89..int v103]
    let v108 : (string -> int32) = String.length
    let v109 : int32 = v108 v2
    let v112 : int32 = 20 |> int32 
    let v119 : int32 = 32 |> int32 
    let v126 : int32 = v119 - 1
    let v127 : string = v2.[int v112..int v126]
    let v131 : string = $"{v35}-{v58}-{v81}-{v104}-{v127}"
    let _v1 = v131 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v132 : string = v0.PadLeft (32, '0')
    let v146 : (string -> int32) = String.length
    let v147 : int32 = v146 v132
    let v150 : int32 = 0 |> int32 
    let v157 : int32 = 8 |> int32 
    let v164 : int32 = v157 - 1
    let v165 : string = v132.[int v150..int v164]
    let v169 : (string -> int32) = String.length
    let v170 : int32 = v169 v132
    let v173 : int32 = 8 |> int32 
    let v180 : int32 = 12 |> int32 
    let v187 : int32 = v180 - 1
    let v188 : string = v132.[int v173..int v187]
    let v192 : (string -> int32) = String.length
    let v193 : int32 = v192 v132
    let v196 : int32 = 12 |> int32 
    let v203 : int32 = 16 |> int32 
    let v210 : int32 = v203 - 1
    let v211 : string = v132.[int v196..int v210]
    let v215 : (string -> int32) = String.length
    let v216 : int32 = v215 v132
    let v219 : int32 = 16 |> int32 
    let v226 : int32 = 20 |> int32 
    let v233 : int32 = v226 - 1
    let v234 : string = v132.[int v219..int v233]
    let v238 : (string -> int32) = String.length
    let v239 : int32 = v238 v132
    let v242 : int32 = 20 |> int32 
    let v249 : int32 = 32 |> int32 
    let v256 : int32 = v249 - 1
    let v257 : string = v132.[int v242..int v256]
    let v261 : string = $"{v165}-{v188}-{v211}-{v234}-{v257}"
    let _v1 = v261 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v262 : string = null |> unbox<string>
    let _v1 = v262 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v265 : string = v0.PadLeft (32, '0')
    let v279 : (string -> int32) = String.length
    let v280 : int32 = v279 v265
    let v283 : int32 = 0 |> int32 
    let v290 : int32 = 8 |> int32 
    let v297 : int32 = v290 - 1
    let v298 : string = v265.[int v283..int v297]
    let v302 : (string -> int32) = String.length
    let v303 : int32 = v302 v265
    let v306 : int32 = 8 |> int32 
    let v313 : int32 = 12 |> int32 
    let v320 : int32 = v313 - 1
    let v321 : string = v265.[int v306..int v320]
    let v325 : (string -> int32) = String.length
    let v326 : int32 = v325 v265
    let v329 : int32 = 12 |> int32 
    let v336 : int32 = 16 |> int32 
    let v343 : int32 = v336 - 1
    let v344 : string = v265.[int v329..int v343]
    let v348 : (string -> int32) = String.length
    let v349 : int32 = v348 v265
    let v352 : int32 = 16 |> int32 
    let v359 : int32 = 20 |> int32 
    let v366 : int32 = v359 - 1
    let v367 : string = v265.[int v352..int v366]
    let v371 : (string -> int32) = String.length
    let v372 : int32 = v371 v265
    let v375 : int32 = 20 |> int32 
    let v382 : int32 = 32 |> int32 
    let v389 : int32 = v382 - 1
    let v390 : string = v265.[int v375..int v389]
    let v394 : string = $"{v298}-{v321}-{v344}-{v367}-{v390}"
    let _v1 = v394 
    #endif
#if FABLE_COMPILER_PYTHON
    let v395 : string = v0.PadLeft (32, '0')
    let v409 : (string -> int32) = String.length
    let v410 : int32 = v409 v395
    let v413 : int32 = 0 |> int32 
    let v420 : int32 = 8 |> int32 
    let v427 : int32 = v420 - 1
    let v428 : string = v395.[int v413..int v427]
    let v432 : (string -> int32) = String.length
    let v433 : int32 = v432 v395
    let v436 : int32 = 8 |> int32 
    let v443 : int32 = 12 |> int32 
    let v450 : int32 = v443 - 1
    let v451 : string = v395.[int v436..int v450]
    let v455 : (string -> int32) = String.length
    let v456 : int32 = v455 v395
    let v459 : int32 = 12 |> int32 
    let v466 : int32 = 16 |> int32 
    let v473 : int32 = v466 - 1
    let v474 : string = v395.[int v459..int v473]
    let v478 : (string -> int32) = String.length
    let v479 : int32 = v478 v395
    let v482 : int32 = 16 |> int32 
    let v489 : int32 = 20 |> int32 
    let v496 : int32 = v489 - 1
    let v497 : string = v395.[int v482..int v496]
    let v501 : (string -> int32) = String.length
    let v502 : int32 = v501 v395
    let v505 : int32 = 20 |> int32 
    let v512 : int32 = 32 |> int32 
    let v519 : int32 = v512 - 1
    let v520 : string = v395.[int v505..int v519]
    let v524 : string = $"{v428}-{v451}-{v474}-{v497}-{v520}"
    let _v1 = v524 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v525 : string = v0.PadLeft (32, '0')
    let v539 : (string -> int32) = String.length
    let v540 : int32 = v539 v525
    let v543 : int32 = 0 |> int32 
    let v550 : int32 = 8 |> int32 
    let v557 : int32 = v550 - 1
    let v558 : string = v525.[int v543..int v557]
    let v562 : (string -> int32) = String.length
    let v563 : int32 = v562 v525
    let v566 : int32 = 8 |> int32 
    let v573 : int32 = 12 |> int32 
    let v580 : int32 = v573 - 1
    let v581 : string = v525.[int v566..int v580]
    let v585 : (string -> int32) = String.length
    let v586 : int32 = v585 v525
    let v589 : int32 = 12 |> int32 
    let v596 : int32 = 16 |> int32 
    let v603 : int32 = v596 - 1
    let v604 : string = v525.[int v589..int v603]
    let v608 : (string -> int32) = String.length
    let v609 : int32 = v608 v525
    let v612 : int32 = 16 |> int32 
    let v619 : int32 = 20 |> int32 
    let v626 : int32 = v619 - 1
    let v627 : string = v525.[int v612..int v626]
    let v631 : (string -> int32) = String.length
    let v632 : int32 = v631 v525
    let v635 : int32 = 20 |> int32 
    let v642 : int32 = 32 |> int32 
    let v649 : int32 = v642 - 1
    let v650 : string = v525.[int v635..int v649]
    let v654 : string = $"{v558}-{v581}-{v604}-{v627}-{v650}"
    let _v1 = v654 
    #endif
#else
    let v655 : string = v0.PadLeft (32, '0')
    let v669 : (string -> int32) = String.length
    let v670 : int32 = v669 v655
    let v673 : int32 = 0 |> int32 
    let v680 : int32 = 8 |> int32 
    let v687 : int32 = v680 - 1
    let v688 : string = v655.[int v673..int v687]
    let v692 : (string -> int32) = String.length
    let v693 : int32 = v692 v655
    let v696 : int32 = 8 |> int32 
    let v703 : int32 = 12 |> int32 
    let v710 : int32 = v703 - 1
    let v711 : string = v655.[int v696..int v710]
    let v715 : (string -> int32) = String.length
    let v716 : int32 = v715 v655
    let v719 : int32 = 12 |> int32 
    let v726 : int32 = 16 |> int32 
    let v733 : int32 = v726 - 1
    let v734 : string = v655.[int v719..int v733]
    let v738 : (string -> int32) = String.length
    let v739 : int32 = v738 v655
    let v742 : int32 = 16 |> int32 
    let v749 : int32 = 20 |> int32 
    let v756 : int32 = v749 - 1
    let v757 : string = v655.[int v742..int v756]
    let v761 : (string -> int32) = String.length
    let v762 : int32 = v761 v655
    let v765 : int32 = 20 |> int32 
    let v772 : int32 = 32 |> int32 
    let v779 : int32 = v772 - 1
    let v780 : string = v655.[int v765..int v779]
    let v784 : string = $"{v688}-{v711}-{v734}-{v757}-{v780}"
    let _v1 = v784 
    #endif
    let v785 : string = _v1 
    let v917 : System.Guid = v785 |> System.Guid 
    v917
and closure1 () (v0 : string) : System.Guid =
    method0(v0)
and closure2 () () : System.Guid =
    let v0 : (unit -> System.Guid) = System.Guid.NewGuid
    v0 ()
let v0 : (string -> System.Guid) = closure0()
let new_guid x = v0 x
let v1 : (string -> System.Guid) = closure1()
let hash_guid x = v1 x
let v2 : (unit -> System.Guid) = closure2()
let new_raw_guid x = v2 x
()
