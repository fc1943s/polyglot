// // # seq

// // ## seq

type seq dim el = dim -> option el

// // ## item

inl item n seq =
    seq n

// // ## from_list

inl from_list list =
    fun n =>
        list |> listm'.try_item n

// // ## indexed

inl indexed s =
    fun n =>
        s |> item n |> optionm.map (fun x => n, x)

// // ## zip

inl zip n seq1 seq2 =
    seq1 n, seq2 n

// // ## zip_with

inl zip_with fn seq1 seq2 =
    fun n =>
        fn (seq1 n) (seq2 n)

// // ## fold

inl fold fn init seq =
    inl rec loop acc n =
        match seq n with
        | Some x => loop (fn acc x) (n + 1)
        | None => acc
    loop init 0

inl fold_ fn init seq =
    let rec loop acc n =
        match seq n with
        | Some x => loop (fn acc x) (n + 1)
        | None => acc
    loop init 0

// // ## sum

inl sum seq =
    seq |> fold (+) 0

inl sum_ seq =
    seq |> fold_ (+) 0

// // ## to_list

inl to_list seq =
    seq
    |> fold (fun acc x => x :: acc) []
    |> listm.rev

inl to_list_ seq =
    seq
    |> fold_ (fun acc x => x :: acc) []
    |> listm.rev

// // ## take_while

inl take_while cond seq =
    inl rec loop acc i =
        match seq i with
        | Some st when cond st i => loop (st :: acc) (i + 1)
        | _ => acc |> listm.rev
    loop [] 0

// // ## take_while_

inl take_while_ cond seq =
    let rec loop acc i =
        match seq i with
        | Some st when cond st i => loop (st :: acc) (i + 1)
        | _ => acc |> listm.rev
    loop [] 0

// // ## memoize

inl memoize seq =
    inl state = mut []
    fun n =>
        match *state |> listm'.try_find (fun (n', _) => n' = n) with
        | Some (_, v) => v
        | None =>
            inl new_state = seq n
            state <- (n, new_state) :: *state
            new_state

inl memoize_ seq =
    inl state = mut []
    fun n =>
        match *state |> listm'.try_find_ (fun (n', _) => n' = n) with
        | Some (_, v) => v
        | None =>
            inl new_state = seq n
            state <- (n, new_state) :: *state
            new_state

// // ## iterate

inl iterate f x0 num_steps =
    inl rec loop x n =
        if n <= 0
        then x
        else loop (f x) (n - 1)
    loop x0 num_steps

inl iterate_ f x0 num_steps =
    let rec loop x n =
        if n <= 0
        then x
        else loop (f x) (n - 1)
    loop x0 num_steps

inl iterate' f x0 num_steps =
    listm.init num_steps id
    |> listm.fold (fun x _ => f x) x0
