#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# rust

#!spiral

// // test

open testing

#!markdown

## emit_expr

#!spiral

inl emit_expr forall a t. (args : a) (code : string) : t =
    real
        $"Fable.Core.RustInterop.emitRustExpr !args !code" : t

#!spiral

nominal any = $"std_any_Any"
nominal ref_cell t = $"std_cell_RefCell<`t>"
nominal async t = $"Async<`t>"
nominal borsh_io_error = $"borsh_io_Error"
nominal rexie = $"rexie_Rexie"
nominal rexie_store = $"rexie_Store"
nominal rexie_transaction = $"rexie_Transaction"
nominal rexie_error = $"rexie_Error"
nominal json_value = $"serde_json_Value"
nominal json_error = $"serde_json_Error"
nominal js_value = $"wasm_bindgen_JsValue"
nominal closure t = $"wasm_bindgen_closure_Closure<`t>"
nominal hash_map k v = $"std_collections_HashMap<`k, `v>"
nominal rc t = $"std_rc_Rc<`t>"
nominal box t = $"Box<`t>"
nominal pin t = $"std_pin_Pin<`t>"
nominal arc t = $"std_sync_Arc<`t>"
nominal std_string = $"std_string_String"
nominal js_function = $"js_sys_Function"
nominal js_string = $"js_sys_JsString"
nominal window = $"web_sys_Window"
nominal document = $"web_sys_Document"
nominal html_element = $"web_sys_HtmlElement"
nominal storage = $"web_sys_Storage"
nominal dyn' t = $"Dyn<`t>"
nominal fn' t = $"Fn<`t>"
nominal action_fn2 t u = $"ActionFn2<`t, `u>"
nominal fn_once t = $"FnOnce<`t>"
nominal fn_unit = $"FnUnit"
nominal future t = $"Future<`t>"
nominal func0 t = $"Func0<`t>"
nominal func1 t u = $"Func0<`t, `u>"
nominal impl t = $"Impl<`t>"
nominal mut' t = $"Mut<`t>"
nominal ref' t = $"Ref<`t>"
nominal static_ref' t = $"StaticRef<`t>"
nominal str = $"Str"
nominal vec t = $"Vec<`t>"

#!spiral

inl (~!\) forall t. (code : string) : t =
    emit_expr () code

inl (~!\\) forall t u. ((args : t), (code : string)) : u =
    emit_expr args code

inl raw_string_literal (s : string) : ref' str =
    !\($"\"r#\\\"\" + !s + \"\\\"#\"")

inl raw_string_literal_static (s : string) : static_ref' str =
    !\($"\"r#\\\"\" + !s + \"\\\"#\"")

inl (~#) (s : string) : ref' str =
    raw_string_literal s

inl (~##) (s : string) : static_ref' str =
    raw_string_literal_static s

inl new_box forall t. (x : t) : box t =
    inl x = join x
    !\($'"Box::new(!x)"')

inl new_rc forall t. (x : t) : rc t =
    inl x = join x
    !\($'"std::rc::Rc::new(!x)"')

inl new_arc forall t. (x : t) : arc t =
    inl x = join x
    !\($'"std::sync::Arc::new(!x)"')

inl closure_wrap forall t. (x : box t) : closure t =
    inl x = join x
    !\($'"wasm_bindgen::closure::Closure::wrap(!x)"')

inl box_fn forall t. (x : () -> ()) : box t =
    inl x = join x
    !\($'"Box::new(move || !x())"')

inl closure_forget forall t. (closure : closure t) =
    !\($'"!closure.forget()"') : ()

inl new_pin forall t. (x : t) : pin (box t) =
    inl x = join x
    !\($'"Box::pin(!x)"')

inl closure_as_ref forall t. (closure : closure t) : ref' js_value =
    !\($'"wasm_bindgen::closure::Closure::as_ref(&!closure)"')

inl unchecked_ref (ref : ref' js_value) : ref' js_function =
    !\($'"wasm_bindgen::JsCast::unchecked_ref(!ref)"')

inl deref forall t. (ref : ref' t) : t =
    inl ref = join ref
    !\($'"*!ref"')

inl func0_get forall t. (x : func0 t) : t =
    inl x = join x
    !\($'"!x()"')

inl move forall t u. (x : () -> t) (fn : t -> u) : func0 u =
    inl x = join x
    inl fn = join fn
    !\($'"Func0::new(move || !fn(!x()))"')

inl to_static_ref_unbox forall t. (x : ref' t) : static_ref' t =
    $"!x |> unbox"

inl box_leak forall t. (x : box t) : static_ref' (mut' t) =
    emit_expr () $"\"Box::leak(!x)\""
