#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# physics

#!fsharp

#!import ../nbs/Plotting.dib

#!spiral

// // test

open testing

#!markdown

## init_series

#!spiral

// // test

inl x : a _ f64 = am'.init_series -3 3 0.01
inl y = x |> am.map math.square
"square", "x", "y", ;[ "square", x, y ]

#!spiral

// // test

inl x : a _ f64 = am'.init_series -10 10 0.1
inl y_sin = x |> am.map sin
inl y_cos = x |> am.map cos
"sin cos", "x", "y", ;[ "sin", x, y_sin; "cos", x, y_cos ]

#!spiral

// // test

inl y_pos y0 vy0 ay t =
    y0 + vy0 * t + ay * (t |> math.square) / 2

inl x : a _ f64 = am'.init_series 0 5 0.01
inl y = x |> am.map (y_pos 0 20 -9.8)
"projectile motion", "time (s)", "", ;[ "height of projectile (m)", x, y ]

#!markdown

## velocity_cf

#!spiral

type mass = f64
type time = f64
type position = f64
type velocity = f64
type force = f64

type velocity_cf = mass -> velocity -> list force -> (time -> velocity)

inl velocity_cf m v0 fs =
    inl f_net = fs |> listm'.sum
    inl a0 = f_net / m
    inl v t = v0 + a0 * t
    v

#!spiral

// // test

velocity_cf 0.1f64 0.6 [ 0.04; -0.08 ] 0
|> _equal 0.6

velocity_cf 0.1f64 0.6 [ 0.04; -0.08 ] 1
|> _equal 0.2

#!spiral

// // test

inl x = am'.init_series 0 4 0.1
inl y = x |> am.map (velocity_cf 0.1f64 0.6 [ 0.04; -0.08 ])
"car on an air track", "time (s)", "", ;[ "velocity of car (m/s)", x, y ]

#!markdown

## derivative

#!spiral

type derivative = (f64 -> f64) -> f64 -> f64

inl derivative dt : derivative =
    fun x t =>
        (x (t + dt / 2) - x (t - dt / 2)) / dt

#!spiral

// // test

derivative 1 (fun x => x ** 4 / 4) 1 - 1
|> _almost_equal 0.25

derivative 0.001 (fun x => x ** 4 / 4) 1 - 1
|> _almost_equal 0.0000002499998827953931

derivative 0.000001 (fun x => x ** 4 / 4) 1 - 1
|> _almost_equal 0.000000000001000088900582341

derivative 0.000000001 (fun x => x ** 4 / 4) 1 - 1
|> _almost_equal 0.00000008274037099909037

derivative 0.000000000001 (fun x => x ** 4 / 4) 1 - 1
|> _almost_equal 0.00008890058234101161

derivative 0.000000000000001 (fun x => x ** 4 / 4) 1 - 1
|> _almost_equal -0.0007992778373592246

derivative 0.000000000000000001 (fun x => x ** 4 / 4) 1 - 1
|> _almost_equal -1

#!markdown

## integration

#!spiral

type integration = (f64 -> f64) -> f64 -> f64 -> f64

inl integral dt : integration =
    fun f a b =>
        inl rec loop t y =
            if t < b
            then loop (t + dt) (y + f t * dt)
            else t, y
        loop (a + dt / 2) 0
        |> snd

#!spiral

// // test

integral 0.01 math.square 0 1
|> _almost_equal 0.33332500000000004

#!spiral

inl integral' dt : integration =
    fun f a b =>
        listm'.init_series (a + dt / 2) (b - dt / 2) dt
        |> listm.map (f >> (*) dt)
        |> listm'.sum

#!spiral

// // test

integral' 0.1 math.square 0 1
|> _almost_equal (integral 0.1 math.square 0 1)

#!spiral

inl integral'' dt : integration =
    fun f a b =>
        am'.init_series (a + dt / 2) (b - dt / 2) dt
        |> am.map (f >> (*) dt)
        |> am'.sum

#!spiral

// // test

integral'' 0.01 math.square 0 1
|> _almost_equal (integral 0.01 math.square 0 1)

#!markdown

## anti_derivative

#!spiral

inl anti_derivative dt v0 a t =
    v0 + integral' dt a 0 t

#!markdown

## velocity_ft

#!spiral

type velocity_ft = mass -> velocity -> list (time -> force) -> (time -> velocity)

inl velocity_ft dt : velocity_ft =
    fun m v0 fs =>
        inl f_net t = fs |> listm.map (fun f => f t) |> listm'.sum
        inl a t = f_net t / m
        anti_derivative dt v0 a

#!markdown

## position_ft

#!spiral

type position_ft = mass -> position -> velocity -> list (time -> force) -> (time -> position)

inl position_ft dt : position_ft =
    fun m x0 v0 fs =>
        velocity_ft dt m v0 fs
        |> anti_derivative dt x0

#!spiral

// // test

inl pedal_coast (t : time) : force =
    inl t_cycle = 20
    inl n_complete : i32 = t / t_cycle |> conv
    inl remainder = t - conv n_complete * t_cycle
    if remainder > 0 && remainder < 10
    then 10
    else 0

inl x = am'.init_series -5 45 0.1
inl y = x |> am.map pedal_coast
"child pedaling then coasting", "time (s)", "", ;[ "force on bike (N)", x, y ]

#!spiral

// // test

inl x = am'.init_series -5 45 1
inl y = x |> am.map (position_ft 0.1f64 20 0 0 [ pedal_coast ])
"child pedaling then coasting", "time (s)", "", ;[ "position of bike (m)", x, y ]

#!markdown

## velocity_fv

#!spiral

inl newton_second_v m fs v0 =
    fs |> listm.map (fun f => f v0) |> listm'.sum |> fun x => x / m

inl update_velocity dt m fs v0 =
    v0 + newton_second_v m fs v0 * dt

inl velocity_fv dt m v0 fs t =
    t / dt |> math.round |> abs
    |> util.iterate_ (update_velocity dt m fs) v0

#!spiral

inl f_air drag rho area v =
    -drag * rho * area * abs v * v / 2

#!spiral

// // test

inl x = am'.init_series 0 60 0.5
inl y = x |> am.map (velocity_fv 1 70 0f64 [ fun _ => 100; f_air 2 1.225 0.6 ])
"bike velocity", "time (s)", "", ;[ "velocity of bike (m/s)", x, y ]

#!markdown

## velocity_ftv

#!spiral

inl newton_second_tv m fs (t, v0) =
    inl f_net = fs |> listm.map (fun f => f (t, v0)) |> listm'.sum
    inl acc = f_net / m
    1, acc

inl update_tv dt m fs (t, v0) =
    inl dtdt, dvdt = newton_second_tv m fs (t, v0)
    t + dtdt * dt, v0 + dvdt * dt

inl velocity_ftv dt m tv0 fs t =
    t / dt |> math.round |> abs
    |> util.iterate_ (update_tv dt m fs) tv0
    |> snd

#!spiral

// // test

inl x = am'.init_series 0 100 0.1
inl y =
    x
    |> am.map (
        velocity_ftv 0.1 20 (0, 0) [ fun (t, _) => pedal_coast t; fun (_, v) => f_air 2 1.225 0.5 v ]
    )
"pedaling and coasting with air", "time (s)", "", ;[ "velocity of bike (m/s)", x, y ]

#!markdown

## velocity_ftxv

#!spiral

nominal state_1d = time * position * velocity
nominal rrr = f64 * f64 * f64

inl newton_second_1d m fs (state_1d (t, x0, v0)) =
    inl f_net = fs |> listm.map (fun f => f (state_1d (t, x0, v0))) |> listm'.sum
    inl acc = f_net / m
    rrr (1f64, v0, acc)

inl euler_1d dt deriv (state_1d (t0, x0, v0) as t) =
    inl (rrr (_, _, dvdt)) = deriv t
    inl t1 = t0 + dt
    inl x1 = x0 + v0 * dt
    inl v1 = v0 + dvdt * dt
    state_1d (t1, x1, v1)

inl update_txv dt m fs =
    newton_second_1d m fs |> euler_1d dt

inl states_txv dt m txv0 fs =
    util.iterate_ (update_txv dt m fs) txv0

inl velocity_1d sts t =
    inl (state_1d (t0, _, _)) = sts 0
    inl (state_1d (t1, _, _)) = sts 1
    inl dt = t1 - t0
    inl num_steps = t / dt |> math.round |> abs
    inl (state_1d (_, _, v0)) = sts num_steps
    v0

inl velocity_ftxv dt m txv0 fs =
    states_txv dt m txv0 fs |> velocity_1d

inl position_1d sts t =
    inl (state_1d (t0, _, _)) = sts 0
    inl (state_1d (t1, _, _)) = sts 1
    inl dt = t1 - t0
    inl num_steps = t / dt |> math.round |> abs
    inl (state_1d (_, x0, _)) = sts num_steps
    x0

inl position_ftxv dt m txv0 fs =
    states_txv dt m txv0 fs |> position_1d

inl spring_force k (state_1d (_, x0, _)) =
    -k * x0

#!spiral

// // test

inl damped_ho_forces () =
    [
        spring_force 0.8
        fun (state_1d (_, _, v0)) => f_air 2 1.225 (pi * math.square 0.02) v0
        fun _ => -0.0027 * 9.80665
    ]

inl damped_ho_states () =
    states_txv 0.001 0.0027 (state_1d (0, 0.1, 0)) (damped_ho_forces ())

inl pingpong_position t =
    position_ftxv 0.001 0.0027 (state_1d (0, 0.1, 0)) (damped_ho_forces ()) t

inl x : a _ f64 = am'.init_series 0 3 0.01
inl y = x |> am.map pingpong_position
"ping pong ball on a slinky", "time (s)", "", ;[ "position (m)", x, y ]

#!spiral

// // test

inl pingpong_velocity t =
    velocity_ftxv 0.001 0.0027 (state_1d (0, 0.1, 0)) (damped_ho_forces ()) t

inl x = am'.init_series 0 3 0.01
inl y = x |> am.map pingpong_velocity
"ping pong ball on a slinky", "time (s)", "", ;[ "velocity (m/s)", x, y ]

#!markdown

## shift

#!spiral

type update_function s = s -> s

type differential_equation s ds = s -> ds

type numerical_method s ds = differential_equation s ds -> update_function s


inl solver method =
    method >> util.iterate
inl solver' method =
    method >> util.iterate'
inl solver_ method =
    method >> util.iterate_


inl euler_cromer_1d dt deriv (state_1d (t0, x0, v0) as t) =
    inl (rrr (_, _, dvdt)) = deriv t
    inl t1 = t0 + dt
    inl v1 = v0 + dvdt * dt
    inl x1 = x0 + v1 * dt
    state_1d (t1, x1, v1)

inl update_txv_ec dt m fs =
    euler_cromer_1d dt (newton_second_1d m fs)

prototype (+++) ds : ds -> ds -> ds
prototype scale ds : f64 -> ds -> ds

instance (+++) rrr = fun (rrr (dtdt0, dxdt0, dvdt0)) (rrr (dtdt1, dxdt1, dvdt1)) =>
    rrr (dtdt0 + dtdt1, dxdt0 + dxdt1, dvdt0 + dvdt1)

instance scale rrr = fun w (rrr (dtdt0, dxdt0, dvdt0)) =>
    rrr (w * dtdt0, w * dxdt0, w * dvdt0)

prototype shift s : forall ds. f64 -> ds -> s -> s

instance shift state_1d = fun dt ds (state_1d (t, x, v)) =>
    inl dtdt, dxdt, dvdt =
        real
            match ds with
            | rrr x => x
            | state_1d x => x
    state_1d (t + dtdt * dt, x + dxdt * dt, v + dvdt * dt)

inl euler dt deriv st0 =
    shift dt (deriv st0) st0

inl runge_kutta_4 dt deriv st0 =
    inl m0 = deriv st0
    inl m1 = deriv (shift (dt / 2) m0 st0)
    inl m2 = deriv (shift (dt / 2) m1 st0)
    inl m3 = deriv (shift dt m2 st0)
    shift (dt / 6) (m0 +++ m1 +++ m1 +++ m2 +++ m2 +++ m3) st0

inl exponential (_, x0, v0) =
    1f64, v0, x0

inl of_state_1d (state_1d (t, x, v)) =
    t, x, v

#!spiral

// // test

solver (euler 0.01) (of_state_1d >> exponential >> state_1d) (state_1d (0, 1, 1)) 800i32
|> _equal (state_1d (7.999999999999874, 2864.8311229272326, 2864.8311229272326))

solver (euler_cromer_1d 0.1) (of_state_1d >> exponential >> rrr) (state_1d (0, 1, 1)) 80i32
|> _equal (state_1d (7.999999999999988, 3043.379244966009, 2895.0121485099035))

solver (runge_kutta_4 1) (of_state_1d >> exponential >> rrr) (state_1d (0, 1, 1)) 8i32
|> _equal (state_1d (8.0, 2894.789038540849, 2894.789038540849))

#!markdown

## vec

#!spiral

type vec =
    {
        x : f64
        y : f64
        z : f64
    }

inl vec x y z : vec =
    { x y z }

#!spiral

// // test

vec 1 2 3 .z
|> _equal 3

#!markdown

### consts

#!spiral

inl i_hat () = vec 1 0 0
inl j_hat () = vec 0 1 0
inl k_hat () = vec 0 0 1
inl zero_vec () = vec 0 0 0

#!markdown

### ^+^

#!spiral

inl (^+^) (a : vec) (b : vec) =
    vec (a.x + b.x) (a.y + b.y) (a.z + b.z)

#!spiral

// // test

vec 1 2 3 ^+^ vec 4 5 6
|> _equal (vec 5 7 9)

#!markdown

### sum_vec

#!spiral

inl sum_vec vs =
    vs |> listm.fold (^+^) (zero_vec ())

#!spiral

// // test

[ vec 1 2 3; vec 4 5 6 ]
|> sum_vec
|> _equal (vec 5 7 9)

#!markdown

### *^

#!spiral

inl (*^) c { x y z } =
    vec (c * x) (c * y) (c * z)

#!spiral

// // test

5 *^ vec 1 2 3
|> _equal (vec 5 10 15)

#!spiral

// // test

3 *^ i_hat () ^+^ 4 *^ k_hat ()
|> _equal (vec 3 0 4)

#!markdown

### ^*

#!spiral

inl (^*) v c =
    (*^) c v

#!spiral

// // test

vec 1 2 3 ^* 5
|> _equal (vec 5 10 15)

#!markdown

### ^/

#!spiral

inl (^/) { x y z } c =
    vec (x / c) (y / c) (z / c)

#!spiral

// // test

vec 1 2 3 ^/ 5
|> _equal (vec 0.2 0.4 0.6)

#!markdown

### negate_vec

#!spiral

inl negate_vec v =
    v ^* -1

#!spiral

// // test

vec 1 2 3
|> negate_vec
|> _equal (vec -1 -2 -3)

#!markdown

### ^-^

#!spiral

inl (^-^) a b =
    a ^+^ (negate_vec b)

#!spiral

// // test

vec 1 2 3 ^-^ vec 4 5 6
|> _equal (vec -3 -3 -3)

#!markdown

### <.>

#!spiral

inl (<.>) { x = ax y = ay z = az } { x = bx y = by z = bz } =
    ax * bx + ay * by + az * bz

#!spiral

// // test

vec 1 2 3 <.> vec 4 5 6
|> _equal 32

#!markdown

### \>\<

#!spiral

inl (><) (a : vec) (b : vec) =
    vec
        (a.y * b.z - a.z * b.y)
        (a.z * b.x - a.x * b.z)
        (a.x * b.y - a.y * b.x)

#!spiral

// // test

vec 1 2 3 >< vec 4 5 6
|> _equal (vec -3 6 -3)

#!markdown

### magnitude

#!spiral

inl magnitude v =
    v <.> v |> sqrt

#!spiral

// // test

vec 1 2 3
|> magnitude
|> _almost_equal 3.7416573867739413

#!markdown

### v1

#!spiral

inl v1 t =
    2 *^ (t ** 2 *^ i_hat () ^+^ 3 *^ (t ** 3 *^ j_hat () ^+^ t ** 4 *^ k_hat ()))

#!spiral

// // test

v1 1
|> _equal (vec 2 6 6)

#!markdown

### vec_derivative

#!spiral

type vec_derivative = (f64 -> vec) -> f64 -> vec

inl vec_derivative dt : vec_derivative =
    fun v t =>
        (v (t + dt / 2) ^-^ v (t - dt / 2)) ^/ dt

#!spiral

// // test

vec_derivative 0.01 v1 3 .x
|> _almost_equal (derivative 0.01 (v1 >> fun v => v.x) 3)

#!markdown

## states_ps

#!spiral

nominal particle_state =
    {
        mass : f64
        charge : f64
        time : f64
        pos_vec : vec
        velocity : vec
    }

inl default_particle_state () : particle_state =
    particle_state {
        mass = 1
        charge = 0
        time = 0
        pos_vec = zero_vec ()
        velocity = zero_vec ()
    }

type one_body_force = particle_state -> vec

nominal d_particle_state =
    {
        dmdt : f64
        dqdt : f64
        dtdt : f64
        drdt : vec
        dvdt : vec
    }

inl newton_second_ps (fs : list one_body_force) (st : particle_state) : d_particle_state =
    inl f_net = fs |> listm.map (fun f => f st) |> sum_vec
    d_particle_state {
        dmdt = 0
        dqdt = 0
        dtdt = 1
        drdt = st.velocity
        dvdt = f_net ^/ st.mass
    }

inl earth_surface_gravity (st : particle_state) =
    inl g = 9.80665
    -st.mass * g *^ k_hat ()

inl air_resistance drag rho area (st : particle_state) =
    -0.5 * drag * rho * area * magnitude st.velocity *^ st.velocity

inl euler_cromer_ps dt (deriv : particle_state -> d_particle_state) (particle_state st) =
    inl dst : d_particle_state = deriv (particle_state st)
    inl v' = st.velocity ^+^ dst.dvdt ^* dt
    particle_state { st with
        time = st.time + dt
        pos_vec = st.pos_vec ^+^ v' ^* dt
        velocity = st.velocity ^+^ dst.dvdt ^* dt
    }

instance (+++) d_particle_state = fun (dps : d_particle_state) (dps' : d_particle_state) =>
    d_particle_state {
        dmdt = dps.dmdt + dps'.dmdt
        dqdt = dps.dqdt + dps'.dqdt
        dtdt = dps.dtdt + dps'.dtdt
        drdt = dps.drdt ^+^ dps'.drdt
        dvdt = dps.dvdt ^+^ dps'.dvdt
    }

instance scale d_particle_state = fun w (dps : d_particle_state) =>
    d_particle_state {
        dmdt = w * dps.dmdt
        dqdt = w * dps.dqdt
        dtdt = w * dps.dtdt
        drdt = w *^ dps.drdt
        dvdt = w *^ dps.dvdt
    }

instance shift particle_state = fun dt dps (particle_state st) =>
    inl (d_particle_state dps) =
        real
            match dps with
            | d_particle_state _ => dps
    particle_state { st with
        time = st.time + dps.dtdt * dt
        pos_vec = st.pos_vec ^+^ dps.drdt ^* dt
        velocity = st.velocity ^+^ dps.dvdt ^* dt
    }

inl states_ps (method : numerical_method particle_state d_particle_state) : _ -> _ -> i32 -> particle_state =
    newton_second_ps >> method >> util.iterate_

inl z_ge0 sts =
    sts
    |> util.take_while_ (fun (particle_state st) _ => st.pos_vec.z >= 0)

inl trajectory sts =
    sts |> listm.map (fun (particle_state st) => st.pos_vec.y, st.pos_vec.z)

#!spiral

// // test

inl update_ps (method : numerical_method particle_state d_particle_state) =
    newton_second_ps >> method

inl position_ps (method : numerical_method particle_state d_particle_state) fs st t =
    inl states : i32 -> particle_state = states_ps method fs st
    inl dt = (states 1).time - (states 0).time
    inl num_steps = t / dt |> math.round |> abs
    inl st1 = solver' method (newton_second_ps fs) st num_steps
    st1.pos_vec

inl sun_gravity (st : particle_state) : vec =
    inl big_g = 0.0000000000667408
    inl sun_mass = 1988480000000000000000000000000
    -big_g * sun_mass * st.mass *^ st.pos_vec ^/ magnitude st.pos_vec ** 3

inl wind_force v_wind drag rho area (st : particle_state) =
    inl v_rel = st.velocity ^-^ v_wind
    -0.5 * drag * rho * area * magnitude v_rel *^ v_rel

inl rock_state () =
    inl (particle_state default_particle_state') = default_particle_state ()
    particle_state { default_particle_state' with
        mass = 2
        velocity = vec 3 0 4
    }

inl halley_update dt =
    update_ps (euler_cromer_ps dt) [ sun_gravity ]

inl halley_initial () =
    inl (particle_state default_particle_state') = default_particle_state ()
    particle_state { default_particle_state' with
        mass = 220000000000000
        pos_vec = 87660000000 *^ i_hat ()
        velocity = 54569 *^ j_hat ()
    }

#!spiral

// // test

inl baseball_forces () =
    inl area = pi * (0.074 / 2) ** 2
    [
        earth_surface_gravity
        air_resistance 0.3 1.225 area
    ]

inl baseball_trajectory dt v0 theta_deg =
    inl theta_rad = theta_deg * pi / 180
    inl vy0 = v0 * cos theta_rad
    inl vz0 = v0 * sin theta_rad
    inl initial_state =
        particle_state {
            mass = 0.145
            charge = 0
            time = 0
            pos_vec = zero_vec ()
            velocity = vec 0 vy0 vz0
        }
    states_ps (euler_cromer_ps dt) (baseball_forces ()) initial_state
    |> z_ge0
    |> trajectory

inl baseball_range dt v0 theta_deg =
    baseball_trajectory dt v0 theta_deg
    |> listm.fold (fun _ (y, _) => y) 0

inl x : a _ f64 = am'.init_series 10 80 1
inl y = x |> am.map (baseball_range 0.01 45)
"range for a baseball hit at 45 m/s",
"angle above horizontal (degrees)",
"",
;[ "horizontal range (m)", x, y ]

#!spiral

// // test

inl best_angle (min, max) =
    let rec loop theta_deg (best_range, best_theta_deg) =
        if theta_deg > max
        then best_range, best_theta_deg
        else
            inl range = baseball_range 0.01 45 theta_deg
            loop
                (theta_deg + 1)
                (if range > best_range
                    then range, theta_deg
                    else best_range, best_theta_deg)
    loop min (0f64, min)

best_angle (30f64, 60f64)
|> _equal (116.77499158246208, 41)

#!markdown

## relativity_ps

#!spiral

inl relativity_ps fs (st : particle_state) =
    inl f_net = fs |> listm.map (fun f => f st) |> sum_vec
    inl c = 299792458
    inl u = st.velocity ^/ c
    inl acc = sqrt (1 - (u <.> u)) *^ (f_net ^-^ (f_net <.> u) *^ u) ^/ st.mass
    d_particle_state {
        dmdt = 0
        dqdt = 0
        dtdt = 1
        drdt = st.velocity
        dvdt = acc
    }

#!spiral

// // test

inl year = 365.25 * 24 * 60 * 60
inl c = 299792458
inl ~method = runge_kutta_4 100000
inl forces = [ fun _ => 10 *^ i_hat () ]
inl (particle_state default_particle_state') = default_particle_state ()
inl initial_state =
    particle_state { default_particle_state' with
        mass = 1
    }

inl newton_states = solver_ method (newton_second_ps forces) initial_state
inl relativity_states = solver_ method (relativity_ps forces) initial_state

inl newton_x, newton_y =
    newton_states
    |> util.take_while_ (fun (particle_state st) _ => st.time <= year)
    |> listm.map (fun (particle_state st) => st.time / year, st.velocity.x / c)
    |> listm'.unzip

inl _, relativity_y =
    relativity_states
    |> util.take_while_ (fun (particle_state st) _ => st.time <= year)
    |> listm.map (fun (particle_state st) => st.time / year, st.velocity.x / c)
    |> listm'.unzip

inl newton_x : a i32 _ = newton_x |> listm.toArray
inl newton_y : a i32 _ = newton_y |> listm.toArray
inl relativity_y : a i32 _ = relativity_y |> listm.toArray

"response to a constant force",
"time (years)",
"velocity (multiples of c)",
;[
    "newtonian", newton_x, newton_y
    "relativistic", newton_x, relativity_y
]

#!spiral

inl uniform_lorentz_force v_e v_b (st : particle_state) =
    st.charge *^ (v_e ^+^ st.velocity >< v_b)

#!spiral

// // test

inl c : f64 = 299792458
inl ~method = runge_kutta_4 0.000000001
inl forces = [ uniform_lorentz_force (zero_vec ()) (k_hat ()) ]
inl (particle_state default_particle_state') = default_particle_state ()
inl initial_state =
    particle_state { default_particle_state' with
        mass = 0.000000000000000000000000001672621898
        charge = 0.0000000000000000001602176621
        velocity = 0.8 *^ (c *^ j_hat ())
    }

inl newton_states = solver_ method (newton_second_ps forces) initial_state
inl relativity_states = solver_ method (relativity_ps forces) initial_state

inl newton_x, newton_y =
    newton_states
    |> util.take_while_ (fun (particle_state st) i => i < 100)
    |> listm.map (fun (particle_state st) => st.pos_vec.x, st.pos_vec.y)
    |> listm'.unzip

inl relativity_x, relativity_y =
    relativity_states
    |> util.take_while_ (fun (particle_state st) i => i < 165)
    |> listm.map (fun (particle_state st) => st.pos_vec.x, st.pos_vec.y)
    |> listm'.unzip

inl newton_x : a i32 _ = newton_x |> listm.toArray
inl newton_y : a i32 _ = newton_y |> listm.toArray

inl relativity_x : a i32 _ = relativity_x |> listm.toArray
inl relativity_y : a i32 _ = relativity_y |> listm.toArray

"proton in a 1-t magnetic field",
"x (m)",
"y (m)",
;[
    "newtonian", newton_x, newton_y
    "relativistic", relativity_x, relativity_y
]

#!markdown

## end
