// // # common

// // ## types

nominal any = $"obj"
nominal disposable = $"System.IDisposable"
nominal exn = $"exn"
nominal guid = $"System.Guid"

let array x = x

// // ## prototype

prototype (~:>) r : forall t. t -> r
prototype append t : t -> t -> t
prototype of_string t : string -> t
prototype to_string t : t -> string

// // ## null

inl null forall t. () : t =
    $"null |> unbox<`t>"

// // ## pair

type pair a b = $"(`a * `b)"

inl new_pair forall a b. (a : a) (b : b) : pair a b =
    $"!a, !b"

// // ## log_level_type

union log_level_type =
    | Verbose
    | Debug
    | Info
    | Warning
    | Critical

instance to_string log_level_type = function
    | Verbose => "Verbose"
    | Debug => "Debug"
    | Info => "Info"
    | Warning => "Warning"
    | Critical => "Critical"

instance of_string log_level_type = function
    | "Verbose" => Verbose
    | "Debug" => Debug
    | "Info" => Info
    | "Warning" => Warning
    | "Critical" => Critical

// // ## to_any

inl to_any forall t. (obj : t) : any =
    $"!obj"

instance (~:>) any = to_any

// // ## (/@)

inl (/@) a b =
    b |> append a

// // ## (/+)

inl (/+) forall t. (a : t) (b : t) : t =
    $"!a + !b"

// // ## pair

inl pair x y =
    x, y

// // ## (||>)

inl (||>) (arg1, arg2) fn =
    arg2 |> fn arg1

// // ## flip

inl flip fn a b =
    fn b a

// // ## join_body

inl join_body body acc x =
    if var_is x |> not
    then body acc x
    else
        inl acc = dyn acc
        join body acc x

// // ## join_body_unit

inl join_body_unit body d x =
    if var_is d |> not
    then body x
    else
        inl x = dyn x
        join body x

// // ## run_target

union target_runtime =
    | Native
    | Wasm

union target =
    | Rust : target_runtime
    | Fsharp

inl run_target forall t. (fn : target -> (() -> t)) : t =
    $"let mutable result = None"
    $"#if FABLE_COMPILER_RUST"
    $"#if \!WASM"
    fn (Rust Native) () |> fun x => $"!x"
    $"#else"
    fn (Rust Wasm) () |> fun x => $"!x"
    $"#endif"
    $"#else"
    fn Fsharp () |> fun x => $"!x"
    $"#endif"
    $"|> fun x -> result <- Some x"
    $"result |> Option.get"

// // ## nameof

inl nameof x : string =
    $"nameof !x"

// // ## get_environment_variable

inl get_environment_variable (var : string) : string =
    $"System.Environment.GetEnvironmentVariable !var"
