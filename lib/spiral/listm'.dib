#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# listm

#!spiral

// // test

open testing

#!markdown

## /@

#!spiral

inl (/@) a b = b |> listm.append a

#!spiral

// // test

["a"; "b"] /@ ["c"; "d"]
|> _equal ["a"; "b"; "c"; "d"]

#!spiral

inl init_series start end inc =
    inl total : f64 = conv ((end - start) / inc) + 1
    listm.init total (conv >> (*) inc >> (+) start)

#!spiral

// // test

init_series 0 1 0.5
|> _equal [0f64; 0.5; 1]

#!markdown

## try_item

#!spiral

inl rec try_item i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item (i - 1) xs
    | Nil => None

#!spiral

// // test

listm.init 10i32 id
|> try_item 9i32
|> _equal (Some 9)

#!spiral

// // test

listm.init 10i32 id
|> try_item 10i32
|> _equal None

#!markdown

## list_item

#!spiral

inl item i =
    try_item i >> optionm.value

#!spiral

// // test

listm.init 10i32 id
|> item 9i32
|> _equal 9

#!spiral

// // test

fun () =>
    listm.init 10i32 id
    |> item 10i32
    |> ignore
|> _throws
|> _equal (Some "Option does not have a value.")

#!markdown

## try_item_

#!spiral

let rec try_item_ i = function
    | Cons (x, _) when i = 0 => Some x
    | Cons (_, xs) => try_item_ (i - 1) xs
    | Nil => None

#!markdown

## item_

#!spiral

inl item_ i =
    try_item_ i >> optionm.value

#!markdown

## lazy_list

#!spiral

union rec lazy_list t =
    | LazyCons : t * (() -> lazy_list t)
    | LazyNil

inl rec lazy_list list =
    match list with
    | [] => LazyNil
    | x :: xs => LazyCons (x, fun () => lazy_list xs)

inl rec try_lazy_item i = function
    | LazyCons (x, _) when i = 0 => Some x
    | LazyCons (_, fn) => try_lazy_item (i - 1) (fn ())
    | LazyNil => None

inl lazy_item i =
    try_lazy_item i >> optionm.value

inl try_lazy_item_ i list =
    inl i = mut i
    inl list = mut list
    let rec loop () =
        match *list with
        | LazyCons (x, _) when *i = 0 => Some x
        | LazyCons (_, fn) =>
            i <- *i - 1
            list <- fn ()
            loop ()
        | LazyNil => None
    loop ()

inl lazy_item_ i =
    try_lazy_item_ i >> optionm.value

let rec try_lazy_item__ i list =
    inl i = mut i
    inl list = mut list
    inl result = mut None
    let rec loop () =
        match *list with
        | LazyCons (x, _) when *i = 0 => result <- Some x
        | LazyCons (_, fn) =>
            i <- *i - 1
            list <- fn ()
            loop ()
        | LazyNil => ()
    loop ()
    *result

inl lazy_item__ i =
    try_lazy_item__ i >> optionm.value

#!spiral

// // test

listm.init 10i32 id
|> lazy_list
|> lazy_item 9i32
|> _equal 9

#!spiral

// // test

listm.init 10i32 id
|> lazy_list
|> lazy_item_ 9i32
|> _equal 9

#!markdown

## new_infinite_lazy_list

#!spiral

inl new_infinite_lazy_list fn =
    inl rec loop n =
        LazyCons (fn n, fun () => loop (n + 1))
    loop 0

inl new_infinite_lazy_list_ fn =
    let rec loop n =
        LazyCons (fn n, fun () => loop (n + 1))
    loop 0

#!spiral

// // test

new_infinite_lazy_list print_and_return
|> lazy_item 4i32
|> _equal 4i32

#!spiral

inl new_finite_lazy_list fn max =
    inl rec loop n =
        if n >= max
        then LazyNil
        else LazyCons (fn n, fun () => loop (n + 1))
    loop 0

inl new_finite_lazy_list_ fn max =
    let rec loop n =
        if n >= max
        then LazyNil
        else LazyCons (fn n, fun () => loop (n + 1))
    loop 0

#!markdown

## memoize_lazy_list

#!spiral

union memoized_lazy_list t =
    | NotComputed : () -> lazy_list t
    | Computed : lazy_list t

inl memoize_lazy_list list =
    inl rec loop list =
        inl state = mut (NotComputed list)
        fun () =>
            match *state with
            | Computed x => x
            | NotComputed fn =>
                inl new_state =
                    match fn () with
                    | LazyNil => LazyNil
                    | LazyCons (x, fn) => LazyCons (x, loop fn)
                state <- Computed new_state
                new_state
    loop (fun () => list)

inl memoize_lazy_list_ list =
    let rec loop list =
        inl state = mut (NotComputed list)
        fun () =>
            match *state with
            | Computed x => x
            | NotComputed fn =>
                inl new_state =
                    match fn () with
                    | LazyNil => LazyNil
                    | LazyCons (x, fn) => LazyCons (x, loop fn)
                state <- Computed new_state
                new_state
    loop (fun () => list)

#!spiral

// // test

inl memo_list = new_finite_lazy_list print_and_return 10 |> memoize_lazy_list

memo_list ()
|> lazy_item 3i32
|> _equal 3i32

memo_list ()
|> lazy_item 5i32
|> _equal 5i32

#!spiral

// // test

inl memo_list = new_infinite_lazy_list_ print_and_return |> memoize_lazy_list

memo_list ()
|> lazy_item 3i32
|> _equal 3i32

memo_list ()
|> lazy_item 5i32
|> _equal 5i32

#!markdown

## sum

#!spiral

inl sum list =
    list |> listm.fold (+) 0

#!spiral

// // test

listm.init 10i32 id
|> sum
|> _equal 45

#!markdown

## unzip

#!spiral

inl unzip list =
    list
    |> listm.fold
        (fun (acc_x, acc_y) (x, y) =>
            x :: acc_x, y :: acc_y
        )
        ([], [])
    |> fun x, y =>
        x |> listm.rev, y |> listm.rev

inl unzip_ list =
    let rec loop acc_x acc_y = function
        | Cons ((x, y), xs) => loop (x :: acc_x) (y :: acc_y) xs
        | Nil => acc_x |> listm.rev, acc_y |> listm.rev
    loop [] [] list

#!spiral

// // test

listm.init 10i32 id
|> listm.map (fun x => x, x)
|> unzip
|> fun x, y =>
    x |> sum
    |> _equal 45

    y |> sum
    |> _equal 45

#!markdown

## try_index_of

#!spiral

inl try_index_of item list =
    inl rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of item =
    try_index_of item >> optionm.value

inl try_index_of_ item list =
    let rec loop i = function
        | [] => None
        | x :: xs =>
            if x = item
            then Some i
            else loop (i + 1) xs
    loop 0 list

inl index_of_ item =
    try_index_of_ item >> optionm.value

inl try_index_of__ item list =
    inl i = mut 0
    inl list = mut list
    inl result = mut None
    let rec loop () =
        match *list with
        | [] => result <- None
        | x :: xs =>
            if x = item
            then result <- Some *i
            else
                i <- *i + 1
                list <- xs
                loop ()
    loop ()
    *result

inl index_of__ item =
    try_index_of__ item >> optionm.value

#!spiral

// // test

listm.init 10i32 id
|> index_of 5i32
|> _equal 5i32

#!spiral

// // test

listm.init 10i32 id
|> try_index_of 10i32
|> _equal (None : option i32)

#!markdown

## try_find

#!spiral

inl try_find fn list =
    inl rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

inl try_find_ fn list =
    let rec loop = function
        | [] => None
        | x :: xs =>
            if fn x
            then Some x
            else loop xs
    loop list

#!spiral

// // test

listm.init 10i32 id
|> try_find ((=) 5i32)
|> _equal (Some 5i32)

#!spiral

inl find x =
    try_find x >> optionm.value

inl find_ x =
    try_find_ x >> optionm.value

#!spiral

// // test

listm.init 10i32 id
|> find ((=) 5i32)
|> _equal 5i32

#!markdown

## choose

#!spiral

inl choose f l =
    (l, [])
    ||> listm.foldBack fun x acc =>
        match f x with
        | Some y => y :: acc
        | None => acc

inl choose_ f l =
    let rec loop acc = function
        | [] => acc |> listm.rev
        | x :: xs =>
            match f x with
            | Some y => loop (y :: acc) xs
            | None => loop acc xs
    loop [] l

#!spiral

// // test

listm.init 10i32 id
|> choose (fun x => if x % 2 = 0 then Some x else None)
|> _equal [0; 2; 4; 6; 8]

#!markdown

## zip_with

#!spiral

inl zip_with fn xs ys =
    inl rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

inl zip_with_ fn xs ys =
    let rec loop acc xs ys =
        match xs, ys with
        | Cons (x, xs), Cons (y, ys) =>
            loop (fn x y :: acc) xs ys
        | _ => listm.rev acc
    loop [] xs ys

#!spiral

// // test

([1i32; 2; 3], [4; 5; 6])
||> zip_with (+)
|> _equal [5; 7; 9]

#!markdown

## zip

#!spiral

inl zip xs ys =
    zip_with pair xs ys

inl zip_ xs ys =
    zip_with_ pair xs ys

#!spiral

// // test

([1i32; 2; 3], [4i32; 5; 6])
||> zip
|> _equal [1, 4; 2, 5; 3, 6]

#!markdown

## indexed

#!spiral

inl indexed list =
    list
    |> listm.fold
        (fun (acc, i) x =>
            (i, x) :: acc, i + 1
        )
        ([], 0)
    |> fst
    |> listm.rev

#!spiral

// // test

listm.init 5i32 ((*) 2)
|> indexed
|> _equal [0i32, 0; 1, 2; 2, 4; 3, 6; 4, 8]
