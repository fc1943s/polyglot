// // # stream

union rec stream t =
    | StreamCons : t * (() -> stream t)
    | StreamNil

// // ## from_list

inl rec from_list list =
    match list with
    | [] => StreamNil
    | x :: xs => StreamCons (x, fun () => from_list xs)

// // ## try_item

inl rec try_item i = function
    | StreamCons (x, _) when i = 0 => Some x
    | StreamCons (_, fn) => try_item (i - 1) (fn ())
    | StreamNil => None

inl item i =
    try_item i >> optionm.value

inl try_item_ i list =
    inl i = mut i
    inl list = mut list
    let rec loop () =
        match *list with
        | StreamCons (x, _) when *i = 0 => Some x
        | StreamCons (_, fn) =>
            i <- *i - 1
            list <- fn ()
            loop ()
        | StreamNil => None
    loop ()

inl item_ i =
    try_item_ i >> optionm.value

let rec try_item__ i list =
    inl i = mut i
    inl list = mut list
    inl result = mut None
    let rec loop () =
        match *list with
        | StreamCons (x, _) when *i = 0 => result <- Some x
        | StreamCons (_, fn) =>
            i <- *i - 1
            list <- fn ()
            loop ()
        | StreamNil => ()
    loop ()
    *result

inl item__ i =
    try_item__ i >> optionm.value

// // ## new_infinite_stream

inl new_infinite_stream fn =
    inl rec loop n =
        StreamCons (fn n, fun () => loop (n + 1))
    loop 0

inl new_infinite_stream_ fn =
    let rec loop n =
        StreamCons (fn n, fun () => loop (n + 1))
    loop 0

// // ## new_finite_stream

inl new_finite_stream fn max =
    inl rec loop n =
        if n >= max
        then StreamNil
        else StreamCons (fn n, fun () => loop (n + 1))
    loop 0

inl new_finite_stream_ fn max =
    let rec loop n =
        if n >= max
        then StreamNil
        else StreamCons (fn n, fun () => loop (n + 1))
    loop 0

// // ## memoize

union memoized_stream t =
    | NotComputed : () -> stream t
    | Computed : stream t

inl memoize s =
    inl rec loop s =
        inl state = mut (NotComputed s)
        fun () =>
            match *state with
            | Computed x => x
            | NotComputed fn =>
                inl new_state =
                    match fn () with
                    | StreamNil => StreamNil
                    | StreamCons (x, fn) => StreamCons (x, loop fn)
                state <- Computed new_state
                new_state
    loop (fun () => s)

inl memoize_ s =
    let rec loop s =
        inl state = mut (NotComputed s)
        fun () =>
            match *state with
            | Computed x => x
            | NotComputed fn =>
                inl new_state =
                    match fn () with
                    | StreamNil => StreamNil
                    | StreamCons (x, fn) => StreamCons (x, loop fn)
                state <- Computed new_state
                new_state
    loop (fun () => s)

// // ## unfold

inl unfold f x0 =
    inl rec loop x =
        match f x with
        | Some (x', y) => StreamCons (x', fun () => loop y)
        | None => StreamNil
    loop x0

// // ## take_while

inl take_while cond s =
    inl rec loop i s =
        match s with
        | StreamCons (st, fn) when cond st i => StreamCons (st, fun () => loop (i + 1) (fn ()))
        | _ => StreamNil
    loop 0 s

inl take_while_ cond s =
    let rec loop i s =
        match s with
        | StreamCons (st, fn) when cond st i => StreamCons (st, fun () => loop (i + 1) (fn ()))
        | _ => StreamNil
    loop 0 s

// // ## to_list

inl to_list s =
    inl rec loop i =
        match s |> try_item i with
        | Some st => st :: loop (i + 1)
        | _ => []
    loop 0i32

// // ## fold

inl fold fn init s =
    inl rec loop acc s =
        match s with
        | StreamCons (st, fn') => loop (fn acc st) (fn' ())
        | StreamNil => acc
    loop init s

inl fold_ fn init s =
    let rec loop acc s =
        match s with
        | StreamCons (st, fn') => loop (fn acc st) (fn' ())
        | StreamNil => acc
    loop init s

// // ## sum

inl sum seq =
    seq |> fold (+) 0

inl sum_ seq =
    seq |> fold_ (+) 0
