#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[]}}

#!markdown

# util

#!spiral

// // test

open testing

#!markdown

## take_while

#!spiral

inl take_while cond sts =
    inl rec loop acc i =
        inl st = sts i
        if cond st i
        then loop (st :: acc) (i + 1)
        else acc |> listm.rev
    loop [] 0i32

#!spiral

// // test

listm.init 10i32 id
|> fun list =>
    fun n =>
        list |> listm'.item n
|> take_while (fun n _ => n < 5)
|> listm'.sum
|> _equal 10

#!spiral

// // test

listm'.new_finite_lazy_list print_and_return 10i32
|> fun list =>
    fun n =>
        list |> listm'.lazy_item n
|> take_while (fun n _ => n < 5)
|> listm'.sum
|> _equal 10

#!markdown

## take_while_

#!spiral

inl take_while_ cond sts =
    let rec loop acc i =
        inl st = sts i
        if cond st i
        then loop (st :: acc) (i + 1)
        else acc |> listm.rev
    loop [] 0i32

#!spiral

// // test

listm'.new_infinite_lazy_list_ print_and_return
|> fun list =>
    fun n =>
        list |> listm'.lazy_item_ n
|> take_while_ (fun n _ => n < 5i32)
|> listm'.sum
|> _equal 10

#!spiral

// // test

listm'.new_infinite_lazy_list_ print_and_return
|> listm'.memoize_lazy_list
|> fun list =>
    inl list = list ()
    fun n =>
        list |> listm'.lazy_item_ n
|> take_while_ (fun n _ => n < 5i32)
|> listm'.sum
|> _equal 10

#!spiral

// // test

listm'.new_finite_lazy_list print_and_return 10i32
|> listm'.memoize_lazy_list
|> fun list =>
    inl list = list ()
    fun n =>
        list |> listm'.lazy_item_ n
|> take_while_ (fun n _ => n < 5)
|> listm'.sum
|> _equal 10

#!markdown

## take_while__

#!spiral

inl take_while__ cond sts =
    inl result = mut []
    inl i = mut 0i32
    let rec loop () =
        inl st = sts *i
        if cond st *i then
            result <- st :: *result
            i <- *i + 1
            loop ()
        else *result |> listm.rev
    loop ()

#!spiral

// // test

listm'.new_infinite_lazy_list_ print_and_return
|> fun list =>
    fun n =>
        list |> listm'.lazy_item_ n
|> take_while__ (fun n _ => n < 5i32)
|> listm'.sum
|> _equal 10

#!markdown

## iterate

#!spiral

inl iterate f x0 num_steps =
    inl rec loop x n =
        if n <= 0
        then x
        else loop (f x) (n - 1)
    loop x0 num_steps

#!spiral

// // test

10i32 |> iterate ((+) 1) 1i32
|> _equal 11

#!spiral

inl iterate_ f x0 num_steps =
    let rec loop x n =
        if n <= 0
        then x
        else loop (f x) (n - 1)
    loop x0 num_steps

#!spiral

// // test

10i32 |> iterate_ ((+) 1) 1i32
|> _equal 11

#!spiral

inl iterate' f x0 num_steps =
    listm.init num_steps id
    |> listm.fold (fun x _ => f x) x0

#!spiral

// // test

10i32 |> iterate' ((+) 1) 1i32
|> _equal 11
