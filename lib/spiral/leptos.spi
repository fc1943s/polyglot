open rust_operators

nominal event = $"leptos_ev_Event"
nominal mouse_event = $"leptos_ev_MouseEvent"
nominal button = $"leptos_html_Button"
nominal details = $"leptos_html_Details"
nominal dd = $"leptos_html_Dd"
nominal div = $"leptos_html_Div"
nominal dl = $"leptos_html_Dl"
nominal dt = $"leptos_html_Dt"
nominal input = $"leptos_html_Input"
nominal label = $"leptos_html_Label"
nominal action t u = $"leptos_Action<`t, `u>"
nominal fragment = $"leptos_Fragment"
nominal text = $"leptos_dom_Text"
nominal html_element t = $"leptos_HtmlElement<`t>"
nominal into_view = $"leptos_IntoView"
nominal memo t = $"leptos_Memo<`t>"
nominal rw_signal t = $"leptos_RwSignal<`t>"
nominal read_signal t = $"leptos_ReadSignal<`t>"
nominal write_signal t = $"leptos_WriteSignal<`t>"
nominal resource t u = $"leptos_Resource<`t, `u>"
nominal view = $"leptos_View"

inl log_string (text : string) =
    !\\((), $'@@"leptos::logging::log\!(""" + !text + @@""")"') : ()

inl log (text : string) =
    !\\(text, $'@@$"leptos::logging::log\!(""{{}}"", $0)"') : ()

inl log_debug (text : string) =
    !\\(text, $'@@$"leptos::logging::log\!(""{{:?}}"", $0)"') : ()

inl log_pretty (text : string) =
    !\\(text, $'@@$"leptos::logging::log\!(""{{:#?}}"", $0)"') : ()

inl mount_to_body (view_fn : () -> rust.impl into_view) =
    !\\(view_fn, $'"leptos::mount_to_body(|| $0())"') : ()

inl to_view_trait_macro (macro : string) : rust.impl into_view =
    !\($'"leptos::view\! { " + !macro + " }"')

inl to_fragment_macro_wrap (macro : string) : fragment =
    !\($'"leptos::view\! { <>" + !macro + "</> }"')

inl to_fragment_macro (macro : string) : fragment =
    !\($'"leptos::view\! { " + !macro + " }"')

inl to_view (view : html_element _) : view =
    inl view = join view
    !\($'"leptos::IntoView::into_view(!view)"')

inl to_element (view : rust.impl into_view) : html_element _ =
    $"!view |> unbox"

inl to_element_view (view : html_element _) : rust.impl into_view =
    $"!view |> unbox"

inl to_view_element (view : string) : html_element _ =
    view |> to_view_trait_macro |> to_element

inl fragment_to_view (fragment : fragment) : view =
    !\($'"leptos::IntoView::into_view(!fragment)"')

inl to_fragment (macro : string) : fragment =
    !\($'"leptos::view\! { " + !macro + " }"')

inl text_to_view (x : text) : view =
    !\($'"leptos::IntoView::into_view(!x)"')

inl text_view (text : string) : view =
    inl text = #text
    inl text : text = !\($'"leptos::html::text(!text)"')
    text |> text_to_view

inl to_fragment_into (macro : string) : fragment =
    !\($'"leptos::view\! { " + !macro + " }.into()"')

inl to_fragment' (x : _) : fragment =
    $"!x |> unbox"

inl to_view' (macro : html_element div) : rust.impl into_view =
    !\($'"leptos::view\! { {!macro} }"')

inl new_fragment (view : view) : fragment =
    !\($'"leptos::Fragment::new(vec\![!view])"')

inl new_fragment_array (view : a _ view) : fragment =
    !\($'"leptos::Fragment::new(!view.to_vec())"')

inl views_fragment (items : array view) : view =
    inl items =
        items
        |> fun x => a x : a u64 _
        |> new_fragment_array
    items
    |> fragment_to_view

inl provide_meta_context () =
    !\($'"leptos_meta::provide_meta_context()"') : ()

inl provide_context_rc forall t. (x : t) =
    !\($'$"leptos::provide_context::<std::rc::Rc<`t>>(!x)"') : ()

inl create_signal forall t. (value : t) : read_signal t * write_signal t =
    !\($'$"leptos::create_signal(!value)"')

inl create_rw_signal forall t. (value : t) : rw_signal t =
    !\($'$"leptos::create_rw_signal(!value)"')

inl create_local_resource forall t u. (source : () -> t) (fetcher : t -> rust.pin (rust.box (rust.dyn' (rust.future u)))) : resource t u =
    inl source = join source
    !\\(fetcher, $'"leptos::create_local_resource(move || !source(), |x| async move { $0(x).await })"')

inl create_action forall t u. (action_fn : t -> rust.pin (rust.box (rust.dyn' (rust.future u)))) : action t u =
    inl action_fn = join action_fn
    !\($'"leptos::create_action(move |value: &`t| !action_fn(*value))"')

inl action_dispatch forall t. (value : t) (action : action t ()) =
    inl value = join value
    !\($'"leptos::Action::dispatch(&!action, !value)"')

inl use_context forall t. () : t =
    !\($'"leptos::use_context::<std::rc::Rc<`t>>().unwrap().into()"')

inl rw_signal_get forall t. (signal : rw_signal t) : t =
    inl signal = join signal
    !\($'$"leptos::SignalGet::get(&!signal)"')

inl signal_get forall t. (signal : read_signal t) : t =
    inl signal = join signal
    !\($'$"leptos::SignalGet::get(&!signal)"')

inl signal_update forall t. (fn : t -> t) (signal : rw_signal t) =
    inl fn = join fn
    inl signal = join signal
    !\($'$"leptos::SignalUpdate::update(&!signal, |x| *x = !fn(*x))"') : ()

inl signal_get_untracked forall t. (signal : rw_signal t) : t =
    inl signal = join signal
    !\($'$"leptos::SignalGetUntracked::get_untracked(&!signal)"')

inl rw_signal_set forall t. (value : t) (signal : rw_signal t) =
    inl value = join value
    inl signal = join signal
    !\($'$"leptos::SignalSet::set(&!signal, !value)"') : ()

inl signal_set forall t. (value : t) (signal : write_signal t) =
    inl value = join value
    inl signal = join signal
    !\($'$"leptos::SignalSet::set(&!signal, !value)"') : ()

inl resource_get forall t u. (resource : resource t u) : optionm'.option' u =
    inl resource = join resource
    !\($'$"leptos::SignalGet::get(&!resource)"')

inl create_effect (fn : () -> ()) : () =
    inl fn = join fn
    !\($'"leptos::create_effect(move |_| { !fn() })"')

inl create_memo forall t. (fn : () -> t) : memo t =
    inl fn = join fn
    !\($'"leptos::create_memo(move |_| { !fn() })"')

let window () : rust.window =
    !\($'"leptos::leptos_dom::window()"')

inl memo_get forall t. (memo : memo t) : t =
    !\($'$"!memo()"')

inl bool_prop (prop : string) (fn : () -> bool) : string =
    inl fn = join fn
    $'"" + !prop + "={move || !fn()}"'

inl concat_props props =
    ("", props)
    ||> listm.fold fun acc (x : string) =>
        $'" " + !x + !acc + ""'

inl tag { tag props children } : html_element _ =
    inl tag : string = tag
    inl props = props |> concat_props
    inl children : () -> view = join children
    $'"<" + !tag + " " + !props + ">{!children()}</" + !tag + ">"'
    |> to_view_element

inl tag_closed { tag props } : html_element _ =
    inl tag : string = tag
    inl props = props |> concat_props
    $'"<" + !tag + " " + !props + " />"'
    |> to_view_element

inl div { props children } : _ div =
    tag { tag = "div"; props children }

inl input { props } : _ input =
    tag_closed { tag = "input"; props }

inl accordion { title children } : _ details =
    inl title = join title
    inl title = title |> sm'.to_std_string
    inl children : () -> html_element _ = join children
    $'"<details class=\\\"flex group [&_summary::-webkit-details-marker]:hidden\\\" open><summary class=\\\"group flex items-center justify-between px-4 py-2 cursor-pointer text-gray-500 bg-gray-100 hover:bg-gray-200 hover:text-gray-700\\\"><div class=\\\"flex items-center gap-2\\\"><span class=\\\"text-sm font-medium\\\">{!title}</span></div><span class=\\\"shrink-0 transition duration-300 group-open:-rotate-180\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-5 w-5\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" /></svg></span></summary>{!children()}</details>"'
    |> to_view_element

inl input forall t. { getter setter } : _ input =
    inl getter : read_signal t = join getter
    inl setter : write_signal t = join setter
    input {
        props = [
            $'"class=\\\"bg-gray-50 flex-1 h-[27px]\\\""'
            $'"prop:value=!getter"'
            $'"on:keyup=move |event: web_sys::KeyboardEvent| !setter(leptos::event_target_value(&event))"'
        ]
    }

inl toggle { id on_change get_value } : _ label =
    inl id = #id
    inl on_change : event -> () = join on_change
    inl get_value : () -> bool = join get_value

    $'"<label for={!id} class=\\\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\\\"><input type=\\\"checkbox\\\" id={!id} class=\\\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\\\" on:change=move |event| !on_change(event) prop:checked={move || !get_value()} /><span class=\\\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white text-gray-400 transition-all peer-checked:start-6 peer-checked:text-green-600\\\"><svg data-unchecked-icon xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-4 w-4\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" /></svg><svg data-checked-icon xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"hidden h-4 w-4\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"> <path fill-rule=\\\"evenodd\\\" d=\\\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\\\" clip-rule=\\\"evenodd\\\" /></svg></span><span class=\\\"absolute inset-0 rounded-full bg-gray-300 transition peer-checked:bg-green-500\\\"></span></label>"'
    |> to_view_element

inl dd { children } : _ dd =
    tag {
        tag = "dd"
        props = [
            $'"class=\\\"text-gray-700 md:col-span-2 flex flex-1 [overflow:auto]\\\""'
        ]
        children
    }

inl dl { children } : _ dl =
    tag {
        tag = "dl"
        props = [
            $'"class=\\\"flex flex-1 divide-y divide-gray-100 text-sm\\\""'
        ]
        children
    }

inl dt { children } : _ dt =
    tag {
        tag = "dt"
        props = [
            $'"class=\\\"whitespace-nowrap font-medium text-gray-700\\\""'
        ]
        children
    }

inl grid_pair { class left right props } : _ div =
    inl class : string = class
    inl left = join left
    inl right = join right
    inl props = props |> concat_props
    div {
        props = [
            $'"class=\\\"grid grid-cols-1 [grid-template:none] gap-1 even:bg-gray-50 md:grid-cols-3 md:gap-4 flex-1 [inline-size:max-content] mt-[10px] mr-[14px] md:mr-[14px] mb-[11px] ml-[12px] " + !class + "\\\""'
            $'"" + !props + ""'
        ]
        children = fun () =>
            ;[
                dt {
                    children = fun () =>
                        left
                }
                |> to_view

                dd {
                    children = fun () =>
                        right
                }
                |> to_view
            ]
            |> views_fragment
    }

inl view_map_grid { children } : _ div =
    div {
        props = [
            $'"class=\\\"flow-root\\\""'
        ]
        children = fun () =>
            dl {
                children
            }
            |> to_view
    }
