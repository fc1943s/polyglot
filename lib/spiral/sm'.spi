open rust_operators

inl include_str (path : string) : rust.ref' rust.str =
    !\($'"include_str\!(\\\"" + !path + "\\\")"')

inl contains (value : string) (input : string) : bool =
    $"!input.Contains !value"

inl as_str (s : string) : rust.ref' rust.str =
    inl s = join s
    !\($'$"fable_library_rust::String_::LrcStr::as_str(&!s)"')

inl from_std_string (str : rust.std_string) : string =
    inl str = join str
    !\($'"fable_library_rust::String_::fromString(!str)"')

inl ref_to_std_string (str : rust.ref' rust.str) : rust.std_string =
    !\($'"String::from(!str)"')

inl to_std_string (s : string) : rust.std_string =
    inl s = join s
    s |> as_str |> ref_to_std_string

inl as_str_std (s : rust.std_string) : rust.ref' rust.str =
    inl s = join s
    !\($'"!s.as_str()"')

inl into_boxed_str (s : rust.std_string) : rust.box rust.str =
    !\($'"!s.into_boxed_str()"')

inl format' x : rust.std_string =
    !\\(x, $'@@$"format\!(""{{}}"", $0)"')

inl format_debug x : string =
    $"$\"%A{!x}\""

inl format_debug' x : rust.std_string =
    !\\(x, $'@@$"format\!(""{{:?}}"", $0)"')

inl format_pretty' x : rust.std_string =
    !\\(x, $'@@$"format\!(""{{:#?}}"", $0)"')

inl obj_to_string x : string =
    $"!x.ToString ()"

instance to_string any =
    obj_to_string

instance to_string result t u = fun x => real
    typecase (t * u) with
    | string * string =>
        match x with
        | Ok x => x
        | Error x => x
    | _ => x |> obj_to_string

inl deserialize forall t. (json : string) : resultm.result' t rust.json_error =
    inl json : rust.std_string = json |> to_std_string
    !\($'"serde_json::from_str(&!json)"')

inl strip_prefix (prefix : char) (s : rust.std_string) : optionm'.option' (rust.ref' rust.str) =
    inl s = join s
    !\($'"!s.strip_prefix(!prefix)"')

inl starts_with (value : rust.std_string) (s : rust.std_string) : bool =
    inl s = join s
    !\($'"!s.starts_with(&!value)"')
