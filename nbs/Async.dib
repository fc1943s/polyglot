#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!fsharp

#!import ../nbs/Core.dib

#!fsharp

#r "nuget:FSharp.Control.AsyncSeq"
#r "nuget:System.Reactive.Linq"

#!fsharp

module Async =
    let runWithTimeout timeout fn =
        try
            Async.RunSynchronously (fn, timeout) |> Some
        with
        | :? System.TimeoutException as ex ->
            let info = ex

            let getLocals () = $"timeout: {timeout} / exception: {ex.Message} / {getLocals ()}"
            log Debug (fun () -> "runWithTimeout") getLocals
            None
        | e -> raise e

#!fsharp

//// test

Async.Sleep 50
|> Async.runWithTimeout 10
|> _equal None

#!fsharp

//// test

Async.Sleep 10
|> Async.runWithTimeout 50
|> _equal (Some ())

#!fsharp

module AsyncSeq =
    let subscribeEvent (event: IEvent<'H, 'A>) map =
        let x = System.Reactive.Linq.Observable.FromEventPattern<'H, 'A>(event.AddHandler, event.RemoveHandler)
        System.Reactive.Linq.Observable.Select (x, fun event -> map event.EventArgs)
        |> FSharp.Control.AsyncSeq.ofObservableBuffered

#!fsharp

//// test

type TestEvent () as self =
    member val Calls = [] with get, set
    member val Event = Event<ErrorEventHandler, ErrorEventArgs> () with get

    member _.AddCall text =
        self.Calls <- self.Calls @ [ text ]

    member _.EventInterface =
        { new IEvent<ErrorEventHandler, ErrorEventArgs> with
            member _.AddHandler handler =
                self.AddCall "AddHandler"
                self.Event.Publish.AddHandler handler
            
            member _.RemoveHandler handler =
                self.AddCall "RemoveHandler"
                self.Event.Publish.RemoveHandler handler
            
            member _.Subscribe observer =
                self.AddCall "IObservable.Subscribe"
                let disposable = self.Event.Publish.Subscribe observer
                Object.newDisposable (fun () ->
                    self.AddCall "IObservable.Dispose"
                    disposable.Dispose ()
                )
        }

    member _.Subscribe () =
        AsyncSeq.subscribeEvent
            self.EventInterface
            (fun args ->
                let result = args.GetException().Message
                self.AddCall $"TestEvent.Subscribe({result})"
                result
            )

    member _.Iter subscription =
        subscription
        |> FSharp.Control.AsyncSeq.iteriAsync (fun i message -> async {
            self.AddCall $"TestEvent.Iter({i}:{message})"
        })

    member _.WaitCall text = async {
        while self.Calls |> List.last <> text do
            do! Async.SwitchToThreadPool ()
    }

#!fsharp

//// test

let testEvent = TestEvent ()

async {
    testEvent.AddCall "1"
    let! child = testEvent.Subscribe () |> testEvent.Iter |> Async.StartChild
    do! testEvent.WaitCall "AddHandler"
    testEvent.AddCall "2"
    do! child
    testEvent.AddCall "3"
}
|> Async.runWithTimeout 100
|> _equal None

testEvent.Calls
|> Seq.toList
|> _equal [ "1"; "AddHandler"; "2"; "RemoveHandler" ]

#!fsharp

//// test

let testEvent = TestEvent ()

async {
    testEvent.AddCall "1"
    let! child = testEvent.Subscribe () |> testEvent.Iter |> Async.StartChild
    do! testEvent.WaitCall "AddHandler"
    testEvent.AddCall "2"
    use _ = testEvent.EventInterface.Subscribe (fun args ->
        testEvent.AddCall $"testEvent.EventInterface.Subscribe({args})"
    )
    testEvent.AddCall "3"
    do! child
    testEvent.AddCall "4"
}
|> Async.runWithTimeout 100
|> _equal None

testEvent.Calls
|> _equal [ "1"; "AddHandler"; "2"; "IObservable.Subscribe"; "3"; "RemoveHandler"; "IObservable.Dispose" ]

#!fsharp

//// test

let testEvent = TestEvent ()

async {
    testEvent.AddCall "1"
    let! child = testEvent.Subscribe () |> testEvent.Iter |> Async.StartChild
    do! testEvent.WaitCall "AddHandler"
    testEvent.AddCall "2"
    use _ = testEvent.EventInterface.Subscribe (fun args ->
        async {
            do! testEvent.WaitCall "TestEvent.Iter(0:error)"
            testEvent.AddCall $"testEvent.EventInterface.Subscribe({args.GetException().Message})"
        }
        |> Async.RunSynchronously
    )
    testEvent.AddCall "3"
    testEvent.Event.Trigger (null, ErrorEventArgs (Exception "error"))
    testEvent.AddCall "4"
    do! child
    testEvent.AddCall "5"
}
|> Async.runWithTimeout 100
|> _equal None

testEvent.Calls
|> _equal [
    "1"
    "AddHandler"
    "2"
    "IObservable.Subscribe"
    "3"
    "TestEvent.Subscribe(error)"
    "TestEvent.Iter(0:error)"
    "testEvent.EventInterface.Subscribe(error)"
    "4"
    "RemoveHandler"
    "IObservable.Dispose"
]
