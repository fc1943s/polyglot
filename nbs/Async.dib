#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

# Async (Polyglot)

#!fsharp

#!import ../nbs/Testing.dib

#!fsharp

#!import ../nbs/Common.fs

#!fsharp

open Common

#!markdown

## runWithTimeout

#!fsharp

let runWithTimeout (timeout : int) fn =
    let getLocals () = $"timeout: {timeout} / {getLocals ()}"

    let timeoutTask = async {
        do! Async.Sleep timeout
        return None, getLocals
    }
    
    let task = async {
        try
            return Async.RunSynchronously (fn, timeout) |> Some, getLocals
        with
        | :? System.TimeoutException as ex ->
            let getLocals () = $"exception: {ex.Message} / {getLocals ()}"
            return None, getLocals
        | e -> return raise e
    }

    [| timeoutTask; task |]
    |> Array.map Async.StartAsTask
    |> System.Threading.Tasks.Task.WhenAny
    |> fun task ->
        match task.Result.Result with
        | None, getLocals ->
            trace Debug (fun () -> "runWithTimeout") getLocals
            None
        | result, _ -> result

#!fsharp

//// test

Async.Sleep 50
|> runWithTimeout 10
|> _equal None

#!fsharp

//// test

Async.Sleep 10
|> runWithTimeout 50
|> _equal (Some ())
