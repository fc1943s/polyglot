type UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
and [<Struct>] US0 =
    | US0_0
    | US0_1 of f1_0 : string
and Mut1 = {mutable l0 : int32; mutable l1 : US0}
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : Types.clap.parser.ArgMatches) : Types.clap.parser.ArgMatches =
    v0
and method2 () : string =
    let v0 : string = "rs-path"
    v0
and method3 (v0 : Types.Ref<Types.std.string.String>) : Types.Ref<Types.std.string.String> =
    v0
and method4 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and closure1 () (v0 : Types.Ref<Types.std.string.String>) : Types.std.string.String =
    let v1 : Types.Ref<Types.std.string.String> = method3(v0)
    let v2 : string = "v1.to_string()"
    let v3 : Types.std.string.String = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "rs-path"
    let v5 : string = "--" + v4 + "="
    let v6 : string = "($0).to_string()"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = ""
    let v9 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v6
    let v10 : Types.std.string.String = method4(v3)
    let v11 : string = "v10.replace(&v7, &v9)"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr () v11
    v12
and method5 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method6 (v0 : Types.std.path.PathBuf) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method8 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method8(v0, v4)
    else
        v1
and method9 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method10 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "core::ops::Deref::deref($0)"
    let v2 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v0 v1
    let v3 : string = "&***$0"
    let v4 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2 v3
    let v5 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4 v3
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method11 (v0 : string) : string =
    v0
and method12 () : string =
    let v0 : string = "$1=$2"
    v0
and method13 () : string =
    let v0 : string = "[$1]"
    v0
and method14 () : string =
    let v0 : string = "\""
    v0
and method15 () : string =
    let v0 : string = " "
    v0
and method16 () : string =
    let v0 : string = "666666"
    v0
and method17 () : string =
    let v0 : string = "385779"
    v0
and method7 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> post_fsx_rs_build ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method16()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method16()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method16()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method19 () : string =
    let v0 : string = "881749"
    v0
and method18 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> read_lines ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method19()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method19()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method19()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method20 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method22 (v0 : int32) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method23 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    ()
and closure2 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : Types.EmitType<Types.std.string.String> = method5(v3)
    let v5 : string = "v2.len()"
    let v6 : obj = Fable.Core.Rust.emitExpr () v5
    let v7 : string = "v6.try_into().unwrap()"
    let v8 : int32 = Fable.Core.Rust.emitExpr () v7
    let v9 : Types.EmitType<Types.std.string.String> = method22(v8)
    let v10 : (Types.EmitType<Types.std.string.String> []) = [|v4; v9|]
    method23(v0, v10)
    let v11 : string = "v2.to_owned()"
    let v12 : Types.Vec<uint8> = Fable.Core.Rust.emitExpr () v11
    let v13 : string = "std::string::String::from_utf8(v12).unwrap()"
    let v14 : Types.std.string.String = Fable.Core.Rust.emitExpr () v13
    let v15 : UH0 = v1.l0
    let v16 : UH0 = UH0_0(v14, v15)
    v1.l0 <- v16
    let v17 : Result<bool, Types.std.io.Error> = Ok true
    v17
and method21 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure2(v0, v1)
and method24 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method24(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method25 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method25(v3, v1)
        let v5 : obj = v2
        let v6 : string = "fable_library_rust::String_::fromStr($0)"
        let v7 : string = Fable.Core.Rust.emitExpr v5 v6
        UH1_0(v7, v4)
    | UH0_1 -> (* Nil *)
        v1
and method26 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method26(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method27 (v0 : int64, v1 : UH1, v2 : int32, v3 : UH1) : struct (int32 * UH1) =
    match v1 with
    | UH1_0(v4, v5) -> (* Cons *)
        let v6 : string = "/node_modules/"
        let v7 : Types.Ref<string> = v6 |> unbox
        let v8 : Types.Ref<string> = v4 |> unbox
        let v9 : string = "($1).contains(&*$0)"
        let v10 : bool = Fable.Core.Rust.emitExpr struct (v7, v8) v9
        let v15 : bool =
            if v10 then
                let v11 : string = ".cs"
                let v12 : Types.Ref<string> = v11 |> unbox
                let v13 : Types.Ref<string> = v4 |> unbox
                let v14 : bool = Fable.Core.Rust.emitExpr struct (v12, v13) v9
                v14
            else
                false
        let struct (v30 : int32, v31 : UH1) =
            if v15 then
                let v16 : string = "found line. removing."
                let v17 : Types.EmitType<Types.std.string.String> = method5(v16)
                let v18 : string = " line"
                let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
                let v20 : Types.EmitType<Types.std.string.String> = method5(v4)
                let v21 : (Types.EmitType<Types.std.string.String> []) = [|v17; v19; v20|]
                method7(v0, v21)
                struct (1, v3)
            else
                let v22 : bool = 0 = v2
                if v22 then
                    let v23 : UH1 = UH1_0(v4, v3)
                    struct (0, v23)
                else
                    let v24 : bool = 2 = v2
                    if v24 then
                        struct (0, v3)
                    else
                        let v25 : int32 = v2 + 1
                        struct (v25, v3)
        method27(v0, v5, v30, v31)
    | UH1_1 -> (* Nil *)
        struct (v2, v3)
and method28 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method28(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method29 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method29(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method30 () : string =
    let v0 : string = "spi-path"
    v0
and closure3 () (v0 : Types.Ref<Types.std.string.String>) : Types.std.string.String =
    let v1 : Types.Ref<Types.std.string.String> = method3(v0)
    let v2 : string = "v1.to_string()"
    let v3 : Types.std.string.String = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "spi-path"
    let v5 : string = "--" + v4 + "="
    let v6 : string = "($0).to_string()"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = ""
    let v9 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v6
    let v10 : Types.std.string.String = method4(v3)
    let v11 : string = "v10.replace(&v7, &v9)"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr () v11
    v12
and method31 () : string =
    let v0 : string = "fsx-path"
    v0
and closure4 () (v0 : Types.Ref<Types.std.string.String>) : Types.std.path.PathBuf =
    let v1 : string = "std::path::PathBuf::from($0)"
    let v2 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v0 v1
    v2
and method33 () : string =
    let v0 : string = "de884c"
    v0
and method32 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> spi_to_fsx ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method33()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method33()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method33()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and closure5 () (v0 : Types.Ref<Types.std.path.Path>) : Types.std.path.PathBuf =
    let v1 : string = "package.spiproj"
    let v2 : string = "$1.join($0.as_str())"
    let v3 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr struct (v1, v0) v2
    v3
and closure6 () (v0 : Types.Ref<Types.std.path.PathBuf>) : bool =
    let v1 : string = "std::path::Path::exists($0)"
    let v2 : bool = Fable.Core.Rust.emitExpr v0 v1
    v2
and method34 (v0 : Types.U16) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method35 (v0 : Types.U16) : Types.U16 =
    v0
and method37 () : string =
    let v0 : string = "e36a62"
    v0
and method36 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> ping ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method37()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method37()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method37()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method39 () : string =
    let v0 : string = "fcfb1b"
    v0
and method38 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> zmq_request ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method39()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method39()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method39()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method40 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> spi_open ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method37()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method37()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method37()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method41 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> spiproj_open ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method37()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method37()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method37()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method43 () : string =
    let v0 : string = "98d5ef"
    v0
and method42 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> spi_build_file ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method43()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method43()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method43()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method44 (v0 : Types.std.time.SystemTime) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method46 () : string =
    let v0 : string = "387957"
    v0
and method45 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> wait_file_change ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method46()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method46()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method46()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method47 (v0 : int32, v1 : Mut1) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method49 () : string =
    let v0 : string = "387958"
    v0
and method48 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> app ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method49()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method49()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method49()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "app1"
    let v9 : string = $"r#\"{v8}\"#"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "clap::Command::new(v10)"
    let v12 : string = ".version(env!(\"CARGO_PKG_VERSION\"))"
    let v13 : string = v11 + v12
    let v14 : string = ".propagate_version(true)"
    let v15 : string = v13 + v14
    let v16 : string = ".subcommand_required(false)"
    let v17 : string = v15 + v16
    let v18 : string = ".about(\"command about\")"
    let v19 : string = v17 + v18
    let v20 : string = ".arg_required_else_help(true)"
    let v21 : string = v19 + v20
    let v22 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v21
    let v23 : string = "PostFsxRsBuild"
    let v24 : string = $"r#\"{v23}\"#"
    let v25 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v24
    let v26 : string = "clap::Command::new(v25)"
    let v27 : string = v26 + v12
    let v28 : string = v27 + v14
    let v29 : string = v28 + v16
    let v30 : string = v29 + v18
    let v31 : string = v30 + v20
    let v32 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v31
    let v33 : string = "rs-path"
    let v34 : string = $"r#\"{v33}\"#"
    let v35 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v34
    let v36 : string = "clap::Arg::new(v35)"
    let v37 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v36
    let v38 : string = "v32.arg(v37)"
    let v39 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v38
    let v40 : string = "v22.subcommand(v39)"
    let v41 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v40
    let v42 : string = "SpiFsxBuild"
    let v43 : string = $"r#\"{v42}\"#"
    let v44 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v43
    let v45 : string = "clap::Command::new(v44)"
    let v46 : string = v45 + v12
    let v47 : string = v46 + v14
    let v48 : string = v47 + v16
    let v49 : string = v48 + v18
    let v50 : string = v49 + v20
    let v51 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v50
    let v52 : string = "spi-path"
    let v53 : string = $"r#\"{v52}\"#"
    let v54 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v53
    let v55 : string = "clap::Arg::new(v54)"
    let v56 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v55
    let v57 : string = "v51.arg(v56)"
    let v58 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v57
    let v59 : string = "fsx-path"
    let v60 : string = $"r#\"{v59}\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v60
    let v62 : string = "clap::Arg::new(v61)"
    let v63 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v62
    let v64 : string = "v58.arg(v63)"
    let v65 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v64
    let v66 : string = "v41.subcommand(v65)"
    let v67 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v66
    let v68 : string = "v67.get_matches()"
    let v69 : Types.clap.parser.ArgMatches = Fable.Core.Rust.emitExpr () v68
    let v70 : Types.clap.parser.ArgMatches = method1(v69)
    let v71 : string = "std::sync::Arc::new(v70)"
    let v72 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr () v71
    let v73 : string = "v72.subcommand().map(|(name, matches)| (name, std::sync::Arc::new(matches.clone())))"
    let v74 : Option<struct (Types.Ref<Types.Str> * Types.std.sync.Arc<Types.clap.parser.ArgMatches>)> = Fable.Core.Rust.emitExpr () v73
    let v75 : string = "v74.as_ref().unwrap()"
    let v76 : Types.Ref<struct (Types.Ref<Types.Str> * Types.std.sync.Arc<Types.clap.parser.ArgMatches>)> = Fable.Core.Rust.emitExpr () v75
    let v77 : string = "v76.0"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : string = "std::sync::Arc::clone(&v76.1)"
    let v80 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr () v79
    let v81 : string = "fable_library_rust::String_::fromStr($0)"
    let v82 : string = Fable.Core.Rust.emitExpr v78 v81
    let v83 : bool = "PostFsxRsBuild" = v82
    if v83 then
        let v84 : string = method2()
        let v85 : string = "v84.as_str()"
        let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
        let v87 : string = "v80.get_one::<String>(v86)"
        let v88 : Option<Types.Ref<Types.std.string.String>> = Fable.Core.Rust.emitExpr () v87
        let v89 : (Types.Ref<Types.std.string.String> -> Types.std.string.String) = closure1()
        let v90 : string = "v88.map(v89)"
        let v91 : Option<Types.std.string.String> = Fable.Core.Rust.emitExpr () v90
        let v92 : string = "get_clap_one: "
        let v93 : string = v92 + v33
        let v94 : string = "($0).to_string()"
        let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr v93 v94
        let v96 : string = "v91.unwrap_or(v95)"
        let v97 : Types.std.string.String = Fable.Core.Rust.emitExpr () v96
        let v98 : string = "std::path::PathBuf::from($0)"
        let v99 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v97 v98
        let v100 : string = "($0).canonicalize()"
        let v101 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v99 v100
        let v102 : string = "($0).as_ref().unwrap().to_path_buf()"
        let v103 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v101 v102
        let struct (v104 : string, v105 : string, v106 : string, v107 : bool) = method0()
        let v108 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
        let v109 : int64 = Fable.Core.Rust.emitExpr v108 v6
        let v110 : string = "rs_path"
        let v111 : Types.EmitType<Types.std.string.String> = method5(v110)
        let v112 : Types.EmitType<Types.std.string.String> = method6(v103)
        let v113 : (Types.EmitType<Types.std.string.String> []) = [|v111; v112|]
        method7(v109, v113)
        let struct (v114 : string, v115 : string, v116 : string, v117 : bool) = method0()
        let v118 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
        let v119 : int64 = Fable.Core.Rust.emitExpr v118 v6
        let v120 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v103 v100
        let v121 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v120 v102
        let v122 : string = "path_clean"
        let v123 : Types.EmitType<Types.std.string.String> = method5(v122)
        let v124 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
        let v125 : string = Fable.Core.Rust.emitExpr v121 v124
        let v126 : Types.EmitType<Types.std.string.String> = method5(v125)
        let v127 : (Types.EmitType<Types.std.string.String> []) = [|v123; v126|]
        method18(v119, v127)
        let v128 : string = "std::fs::File::open($0)"
        let v129 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v121 v128
        let v130 : string = "$0.unwrap()"
        let v131 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v129 v130
        let v132 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
        let v133 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v131 v132
        let v134 : string = "reader"
        let v135 : Types.EmitType<Types.std.string.String> = method5(v134)
        let v136 : string = "format!(\"{:?}\", $0)"
        let v137 : Types.std.string.String = Fable.Core.Rust.emitExpr v133 v136
        let v138 : Types.EmitType<Types.std.string.String> = method20(v137)
        let v139 : (Types.EmitType<Types.std.string.String> []) = [|v135; v138|]
        method18(v119, v139)
        let v140 : UH0 = UH0_1
        let v141 : Mut0 = {l0 = v140} : Mut0
        let v142 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method21(v119, v141)
        let v143 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
        let v144 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v133, v142) v143
        let v145 : string = "*(($0).as_ref()).unwrap()"
        Fable.Core.Rust.emitExpr v144 v145
        let v146 : UH0 = v141.l0
        let v147 : UH0 = UH0_1
        let v148 : UH0 = method24(v146, v147)
        let v149 : UH1 = UH1_1
        let v150 : UH1 = method25(v148, v149)
        let v151 : string = "lines len"
        let v152 : Types.EmitType<Types.std.string.String> = method5(v151)
        let v153 : int32 = 0
        let v154 : int32 = method26(v150, v153)
        let v155 : Types.EmitType<Types.std.string.String> = method22(v154)
        let v156 : (Types.EmitType<Types.std.string.String> []) = [|v152; v155|]
        method18(v119, v156)
        let v157 : int32 = 0
        let v158 : UH1 = UH1_1
        let struct (v159 : int32, v160 : UH1) = method27(v109, v150, v157, v158)
        let v161 : UH1 = UH1_1
        let v162 : UH1 = method28(v160, v161)
        let v163 : string = ""
        let v164 : string = method29(v162, v163)
        let v165 : string = "text_len"
        let v166 : Types.EmitType<Types.std.string.String> = method5(v165)
        let v167 : string = "v164.len()"
        let v168 : obj = Fable.Core.Rust.emitExpr () v167
        let v169 : string = "v168.try_into().unwrap()"
        let v170 : int32 = Fable.Core.Rust.emitExpr () v169
        let v171 : Types.EmitType<Types.std.string.String> = method22(v170)
        let v172 : (Types.EmitType<Types.std.string.String> []) = [|v166; v171|]
        method7(v109, v172)
        let v173 : string = "std::fs::write($0, $1.as_str())"
        let v174 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v103, v164) v173
        Fable.Core.Rust.emitExpr v174 v145
        let v175 : string = "> fs_write rs_path_clean text; ok"
        let v176 : Types.EmitType<Types.std.string.String> = method5(v175)
        let v177 : (Types.EmitType<Types.std.string.String> []) = [|v176|]
        method7(v109, v177)
    else
        let v178 : bool = "SpiFsxBuild" = v82
        if v178 then
            let v179 : string = method30()
            let v180 : string = "v179.as_str()"
            let v181 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v180
            let v182 : string = "v80.get_one::<String>(v181)"
            let v183 : Option<Types.Ref<Types.std.string.String>> = Fable.Core.Rust.emitExpr () v182
            let v184 : (Types.Ref<Types.std.string.String> -> Types.std.string.String) = closure3()
            let v185 : string = "v183.map(v184)"
            let v186 : Option<Types.std.string.String> = Fable.Core.Rust.emitExpr () v185
            let v187 : string = "get_clap_one: "
            let v188 : string = v187 + v52
            let v189 : string = "($0).to_string()"
            let v190 : Types.std.string.String = Fable.Core.Rust.emitExpr v188 v189
            let v191 : string = "v186.unwrap_or(v190)"
            let v192 : Types.std.string.String = Fable.Core.Rust.emitExpr () v191
            let v193 : string = "std::path::PathBuf::from($0)"
            let v194 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v192 v193
            let v195 : string = "($0).canonicalize()"
            let v196 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v194 v195
            let v197 : string = "($0).as_ref().unwrap().to_path_buf()"
            let v198 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v196 v197
            let v199 : string = method31()
            let v200 : string = "v199.as_str()"
            let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
            let v202 : string = "v80.get_one::<String>(v201)"
            let v203 : Option<Types.Ref<Types.std.string.String>> = Fable.Core.Rust.emitExpr () v202
            let v204 : (Types.Ref<Types.std.string.String> -> Types.std.path.PathBuf) = closure4()
            let v205 : string = "v203.map(v204)"
            let v206 : Option<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr () v205
            let struct (v207 : string, v208 : string, v209 : string, v210 : bool) = method0()
            let v211 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v212 : int64 = Fable.Core.Rust.emitExpr v211 v6
            let v213 : string = "pwd"
            let v214 : Types.EmitType<Types.std.string.String> = method5(v213)
            let v215 : string = "std::env::current_dir()"
            let v216 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr () v215
            let v217 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v216 v197
            let v218 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v217 v195
            let v219 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v218 v197
            let v220 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
            let v221 : string = Fable.Core.Rust.emitExpr v219 v220
            let v222 : Types.EmitType<Types.std.string.String> = method5(v221)
            let v223 : string = "spi_path"
            let v224 : Types.EmitType<Types.std.string.String> = method5(v223)
            let v225 : string = Fable.Core.Rust.emitExpr v198 v220
            let v226 : Types.EmitType<Types.std.string.String> = method5(v225)
            let v227 : string = "new_fsx_path"
            let v228 : Types.EmitType<Types.std.string.String> = method5(v227)
            let v229 : string = "format!(\"{:?}\", $0)"
            let v230 : Types.std.string.String = Fable.Core.Rust.emitExpr v206 v229
            let v231 : Types.EmitType<Types.std.string.String> = method20(v230)
            let v232 : (Types.EmitType<Types.std.string.String> []) = [|v214; v222; v224; v226; v228; v231|]
            method32(v212, v232)
            let v233 : string = "($0).parent()"
            let v234 : Option<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr v198 v233
            let v235 : string = "$0.unwrap()"
            let v236 : Types.Ref<Types.std.path.Path> = Fable.Core.Rust.emitExpr v234 v235
            let v237 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v236 v193
            let v238 : string = "src_path"
            let v239 : Types.EmitType<Types.std.string.String> = method5(v238)
            let v240 : string = Fable.Core.Rust.emitExpr v237 v220
            let v241 : Types.EmitType<Types.std.string.String> = method5(v240)
            let v242 : (Types.EmitType<Types.std.string.String> []) = [|v239; v241|]
            method32(v212, v242)
            let v243 : string = "$0.ancestors()"
            let v244 : Types.Ref<Types.std.path.Ancestors> = Fable.Core.Rust.emitExpr v237 v243
            let v245 : unativeint = unativeint 10
            let v246 : string = "$1.take($0)"
            let v247 : Types.std.iter.Iterator<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr struct (v245, v244) v246
            let v248 : (Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf) = closure5()
            let v249 : Types.Ref<(Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf)> = v248 |> unbox
            let v250 : string = "$1.into_iter().map($0)"
            let v251 : Types.std.iter.Iterator<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v249, v247) v250
            let v252 : (Types.Ref<Types.std.path.PathBuf> -> bool) = closure6()
            let v253 : Types.Ref<(Types.Ref<Types.std.path.PathBuf> -> bool)> = v252 |> unbox
            let v254 : string = "$1.into_iter().find($0)"
            let v255 : Option<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v253, v251) v254
            let v256 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v255 v197
            let v257 : string = "spiproj_path"
            let v258 : Types.EmitType<Types.std.string.String> = method5(v257)
            let v259 : string = Fable.Core.Rust.emitExpr v256 v220
            let v260 : Types.EmitType<Types.std.string.String> = method5(v259)
            let v261 : (Types.EmitType<Types.std.string.String> []) = [|v258; v260|]
            method32(v212, v261)
            let v262 : string = "($0).to_str()"
            let v263 : Option<Types.Ref<Types.Str>> = Fable.Core.Rust.emitExpr v198 v262
            let v264 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v263 v235
            let v265 : string = ".spir"
            let v266 : Types.Ref<string> = v265 |> unbox
            let v267 : string = ".spi"
            let v268 : Types.Ref<string> = v267 |> unbox
            let v269 : string = "&$2.replace(&*$0, &$1)"
            let v270 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v268, v264) v269
            let v271 : Types.Ref<string> = v267 |> unbox
            let v272 : string = ".fsx"
            let v273 : Types.Ref<string> = v272 |> unbox
            let v274 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v271, v273, v270) v269
            let v275 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v274 v193
            let v276 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v275 v195
            let v277 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v276 v197
            let v278 : string = "fsx_path"
            let v279 : Types.EmitType<Types.std.string.String> = method5(v278)
            let v280 : string = Fable.Core.Rust.emitExpr v277 v220
            let v281 : Types.EmitType<Types.std.string.String> = method5(v280)
            let v282 : (Types.EmitType<Types.std.string.String> []) = [|v279; v281|]
            method32(v212, v282)
            let v283 : string = ""
            let v284 : string = "std::fs::write($0, $1.as_str())"
            let v285 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v277, v283) v284
            let v286 : string = "*(($0).as_ref()).unwrap()"
            Fable.Core.Rust.emitExpr v285 v286
            let v287 : string = "> fs_write fsx_path \"\"; ok"
            let v288 : Types.EmitType<Types.std.string.String> = method5(v287)
            let v289 : (Types.EmitType<Types.std.string.String> []) = [|v288|]
            method32(v212, v289)
            let v290 : string = "13805.try_into().unwrap()"
            let v291 : Types.U16 = Fable.Core.Rust.emitExpr () v290
            let v292 : string = "port"
            let v293 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v294 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v295 : (Types.EmitType<Types.std.string.String> []) = [|v293; v294|]
            method32(v212, v295)
            let v296 : string = "../The-Spiral-Language/The Spiral Language 2/bin/Release/net7.0/Spiral.dll"
            let v297 : string = $"r#\"{v296}\"#"
            let v298 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v297
            let v299 : string = "dotnet"
            let v300 : string = $"r#\"{v299}\"#"
            let v301 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v300
            let v302 : string = "std::process::Command::new(v301)"
            let v303 : obj = Fable.Core.Rust.emitExpr () v302
            let v304 : string = "let mut v303 = v303"
            Fable.Core.Rust.emitExpr () v304
            let v305 : string = "v303.arg(v298)"
            let v306 : obj = Fable.Core.Rust.emitExpr () v305
            let v307 : string = (v291).ToString ()
            let v308 : string = "port="
            let v309 : string = v308 + v307
            let v310 : Types.std.string.String = Fable.Core.Rust.emitExpr v309 v189
            let v311 : string = "v306.arg(v310)"
            let v312 : obj = Fable.Core.Rust.emitExpr () v311
            let v313 : string = "v312.stdout(std::process::Stdio::inherit())"
            let v314 : obj = Fable.Core.Rust.emitExpr () v313
            let v315 : string = "v314.stderr(std::process::Stdio::inherit())"
            let v316 : obj = Fable.Core.Rust.emitExpr () v315
            let v317 : string = "v316.spawn()"
            let v318 : Result<Types.std.process.Child, Types.std.io.Error> = Fable.Core.Rust.emitExpr () v317
            let v319 : string = "v318.unwrap()"
            let v320 : Types.std.process.Child = Fable.Core.Rust.emitExpr () v319
            let v321 : string = "process"
            let v322 : Types.EmitType<Types.std.string.String> = method5(v321)
            let v323 : Types.std.string.String = Fable.Core.Rust.emitExpr v320 v229
            let v324 : Types.EmitType<Types.std.string.String> = method20(v323)
            let v325 : (Types.EmitType<Types.std.string.String> []) = [|v322; v324|]
            method32(v212, v325)
            let v326 : Types.U16 = method35(v291)
            let v327 : string = "std::net::SocketAddr::from(([0, 0, 0, 0], v326))"
            let v328 : Types.std.net.SocketAddr = Fable.Core.Rust.emitExpr () v327
            let v329 : string = "async move {"
            let v330 : string = "     loop {"
            let v331 : string = v329 + v330
            let v332 : string = "         let result = std::net::TcpStream::connect(&v328);"
            let v333 : string = v331 + v332
            let v334 : string = "         println!(\"connect_timeout: {:?}\", result);"
            let v335 : string = v333 + v334
            let v336 : string = "         if result.is_ok() {"
            let v337 : string = v335 + v336
            let v338 : string = "             tokio::time::sleep(std::time::Duration::from_secs(1)).await;"
            let v339 : string = v337 + v338
            let v340 : string = "             break;"
            let v341 : string = v339 + v340
            let v342 : string = "         } else {"
            let v343 : string = v341 + v342
            let v344 : string = "             tokio::time::sleep(std::time::Duration::from_millis(60)).await;"
            let v345 : string = v343 + v344
            let v346 : string = "         }"
            let v347 : string = v345 + v346
            let v348 : string = "     }"
            let v349 : string = v347 + v348
            let v350 : string = " }"
            let v351 : string = v349 + v350
            let v352 : string = "tokio::runtime::Builder::new_current_thread()"
            let v353 : obj = Fable.Core.Rust.emitExpr () v352
            let v354 : string = "let mut v353 = v353"
            Fable.Core.Rust.emitExpr () v354
            let v355 : string = "v353.enable_all()"
            let v356 : obj = Fable.Core.Rust.emitExpr () v355
            let v357 : string = "v356.build()"
            let v358 : obj = Fable.Core.Rust.emitExpr () v357
            let v359 : string = "v358.unwrap()"
            let v360 : obj = Fable.Core.Rust.emitExpr () v359
            let v361 : string = "v360.block_on("
            let v362 : string = v361 + v351
            let v363 : string = ")"
            let v364 : string = v362 + v363
            Fable.Core.Rust.emitExpr () v364
            let struct (v365 : string, v366 : string, v367 : string, v368 : bool) = method0()
            let v369 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v370 : int64 = Fable.Core.Rust.emitExpr v369 v6
            let v371 : string = "\"Ping\": true"
            let v372 : string = "{"
            let v373 : string = v372 + v371
            let v374 : string = "}"
            let v375 : string = v373 + v374
            let v376 : string = "serde_json::json!("
            let v377 : string = v376 + v375
            let v378 : string = ").to_string()"
            let v379 : string = v377 + v378
            let v380 : Types.std.string.String = Fable.Core.Rust.emitExpr () v379
            let v381 : string = "json_len"
            let v382 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v383 : string = "v380.len()"
            let v384 : obj = Fable.Core.Rust.emitExpr () v383
            let v385 : string = "v384.try_into().unwrap()"
            let v386 : int32 = Fable.Core.Rust.emitExpr () v385
            let v387 : Types.EmitType<Types.std.string.String> = method22(v386)
            let v388 : (Types.EmitType<Types.std.string.String> []) = [|v382; v387|]
            method36(v370, v388)
            let struct (v389 : string, v390 : string, v391 : string, v392 : bool) = method0()
            let v393 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v394 : int64 = Fable.Core.Rust.emitExpr v393 v6
            let v395 : string = "host"
            let v396 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v397 : string = "127.0.0.1"
            let v398 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v399 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v400 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v401 : string = "msg_len"
            let v402 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v403 : string = "v380.len()"
            let v404 : obj = Fable.Core.Rust.emitExpr () v403
            let v405 : string = "v404.try_into().unwrap()"
            let v406 : int32 = Fable.Core.Rust.emitExpr () v405
            let v407 : Types.EmitType<Types.std.string.String> = method22(v406)
            let v408 : (Types.EmitType<Types.std.string.String> []) = [|v396; v398; v399; v400; v402; v407|]
            method38(v394, v408)
            let v409 : string = "zmq::Context::new()"
            let v410 : obj = Fable.Core.Rust.emitExpr () v409
            let v411 : string = "$0.socket(zmq::REQ).unwrap()"
            let v412 : obj = Fable.Core.Rust.emitExpr v410 v411
            let v413 : string = $"tcp://{v397}:{v291}"
            let v414 : string = "$0.connect(&$1).unwrap()"
            Fable.Core.Rust.emitExpr struct (v412, v413) v414
            let v415 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v412, v380) v415
            let v416 : string = "$0.recv_string(0).unwrap().unwrap()"
            let v417 : Types.std.string.String = Fable.Core.Rust.emitExpr v412 v416
            let v418 : string = "$0.disconnect(&$1).unwrap()"
            Fable.Core.Rust.emitExpr struct (v412, v413) v418
            let v419 : string = "result_len"
            let v420 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v421 : string = "v417.len()"
            let v422 : obj = Fable.Core.Rust.emitExpr () v421
            let v423 : string = "v422.try_into().unwrap()"
            let v424 : int32 = Fable.Core.Rust.emitExpr () v423
            let v425 : Types.EmitType<Types.std.string.String> = method22(v424)
            let v426 : (Types.EmitType<Types.std.string.String> []) = [|v420; v425|]
            method38(v394, v426)
            let v427 : string = "> ping; ok"
            let v428 : Types.EmitType<Types.std.string.String> = method5(v427)
            let v429 : (Types.EmitType<Types.std.string.String> []) = [|v428|]
            method32(v212, v429)
            let v430 : string = "std::fs::read_to_string($0)"
            let v431 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v198 v430
            let v432 : string = "($0).as_ref().unwrap().to_string()"
            let v433 : Types.std.string.String = Fable.Core.Rust.emitExpr v431 v432
            let struct (v434 : string, v435 : string, v436 : string, v437 : bool) = method0()
            let v438 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v439 : int64 = Fable.Core.Rust.emitExpr v438 v6
            let v440 : Types.EmitType<Types.std.string.String> = method5(v223)
            let v441 : string = Fable.Core.Rust.emitExpr v198 v220
            let v442 : Types.EmitType<Types.std.string.String> = method5(v441)
            let v443 : string = "spi_text_len"
            let v444 : Types.EmitType<Types.std.string.String> = method5(v443)
            let v445 : string = "v433.len()"
            let v446 : obj = Fable.Core.Rust.emitExpr () v445
            let v447 : string = "v446.try_into().unwrap()"
            let v448 : int32 = Fable.Core.Rust.emitExpr () v447
            let v449 : Types.EmitType<Types.std.string.String> = method22(v448)
            let v450 : (Types.EmitType<Types.std.string.String> []) = [|v440; v442; v444; v449|]
            method40(v439, v450)
            let v451 : string = "\"FileOpen\": {"
            let v452 : string = v372 + v451
            let v453 : string = "\"spiText\": v433,"
            let v454 : string = v452 + v453
            let v455 : string = "\"uri\": \"file://\".to_owned() + v198.to_str().unwrap()"
            let v456 : string = v454 + v455
            let v457 : string = v456 + v374
            let v458 : string = v457 + v374
            let v459 : string = v376 + v458
            let v460 : string = v459 + v378
            let v461 : Types.std.string.String = Fable.Core.Rust.emitExpr () v460
            let v462 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v463 : string = "v461.len()"
            let v464 : obj = Fable.Core.Rust.emitExpr () v463
            let v465 : string = "v464.try_into().unwrap()"
            let v466 : int32 = Fable.Core.Rust.emitExpr () v465
            let v467 : Types.EmitType<Types.std.string.String> = method22(v466)
            let v468 : (Types.EmitType<Types.std.string.String> []) = [|v462; v467|]
            method40(v439, v468)
            let struct (v469 : string, v470 : string, v471 : string, v472 : bool) = method0()
            let v473 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v474 : int64 = Fable.Core.Rust.emitExpr v473 v6
            let v475 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v476 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v477 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v478 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v479 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v480 : string = "v461.len()"
            let v481 : obj = Fable.Core.Rust.emitExpr () v480
            let v482 : string = "v481.try_into().unwrap()"
            let v483 : int32 = Fable.Core.Rust.emitExpr () v482
            let v484 : Types.EmitType<Types.std.string.String> = method22(v483)
            let v485 : (Types.EmitType<Types.std.string.String> []) = [|v475; v476; v477; v478; v479; v484|]
            method38(v474, v485)
            let v486 : obj = Fable.Core.Rust.emitExpr () v409
            let v487 : obj = Fable.Core.Rust.emitExpr v486 v411
            let v488 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v487, v488) v414
            let v489 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v487, v461) v489
            let v490 : Types.std.string.String = Fable.Core.Rust.emitExpr v487 v416
            Fable.Core.Rust.emitExpr struct (v487, v488) v418
            let v491 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v492 : string = "v490.len()"
            let v493 : obj = Fable.Core.Rust.emitExpr () v492
            let v494 : string = "v493.try_into().unwrap()"
            let v495 : int32 = Fable.Core.Rust.emitExpr () v494
            let v496 : Types.EmitType<Types.std.string.String> = method22(v495)
            let v497 : (Types.EmitType<Types.std.string.String> []) = [|v491; v496|]
            method38(v474, v497)
            let v498 : string = "> spi_open; ok"
            let v499 : Types.EmitType<Types.std.string.String> = method5(v498)
            let v500 : (Types.EmitType<Types.std.string.String> []) = [|v499|]
            method32(v212, v500)
            let struct (v501 : string, v502 : string, v503 : string, v504 : bool) = method0()
            let v505 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v506 : int64 = Fable.Core.Rust.emitExpr v505 v6
            let v507 : string = "\"Ping\": true"
            let v508 : string = v372 + v507
            let v509 : string = v508 + v374
            let v510 : string = v376 + v509
            let v511 : string = v510 + v378
            let v512 : Types.std.string.String = Fable.Core.Rust.emitExpr () v511
            let v513 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v514 : string = "v512.len()"
            let v515 : obj = Fable.Core.Rust.emitExpr () v514
            let v516 : string = "v515.try_into().unwrap()"
            let v517 : int32 = Fable.Core.Rust.emitExpr () v516
            let v518 : Types.EmitType<Types.std.string.String> = method22(v517)
            let v519 : (Types.EmitType<Types.std.string.String> []) = [|v513; v518|]
            method36(v506, v519)
            let struct (v520 : string, v521 : string, v522 : string, v523 : bool) = method0()
            let v524 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v525 : int64 = Fable.Core.Rust.emitExpr v524 v6
            let v526 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v527 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v528 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v529 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v530 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v531 : string = "v512.len()"
            let v532 : obj = Fable.Core.Rust.emitExpr () v531
            let v533 : string = "v532.try_into().unwrap()"
            let v534 : int32 = Fable.Core.Rust.emitExpr () v533
            let v535 : Types.EmitType<Types.std.string.String> = method22(v534)
            let v536 : (Types.EmitType<Types.std.string.String> []) = [|v526; v527; v528; v529; v530; v535|]
            method38(v525, v536)
            let v537 : obj = Fable.Core.Rust.emitExpr () v409
            let v538 : obj = Fable.Core.Rust.emitExpr v537 v411
            let v539 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v538, v539) v414
            let v540 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v538, v512) v540
            let v541 : Types.std.string.String = Fable.Core.Rust.emitExpr v538 v416
            Fable.Core.Rust.emitExpr struct (v538, v539) v418
            let v542 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v543 : string = "v541.len()"
            let v544 : obj = Fable.Core.Rust.emitExpr () v543
            let v545 : string = "v544.try_into().unwrap()"
            let v546 : int32 = Fable.Core.Rust.emitExpr () v545
            let v547 : Types.EmitType<Types.std.string.String> = method22(v546)
            let v548 : (Types.EmitType<Types.std.string.String> []) = [|v542; v547|]
            method38(v525, v548)
            let v549 : Types.EmitType<Types.std.string.String> = method5(v427)
            let v550 : (Types.EmitType<Types.std.string.String> []) = [|v549|]
            method32(v212, v550)
            let v551 : string = "../The-Spiral-Language/VS Code Plugin/core/package.spiproj"
            let v552 : string = $"r#\"{v551}\"#"
            let v553 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v552
            let v554 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v553 v193
            let v555 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v554 v195
            let v556 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v555 v197
            let v557 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v556 v430
            let v558 : Types.std.string.String = Fable.Core.Rust.emitExpr v557 v432
            let struct (v559 : string, v560 : string, v561 : string, v562 : bool) = method0()
            let v563 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v564 : int64 = Fable.Core.Rust.emitExpr v563 v6
            let v565 : Types.EmitType<Types.std.string.String> = method5(v257)
            let v566 : string = Fable.Core.Rust.emitExpr v556 v220
            let v567 : Types.EmitType<Types.std.string.String> = method5(v566)
            let v568 : string = "spiproj_text_len"
            let v569 : Types.EmitType<Types.std.string.String> = method5(v568)
            let v570 : string = "v558.len()"
            let v571 : obj = Fable.Core.Rust.emitExpr () v570
            let v572 : string = "v571.try_into().unwrap()"
            let v573 : int32 = Fable.Core.Rust.emitExpr () v572
            let v574 : Types.EmitType<Types.std.string.String> = method22(v573)
            let v575 : (Types.EmitType<Types.std.string.String> []) = [|v565; v567; v569; v574|]
            method41(v564, v575)
            let v576 : string = "\"ProjectFileOpen\": {"
            let v577 : string = v372 + v576
            let v578 : string = "\"spiprojText\": v558,"
            let v579 : string = v577 + v578
            let v580 : string = "\"uri\": \"file://\".to_owned() + v556.to_str().unwrap()"
            let v581 : string = v579 + v580
            let v582 : string = v581 + v374
            let v583 : string = v582 + v374
            let v584 : string = v376 + v583
            let v585 : string = v584 + v378
            let v586 : Types.std.string.String = Fable.Core.Rust.emitExpr () v585
            let v587 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v588 : string = "v586.len()"
            let v589 : obj = Fable.Core.Rust.emitExpr () v588
            let v590 : string = "v589.try_into().unwrap()"
            let v591 : int32 = Fable.Core.Rust.emitExpr () v590
            let v592 : Types.EmitType<Types.std.string.String> = method22(v591)
            let v593 : (Types.EmitType<Types.std.string.String> []) = [|v587; v592|]
            method41(v564, v593)
            let struct (v594 : string, v595 : string, v596 : string, v597 : bool) = method0()
            let v598 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v599 : int64 = Fable.Core.Rust.emitExpr v598 v6
            let v600 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v601 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v602 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v603 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v604 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v605 : string = "v586.len()"
            let v606 : obj = Fable.Core.Rust.emitExpr () v605
            let v607 : string = "v606.try_into().unwrap()"
            let v608 : int32 = Fable.Core.Rust.emitExpr () v607
            let v609 : Types.EmitType<Types.std.string.String> = method22(v608)
            let v610 : (Types.EmitType<Types.std.string.String> []) = [|v600; v601; v602; v603; v604; v609|]
            method38(v599, v610)
            let v611 : obj = Fable.Core.Rust.emitExpr () v409
            let v612 : obj = Fable.Core.Rust.emitExpr v611 v411
            let v613 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v612, v613) v414
            let v614 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v612, v586) v614
            let v615 : Types.std.string.String = Fable.Core.Rust.emitExpr v612 v416
            Fable.Core.Rust.emitExpr struct (v612, v613) v418
            let v616 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v617 : string = "v615.len()"
            let v618 : obj = Fable.Core.Rust.emitExpr () v617
            let v619 : string = "v618.try_into().unwrap()"
            let v620 : int32 = Fable.Core.Rust.emitExpr () v619
            let v621 : Types.EmitType<Types.std.string.String> = method22(v620)
            let v622 : (Types.EmitType<Types.std.string.String> []) = [|v616; v621|]
            method38(v599, v622)
            let v623 : string = "> spiproj_open base_spiproj_path; ok"
            let v624 : Types.EmitType<Types.std.string.String> = method5(v623)
            let v625 : (Types.EmitType<Types.std.string.String> []) = [|v624|]
            method32(v212, v625)
            let v626 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v256 v430
            let v627 : Types.std.string.String = Fable.Core.Rust.emitExpr v626 v432
            let struct (v628 : string, v629 : string, v630 : string, v631 : bool) = method0()
            let v632 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v633 : int64 = Fable.Core.Rust.emitExpr v632 v6
            let v634 : Types.EmitType<Types.std.string.String> = method5(v257)
            let v635 : string = Fable.Core.Rust.emitExpr v256 v220
            let v636 : Types.EmitType<Types.std.string.String> = method5(v635)
            let v637 : Types.EmitType<Types.std.string.String> = method5(v568)
            let v638 : string = "v627.len()"
            let v639 : obj = Fable.Core.Rust.emitExpr () v638
            let v640 : string = "v639.try_into().unwrap()"
            let v641 : int32 = Fable.Core.Rust.emitExpr () v640
            let v642 : Types.EmitType<Types.std.string.String> = method22(v641)
            let v643 : (Types.EmitType<Types.std.string.String> []) = [|v634; v636; v637; v642|]
            method41(v633, v643)
            let v644 : string = v372 + v576
            let v645 : string = "\"spiprojText\": v627,"
            let v646 : string = v644 + v645
            let v647 : string = "\"uri\": \"file://\".to_owned() + v256.to_str().unwrap()"
            let v648 : string = v646 + v647
            let v649 : string = v648 + v374
            let v650 : string = v649 + v374
            let v651 : string = v376 + v650
            let v652 : string = v651 + v378
            let v653 : Types.std.string.String = Fable.Core.Rust.emitExpr () v652
            let v654 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v655 : string = "v653.len()"
            let v656 : obj = Fable.Core.Rust.emitExpr () v655
            let v657 : string = "v656.try_into().unwrap()"
            let v658 : int32 = Fable.Core.Rust.emitExpr () v657
            let v659 : Types.EmitType<Types.std.string.String> = method22(v658)
            let v660 : (Types.EmitType<Types.std.string.String> []) = [|v654; v659|]
            method41(v633, v660)
            let struct (v661 : string, v662 : string, v663 : string, v664 : bool) = method0()
            let v665 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v666 : int64 = Fable.Core.Rust.emitExpr v665 v6
            let v667 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v668 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v669 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v670 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v671 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v672 : string = "v653.len()"
            let v673 : obj = Fable.Core.Rust.emitExpr () v672
            let v674 : string = "v673.try_into().unwrap()"
            let v675 : int32 = Fable.Core.Rust.emitExpr () v674
            let v676 : Types.EmitType<Types.std.string.String> = method22(v675)
            let v677 : (Types.EmitType<Types.std.string.String> []) = [|v667; v668; v669; v670; v671; v676|]
            method38(v666, v677)
            let v678 : obj = Fable.Core.Rust.emitExpr () v409
            let v679 : obj = Fable.Core.Rust.emitExpr v678 v411
            let v680 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v679, v680) v414
            let v681 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v679, v653) v681
            let v682 : Types.std.string.String = Fable.Core.Rust.emitExpr v679 v416
            Fable.Core.Rust.emitExpr struct (v679, v680) v418
            let v683 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v684 : string = "v682.len()"
            let v685 : obj = Fable.Core.Rust.emitExpr () v684
            let v686 : string = "v685.try_into().unwrap()"
            let v687 : int32 = Fable.Core.Rust.emitExpr () v686
            let v688 : Types.EmitType<Types.std.string.String> = method22(v687)
            let v689 : (Types.EmitType<Types.std.string.String> []) = [|v683; v688|]
            method38(v666, v689)
            let v690 : string = "> spiproj_open spiproj_path; ok"
            let v691 : Types.EmitType<Types.std.string.String> = method5(v690)
            let v692 : (Types.EmitType<Types.std.string.String> []) = [|v691|]
            method32(v212, v692)
            let struct (v693 : string, v694 : string, v695 : string, v696 : bool) = method0()
            let v697 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v698 : int64 = Fable.Core.Rust.emitExpr v697 v6
            let v699 : string = "\"Ping\": true"
            let v700 : string = v372 + v699
            let v701 : string = v700 + v374
            let v702 : string = v376 + v701
            let v703 : string = v702 + v378
            let v704 : Types.std.string.String = Fable.Core.Rust.emitExpr () v703
            let v705 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v706 : string = "v704.len()"
            let v707 : obj = Fable.Core.Rust.emitExpr () v706
            let v708 : string = "v707.try_into().unwrap()"
            let v709 : int32 = Fable.Core.Rust.emitExpr () v708
            let v710 : Types.EmitType<Types.std.string.String> = method22(v709)
            let v711 : (Types.EmitType<Types.std.string.String> []) = [|v705; v710|]
            method36(v698, v711)
            let struct (v712 : string, v713 : string, v714 : string, v715 : bool) = method0()
            let v716 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v717 : int64 = Fable.Core.Rust.emitExpr v716 v6
            let v718 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v719 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v720 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v721 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v722 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v723 : string = "v704.len()"
            let v724 : obj = Fable.Core.Rust.emitExpr () v723
            let v725 : string = "v724.try_into().unwrap()"
            let v726 : int32 = Fable.Core.Rust.emitExpr () v725
            let v727 : Types.EmitType<Types.std.string.String> = method22(v726)
            let v728 : (Types.EmitType<Types.std.string.String> []) = [|v718; v719; v720; v721; v722; v727|]
            method38(v717, v728)
            let v729 : obj = Fable.Core.Rust.emitExpr () v409
            let v730 : obj = Fable.Core.Rust.emitExpr v729 v411
            let v731 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v730, v731) v414
            let v732 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v730, v704) v732
            let v733 : Types.std.string.String = Fable.Core.Rust.emitExpr v730 v416
            Fable.Core.Rust.emitExpr struct (v730, v731) v418
            let v734 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v735 : string = "v733.len()"
            let v736 : obj = Fable.Core.Rust.emitExpr () v735
            let v737 : string = "v736.try_into().unwrap()"
            let v738 : int32 = Fable.Core.Rust.emitExpr () v737
            let v739 : Types.EmitType<Types.std.string.String> = method22(v738)
            let v740 : (Types.EmitType<Types.std.string.String> []) = [|v734; v739|]
            method38(v717, v740)
            let v741 : Types.EmitType<Types.std.string.String> = method5(v427)
            let v742 : (Types.EmitType<Types.std.string.String> []) = [|v741|]
            method32(v212, v742)
            let struct (v743 : string, v744 : string, v745 : string, v746 : bool) = method0()
            let v747 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v748 : int64 = Fable.Core.Rust.emitExpr v747 v6
            let v749 : Types.EmitType<Types.std.string.String> = method5(v223)
            let v750 : string = Fable.Core.Rust.emitExpr v198 v220
            let v751 : Types.EmitType<Types.std.string.String> = method5(v750)
            let v752 : string = "backend"
            let v753 : Types.EmitType<Types.std.string.String> = method5(v752)
            let v754 : string = "Fsharp"
            let v755 : Types.EmitType<Types.std.string.String> = method5(v754)
            let v756 : (Types.EmitType<Types.std.string.String> []) = [|v749; v751; v753; v755|]
            method42(v748, v756)
            let v757 : Types.std.string.String = Fable.Core.Rust.emitExpr v754 v189
            let v758 : string = "\"BuildFile\": {"
            let v759 : string = v372 + v758
            let v760 : string = "\"uri\": \"file://\".to_owned() + v198.to_str().unwrap(),"
            let v761 : string = v759 + v760
            let v762 : string = "\"backend\": v757"
            let v763 : string = v761 + v762
            let v764 : string = v763 + v374
            let v765 : string = v764 + v374
            let v766 : string = v376 + v765
            let v767 : string = v766 + v378
            let v768 : Types.std.string.String = Fable.Core.Rust.emitExpr () v767
            let v769 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v770 : string = "v768.len()"
            let v771 : obj = Fable.Core.Rust.emitExpr () v770
            let v772 : string = "v771.try_into().unwrap()"
            let v773 : int32 = Fable.Core.Rust.emitExpr () v772
            let v774 : Types.EmitType<Types.std.string.String> = method22(v773)
            let v775 : (Types.EmitType<Types.std.string.String> []) = [|v769; v774|]
            method42(v748, v775)
            let struct (v776 : string, v777 : string, v778 : string, v779 : bool) = method0()
            let v780 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v781 : int64 = Fable.Core.Rust.emitExpr v780 v6
            let v782 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v783 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v784 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v785 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v786 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v787 : string = "v768.len()"
            let v788 : obj = Fable.Core.Rust.emitExpr () v787
            let v789 : string = "v788.try_into().unwrap()"
            let v790 : int32 = Fable.Core.Rust.emitExpr () v789
            let v791 : Types.EmitType<Types.std.string.String> = method22(v790)
            let v792 : (Types.EmitType<Types.std.string.String> []) = [|v782; v783; v784; v785; v786; v791|]
            method38(v781, v792)
            let v793 : obj = Fable.Core.Rust.emitExpr () v409
            let v794 : obj = Fable.Core.Rust.emitExpr v793 v411
            let v795 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v794, v795) v414
            let v796 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v794, v768) v796
            let v797 : Types.std.string.String = Fable.Core.Rust.emitExpr v794 v416
            Fable.Core.Rust.emitExpr struct (v794, v795) v418
            let v798 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v799 : string = "v797.len()"
            let v800 : obj = Fable.Core.Rust.emitExpr () v799
            let v801 : string = "v800.try_into().unwrap()"
            let v802 : int32 = Fable.Core.Rust.emitExpr () v801
            let v803 : Types.EmitType<Types.std.string.String> = method22(v802)
            let v804 : (Types.EmitType<Types.std.string.String> []) = [|v798; v803|]
            method38(v781, v804)
            let v805 : string = "> spi_build_file; ok"
            let v806 : Types.EmitType<Types.std.string.String> = method5(v805)
            let v807 : (Types.EmitType<Types.std.string.String> []) = [|v806|]
            method32(v212, v807)
            let struct (v808 : string, v809 : string, v810 : string, v811 : bool) = method0()
            let v812 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v813 : int64 = Fable.Core.Rust.emitExpr v812 v6
            let v814 : string = "\"Ping\": true"
            let v815 : string = v372 + v814
            let v816 : string = v815 + v374
            let v817 : string = v376 + v816
            let v818 : string = v817 + v378
            let v819 : Types.std.string.String = Fable.Core.Rust.emitExpr () v818
            let v820 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v821 : string = "v819.len()"
            let v822 : obj = Fable.Core.Rust.emitExpr () v821
            let v823 : string = "v822.try_into().unwrap()"
            let v824 : int32 = Fable.Core.Rust.emitExpr () v823
            let v825 : Types.EmitType<Types.std.string.String> = method22(v824)
            let v826 : (Types.EmitType<Types.std.string.String> []) = [|v820; v825|]
            method36(v813, v826)
            let struct (v827 : string, v828 : string, v829 : string, v830 : bool) = method0()
            let v831 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v832 : int64 = Fable.Core.Rust.emitExpr v831 v6
            let v833 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v834 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v835 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v836 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v837 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v838 : string = "v819.len()"
            let v839 : obj = Fable.Core.Rust.emitExpr () v838
            let v840 : string = "v839.try_into().unwrap()"
            let v841 : int32 = Fable.Core.Rust.emitExpr () v840
            let v842 : Types.EmitType<Types.std.string.String> = method22(v841)
            let v843 : (Types.EmitType<Types.std.string.String> []) = [|v833; v834; v835; v836; v837; v842|]
            method38(v832, v843)
            let v844 : obj = Fable.Core.Rust.emitExpr () v409
            let v845 : obj = Fable.Core.Rust.emitExpr v844 v411
            let v846 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v845, v846) v414
            let v847 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v845, v819) v847
            let v848 : Types.std.string.String = Fable.Core.Rust.emitExpr v845 v416
            Fable.Core.Rust.emitExpr struct (v845, v846) v418
            let v849 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v850 : string = "v848.len()"
            let v851 : obj = Fable.Core.Rust.emitExpr () v850
            let v852 : string = "v851.try_into().unwrap()"
            let v853 : int32 = Fable.Core.Rust.emitExpr () v852
            let v854 : Types.EmitType<Types.std.string.String> = method22(v853)
            let v855 : (Types.EmitType<Types.std.string.String> []) = [|v849; v854|]
            method38(v832, v855)
            let v856 : Types.EmitType<Types.std.string.String> = method5(v427)
            let v857 : (Types.EmitType<Types.std.string.String> []) = [|v856|]
            method32(v212, v857)
            let struct (v858 : string, v859 : string, v860 : string, v861 : bool) = method0()
            let v862 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v863 : int64 = Fable.Core.Rust.emitExpr v862 v6
            let v864 : string = "std::fs::metadata($0).unwrap().modified().unwrap()"
            let v865 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v277 v864
            let v866 : Types.EmitType<Types.std.string.String> = method5(v278)
            let v867 : string = Fable.Core.Rust.emitExpr v277 v220
            let v868 : Types.EmitType<Types.std.string.String> = method5(v867)
            let v869 : string = "start"
            let v870 : Types.EmitType<Types.std.string.String> = method5(v869)
            let v871 : Types.EmitType<Types.std.string.String> = method44(v865)
            let v872 : (Types.EmitType<Types.std.string.String> []) = [|v866; v868; v870; v871|]
            method45(v863, v872)
            let v873 : (int32 []) = [| 0..20 |]
            let v874 : int32 = v873.Length
            let v875 : US0 = US0_0
            let v876 : Mut1 = {l0 = 0; l1 = v875} : Mut1
            while method47(v874, v876) do
                let v878 : int32 = v876.l0
                let v879 : US0 = v876.l1
                let v880 : int32 = v873.[int v878]
                let v902 : US0 =
                    match v879 with
                    | US0_0 -> (* None *)
                        let v883 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v277 v864
                        let v884 : string = "i"
                        let v885 : Types.EmitType<Types.std.string.String> = method5(v884)
                        let v886 : Types.EmitType<Types.std.string.String> = method22(v880)
                        let v887 : string = "last_modified"
                        let v888 : Types.EmitType<Types.std.string.String> = method5(v887)
                        let v889 : Types.EmitType<Types.std.string.String> = method44(v883)
                        let v890 : (Types.EmitType<Types.std.string.String> []) = [|v885; v886; v888; v889|]
                        method45(v863, v890)
                        let v891 : string = "$0 > $1"
                        let v892 : bool = Fable.Core.Rust.emitExpr struct (v883, v865) v891
                        if v892 then
                            let v893 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v277 v430
                            let v894 : Types.std.string.String = Fable.Core.Rust.emitExpr v893 v432
                            let v895 : obj = v894
                            let v896 : string = Fable.Core.Rust.emitExpr v895 v81
                            US0_1(v896)
                        else
                            let v898 : string = "std::thread::sleep(std::time::Duration::from_millis(*$0))"
                            Fable.Core.Rust.emitExpr 60UL v898
                            US0_0
                    | US0_1(v881) -> (* Some *)
                        US0_1(v881)
                let v903 : int32 = v878 + 1
                v876.l0 <- v903
                v876.l1 <- v902
                ()
            let v904 : US0 = v876.l1
            let v907 : string =
                match v904 with
                | US0_0 -> (* None *)
                    v283
                | US0_1(v905) -> (* Some *)
                    v905
            let v908 : string = "new_fsx_len"
            let v909 : Types.EmitType<Types.std.string.String> = method5(v908)
            let v910 : string = "v907.len()"
            let v911 : obj = Fable.Core.Rust.emitExpr () v910
            let v912 : string = "v911.try_into().unwrap()"
            let v913 : int32 = Fable.Core.Rust.emitExpr () v912
            let v914 : Types.EmitType<Types.std.string.String> = method22(v913)
            let v915 : (Types.EmitType<Types.std.string.String> []) = [|v909; v914|]
            method32(v212, v915)
            let struct (v916 : string, v917 : string, v918 : string, v919 : bool) = method0()
            let v920 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v921 : int64 = Fable.Core.Rust.emitExpr v920 v6
            let v922 : string = "\"Ping\": true"
            let v923 : string = v372 + v922
            let v924 : string = v923 + v374
            let v925 : string = v376 + v924
            let v926 : string = v925 + v378
            let v927 : Types.std.string.String = Fable.Core.Rust.emitExpr () v926
            let v928 : Types.EmitType<Types.std.string.String> = method5(v381)
            let v929 : string = "v927.len()"
            let v930 : obj = Fable.Core.Rust.emitExpr () v929
            let v931 : string = "v930.try_into().unwrap()"
            let v932 : int32 = Fable.Core.Rust.emitExpr () v931
            let v933 : Types.EmitType<Types.std.string.String> = method22(v932)
            let v934 : (Types.EmitType<Types.std.string.String> []) = [|v928; v933|]
            method36(v921, v934)
            let struct (v935 : string, v936 : string, v937 : string, v938 : bool) = method0()
            let v939 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v940 : int64 = Fable.Core.Rust.emitExpr v939 v6
            let v941 : Types.EmitType<Types.std.string.String> = method5(v395)
            let v942 : Types.EmitType<Types.std.string.String> = method5(v397)
            let v943 : Types.EmitType<Types.std.string.String> = method5(v292)
            let v944 : Types.EmitType<Types.std.string.String> = method34(v291)
            let v945 : Types.EmitType<Types.std.string.String> = method5(v401)
            let v946 : string = "v927.len()"
            let v947 : obj = Fable.Core.Rust.emitExpr () v946
            let v948 : string = "v947.try_into().unwrap()"
            let v949 : int32 = Fable.Core.Rust.emitExpr () v948
            let v950 : Types.EmitType<Types.std.string.String> = method22(v949)
            let v951 : (Types.EmitType<Types.std.string.String> []) = [|v941; v942; v943; v944; v945; v950|]
            method38(v940, v951)
            let v952 : obj = Fable.Core.Rust.emitExpr () v409
            let v953 : obj = Fable.Core.Rust.emitExpr v952 v411
            let v954 : string = $"tcp://{v397}:{v291}"
            Fable.Core.Rust.emitExpr struct (v953, v954) v414
            let v955 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v953, v927) v955
            let v956 : Types.std.string.String = Fable.Core.Rust.emitExpr v953 v416
            Fable.Core.Rust.emitExpr struct (v953, v954) v418
            let v957 : Types.EmitType<Types.std.string.String> = method5(v419)
            let v958 : string = "v956.len()"
            let v959 : obj = Fable.Core.Rust.emitExpr () v958
            let v960 : string = "v959.try_into().unwrap()"
            let v961 : int32 = Fable.Core.Rust.emitExpr () v960
            let v962 : Types.EmitType<Types.std.string.String> = method22(v961)
            let v963 : (Types.EmitType<Types.std.string.String> []) = [|v957; v962|]
            method38(v940, v963)
            let v964 : Types.EmitType<Types.std.string.String> = method5(v427)
            let v965 : (Types.EmitType<Types.std.string.String> []) = [|v964|]
            method32(v212, v965)
            let v966 : string = "v320.wait_with_output().unwrap()"
            let v967 : obj = Fable.Core.Rust.emitExpr () v966
            let v968 : string = "output"
            let v969 : Types.EmitType<Types.std.string.String> = method5(v968)
            let v970 : Types.std.string.String = Fable.Core.Rust.emitExpr v967 v229
            let v971 : Types.EmitType<Types.std.string.String> = method20(v970)
            let v972 : (Types.EmitType<Types.std.string.String> []) = [|v969; v971|]
            method32(v212, v972)
            let v973 : string = "v206.unwrap_or(v277)"
            let v974 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr () v973
            let v975 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v974, v907) v284
            Fable.Core.Rust.emitExpr v975 v286
            let v976 : string = "> fs_write new_fsx_path; ok"
            let v977 : Types.EmitType<Types.std.string.String> = method5(v976)
            let v978 : (Types.EmitType<Types.std.string.String> []) = [|v977|]
            method32(v212, v978)
            let v979 : string = "fsx.len"
            let v980 : Types.EmitType<Types.std.string.String> = method5(v979)
            let v981 : int32 = v907.Length
            let v982 : Types.EmitType<Types.std.string.String> = method22(v981)
            let v983 : (Types.EmitType<Types.std.string.String> []) = [|v980; v982|]
            method48(v7, v983)
    let v984 : string = "cli end"
    let v985 : Types.EmitType<Types.std.string.String> = method5(v984)
    let v986 : string = "???"
    let v987 : Types.EmitType<Types.std.string.String> = method5(v986)
    let v988 : (Types.EmitType<Types.std.string.String> []) = [|v985; v987|]
    method48(v7, v988)
    0
let v0 : (unit -> int32) = closure0()
()
