type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
let rec method0 (v0 : Option<Types.std.string.String>) : Option<Types.std.string.String> =
    v0
and method1 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and closure1 () (v0 : Types.std.string.String) : string =
    let v1 : Types.std.string.String = method1(v0)
    let v2 : string = "fable_library_rust::String_::fromString(v1)"
    let v3 : string = Fable.Core.Rust.emitExpr () v2
    v3
and method2 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method3 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "String::from(core::ops::Deref::deref($0))"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method5 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method5(v0, v4)
    else
        v1
and method6 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method7 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method8 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "$0"
    let v2 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.Rust.emitExpr v0 v1
    let v3 : string = "core::ops::Deref::deref(v2)"
    let v4 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.Rust.emitExpr () v3
    let v5 : obj = v4
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method9 (v0 : string) : string =
    v0
and method10 () : string =
    let v0 : string = "$1=$2"
    v0
and method11 () : string =
    let v0 : string = "[$1]"
    v0
and method12 () : string =
    let v0 : string = "\""
    v0
and method13 () : string =
    let v0 : string = " "
    v0
and method14 () : string =
    let v0 : string = "387958"
    v0
and method15 () : string =
    let v0 : string = "385779"
    v0
and method4 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method5(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method3(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method3(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method3(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method6(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method3(v18)
    let v20 : US0 = US0_0
    let v21 : string = "format!(\"{:?}\", $0)"
    let v22 : Types.std.string.String = Fable.Core.Rust.emitExpr v20 v21
    let v23 : Types.EmitType<Types.std.string.String> = method7(v22)
    let v24 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v23|]
    let v25 : Types.EmitType<Types.std.string.String> = method8(v24)
    let v26 : string = "> app ()"
    let v27 : Types.EmitType<Types.std.string.String> = method3(v26)
    let v28 : (Types.EmitType<Types.std.string.String> []) = [|v27|]
    let v29 : string = "$0"
    let v30 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : string = "core::ops::Deref::deref(v30)"
    let v32 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.Rust.emitExpr () v31
    let v33 : obj = v32
    let v34 : Types.std.string.String = Fable.Core.Rust.emitExpr v33 v21
    let v35 : Types.EmitType<Types.std.string.String> = v34 |> unbox<Types.EmitType<Types.std.string.String>>
    let v36 : string = "format!(\"{}\", $0)"
    let v37 : Types.std.string.String = Fable.Core.Rust.emitExpr v35 v36
    let v38 : string = (v37).ToString ()
    let v39 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v40 : string = "r#\"" + v39 + "\"#"
    let v41 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v40
    let v42 : string = "regex::RegexBuilder::new($0)"
    let v43 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v41 v42
    let v44 : string = "$0.build().unwrap()"
    let v45 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v43 v44
    let v46 : string = method9(v38)
    let v47 : string = "v46.as_str()"
    let v48 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v47
    let v49 : string = method10()
    let v50 : string = "v49.as_str()"
    let v51 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v50
    let v52 : string = "$0.replace_all(&$1, $2).to_string()"
    let v53 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v45, v48, v51) v52
    let v54 : Types.std.string.String = method1(v53)
    let v55 : string = "fable_library_rust::String_::fromString(v54)"
    let v56 : string = Fable.Core.Rust.emitExpr () v55
    let v57 : string = "\\[\"(.*?)\"\\]"
    let v58 : string = "r#\"" + v57 + "\"#"
    let v59 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v58
    let v60 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v59 v42
    let v61 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v60 v44
    let v62 : string = method9(v56)
    let v63 : string = "v62.as_str()"
    let v64 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v63
    let v65 : string = method11()
    let v66 : string = "v65.as_str()"
    let v67 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v66
    let v68 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v61, v64, v67) v52
    let v69 : Types.std.string.String = method1(v68)
    let v70 : string = "fable_library_rust::String_::fromString(v69)"
    let v71 : string = Fable.Core.Rust.emitExpr () v70
    let v72 : string = "\\\\\""
    let v73 : string = "r#\"" + v72 + "\"#"
    let v74 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v73
    let v75 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v74 v42
    let v76 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v75 v44
    let v77 : string = method9(v71)
    let v78 : string = "v77.as_str()"
    let v79 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v78
    let v80 : string = method12()
    let v81 : string = "v80.as_str()"
    let v82 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v81
    let v83 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v76, v79, v82) v52
    let v84 : Types.std.string.String = method1(v83)
    let v85 : string = "fable_library_rust::String_::fromString(v84)"
    let v86 : string = Fable.Core.Rust.emitExpr () v85
    let v87 : string = ", "
    let v88 : string = "r#\"" + v87 + "\"#"
    let v89 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v88
    let v90 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v89 v42
    let v91 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v90 v44
    let v92 : string = method9(v86)
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : string = method13()
    let v96 : string = "v95.as_str()"
    let v97 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v96
    let v98 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v91, v94, v97) v52
    let v99 : Types.std.string.String = method1(v98)
    let v100 : string = "fable_library_rust::String_::fromString(v99)"
    let v101 : string = Fable.Core.Rust.emitExpr () v100
    let v102 : Types.EmitType<Types.std.string.String> = method3(v101)
    let v103 : string = "$0"
    let v104 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.Rust.emitExpr v1 v103
    let v105 : string = "core::ops::Deref::deref(v104)"
    let v106 : Types.Ref<(Types.EmitType<Types.std.string.String> [])> = Fable.Core.Rust.emitExpr () v105
    let v107 : obj = v106
    let v108 : Types.std.string.String = Fable.Core.Rust.emitExpr v107 v21
    let v109 : Types.EmitType<Types.std.string.String> = v108 |> unbox<Types.EmitType<Types.std.string.String>>
    let v110 : Types.std.string.String = Fable.Core.Rust.emitExpr v109 v36
    let v111 : string = (v110).ToString ()
    let v112 : string = "r#\"" + v39 + "\"#"
    let v113 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v112
    let v114 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v113 v42
    let v115 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v114 v44
    let v116 : string = method9(v111)
    let v117 : string = "v116.as_str()"
    let v118 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v117
    let v119 : string = method10()
    let v120 : string = "v119.as_str()"
    let v121 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v120
    let v122 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v115, v118, v121) v52
    let v123 : Types.std.string.String = method1(v122)
    let v124 : string = "fable_library_rust::String_::fromString(v123)"
    let v125 : string = Fable.Core.Rust.emitExpr () v124
    let v126 : string = "r#\"" + v57 + "\"#"
    let v127 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v126
    let v128 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v127 v42
    let v129 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v128 v44
    let v130 : string = method9(v125)
    let v131 : string = "v130.as_str()"
    let v132 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v131
    let v133 : string = method11()
    let v134 : string = "v133.as_str()"
    let v135 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v134
    let v136 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v129, v132, v135) v52
    let v137 : Types.std.string.String = method1(v136)
    let v138 : string = "fable_library_rust::String_::fromString(v137)"
    let v139 : string = Fable.Core.Rust.emitExpr () v138
    let v140 : string = "r#\"" + v72 + "\"#"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v141 v42
    let v143 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v142 v44
    let v144 : string = method9(v139)
    let v145 : string = "v144.as_str()"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : string = method12()
    let v148 : string = "v147.as_str()"
    let v149 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v148
    let v150 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v143, v146, v149) v52
    let v151 : Types.std.string.String = method1(v150)
    let v152 : string = "fable_library_rust::String_::fromString(v151)"
    let v153 : string = Fable.Core.Rust.emitExpr () v152
    let v154 : string = "r#\"" + v87 + "\"#"
    let v155 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v154
    let v156 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v155 v42
    let v157 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v156 v44
    let v158 : string = method9(v153)
    let v159 : string = "v158.as_str()"
    let v160 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v159
    let v161 : string = method13()
    let v162 : string = "v161.as_str()"
    let v163 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v162
    let v164 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v157, v160, v163) v52
    let v165 : Types.std.string.String = method1(v164)
    let v166 : string = "fable_library_rust::String_::fromString(v165)"
    let v167 : string = Fable.Core.Rust.emitExpr () v166
    let v168 : Types.EmitType<Types.std.string.String> = method3(v167)
    let v169 : Types.std.string.String = Fable.Core.Rust.emitExpr v25 v36
    let v170 : string = (v169).ToString ()
    let v171 : string = "r#\"" + v39 + "\"#"
    let v172 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v171
    let v173 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v172 v42
    let v174 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v173 v44
    let v175 : string = method9(v170)
    let v176 : string = "v175.as_str()"
    let v177 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v176
    let v178 : string = method10()
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v174, v177, v180) v52
    let v182 : Types.std.string.String = method1(v181)
    let v183 : string = "fable_library_rust::String_::fromString(v182)"
    let v184 : string = Fable.Core.Rust.emitExpr () v183
    let v185 : string = "r#\"" + v57 + "\"#"
    let v186 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v185
    let v187 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v186 v42
    let v188 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v187 v44
    let v189 : string = method9(v184)
    let v190 : string = "v189.as_str()"
    let v191 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v190
    let v192 : string = method11()
    let v193 : string = "v192.as_str()"
    let v194 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v193
    let v195 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v188, v191, v194) v52
    let v196 : Types.std.string.String = method1(v195)
    let v197 : string = "fable_library_rust::String_::fromString(v196)"
    let v198 : string = Fable.Core.Rust.emitExpr () v197
    let v199 : string = "r#\"" + v72 + "\"#"
    let v200 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v199
    let v201 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v200 v42
    let v202 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v201 v44
    let v203 : string = method9(v198)
    let v204 : string = "v203.as_str()"
    let v205 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v204
    let v206 : string = method12()
    let v207 : string = "v206.as_str()"
    let v208 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v207
    let v209 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v202, v205, v208) v52
    let v210 : Types.std.string.String = method1(v209)
    let v211 : string = "fable_library_rust::String_::fromString(v210)"
    let v212 : string = Fable.Core.Rust.emitExpr () v211
    let v213 : string = "r#\"" + v87 + "\"#"
    let v214 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v213
    let v215 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v214 v42
    let v216 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v215 v44
    let v217 : string = method9(v212)
    let v218 : string = "v217.as_str()"
    let v219 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v218
    let v220 : string = method13()
    let v221 : string = "v220.as_str()"
    let v222 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v221
    let v223 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v216, v219, v222) v52
    let v224 : Types.std.string.String = method1(v223)
    let v225 : string = "fable_library_rust::String_::fromString(v224)"
    let v226 : string = Fable.Core.Rust.emitExpr () v225
    let v227 : Types.EmitType<Types.std.string.String> = method3(v226)
    let v228 : string = method14()
    let v229 : string = "v228.as_str()"
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v229
    let v231 : unativeint = unativeint 0
    let v232 : unativeint = unativeint 2
    let v233 : string = "&$0[$1..$2]"
    let v234 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v230, v231, v232) v233
    let v235 : string = "fable_library_rust::String_::string(v234)"
    let v236 : string = Fable.Core.Rust.emitExpr () v235
    let v237 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v238 : uint8 = Fable.Core.Rust.emitExpr v236 v237
    let v239 : string = method14()
    let v240 : string = "v239.as_str()"
    let v241 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v240
    let v242 : unativeint = unativeint 2
    let v243 : unativeint = unativeint 4
    let v244 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v241, v242, v243) v233
    let v245 : string = "fable_library_rust::String_::string(v244)"
    let v246 : string = Fable.Core.Rust.emitExpr () v245
    let v247 : uint8 = Fable.Core.Rust.emitExpr v246 v237
    let v248 : string = method14()
    let v249 : string = "v248.as_str()"
    let v250 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v249
    let v251 : unativeint = unativeint 4
    let v252 : unativeint = unativeint 6
    let v253 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v250, v251, v252) v233
    let v254 : string = "fable_library_rust::String_::string(v253)"
    let v255 : string = Fable.Core.Rust.emitExpr () v254
    let v256 : uint8 = Fable.Core.Rust.emitExpr v255 v237
    let v257 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v258 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v168, v238, v247, v256) v257
    let v259 : Types.std.string.String = Fable.Core.Rust.emitExpr v258 v36
    let v260 : string = method15()
    let v261 : string = "v260.as_str()"
    let v262 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v261
    let v263 : unativeint = unativeint 0
    let v264 : unativeint = unativeint 2
    let v265 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v262, v263, v264) v233
    let v266 : string = "fable_library_rust::String_::string(v265)"
    let v267 : string = Fable.Core.Rust.emitExpr () v266
    let v268 : uint8 = Fable.Core.Rust.emitExpr v267 v237
    let v269 : string = method15()
    let v270 : string = "v269.as_str()"
    let v271 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v270
    let v272 : unativeint = unativeint 2
    let v273 : unativeint = unativeint 4
    let v274 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v271, v272, v273) v233
    let v275 : string = "fable_library_rust::String_::string(v274)"
    let v276 : string = Fable.Core.Rust.emitExpr () v275
    let v277 : uint8 = Fable.Core.Rust.emitExpr v276 v237
    let v278 : string = method15()
    let v279 : string = "v278.as_str()"
    let v280 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v279
    let v281 : unativeint = unativeint 4
    let v282 : unativeint = unativeint 6
    let v283 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v280, v281, v282) v233
    let v284 : string = "fable_library_rust::String_::string(v283)"
    let v285 : string = Fable.Core.Rust.emitExpr () v284
    let v286 : uint8 = Fable.Core.Rust.emitExpr v285 v237
    let v287 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v227, v268, v277, v286) v257
    let v288 : Types.std.string.String = Fable.Core.Rust.emitExpr v287 v36
    let v289 : string = $"{v102} {v259} {v288}"
    System.Console.WriteLine v289
    ()
and closure0 () () : int32 =
    let v0 : string = "test1"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v1
    let v3 : string = "String::from(core::ops::Deref::deref($0))"
    let v4 : Types.std.string.String = Fable.Core.Rust.emitExpr v2 v3
    let v5 : Option<Types.std.string.String> = Some v4
    let v6 : Option<Types.std.string.String> = method0(v5)
    let v7 : string = "v6.map(&*$0)"
    let v8 : (Types.std.string.String -> string) = closure1()
    let v9 : Option<string> = Fable.Core.Rust.emitExpr v8 v7
    let v10 : string = "format!(\"{:?}\", $0)"
    let v11 : Types.std.string.String = Fable.Core.Rust.emitExpr v9 v10
    System.Console.WriteLine v11
    let struct (v12 : string, v13 : string, v14 : string, v15 : bool) = method2()
    let v16 : string = "chrono::Utc::now()"
    let v17 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v16
    let v18 : string = "($0).timestamp()"
    let v19 : int64 = Fable.Core.Rust.emitExpr v17 v18
    let v20 : string = "app1"
    let v21 : string = "r#\"" + v20 + "\"#"
    let v22 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v21
    let v23 : string = "clap::Command::new(v22)"
    let v24 : string = ".version(env!(\"CARGO_PKG_VERSION\"))"
    let v25 : string = v23 + v24
    let v26 : string = ".propagate_version(true)"
    let v27 : string = v25 + v26
    let v28 : string = ".subcommand_required(false)"
    let v29 : string = v27 + v28
    let v30 : string = ".about(\"command about\")"
    let v31 : string = v29 + v30
    let v32 : string = ".arg_required_else_help(true)"
    let v33 : string = v31 + v32
    let v34 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v33
    let v35 : string = "PostFsxRsBuild"
    let v36 : string = "r#\"" + v35 + "\"#"
    let v37 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v36
    let v38 : string = "clap::Command::new(v37)"
    let v39 : string = v38 + v24
    let v40 : string = v39 + v26
    let v41 : string = v40 + v28
    let v42 : string = v41 + v30
    let v43 : string = v42 + v32
    let v44 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v43
    let v45 : string = "rs-path"
    let v46 : string = "r#\"" + v45 + "\"#"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = "clap::Arg::new(v47)"
    let v49 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v48
    let v50 : string = "v44.arg(v49)"
    let v51 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v50
    let v52 : string = "v34.subcommand(v51)"
    let v53 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v52
    let v54 : string = "SpiFsxBuild"
    let v55 : string = "r#\"" + v54 + "\"#"
    let v56 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v55
    let v57 : string = "clap::Command::new(v56)"
    let v58 : string = v57 + v24
    let v59 : string = v58 + v26
    let v60 : string = v59 + v28
    let v61 : string = v60 + v30
    let v62 : string = v61 + v32
    let v63 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v62
    let v64 : string = "spi-path"
    let v65 : string = "r#\"" + v64 + "\"#"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : string = "clap::Arg::new(v66)"
    let v68 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v67
    let v69 : string = "v63.arg(v68)"
    let v70 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v69
    let v71 : string = "fsx-path"
    let v72 : string = "r#\"" + v71 + "\"#"
    let v73 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v72
    let v74 : string = "clap::Arg::new(v73)"
    let v75 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v74
    let v76 : string = "v70.arg(v75)"
    let v77 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v76
    let v78 : string = "v53.subcommand(v77)"
    let v79 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v78
    let v80 : string = "v79.get_matches()"
    let v81 : Types.clap.parser.ArgMatches = Fable.Core.Rust.emitExpr () v80
    let v82 : string = "std::sync::Arc::new(v81)"
    let v83 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr () v82
    let v84 : string = "v83.subcommand().map(|(name, matches)| (name, std::sync::Arc::new(matches.clone())))"
    let v85 : Option<struct (Types.Ref<Types.Str> * Types.std.sync.Arc<Types.clap.parser.ArgMatches>)> = Fable.Core.Rust.emitExpr () v84
    let v86 : string = "v85.unwrap()"
    let struct (v87 : Types.Ref<Types.Str>, v88 : Types.std.sync.Arc<Types.clap.parser.ArgMatches>) = Fable.Core.Rust.emitExpr () v86
    let v89 : obj = struct (v87, v88)
    let v90 : string = "v89.0"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = "std::sync::Arc::clone(&v89.1)"
    let v93 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr () v92
    let v94 : string = "cli end"
    let v95 : Types.EmitType<Types.std.string.String> = method3(v94)
    let v96 : string = "???"
    let v97 : Types.EmitType<Types.std.string.String> = method3(v96)
    let v98 : (Types.EmitType<Types.std.string.String> []) = [|v95; v97|]
    method4(v19, v98)
    0
let v0 : (unit -> int32) = closure0()
()
