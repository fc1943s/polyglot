type UH0 =
    | UH0_0 of Types.std.string.String * UH0
    | UH0_1
and Mut0 = {mutable l0 : UH0}
and UH1 =
    | UH1_0 of string * UH1
    | UH1_1
and [<Struct>] US0 =
    | US0_0
    | US0_1 of f1_0 : string
and Mut1 = {mutable l0 : int32; mutable l1 : US0}
let rec method0 () : struct (string * string * string * bool) =
    let v0 : string = ""
    let v1 : obj = v0
    struct (v0, v0, v0, true)
and method1 (v0 : Types.clap.parser.ArgMatches) : Types.clap.parser.ArgMatches =
    v0
and method2 () : string =
    let v0 : string = "rs-path"
    v0
and method3 (v0 : Types.Ref<Types.std.string.String>) : Types.Ref<Types.std.string.String> =
    v0
and method4 (v0 : Types.std.string.String) : Types.std.string.String =
    v0
and closure1 () (v0 : Types.Ref<Types.std.string.String>) : Types.std.string.String =
    let v1 : Types.Ref<Types.std.string.String> = method3(v0)
    let v2 : string = "v1.to_string()"
    let v3 : Types.std.string.String = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "rs-path"
    let v5 : string = "--" + v4 + "="
    let v6 : string = "($0).to_string()"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = ""
    let v9 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v6
    let v10 : Types.std.string.String = method4(v3)
    let v11 : string = "v10.replace(&v7, &v9)"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr () v11
    v12
and method5 (v0 : string) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "($0).to_string()"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method6 (v0 : Types.std.path.PathBuf) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method8 (v0 : int32, v1 : string) : string =
    let v2 : int32 = String.length v1
    let v3 : bool = v2 < v0
    if v3 then
        let v4 : string = $"0{v1}"
        method8(v0, v4)
    else
        v1
and method9 (v0 : uint8) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method10 (v0 : (Types.EmitType<Types.std.string.String> [])) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "core::ops::Deref::deref($0)"
    let v2 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v0 v1
    let v3 : string = "&***$0"
    let v4 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v2 v3
    let v5 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v4 v3
    let v6 : string = "format!(\"{:?}\", $0)"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : Types.EmitType<Types.std.string.String> = v7 |> unbox<Types.EmitType<Types.std.string.String>>
    v8
and method11 (v0 : string) : string =
    v0
and method12 () : string =
    let v0 : string = "$1=$2"
    v0
and method13 () : string =
    let v0 : string = "[$1]"
    v0
and method14 () : string =
    let v0 : string = "\""
    v0
and method15 () : string =
    let v0 : string = " "
    v0
and method16 () : string =
    let v0 : string = "666666"
    v0
and method17 () : string =
    let v0 : string = "385779"
    v0
and method7 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> post_fsx_rs_build ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method16()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method16()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method16()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method19 () : string =
    let v0 : string = "881749"
    v0
and method18 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> read_lines ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method19()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method19()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method19()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method20 (v0 : Types.std.string.String) : Types.EmitType<Types.std.string.String> =
    let v1 : Types.EmitType<Types.std.string.String> = v0 |> unbox<Types.EmitType<Types.std.string.String>>
    v1
and method22 (v0 : int32) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method23 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    ()
and closure2 (v0 : int64, v1 : Mut0) (v2 : Types.Vec<uint8>) : Result<bool, Types.std.io.Error> =
    let v3 : string = "line len"
    let v4 : Types.EmitType<Types.std.string.String> = method5(v3)
    let v5 : string = "($0).len().try_into().unwrap()"
    let v6 : int32 = Fable.Core.Rust.emitExpr v2 v5
    let v7 : Types.EmitType<Types.std.string.String> = method22(v6)
    let v8 : (Types.EmitType<Types.std.string.String> []) = [|v4; v7|]
    method23(v0, v8)
    let v9 : string = "v2.to_owned()"
    let v10 : Types.Vec<uint8> = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "std::string::String::from_utf8(v10).unwrap()"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr () v11
    let v13 : UH0 = v1.l0
    let v14 : UH0 = UH0_0(v12, v13)
    v1.l0 <- v14
    let v15 : Result<bool, Types.std.io.Error> = Ok true
    v15
and method21 (v0 : int64, v1 : Mut0) : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) =
    closure2(v0, v1)
and method24 (v0 : UH0, v1 : UH0) : UH0 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH0 = UH0_0(v2, v1)
        method24(v3, v4)
    | UH0_1 -> (* Nil *)
        v1
and method25 (v0 : UH0, v1 : UH1) : UH1 =
    match v0 with
    | UH0_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = method25(v3, v1)
        let v5 : obj = v2
        let v6 : string = "fable_library_rust::String_::fromStr($0)"
        let v7 : string = Fable.Core.Rust.emitExpr v5 v6
        UH1_0(v7, v4)
    | UH0_1 -> (* Nil *)
        v1
and method26 (v0 : UH1, v1 : int32) : int32 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : int32 = v1 + 1
        method26(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method27 (v0 : int64, v1 : UH1, v2 : int32, v3 : UH1) : struct (int32 * UH1) =
    match v1 with
    | UH1_0(v4, v5) -> (* Cons *)
        let v6 : string = "/node_modules/"
        let v7 : Types.Ref<string> = v6 |> unbox
        let v8 : Types.Ref<string> = v4 |> unbox
        let v9 : string = "($1).contains(&*$0)"
        let v10 : bool = Fable.Core.Rust.emitExpr struct (v7, v8) v9
        let v15 : bool =
            if v10 then
                let v11 : string = ".cs"
                let v12 : Types.Ref<string> = v11 |> unbox
                let v13 : Types.Ref<string> = v4 |> unbox
                let v14 : bool = Fable.Core.Rust.emitExpr struct (v12, v13) v9
                v14
            else
                false
        let struct (v30 : int32, v31 : UH1) =
            if v15 then
                let v16 : string = "found line. removing."
                let v17 : Types.EmitType<Types.std.string.String> = method5(v16)
                let v18 : string = " line"
                let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
                let v20 : Types.EmitType<Types.std.string.String> = method5(v4)
                let v21 : (Types.EmitType<Types.std.string.String> []) = [|v17; v19; v20|]
                method7(v0, v21)
                struct (1, v3)
            else
                let v22 : bool = 0 = v2
                if v22 then
                    let v23 : UH1 = UH1_0(v4, v3)
                    struct (0, v23)
                else
                    let v24 : bool = 2 = v2
                    if v24 then
                        struct (0, v3)
                    else
                        let v25 : int32 = v2 + 1
                        struct (v25, v3)
        method27(v0, v5, v30, v31)
    | UH1_1 -> (* Nil *)
        struct (v2, v3)
and method28 (v0 : UH1, v1 : UH1) : UH1 =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : UH1 = UH1_0(v2, v1)
        method28(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method29 (v0 : UH1, v1 : string) : string =
    match v0 with
    | UH1_0(v2, v3) -> (* Cons *)
        let v4 : string = v1 + v2
        method29(v3, v4)
    | UH1_1 -> (* Nil *)
        v1
and method30 () : string =
    let v0 : string = "spi-path"
    v0
and closure3 () (v0 : Types.Ref<Types.std.string.String>) : Types.std.string.String =
    let v1 : Types.Ref<Types.std.string.String> = method3(v0)
    let v2 : string = "v1.to_string()"
    let v3 : Types.std.string.String = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "spi-path"
    let v5 : string = "--" + v4 + "="
    let v6 : string = "($0).to_string()"
    let v7 : Types.std.string.String = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = ""
    let v9 : Types.std.string.String = Fable.Core.Rust.emitExpr v8 v6
    let v10 : Types.std.string.String = method4(v3)
    let v11 : string = "v10.replace(&v7, &v9)"
    let v12 : Types.std.string.String = Fable.Core.Rust.emitExpr () v11
    v12
and method31 () : string =
    let v0 : string = "fsx-path"
    v0
and closure4 () (v0 : Types.Ref<Types.std.string.String>) : Types.std.path.PathBuf =
    let v1 : string = "std::path::PathBuf::from($0)"
    let v2 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v0 v1
    v2
and method33 () : string =
    let v0 : string = "de884c"
    v0
and method32 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> spi_to_fsx ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method33()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method33()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method33()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and closure5 () (v0 : Types.Ref<Types.std.path.Path>) : Types.std.path.PathBuf =
    let v1 : string = "package.spiproj"
    let v2 : string = "$1.join($0.as_str())"
    let v3 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr struct (v1, v0) v2
    v3
and closure6 () (v0 : Types.Ref<Types.std.path.PathBuf>) : bool =
    let v1 : string = "std::path::Path::exists($0)"
    let v2 : bool = Fable.Core.Rust.emitExpr v0 v1
    v2
and method35 () : string =
    let v0 : string = "e36a62"
    v0
and method34 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> spiproj_open ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method35()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method35()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method35()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method37 () : string =
    let v0 : string = "fcfb1b"
    v0
and method36 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> zmq_request ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method37()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method37()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method37()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method39 () : string =
    let v0 : string = "98d5ef"
    v0
and method38 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> spi_build_file ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method39()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method39()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method39()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method40 (v0 : Types.std.time.SystemTime) : Types.EmitType<Types.std.string.String> =
    let v1 : string = "format!(\"{:?}\", $0)"
    let v2 : Types.std.string.String = Fable.Core.Rust.emitExpr v0 v1
    let v3 : Types.EmitType<Types.std.string.String> = v2 |> unbox<Types.EmitType<Types.std.string.String>>
    v3
and method42 () : string =
    let v0 : string = "387957"
    v0
and method41 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> wait_file_change ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method42()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method42()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method42()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and method43 (v0 : int32, v1 : Mut1) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method45 () : string =
    let v0 : string = "387958"
    v0
and method44 (v0 : int64, v1 : (Types.EmitType<Types.std.string.String> [])) : unit =
    let v2 : string = "chrono::Utc::now()"
    let v3 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v2
    let v4 : string = "($0).timestamp()"
    let v5 : int64 = Fable.Core.Rust.emitExpr v3 v4
    let v6 : int64 = v5 - v0
    let v7 : string = (v6).ToString ()
    let v8 : int32 = 6
    let v9 : string = method8(v8, v7)
    let v10 : string = "rand::random::<u8>()"
    let v11 : uint8 = Fable.Core.Rust.emitExpr () v10
    let v12 : string = "timestamp"
    let v13 : Types.EmitType<Types.std.string.String> = method5(v12)
    let v14 : Types.EmitType<Types.std.string.String> = method5(v9)
    let v15 : string = "run_id"
    let v16 : Types.EmitType<Types.std.string.String> = method5(v15)
    let v17 : Types.EmitType<Types.std.string.String> = method9(v11)
    let v18 : string = "log_level"
    let v19 : Types.EmitType<Types.std.string.String> = method5(v18)
    let v20 : string = "Debug"
    let v21 : Types.EmitType<Types.std.string.String> = method5(v20)
    let v22 : (Types.EmitType<Types.std.string.String> []) = [|v13; v14; v16; v17; v19; v21|]
    let v23 : Types.EmitType<Types.std.string.String> = method10(v22)
    let v24 : string = "> app ()"
    let v25 : Types.EmitType<Types.std.string.String> = method5(v24)
    let v26 : (Types.EmitType<Types.std.string.String> []) = [|v25|]
    let v27 : string = "core::ops::Deref::deref($0)"
    let v28 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v26 v27
    let v29 : string = "&***$0"
    let v30 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v28 v29
    let v31 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v30 v29
    let v32 : string = "format!(\"{:?}\", $0)"
    let v33 : Types.std.string.String = Fable.Core.Rust.emitExpr v31 v32
    let v34 : Types.EmitType<Types.std.string.String> = v33 |> unbox<Types.EmitType<Types.std.string.String>>
    let v35 : string = "format!(\"{}\", $0)"
    let v36 : Types.std.string.String = Fable.Core.Rust.emitExpr v34 v35
    let v37 : string = (v36).ToString ()
    let v38 : string = "\"([^\"]+)\", \"([^\"]+)\""
    let v39 : string = $"r#\"{v38}\"#"
    let v40 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v39
    let v41 : string = "regex::RegexBuilder::new($0)"
    let v42 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v40 v41
    let v43 : string = "$0.build().unwrap()"
    let v44 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v42 v43
    let v45 : string = method11(v37)
    let v46 : string = "v45.as_str()"
    let v47 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v46
    let v48 : string = method12()
    let v49 : string = "v48.as_str()"
    let v50 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v49
    let v51 : string = "$0.replace_all(&$1, $2).to_string()"
    let v52 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v44, v47, v50) v51
    let v53 : obj = v52
    let v54 : string = "fable_library_rust::String_::fromStr($0)"
    let v55 : string = Fable.Core.Rust.emitExpr v53 v54
    let v56 : string = "\\[\"(.*?)\"\\]"
    let v57 : string = $"r#\"{v56}\"#"
    let v58 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v57
    let v59 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v58 v41
    let v60 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v59 v43
    let v61 : string = method11(v55)
    let v62 : string = "v61.as_str()"
    let v63 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v62
    let v64 : string = method13()
    let v65 : string = "v64.as_str()"
    let v66 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v65
    let v67 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v60, v63, v66) v51
    let v68 : obj = v67
    let v69 : string = Fable.Core.Rust.emitExpr v68 v54
    let v70 : string = "\\\\\""
    let v71 : string = $"r#\"{v70}\"#"
    let v72 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v71
    let v73 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v72 v41
    let v74 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v73 v43
    let v75 : string = method11(v69)
    let v76 : string = "v75.as_str()"
    let v77 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v76
    let v78 : string = method14()
    let v79 : string = "v78.as_str()"
    let v80 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v79
    let v81 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v74, v77, v80) v51
    let v82 : obj = v81
    let v83 : string = Fable.Core.Rust.emitExpr v82 v54
    let v84 : string = ", "
    let v85 : string = $"r#\"{v84}\"#"
    let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
    let v87 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v86 v41
    let v88 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v87 v43
    let v89 : string = method11(v83)
    let v90 : string = "v89.as_str()"
    let v91 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v90
    let v92 : string = method15()
    let v93 : string = "v92.as_str()"
    let v94 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v93
    let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v88, v91, v94) v51
    let v96 : obj = v95
    let v97 : string = Fable.Core.Rust.emitExpr v96 v54
    let v98 : Types.EmitType<Types.std.string.String> = method5(v97)
    let v99 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v1 v27
    let v100 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v99 v29
    let v101 : Types.Ref<obj> = Fable.Core.Rust.emitExpr v100 v29
    let v102 : Types.std.string.String = Fable.Core.Rust.emitExpr v101 v32
    let v103 : Types.EmitType<Types.std.string.String> = v102 |> unbox<Types.EmitType<Types.std.string.String>>
    let v104 : Types.std.string.String = Fable.Core.Rust.emitExpr v103 v35
    let v105 : string = (v104).ToString ()
    let v106 : string = $"r#\"{v38}\"#"
    let v107 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v106
    let v108 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v107 v41
    let v109 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v108 v43
    let v110 : string = method11(v105)
    let v111 : string = "v110.as_str()"
    let v112 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v111
    let v113 : string = method12()
    let v114 : string = "v113.as_str()"
    let v115 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v114
    let v116 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v109, v112, v115) v51
    let v117 : obj = v116
    let v118 : string = Fable.Core.Rust.emitExpr v117 v54
    let v119 : string = $"r#\"{v56}\"#"
    let v120 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v119
    let v121 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v120 v41
    let v122 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v121 v43
    let v123 : string = method11(v118)
    let v124 : string = "v123.as_str()"
    let v125 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v124
    let v126 : string = method13()
    let v127 : string = "v126.as_str()"
    let v128 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v127
    let v129 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v122, v125, v128) v51
    let v130 : obj = v129
    let v131 : string = Fable.Core.Rust.emitExpr v130 v54
    let v132 : string = $"r#\"{v70}\"#"
    let v133 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v132
    let v134 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v133 v41
    let v135 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v134 v43
    let v136 : string = method11(v131)
    let v137 : string = "v136.as_str()"
    let v138 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v137
    let v139 : string = method14()
    let v140 : string = "v139.as_str()"
    let v141 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v140
    let v142 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v135, v138, v141) v51
    let v143 : obj = v142
    let v144 : string = Fable.Core.Rust.emitExpr v143 v54
    let v145 : string = $"r#\"{v84}\"#"
    let v146 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v145
    let v147 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v146 v41
    let v148 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v147 v43
    let v149 : string = method11(v144)
    let v150 : string = "v149.as_str()"
    let v151 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v150
    let v152 : string = method15()
    let v153 : string = "v152.as_str()"
    let v154 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v153
    let v155 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v148, v151, v154) v51
    let v156 : obj = v155
    let v157 : string = Fable.Core.Rust.emitExpr v156 v54
    let v158 : Types.EmitType<Types.std.string.String> = method5(v157)
    let v159 : Types.std.string.String = Fable.Core.Rust.emitExpr v23 v35
    let v160 : string = (v159).ToString ()
    let v161 : string = $"r#\"{v38}\"#"
    let v162 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v161
    let v163 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v162 v41
    let v164 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v163 v43
    let v165 : string = method11(v160)
    let v166 : string = "v165.as_str()"
    let v167 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v166
    let v168 : string = method12()
    let v169 : string = "v168.as_str()"
    let v170 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v169
    let v171 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v164, v167, v170) v51
    let v172 : obj = v171
    let v173 : string = Fable.Core.Rust.emitExpr v172 v54
    let v174 : string = $"r#\"{v56}\"#"
    let v175 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v174
    let v176 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v175 v41
    let v177 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v176 v43
    let v178 : string = method11(v173)
    let v179 : string = "v178.as_str()"
    let v180 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v179
    let v181 : string = method13()
    let v182 : string = "v181.as_str()"
    let v183 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v182
    let v184 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v177, v180, v183) v51
    let v185 : obj = v184
    let v186 : string = Fable.Core.Rust.emitExpr v185 v54
    let v187 : string = $"r#\"{v70}\"#"
    let v188 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v187
    let v189 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v188 v41
    let v190 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v189 v43
    let v191 : string = method11(v186)
    let v192 : string = "v191.as_str()"
    let v193 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v192
    let v194 : string = method14()
    let v195 : string = "v194.as_str()"
    let v196 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v195
    let v197 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v190, v193, v196) v51
    let v198 : obj = v197
    let v199 : string = Fable.Core.Rust.emitExpr v198 v54
    let v200 : string = $"r#\"{v84}\"#"
    let v201 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v200
    let v202 : Types.regex.RegexBuilder = Fable.Core.Rust.emitExpr v201 v41
    let v203 : Types.Ref<Types.regex.Regex> = Fable.Core.Rust.emitExpr v202 v43
    let v204 : string = method11(v199)
    let v205 : string = "v204.as_str()"
    let v206 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v205
    let v207 : string = method15()
    let v208 : string = "v207.as_str()"
    let v209 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v208
    let v210 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v203, v206, v209) v51
    let v211 : obj = v210
    let v212 : string = Fable.Core.Rust.emitExpr v211 v54
    let v213 : Types.EmitType<Types.std.string.String> = method5(v212)
    let v214 : string = method45()
    let v215 : string = "v214.as_str()"
    let v216 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v215
    let v217 : unativeint = unativeint 0
    let v218 : unativeint = unativeint 2
    let v219 : string = "&$0[$1..$2]"
    let v220 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v216, v217, v218) v219
    let v221 : obj = v220
    let v222 : string = Fable.Core.Rust.emitExpr v221 v54
    let v223 : string = "u8::from_str_radix($0, 16).unwrap()"
    let v224 : uint8 = Fable.Core.Rust.emitExpr v222 v223
    let v225 : string = method45()
    let v226 : string = "v225.as_str()"
    let v227 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v226
    let v228 : unativeint = unativeint 2
    let v229 : unativeint = unativeint 4
    let v230 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v227, v228, v229) v219
    let v231 : obj = v230
    let v232 : string = Fable.Core.Rust.emitExpr v231 v54
    let v233 : uint8 = Fable.Core.Rust.emitExpr v232 v223
    let v234 : string = method45()
    let v235 : string = "v234.as_str()"
    let v236 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v235
    let v237 : unativeint = unativeint 4
    let v238 : unativeint = unativeint 6
    let v239 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v236, v237, v238) v219
    let v240 : obj = v239
    let v241 : string = Fable.Core.Rust.emitExpr v240 v54
    let v242 : uint8 = Fable.Core.Rust.emitExpr v241 v223
    let v243 : string = "colored::Colorize::truecolor(&*$0.to_string(), $1, $2, $3)"
    let v244 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v158, v224, v233, v242) v243
    let v245 : Types.std.string.String = Fable.Core.Rust.emitExpr v244 v35
    let v246 : string = method17()
    let v247 : string = "v246.as_str()"
    let v248 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v247
    let v249 : unativeint = unativeint 0
    let v250 : unativeint = unativeint 2
    let v251 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v248, v249, v250) v219
    let v252 : obj = v251
    let v253 : string = Fable.Core.Rust.emitExpr v252 v54
    let v254 : uint8 = Fable.Core.Rust.emitExpr v253 v223
    let v255 : string = method17()
    let v256 : string = "v255.as_str()"
    let v257 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v256
    let v258 : unativeint = unativeint 2
    let v259 : unativeint = unativeint 4
    let v260 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v257, v258, v259) v219
    let v261 : obj = v260
    let v262 : string = Fable.Core.Rust.emitExpr v261 v54
    let v263 : uint8 = Fable.Core.Rust.emitExpr v262 v223
    let v264 : string = method17()
    let v265 : string = "v264.as_str()"
    let v266 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v265
    let v267 : unativeint = unativeint 4
    let v268 : unativeint = unativeint 6
    let v269 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v266, v267, v268) v219
    let v270 : obj = v269
    let v271 : string = Fable.Core.Rust.emitExpr v270 v54
    let v272 : uint8 = Fable.Core.Rust.emitExpr v271 v223
    let v273 : Types.colored.ColoredString = Fable.Core.Rust.emitExpr struct (v213, v254, v263, v272) v243
    let v274 : Types.std.string.String = Fable.Core.Rust.emitExpr v273 v35
    let v275 : string = $"{v98} {v245} {v274}"
    System.Console.WriteLine v275
    ()
and closure0 () () : int32 =
    let struct (v0 : string, v1 : string, v2 : string, v3 : bool) = method0()
    let v4 : string = "chrono::Utc::now()"
    let v5 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
    let v6 : string = "($0).timestamp()"
    let v7 : int64 = Fable.Core.Rust.emitExpr v5 v6
    let v8 : string = "app1"
    let v9 : string = $"r#\"{v8}\"#"
    let v10 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v9
    let v11 : string = "clap::Command::new(v10)"
    let v12 : string = ".version(env!(\"CARGO_PKG_VERSION\"))"
    let v13 : string = v11 + v12
    let v14 : string = ".propagate_version(true)"
    let v15 : string = v13 + v14
    let v16 : string = ".subcommand_required(false)"
    let v17 : string = v15 + v16
    let v18 : string = ".about(\"command about\")"
    let v19 : string = v17 + v18
    let v20 : string = ".arg_required_else_help(true)"
    let v21 : string = v19 + v20
    let v22 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v21
    let v23 : string = "PostFsxRsBuild"
    let v24 : string = $"r#\"{v23}\"#"
    let v25 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v24
    let v26 : string = "clap::Command::new(v25)"
    let v27 : string = v26 + v12
    let v28 : string = v27 + v14
    let v29 : string = v28 + v16
    let v30 : string = v29 + v18
    let v31 : string = v30 + v20
    let v32 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v31
    let v33 : string = "rs-path"
    let v34 : string = $"r#\"{v33}\"#"
    let v35 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v34
    let v36 : string = "clap::Arg::new(v35)"
    let v37 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v36
    let v38 : string = "v32.arg(v37)"
    let v39 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v38
    let v40 : string = "v22.subcommand(v39)"
    let v41 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v40
    let v42 : string = "SpiFsxBuild"
    let v43 : string = $"r#\"{v42}\"#"
    let v44 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v43
    let v45 : string = "clap::Command::new(v44)"
    let v46 : string = v45 + v12
    let v47 : string = v46 + v14
    let v48 : string = v47 + v16
    let v49 : string = v48 + v18
    let v50 : string = v49 + v20
    let v51 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v50
    let v52 : string = "spi-path"
    let v53 : string = $"r#\"{v52}\"#"
    let v54 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v53
    let v55 : string = "clap::Arg::new(v54)"
    let v56 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v55
    let v57 : string = "v51.arg(v56)"
    let v58 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v57
    let v59 : string = "fsx-path"
    let v60 : string = $"r#\"{v59}\"#"
    let v61 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v60
    let v62 : string = "clap::Arg::new(v61)"
    let v63 : Types.clap.builder.Arg = Fable.Core.Rust.emitExpr () v62
    let v64 : string = "v58.arg(v63)"
    let v65 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v64
    let v66 : string = "v41.subcommand(v65)"
    let v67 : Types.clap.builder.Command = Fable.Core.Rust.emitExpr () v66
    let v68 : string = "v67.get_matches()"
    let v69 : Types.clap.parser.ArgMatches = Fable.Core.Rust.emitExpr () v68
    let v70 : Types.clap.parser.ArgMatches = method1(v69)
    let v71 : string = "std::sync::Arc::new(v70)"
    let v72 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr () v71
    let v73 : string = "v72.subcommand().map(|(name, matches)| (name, std::sync::Arc::new(matches.clone())))"
    let v74 : Option<struct (Types.Ref<Types.Str> * Types.std.sync.Arc<Types.clap.parser.ArgMatches>)> = Fable.Core.Rust.emitExpr () v73
    let v75 : string = "v74.as_ref().unwrap()"
    let v76 : Types.Ref<struct (Types.Ref<Types.Str> * Types.std.sync.Arc<Types.clap.parser.ArgMatches>)> = Fable.Core.Rust.emitExpr () v75
    let v77 : string = "v76.0"
    let v78 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v77
    let v79 : string = "std::sync::Arc::clone(&v76.1)"
    let v80 : Types.std.sync.Arc<Types.clap.parser.ArgMatches> = Fable.Core.Rust.emitExpr () v79
    let v81 : string = "fable_library_rust::String_::fromStr($0)"
    let v82 : string = Fable.Core.Rust.emitExpr v78 v81
    let v83 : bool = "PostFsxRsBuild" = v82
    if v83 then
        let v84 : string = method2()
        let v85 : string = "v84.as_str()"
        let v86 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v85
        let v87 : string = "v80.get_one::<String>(v86)"
        let v88 : Option<Types.Ref<Types.std.string.String>> = Fable.Core.Rust.emitExpr () v87
        let v89 : (Types.Ref<Types.std.string.String> -> Types.std.string.String) = closure1()
        let v90 : string = "v88.map(v89)"
        let v91 : Option<Types.std.string.String> = Fable.Core.Rust.emitExpr () v90
        let v92 : string = "get_clap_one: "
        let v93 : string = v92 + v33
        let v94 : string = "($0).to_string()"
        let v95 : Types.std.string.String = Fable.Core.Rust.emitExpr v93 v94
        let v96 : string = "v91.unwrap_or(v95)"
        let v97 : Types.std.string.String = Fable.Core.Rust.emitExpr () v96
        let v98 : string = "std::path::PathBuf::from($0)"
        let v99 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v97 v98
        let v100 : string = "($0).canonicalize()"
        let v101 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v99 v100
        let v102 : string = "($0).as_ref().unwrap().to_path_buf()"
        let v103 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v101 v102
        let struct (v104 : string, v105 : string, v106 : string, v107 : bool) = method0()
        let v108 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
        let v109 : int64 = Fable.Core.Rust.emitExpr v108 v6
        let v110 : string = "rs_path"
        let v111 : Types.EmitType<Types.std.string.String> = method5(v110)
        let v112 : Types.EmitType<Types.std.string.String> = method6(v103)
        let v113 : (Types.EmitType<Types.std.string.String> []) = [|v111; v112|]
        method7(v109, v113)
        let struct (v114 : string, v115 : string, v116 : string, v117 : bool) = method0()
        let v118 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
        let v119 : int64 = Fable.Core.Rust.emitExpr v118 v6
        let v120 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v103 v100
        let v121 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v120 v102
        let v122 : string = "path_clean"
        let v123 : Types.EmitType<Types.std.string.String> = method5(v122)
        let v124 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
        let v125 : string = Fable.Core.Rust.emitExpr v121 v124
        let v126 : Types.EmitType<Types.std.string.String> = method5(v125)
        let v127 : (Types.EmitType<Types.std.string.String> []) = [|v123; v126|]
        method18(v119, v127)
        let v128 : string = "std::fs::File::open($0)"
        let v129 : Result<Types.std.fs.File, Types.std.io.Error> = Fable.Core.Rust.emitExpr v121 v128
        let v130 : string = "$0.unwrap()"
        let v131 : Types.Ref<Types.std.fs.File> = Fable.Core.Rust.emitExpr v129 v130
        let v132 : string = "std::cell::RefCell::new(linereader::LineReader::new($0))"
        let v133 : Types.std.cell.RefCell<Types.linereader.LineReader<Types.Ref<Types.std.fs.File>>> = Fable.Core.Rust.emitExpr v131 v132
        let v134 : string = "reader"
        let v135 : Types.EmitType<Types.std.string.String> = method5(v134)
        let v136 : string = "format!(\"{:?}\", $0)"
        let v137 : Types.std.string.String = Fable.Core.Rust.emitExpr v133 v136
        let v138 : Types.EmitType<Types.std.string.String> = method20(v137)
        let v139 : (Types.EmitType<Types.std.string.String> []) = [|v135; v138|]
        method18(v119, v139)
        let v140 : UH0 = UH0_1
        let v141 : Mut0 = {l0 = v140} : Mut0
        let v142 : (Types.Vec<uint8> -> Result<bool, Types.std.io.Error>) = method21(v119, v141)
        let v143 : string = "($0).borrow_mut().for_each(move |x| $1(x.to_vec()))"
        let v144 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v133, v142) v143
        let v145 : string = "*(($0).as_ref()).unwrap()"
        Fable.Core.Rust.emitExpr v144 v145
        let v146 : UH0 = v141.l0
        let v147 : UH0 = UH0_1
        let v148 : UH0 = method24(v146, v147)
        let v149 : UH1 = UH1_1
        let v150 : UH1 = method25(v148, v149)
        let v151 : string = "lines len"
        let v152 : Types.EmitType<Types.std.string.String> = method5(v151)
        let v153 : int32 = 0
        let v154 : int32 = method26(v150, v153)
        let v155 : Types.EmitType<Types.std.string.String> = method22(v154)
        let v156 : (Types.EmitType<Types.std.string.String> []) = [|v152; v155|]
        method18(v119, v156)
        let v157 : int32 = 0
        let v158 : UH1 = UH1_1
        let struct (v159 : int32, v160 : UH1) = method27(v109, v150, v157, v158)
        let v161 : UH1 = UH1_1
        let v162 : UH1 = method28(v160, v161)
        let v163 : string = ""
        let v164 : string = method29(v162, v163)
        let v165 : string = "text len"
        let v166 : Types.EmitType<Types.std.string.String> = method5(v165)
        let v167 : string = "($0).len().try_into().unwrap()"
        let v168 : int32 = Fable.Core.Rust.emitExpr v164 v167
        let v169 : Types.EmitType<Types.std.string.String> = method22(v168)
        let v170 : (Types.EmitType<Types.std.string.String> []) = [|v166; v169|]
        method7(v109, v170)
        let v171 : string = "std::fs::write($0, $1.as_str())"
        let v172 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v103, v164) v171
        Fable.Core.Rust.emitExpr v172 v145
        let v173 : string = "> fs_write rs_path_clean text; ok"
        let v174 : Types.EmitType<Types.std.string.String> = method5(v173)
        let v175 : (Types.EmitType<Types.std.string.String> []) = [|v174|]
        method7(v109, v175)
    else
        let v176 : bool = "SpiFsxBuild" = v82
        if v176 then
            let v177 : string = method30()
            let v178 : string = "v177.as_str()"
            let v179 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v178
            let v180 : string = "v80.get_one::<String>(v179)"
            let v181 : Option<Types.Ref<Types.std.string.String>> = Fable.Core.Rust.emitExpr () v180
            let v182 : (Types.Ref<Types.std.string.String> -> Types.std.string.String) = closure3()
            let v183 : string = "v181.map(v182)"
            let v184 : Option<Types.std.string.String> = Fable.Core.Rust.emitExpr () v183
            let v185 : string = "get_clap_one: "
            let v186 : string = v185 + v52
            let v187 : string = "($0).to_string()"
            let v188 : Types.std.string.String = Fable.Core.Rust.emitExpr v186 v187
            let v189 : string = "v184.unwrap_or(v188)"
            let v190 : Types.std.string.String = Fable.Core.Rust.emitExpr () v189
            let v191 : string = "std::path::PathBuf::from($0)"
            let v192 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v190 v191
            let v193 : string = "($0).canonicalize()"
            let v194 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v192 v193
            let v195 : string = "($0).as_ref().unwrap().to_path_buf()"
            let v196 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v194 v195
            let v197 : string = method31()
            let v198 : string = "v197.as_str()"
            let v199 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr () v198
            let v200 : string = "v80.get_one::<String>(v199)"
            let v201 : Option<Types.Ref<Types.std.string.String>> = Fable.Core.Rust.emitExpr () v200
            let v202 : (Types.Ref<Types.std.string.String> -> Types.std.path.PathBuf) = closure4()
            let v203 : string = "v201.map(v202)"
            let v204 : Option<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr () v203
            let struct (v205 : string, v206 : string, v207 : string, v208 : bool) = method0()
            let v209 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v210 : int64 = Fable.Core.Rust.emitExpr v209 v6
            let v211 : string = "pwd"
            let v212 : Types.EmitType<Types.std.string.String> = method5(v211)
            let v213 : string = "std::env::current_dir()"
            let v214 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr () v213
            let v215 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v214 v195
            let v216 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v215 v193
            let v217 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v216 v195
            let v218 : string = "fable_library_rust::String_::fromStr(&format!(\"{}\", $0.display()))"
            let v219 : string = Fable.Core.Rust.emitExpr v217 v218
            let v220 : Types.EmitType<Types.std.string.String> = method5(v219)
            let v221 : string = "spi_path"
            let v222 : Types.EmitType<Types.std.string.String> = method5(v221)
            let v223 : string = Fable.Core.Rust.emitExpr v196 v218
            let v224 : Types.EmitType<Types.std.string.String> = method5(v223)
            let v225 : string = "new_fsx_path"
            let v226 : Types.EmitType<Types.std.string.String> = method5(v225)
            let v227 : string = "format!(\"{:?}\", $0)"
            let v228 : Types.std.string.String = Fable.Core.Rust.emitExpr v204 v227
            let v229 : Types.EmitType<Types.std.string.String> = method20(v228)
            let v230 : (Types.EmitType<Types.std.string.String> []) = [|v212; v220; v222; v224; v226; v229|]
            method32(v210, v230)
            let v231 : string = "($0).parent()"
            let v232 : Option<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr v196 v231
            let v233 : string = "$0.unwrap()"
            let v234 : Types.Ref<Types.std.path.Path> = Fable.Core.Rust.emitExpr v232 v233
            let v235 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v234 v191
            let v236 : string = "src_path"
            let v237 : Types.EmitType<Types.std.string.String> = method5(v236)
            let v238 : string = Fable.Core.Rust.emitExpr v235 v218
            let v239 : Types.EmitType<Types.std.string.String> = method5(v238)
            let v240 : (Types.EmitType<Types.std.string.String> []) = [|v237; v239|]
            method32(v210, v240)
            let v241 : string = "$0.ancestors()"
            let v242 : Types.Ref<Types.std.path.Ancestors> = Fable.Core.Rust.emitExpr v235 v241
            let v243 : unativeint = unativeint 10
            let v244 : string = "$1.take($0)"
            let v245 : Types.std.iter.Iterator<Types.Ref<Types.std.path.Path>> = Fable.Core.Rust.emitExpr struct (v243, v242) v244
            let v246 : (Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf) = closure5()
            let v247 : Types.Ref<(Types.Ref<Types.std.path.Path> -> Types.std.path.PathBuf)> = v246 |> unbox
            let v248 : string = "$1.into_iter().map($0)"
            let v249 : Types.std.iter.Iterator<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v247, v245) v248
            let v250 : (Types.Ref<Types.std.path.PathBuf> -> bool) = closure6()
            let v251 : Types.Ref<(Types.Ref<Types.std.path.PathBuf> -> bool)> = v250 |> unbox
            let v252 : string = "$1.into_iter().find($0)"
            let v253 : Option<Types.std.path.PathBuf> = Fable.Core.Rust.emitExpr struct (v251, v249) v252
            let v254 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v253 v195
            let v255 : string = "spiproj_path"
            let v256 : Types.EmitType<Types.std.string.String> = method5(v255)
            let v257 : string = Fable.Core.Rust.emitExpr v254 v218
            let v258 : Types.EmitType<Types.std.string.String> = method5(v257)
            let v259 : (Types.EmitType<Types.std.string.String> []) = [|v256; v258|]
            method32(v210, v259)
            let v260 : string = "($0).to_str()"
            let v261 : Option<Types.Ref<Types.Str>> = Fable.Core.Rust.emitExpr v196 v260
            let v262 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr v261 v233
            let v263 : string = ".spir"
            let v264 : Types.Ref<string> = v263 |> unbox
            let v265 : string = ".spi"
            let v266 : Types.Ref<string> = v265 |> unbox
            let v267 : string = "&$2.replace(&*$0, &$1)"
            let v268 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v264, v266, v262) v267
            let v269 : Types.Ref<string> = v265 |> unbox
            let v270 : string = ".fsx"
            let v271 : Types.Ref<string> = v270 |> unbox
            let v272 : Types.Ref<Types.Str> = Fable.Core.Rust.emitExpr struct (v269, v271, v268) v267
            let v273 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v272 v191
            let v274 : Result<Types.std.path.PathBuf, Types.std.io.Error> = Fable.Core.Rust.emitExpr v273 v193
            let v275 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr v274 v195
            let v276 : string = "fsx_path"
            let v277 : Types.EmitType<Types.std.string.String> = method5(v276)
            let v278 : string = Fable.Core.Rust.emitExpr v275 v218
            let v279 : Types.EmitType<Types.std.string.String> = method5(v278)
            let v280 : (Types.EmitType<Types.std.string.String> []) = [|v277; v279|]
            method32(v210, v280)
            let v281 : string = ""
            let v282 : string = "std::fs::write($0, $1.as_str())"
            let v283 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v275, v281) v282
            let v284 : string = "*(($0).as_ref()).unwrap()"
            Fable.Core.Rust.emitExpr v283 v284
            let v285 : string = "> fs_write fsx_path \"\"; ok"
            let v286 : Types.EmitType<Types.std.string.String> = method5(v285)
            let v287 : (Types.EmitType<Types.std.string.String> []) = [|v286|]
            method32(v210, v287)
            let v288 : string = "std::fs::read_to_string($0)"
            let v289 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v254 v288
            let v290 : string = "($0).as_ref().unwrap().to_string()"
            let v291 : Types.std.string.String = Fable.Core.Rust.emitExpr v289 v290
            let struct (v292 : string, v293 : string, v294 : string, v295 : bool) = method0()
            let v296 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v297 : int64 = Fable.Core.Rust.emitExpr v296 v6
            let v298 : Types.EmitType<Types.std.string.String> = method5(v255)
            let v299 : string = Fable.Core.Rust.emitExpr v254 v218
            let v300 : Types.EmitType<Types.std.string.String> = method5(v299)
            let v301 : string = "spiproj_text len"
            let v302 : Types.EmitType<Types.std.string.String> = method5(v301)
            let v303 : string = "($0).len().try_into().unwrap()"
            let v304 : int32 = Fable.Core.Rust.emitExpr v291 v303
            let v305 : Types.EmitType<Types.std.string.String> = method22(v304)
            let v306 : (Types.EmitType<Types.std.string.String> []) = [|v298; v300; v302; v305|]
            method34(v297, v306)
            let v307 : string = "{"
            let v308 : string = "\"ProjectFileOpen\": {"
            let v309 : string = v307 + v308
            let v310 : string = "\"uri\": $0,"
            let v311 : string = v309 + v310
            let v312 : string = "\"spiprojText\": $1"
            let v313 : string = v311 + v312
            let v314 : string = "}"
            let v315 : string = v313 + v314
            let v316 : string = v315 + v314
            let v317 : string = "serde_json::json!("
            let v318 : string = v317 + v316
            let v319 : string = ").to_string()"
            let v320 : string = v318 + v319
            let v321 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v254, v291) v320
            let v322 : string = "json len="
            let v323 : Types.EmitType<Types.std.string.String> = method5(v322)
            let v324 : int32 = Fable.Core.Rust.emitExpr v321 v303
            let v325 : Types.EmitType<Types.std.string.String> = method22(v324)
            let v326 : (Types.EmitType<Types.std.string.String> []) = [|v323; v325|]
            method34(v297, v326)
            let struct (v327 : string, v328 : string, v329 : string, v330 : bool) = method0()
            let v331 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v332 : int64 = Fable.Core.Rust.emitExpr v331 v6
            let v333 : string = "host"
            let v334 : Types.EmitType<Types.std.string.String> = method5(v333)
            let v335 : string = "localhost"
            let v336 : Types.EmitType<Types.std.string.String> = method5(v335)
            let v337 : string = "port"
            let v338 : Types.EmitType<Types.std.string.String> = method5(v337)
            let v339 : int32 = 13805
            let v340 : Types.EmitType<Types.std.string.String> = method22(v339)
            let v341 : string = "msg len"
            let v342 : Types.EmitType<Types.std.string.String> = method5(v341)
            let v343 : int32 = Fable.Core.Rust.emitExpr v321 v303
            let v344 : Types.EmitType<Types.std.string.String> = method22(v343)
            let v345 : (Types.EmitType<Types.std.string.String> []) = [|v334; v336; v338; v340; v342; v344|]
            method36(v332, v345)
            let v346 : string = "zmq::Context::new()"
            let v347 : obj = Fable.Core.Rust.emitExpr () v346
            let v348 : string = "$0.socket(zmq::REQ).unwrap()"
            let v349 : obj = Fable.Core.Rust.emitExpr v347 v348
            let v350 : string = $"tcp://{v335}:{13805}"
            let v351 : string = "$0.connect(&$1).unwrap()"
            Fable.Core.Rust.emitExpr struct (v349, v350) v351
            let v352 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v349, v321) v352
            let v353 : string = "$0.recv_string(0).unwrap().unwrap()"
            let v354 : Types.std.string.String = Fable.Core.Rust.emitExpr v349 v353
            let v355 : string = "$0.disconnect(&$1).unwrap()"
            Fable.Core.Rust.emitExpr struct (v349, v350) v355
            let v356 : string = "result len"
            let v357 : Types.EmitType<Types.std.string.String> = method5(v356)
            let v358 : int32 = Fable.Core.Rust.emitExpr v354 v303
            let v359 : Types.EmitType<Types.std.string.String> = method22(v358)
            let v360 : (Types.EmitType<Types.std.string.String> []) = [|v357; v359|]
            method36(v332, v360)
            let v361 : string = "> spiproj_open; ok"
            let v362 : Types.EmitType<Types.std.string.String> = method5(v361)
            let v363 : (Types.EmitType<Types.std.string.String> []) = [|v362|]
            method32(v210, v363)
            let struct (v364 : string, v365 : string, v366 : string, v367 : bool) = method0()
            let v368 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v369 : int64 = Fable.Core.Rust.emitExpr v368 v6
            let v370 : Types.EmitType<Types.std.string.String> = method5(v221)
            let v371 : string = Fable.Core.Rust.emitExpr v196 v218
            let v372 : Types.EmitType<Types.std.string.String> = method5(v371)
            let v373 : string = "backend"
            let v374 : Types.EmitType<Types.std.string.String> = method5(v373)
            let v375 : string = "Fsharp"
            let v376 : Types.EmitType<Types.std.string.String> = method5(v375)
            let v377 : (Types.EmitType<Types.std.string.String> []) = [|v370; v372; v374; v376|]
            method38(v369, v377)
            let v378 : Types.std.string.String = Fable.Core.Rust.emitExpr v375 v187
            let v379 : string = "\"BuildFile\": {"
            let v380 : string = v307 + v379
            let v381 : string = v380 + v310
            let v382 : string = "\"backend\": $1"
            let v383 : string = v381 + v382
            let v384 : string = v383 + v314
            let v385 : string = v384 + v314
            let v386 : string = v317 + v385
            let v387 : string = v386 + v319
            let v388 : Types.std.string.String = Fable.Core.Rust.emitExpr struct (v196, v378) v387
            let v389 : string = "json len"
            let v390 : Types.EmitType<Types.std.string.String> = method5(v389)
            let v391 : int32 = Fable.Core.Rust.emitExpr v388 v303
            let v392 : Types.EmitType<Types.std.string.String> = method22(v391)
            let v393 : (Types.EmitType<Types.std.string.String> []) = [|v390; v392|]
            method38(v369, v393)
            let struct (v394 : string, v395 : string, v396 : string, v397 : bool) = method0()
            let v398 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v399 : int64 = Fable.Core.Rust.emitExpr v398 v6
            let v400 : Types.EmitType<Types.std.string.String> = method5(v333)
            let v401 : Types.EmitType<Types.std.string.String> = method5(v335)
            let v402 : Types.EmitType<Types.std.string.String> = method5(v337)
            let v403 : int32 = 13805
            let v404 : Types.EmitType<Types.std.string.String> = method22(v403)
            let v405 : Types.EmitType<Types.std.string.String> = method5(v341)
            let v406 : int32 = Fable.Core.Rust.emitExpr v388 v303
            let v407 : Types.EmitType<Types.std.string.String> = method22(v406)
            let v408 : (Types.EmitType<Types.std.string.String> []) = [|v400; v401; v402; v404; v405; v407|]
            method36(v399, v408)
            let v409 : obj = Fable.Core.Rust.emitExpr () v346
            let v410 : obj = Fable.Core.Rust.emitExpr v409 v348
            let v411 : string = $"tcp://{v335}:{13805}"
            Fable.Core.Rust.emitExpr struct (v410, v411) v351
            let v412 : string = $"$0.send($1.as_str(), 0).unwrap()"
            Fable.Core.Rust.emitExpr struct (v410, v388) v412
            let v413 : Types.std.string.String = Fable.Core.Rust.emitExpr v410 v353
            Fable.Core.Rust.emitExpr struct (v410, v411) v355
            let v414 : Types.EmitType<Types.std.string.String> = method5(v356)
            let v415 : int32 = Fable.Core.Rust.emitExpr v413 v303
            let v416 : Types.EmitType<Types.std.string.String> = method22(v415)
            let v417 : (Types.EmitType<Types.std.string.String> []) = [|v414; v416|]
            method36(v399, v417)
            let v418 : string = "> spi_build_file; ok"
            let v419 : Types.EmitType<Types.std.string.String> = method5(v418)
            let v420 : (Types.EmitType<Types.std.string.String> []) = [|v419|]
            method32(v210, v420)
            let struct (v421 : string, v422 : string, v423 : string, v424 : bool) = method0()
            let v425 : Types.chrono.DateTime<Types.chrono.Utc> = Fable.Core.Rust.emitExpr () v4
            let v426 : int64 = Fable.Core.Rust.emitExpr v425 v6
            let v427 : string = "std::fs::metadata($0).unwrap().modified().unwrap()"
            let v428 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v275 v427
            let v429 : Types.EmitType<Types.std.string.String> = method5(v276)
            let v430 : string = Fable.Core.Rust.emitExpr v275 v218
            let v431 : Types.EmitType<Types.std.string.String> = method5(v430)
            let v432 : string = "start"
            let v433 : Types.EmitType<Types.std.string.String> = method5(v432)
            let v434 : Types.EmitType<Types.std.string.String> = method40(v428)
            let v435 : (Types.EmitType<Types.std.string.String> []) = [|v429; v431; v433; v434|]
            method41(v426, v435)
            let v436 : (int32 []) = [| 0..50 |]
            let v437 : int32 = v436.Length
            let v438 : US0 = US0_0
            let v439 : Mut1 = {l0 = 0; l1 = v438} : Mut1
            while method43(v437, v439) do
                let v441 : int32 = v439.l0
                let v442 : US0 = v439.l1
                let v443 : int32 = v436.[int v441]
                let v465 : US0 =
                    match v442 with
                    | US0_0 -> (* None *)
                        let v446 : Types.std.time.SystemTime = Fable.Core.Rust.emitExpr v275 v427
                        let v447 : string = "i"
                        let v448 : Types.EmitType<Types.std.string.String> = method5(v447)
                        let v449 : Types.EmitType<Types.std.string.String> = method22(v443)
                        let v450 : string = "last_modified"
                        let v451 : Types.EmitType<Types.std.string.String> = method5(v450)
                        let v452 : Types.EmitType<Types.std.string.String> = method40(v446)
                        let v453 : (Types.EmitType<Types.std.string.String> []) = [|v448; v449; v451; v452|]
                        method41(v426, v453)
                        let v454 : string = "$0 > $1"
                        let v455 : bool = Fable.Core.Rust.emitExpr struct (v446, v428) v454
                        if v455 then
                            let v456 : Result<Types.std.string.String, Types.std.io.Error> = Fable.Core.Rust.emitExpr v275 v288
                            let v457 : Types.std.string.String = Fable.Core.Rust.emitExpr v456 v290
                            let v458 : obj = v457
                            let v459 : string = Fable.Core.Rust.emitExpr v458 v81
                            US0_1(v459)
                        else
                            let v461 : string = "std::thread::sleep(std::time::Duration::from_millis(*$0))"
                            Fable.Core.Rust.emitExpr 25UL v461
                            US0_0
                    | US0_1(v444) -> (* Some *)
                        US0_1(v444)
                let v466 : int32 = v441 + 1
                v439.l0 <- v466
                v439.l1 <- v465
                ()
            let v467 : US0 = v439.l1
            let v470 : string =
                match v467 with
                | US0_0 -> (* None *)
                    v281
                | US0_1(v468) -> (* Some *)
                    v468
            let v471 : string = "new_fsx len"
            let v472 : Types.EmitType<Types.std.string.String> = method5(v471)
            let v473 : int32 = Fable.Core.Rust.emitExpr v470 v303
            let v474 : Types.EmitType<Types.std.string.String> = method22(v473)
            let v475 : (Types.EmitType<Types.std.string.String> []) = [|v472; v474|]
            method32(v210, v475)
            let v476 : string = "v204.unwrap_or(v275)"
            let v477 : Types.std.path.PathBuf = Fable.Core.Rust.emitExpr () v476
            let v478 : Result<unit, Types.std.io.Error> = Fable.Core.Rust.emitExpr struct (v477, v470) v282
            Fable.Core.Rust.emitExpr v478 v284
            let v479 : string = "> fs_write new_fsx_path; ok"
            let v480 : Types.EmitType<Types.std.string.String> = method5(v479)
            let v481 : (Types.EmitType<Types.std.string.String> []) = [|v480|]
            method32(v210, v481)
            let v482 : string = "fsx.len"
            let v483 : Types.EmitType<Types.std.string.String> = method5(v482)
            let v484 : int32 = v470.Length
            let v485 : Types.EmitType<Types.std.string.String> = method22(v484)
            let v486 : (Types.EmitType<Types.std.string.String> []) = [|v483; v485|]
            method44(v7, v486)
    let v487 : string = "cli end"
    let v488 : Types.EmitType<Types.std.string.String> = method5(v487)
    let v489 : string = "???"
    let v490 : Types.EmitType<Types.std.string.String> = method5(v489)
    let v491 : (Types.EmitType<Types.std.string.String> []) = [|v488; v490|]
    method44(v7, v491)
    0
let v0 : (unit -> int32) = closure0()
()
