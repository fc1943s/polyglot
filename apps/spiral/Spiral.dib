#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

## ???

#!spiral

// // test

inl _almost_equal b a =
    assert (abs (b - a) < 0.00000001) $"$\"_almost_equal / actual: {!a} / expected: {!b}\""

inl _equal b a =
    assert (a = b) $"$\"_equal / actual: {!a} / expected: {!b}\""

inl _is_less_than b a =
    assert (b < a) $"$\"_is_less_than / actual: {!a} / expected: {!b}\""

inl _is_less_than_or_equal b a =
    assert (b <= a) $"$\"_is_less_than_or_equal / actual: {!a} / expected: {!b}\""

#!spiral

inl atan2 (y : f64) (x : f64) =
    $"System.Math.Atan2 (!y, !x)" : f64

inl cos (d : f64) =
    $"System.Math.Cos !d" : f64

inl log_base (new_base : f64) (a : f64) =
    $"System.Math.Log (!a, !new_base)" : f64

inl pi () =
    $"System.Math.PI" : f64

inl sin (d : f64) =
    $"System.Math.Sin !d" : f64

#!spiral

// // test

2 * 2 / 0.4f64
|> sqrt
|> _almost_equal 3.1622776601683795

#!spiral

// // test

2f64 / 3
|> _almost_equal 0.6666666666666666

#!spiral

// // test

2f64
|> log
|> _almost_equal 0.6931471805599453

#!spiral

// // test

pi ()
|> _almost_equal 3.141592653589793

#!spiral

// // test

pi ()
|> cos
|> _equal -1

#!spiral

// // test

pi ()
|> cos
|> fun n => n / 2
|> _almost_equal -0.5

#!spiral

// // test

pi () / 2
|> cos
|> _almost_equal 0.00000000000000006123233995736766

#!spiral

// // test

100 |> log_base 10
|> _equal 2

#!spiral

// // test

0 |> atan2 1
|> _equal 1.5707963267948966

#!spiral

// // test

5f64
|> sqrt
|> fun n => n ** 2
|> _almost_equal 5

#!spiral

// // test

inl e () =
    exp 1f64

inl square x =
    x ** 2

#!spiral

// // test

e ()
|> square
|> _almost_equal 7.3890560989306495

#!fsharp

#r @"../../../../../../../.nuget/packages/fsharp.control.asyncseq/3.2.1/lib/netstandard2.1/FSharp.Control.AsyncSeq.dll"
#r @"../../../../../../../.nuget/packages/system.reactive/6.0.1-preview.1/lib/net6.0/System.Reactive.dll"
#r @"../../../../../../../.nuget/packages/system.reactive.linq/6.0.1-preview.1/lib/netstandard2.0/System.Reactive.Linq.dll"
#r @"../../../../../../../.nuget/packages/argu/6.1.1/lib/netstandard2.0/Argu.dll"
#r @"../../../../../../../.nuget/packages/system.commandline/2.0.0-beta4.22272.1/lib/net6.0/System.CommandLine.dll"
#r @"../../../../../../../.nuget/packages/asyncio/0.1.69/lib/netstandard2.0/AsyncIO.dll"
#r @"../../../../../../../.nuget/packages/netmq/4.0.1.13/lib/netstandard2.1/NetMQ.dll"
#r @"../../../../../../../.nuget/packages/fsharp.json/0.4.1/lib/netstandard2.0/FSharp.Json.dll"

#!fsharp

#!import ../nbs/Common.fs
#!import ../nbs/CommonFSharp.fs
#!import ../nbs/Async.fs
#!import ../nbs/AsyncSeq.fs
#!import ../nbs/Networking.fs
#!import ../nbs/Runtime.fs
#!import ../nbs/FileSystem.fs

#!fsharp

open FileSystem

#!fsharp

let hashText (input : string) =
    use sha256 = System.Security.Cryptography.SHA256.Create ()
    input
    |> Encoding.UTF8.GetBytes
    |> sha256.ComputeHash
    |> Array.map (fun b -> b.ToString "x2")
    |> String.concat ""

#!fsharp

let tmpSpiralPath = Path.GetTempPath () </> "!dotnet-interactive-spiral"
let linePlotsDataPath = tmpSpiralPath </> "line-plots-data"
let linePlotsSvgPath = tmpSpiralPath </> "line-plots-svg"

[tmpSpiralPath; linePlotsDataPath; linePlotsSvgPath]
|> List.iter (fun dir -> if Directory.Exists dir |> not then Directory.CreateDirectory dir |> ignore)

Formatter.Register<struct (float array * struct (string * float array) array)> (
    (fun struct (x, ys) ->
        let json = (x, ys) |> FSharp.Json.Json.serialize
        async {
            let hashHex = json |> hashText
            let svgPath = linePlotsSvgPath </> $"{hashHex}.svg"
            
            if System.IO.File.Exists svgPath |> not then
                do! json |> writeAllTextAsync (linePlotsDataPath </> hashHex)

                let repositoryRoot = FileSystem.getSourceDirectory () |> FileSystem.findParent ".paket" false

                let plotExePath = repositoryRoot </> $"apps/plot/target/release/plot{Runtime.getExecutableSuffix ()}"
                let! exitCode, result =
                    Runtime.executeWithOptionsAsync
                        {
                            Command = plotExePath
                            CancellationToken = None
                            WorkingDirectory = None
                            OnLine = None
                        }
                if exitCode <> 0 then
                    return failwith $"plot failed with exit code {exitCode} and output {result}"
            return! svgPath |> readAllTextAsync
        }
        |> Async.runWithTimeoutStrict 10000
        |> Option.defaultValue json
    ),
    "text/html"
)

#!spiral

// // test

inl x : a i32 f64 = am.init 101 (conv >> (*) 0.1)
inl y = x |> am.map cos
x, ;[("cos", y)]

#!spiral

// // test

inl x : a i32 f64 = am.init 601 (conv >> (*) 0.01 >> (+) -3)
inl y = x |> am.map square
x, ;[("square", y)]

#!spiral

// // test

inl start = -10
inl end = 10
inl inc = 0.1
inl total : i32 = conv ((end - start) / inc) + 1
inl x : a i32 f64 = am.init total (conv >> (*) inc >> (+) start)
inl y = x |> am.map sin
x, ;[("sin", y)]

#!spiral

// // test
()

#!spiral

// // test
()

#!spiral

// // test
()

#!spiral

// // test
()

#!spiral

// // test
()

#!spiral

// // test
()
