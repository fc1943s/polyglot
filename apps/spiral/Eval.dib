#!meta

{"kernelInfo":{"defaultKernelName":"spiral","items":[{"aliases":[],"name":"spiral"}]}}

#!markdown

# Eval (Polyglot)

#!fsharp

#r @"../../../../../../../.nuget/packages/fsharp.control.asyncseq/3.2.1/lib/netstandard2.1/FSharp.Control.AsyncSeq.dll"
#r @"../../../../../../../.nuget/packages/system.reactive/6.0.1-preview.1/lib/net6.0/System.Reactive.dll"
#r @"../../../../../../../.nuget/packages/system.reactive.linq/6.0.1-preview.1/lib/netstandard2.0/System.Reactive.Linq.dll"
#r @"../../../../../../../.nuget/packages/argu/6.2.2/lib/netstandard2.0/Argu.dll"
#r @"../../../../../../../.nuget/packages/microsoft.aspnetcore.http.connections.common/7.0.0/lib/net7.0/Microsoft.AspNetCore.Http.Connections.Common.dll"
#r @"../../../../../../../.nuget/packages/microsoft.aspnetcore.http.connections.client/7.0.0/lib/net7.0/Microsoft.AspNetCore.Http.Connections.Client.dll"
#r @"../../../../../../../.nuget/packages/microsoft.aspnetcore.signalr.common/7.0.0/lib/net7.0/Microsoft.AspNetCore.SignalR.Common.dll"
#r @"../../../../../../../.nuget/packages/microsoft.aspnetcore.signalr.client/7.0.0/lib/net7.0/Microsoft.AspNetCore.SignalR.Client.dll"
#r @"../../../../../../../.nuget/packages/microsoft.aspnetcore.signalr.client.core/7.0.0/lib/net7.0/Microsoft.AspNetCore.SignalR.Client.Core.dll"
#r @"../../../../../../../.nuget/packages/fsharp.json/0.4.1/lib/netstandard2.0/FSharp.Json.dll"
#r @"../../../../../../../.nuget/packages/system.management/7.0.0/lib/netstandard2.0/System.Management.dll"

#!fsharp

#!import ../../lib/fsharp/Notebooks.dib
#!import ../../lib/fsharp/Testing.dib

#!fsharp

#!import ../../lib/fsharp/Common.fs
#!import ../../lib/fsharp/CommonFSharp.fs
#!import ../../lib/fsharp/Async.fs
#!import ../../lib/fsharp/AsyncSeq.fs
#!import ../../lib/fsharp/Runtime.fs
#!import ../../lib/fsharp/FileSystem.fs

#!import ../../apps/builder/Builder.fs
#!import ../../apps/spiral/Supervisor.fs

#!fsharp

#if !INTERACTIVE
open Lib
#endif

#!fsharp

open Common
open SpiralFileSystem.Operators
open Microsoft.AspNetCore.SignalR.Client

#!fsharp

open System
open System.Collections.Generic
open System.IO
open System.Text
open System.Threading

#!markdown

## mapErrors

#!fsharp

let inline mapErrors (severity, errors, lastTopLevelIndex) allCode =
    let allCodeLineLength =
        allCode |> SpiralSm.split "\n" |> Array.length

    errors
    |> List.map (fun (_, error) ->
        match error with
        | Supervisor.FatalError message ->
            (
                severity, message, 0, ("", (0, 0), (0, 0))
            )
            |> List.singleton
        | Supervisor.TracedError data ->
            data.trace
            |> List.truncate 5
            |> List.append [ data.message ]
            |> List.map (fun message ->
                (
                    severity, message, 0, ("", (0, 0), (0, 0))
                )
            )
        | Supervisor.PackageErrors data
        | Supervisor.TokenizerErrors data
        | Supervisor.ParserErrors data
        | Supervisor.TypeErrors data ->
            data.errors
            |> List.filter (fun ((rangeStart, _), _) ->
                trace Debug (fun () -> $"Eval.mapErrors / rangeStart.line: {rangeStart.line} / lastTopLevelIndex: {lastTopLevelIndex} / allCodeLineLength: {allCodeLineLength} / filtered: {rangeStart.line > allCodeLineLength}") _locals
                rangeStart.line > allCodeLineLength
            )
            |> List.map (fun ((rangeStart, rangeEnd), message) ->
                (
                    severity,
                    message,
                    0,
                    (
                        (data.uri |> System.IO.Path.GetFileName),
                        (
                            (match lastTopLevelIndex with
                            | Some i when rangeStart.line >= i + allCodeLineLength + 3 ->
                                rangeStart.line - allCodeLineLength - 2
                            | _ -> rangeStart.line - allCodeLineLength),
                            (match lastTopLevelIndex with
                            | Some i when rangeStart.line >= i + allCodeLineLength + 3 ->
                                rangeStart.character - 4
                            | _ -> rangeStart.character)
                        ),
                        (
                            (match lastTopLevelIndex with
                            | Some i when rangeStart.line >= i + allCodeLineLength + 3 ->
                                rangeEnd.line - allCodeLineLength - 2
                            | _ -> rangeEnd.line - allCodeLineLength),
                            (match lastTopLevelIndex with
                            | Some i when rangeStart.line >= i + allCodeLineLength + 3 ->
                                rangeEnd.character - 4
                            | _ -> rangeEnd.character)
                        )
                    )
                )
            )
    )
    |> List.collect id
    |> List.toArray

#!fsharp

let workspaceRoot = SpiralFileSystem.get_workspace_root ()
let targetDir = workspaceRoot </> "target/polyglot/spiral_eval"
[ targetDir ]
|> List.iter (fun dir -> if Directory.Exists dir |> not then Directory.CreateDirectory dir |> ignore)

let assemblyName = Reflection.Assembly.GetEntryAssembly().GetName().Name

let mutable allCode = ""

#!markdown

## getParentProcessId

#!fsharp

let getParentProcessId () =
    if SpiralRuntime.is_windows () |> not
    then 0u
    else
        let pid = System.Diagnostics.Process.GetCurrentProcess().Id
        let query = $"SELECT ParentProcessId FROM Win32_Process WHERE ProcessId = {pid}"
        use searcher = new System.Management.ManagementObjectSearcher (query)
        use results = searcher.Get ()
        let data = results |> Seq.cast<System.Management.ManagementObject>
        if data |> Seq.isEmpty
        then 0u
        else data |> Seq.head |> (fun mo -> mo.["ParentProcessId"] :?> uint32)

#!markdown

## startTokenRangeWatcher

#!fsharp

let inline startTokenRangeWatcher () =
    if [ "dotnet-repl" ] |> List.contains assemblyName |> not then
        let tokensDir = targetDir </> "tokens"

        [ tokensDir ]
        |> List.iter (fun dir -> if Directory.Exists dir |> not then Directory.CreateDirectory dir |> ignore)

        let stream, disposable = FileSystem.watchDirectory (fun _ -> false) tokensDir

        try
            let existingFilesChild =
                tokensDir
                |> System.IO.Directory.GetDirectories
                |> Array.map (fun codeDir -> async {
                    try
                        let tokensPath = codeDir </> "tokens.json"
                        if tokensPath |> File.Exists |> not then
                            let codePath = codeDir </> "main.spi"
                            let! tokens = codePath |> Supervisor.getFileTokenRange None None
                            match tokens with
                            | Some tokens ->
                                do!
                                    tokens
                                    |> FSharp.Json.Json.serialize
                                    |> SpiralFileSystem.write_all_text_async tokensPath
                            | None ->
                                trace Verbose (fun () -> $"Eval.startTokenRangeWatcher / GetDirectories / tokens: None") _locals
                    with ex ->
                        trace Critical (fun () -> $"Eval.startTokenRangeWatcher / GetDirectories / ex: {ex |> SpiralSm.format_exception}") _locals
                })
                |> Async.Parallel
                |> Async.Ignore

            let streamAsyncChild =
                stream
                |> FSharp.Control.AsyncSeq.iterAsyncParallel (fun (ticks, event) -> async {
                    try
                        match event with
                        | FileSystem.FileSystemChange.Changed (codePath, _)
                            when System.IO.Path.GetFileName codePath = "main.spi"
                            ->
                            let hashDir = codePath |> System.IO.Directory.GetParent
                            let hashHex = hashDir.Name
                            let codePath = tokensDir </> codePath
                            let tokensPath = tokensDir </> hashHex </> "tokens.json"
                            do!
                                codePath
                                |> SpiralFileSystem.wait_for_file_access_read
                                |> Async.runWithTimeoutAsync 3000
                                |> Async.Ignore
                            let! tokens = codePath |> Supervisor.getFileTokenRange None None
                            match tokens with
                            | Some tokens ->
                                do!
                                    tokens
                                    |> FSharp.Json.Json.serialize
                                    |> SpiralFileSystem.write_all_text_async tokensPath
                            | None ->
                                trace Verbose (fun () -> $"Eval.startTokenRangeWatcher / iterAsyncParallel / tokens: None") _locals
                        | _ -> ()
                    with ex ->
                        trace Critical (fun () -> $"Eval.startTokenRangeWatcher / iterAsyncParallel / ex: {ex |> SpiralSm.format_exception}") _locals
                })

            let parentAsyncChild = async {
                let parentProcessId = getParentProcessId ()
                trace Verbose
                    (fun () -> "Eval.parentAsyncChild")
                    (fun () -> $"parentProcessId: {parentProcessId} / {_locals ()}")

                if parentProcessId > 0u then
                    let parentProcess = parentProcessId |> int |> System.Diagnostics.Process.GetProcessById
                    do! parentProcess.WaitForExitAsync () |> Async.AwaitTask
                    trace Verbose
                        (fun () -> "Eval.parentAsyncChild / Parent process has exited. Performing cleanup...")
                        (fun () -> $"{_locals ()}")
                    System.Threading.Thread.Sleep 1000
                    System.Environment.Exit 1
            }

            async {
                do! Async.Sleep 3000
                existingFilesChild |> Async.StartImmediate
                streamAsyncChild |> Async.Start
                parentAsyncChild |> Async.Start
            }
            |> Async.Start
        with ex ->
            trace Critical (fun () -> $"Eval.startTokenRangeWatcher / ex: {ex |> SpiralSm.format_exception}") _locals

        disposable
    else new_disposable (fun () -> ())

#!markdown

## startCommandsWatcher

#!fsharp

let startCommandsWatcher (uriServer : string) =
    let commandsDir = targetDir </> "eval_commands"
    let commandHistoryDir = targetDir </> "eval_command_history"
    [ commandsDir; commandHistoryDir ]
    |> List.iter (fun dir -> if Directory.Exists dir |> not then Directory.CreateDirectory dir |> ignore)

    Directory.EnumerateFiles commandsDir |> Seq.iter File.Delete

    let stream, disposable =
        commandsDir
        |> FileSystem.watchDirectory (function
            | FileSystem.FileSystemChange.Created _ -> true
            | _ -> false
        )

    let connection = HubConnectionBuilder().WithUrl(uriServer).Build()
    connection.StartAsync() |> Async.AwaitTask |> Async.Start
    // let _ = connection.On<string>("ServerToClientMsg", fun x ->
    //     printfn $"ServerToClientMsg: '{x}'"
    // )

    stream
    |> FSharp.Control.AsyncSeq.iterAsyncParallel (fun (ticks, event) -> async {
        let _locals () = $"ticks: {ticks} / event: {event} / {_locals ()}"
        trace Verbose (fun () -> "Eval.startCommandsWatcher / iterAsyncParallel") _locals

        match event with
        | FileSystem.FileSystemChange.Created (path, Some json) ->
            try
                let fullPath = commandsDir </> path
                let! result = connection.InvokeAsync<string>("ClientToServerMsg", json) |> Async.AwaitTask
                let commandHistoryPath = commandHistoryDir </> path
                do! fullPath |> SpiralFileSystem.move_file_async commandHistoryPath |> Async.Ignore
                if result |> SpiralSm.trim |> String.length > 0 then
                    let resultPath = commandHistoryDir </> $"{Path.GetFileNameWithoutExtension path}_result.json"
                    do! result |> SpiralFileSystem.write_all_text_async resultPath
            with ex ->
                let _locals () = $"ex: {ex |> SpiralSm.format_exception} / {_locals ()}"
                trace Critical (fun () -> "Eval.startCommandsWatcher / iterAsyncParallel") _locals
        | _ -> ()
    })
    |> Async.StartChild
    |> Async.Ignore
    |> Async.Start

    new_disposable (fun () ->
        disposable.Dispose ()
    )

#!markdown

## eval

#!fsharp

let inline eval
    (fsi_eval:
        string
        -> System.Threading.CancellationToken
        -> Choice<'a, Exception> * (TraceLevel * string * int * (string * (int * int) * (int * int))) array)
    (cancellationToken: Option<System.Threading.CancellationToken>)
    (code: string)
    =
    trace Verbose (fun () -> $"Eval.eval / code: %A{code}") _locals

    let rawCellCode =
        code |> SpiralSm.replace "\r\n" "\n"

    let lines = rawCellCode |> SpiralSm.split "\n"

    if lines |> Array.exists (fun line -> line |> SpiralSm.starts_with "#r " && line |> SpiralSm.ends_with "\"") then
        let cancellationToken = defaultArg cancellationToken System.Threading.CancellationToken.None
        let ch, errors = fsi_eval code cancellationToken
        trace Verbose (fun () -> $"Eval.eval / fsi_eval / ch: %A{ch} / errors: {errors}") _locals
        match ch with
        | Choice1Of2 v -> Ok(v), errors
        | Choice2Of2 ex -> Error(ex), errors
    else
        let builderCommand =
            lines
            |> Array.choose (fun line ->
                if line |> SpiralSm.starts_with "///! "
                then line |> SpiralSm.split "///! " |> Array.tryItem 1
                else None
            )

        let timeout =
            lines
            |> Array.tryPick (fun line ->
                if line |> SpiralSm.starts_with "//// timeout="
                then line |> SpiralSm.split "=" |> Array.tryItem 1 |> Option.map int
                else None
            )
            |> Option.defaultValue (60000 * 60)

        let printCode =
            lines
            |> Array.tryPick (fun line ->
                if line |> SpiralSm.starts_with "//// print_code="
                then line |> SpiralSm.split "=" |> Array.tryItem 1 |> Option.map ((=) "true")
                else None
            )
            |> Option.defaultValue false

        let isTrace =
            lines
            |> Array.tryPick (fun line ->
                if line |> SpiralSm.starts_with "//// trace="
                then line |> SpiralSm.split "=" |> Array.tryItem 1 |> Option.map ((=) "true")
                else None
            )
            |> Option.defaultValue false

        let isCache =
            lines
            |> Array.tryPick (fun line ->
                if line |> SpiralSm.starts_with "//// cache="
                then line |> SpiralSm.split "=" |> Array.tryItem 1 |> Option.map ((=) "true")
                else None
            )
            |> Option.defaultValue true

        let oldLevel = get_trace_level ()
        let traceLevel =
            if isTrace
            then Verbose
            else Info
        traceLevel
        |> to_trace_level
        |> set_trace_level
        use _ = (new_disposable (fun () ->
            oldLevel |> set_trace_level
        ))

        async {
            try
                let lastBlock =
                    lines
                    |> Array.tryFindBack (fun line ->
                        line |> String.length > 0
                        && line.[0] <> ' '
                    )

                let hasMain =
                    lastBlock
                    |> Option.exists (fun line ->
                        line |> SpiralSm.starts_with "inl main "
                        || line |> SpiralSm.starts_with "let main "
                    )

                let cellCode, lastTopLevelIndex =
                    if hasMain
                    then rawCellCode, None
                    else
                        let lastTopLevelIndex, _ =
                            (lines |> Array.indexed, (None, false))
                            ||> Array.foldBack (fun (i, line) (lastTopLevelIndex, finished) ->
                                trace Debug (fun () -> $"i: {i} / line: '{line}' / lastTopLevelIndex: {lastTopLevelIndex} / finished: {finished}") _locals
                                match line with
                                | _ when finished -> lastTopLevelIndex, true
                                | "" -> lastTopLevelIndex, false
                                | line when
                                    line |> SpiralSm.starts_with " "
                                    || line |> SpiralSm.starts_with "// " -> lastTopLevelIndex, false
                                | line when
                                    line |> SpiralSm.starts_with "open "
                                    || line |> SpiralSm.starts_with "prototype "
                                    || line |> SpiralSm.starts_with "instance "
                                    || line |> SpiralSm.starts_with "type "
                                    || line |> SpiralSm.starts_with "union "
                                    || line |> SpiralSm.starts_with "nominal " -> lastTopLevelIndex, true
                                | line when
                                    line |> SpiralSm.starts_with "inl "
                                    || line |> SpiralSm.starts_with "let " ->
                                    let m =
                                        System.Text.RegularExpressions.Regex.Match (
                                            line,
                                            @"^(inl|let) +([~\(\w][\w\d']*(?:| *[~\w][\w\d']*\)|, *[~\w][\w\d']*)) +[:=](?! +function)"
                                        )
                                    trace Debug (fun () -> $"m: '{m}' / m.Groups.Count: {m.Groups.Count}") _locals
                                    if m.Groups.Count = 3
                                    then Some i, false
                                    else lastTopLevelIndex, true
                                | _ -> Some i, false
                            )
                        let code =
                            match lastTopLevelIndex with
                            | Some lastTopLevelIndex ->
                                lines
                                |> Array.mapi (fun i line ->
                                    match i with
                                    | i when i < lastTopLevelIndex -> line
                                    | i when i = lastTopLevelIndex -> $"\nlet main () =\n    {line}"
                                    | _ when line |> SpiralSm.trim = "" -> ""
                                    | _ -> $"    {line}"
                                )
                                |> SpiralSm.concat "\n"
                            | None -> $"{rawCellCode}\n\ninl main () = ()\n"
                        code, lastTopLevelIndex

                let newAllCode = $"{allCode}\n\n{cellCode}"

                let! buildCodeResult =
                    newAllCode
                    |> Supervisor.buildCode isCache timeout cancellationToken
                    |> Async.catch
                    |> Async.runWithTimeoutAsync timeout

                match buildCodeResult with
                | Some (Ok (_mainPath, (fsxPath, Some code), spiralErrors)) ->
                    let spiralErrors =
                        mapErrors (Warning, spiralErrors, lastTopLevelIndex) allCode
                    let inline _trace (fn : unit -> string) =
                        if isTrace
                        then trace Info (fun () -> $"Eval.eval / {fn ()}") _locals
                        else fn () |> System.Console.WriteLine

                    if printCode
                    then _trace (fun () -> if builderCommand.Length > 0 then $".fsx:\n{code}\n" else code)

                    let! spiralBuilderResult =
                        match builderCommand, lastTopLevelIndex with
                        | [||], _ | _, None -> [||] |> Async.init
                        | builderCommand, _ -> async {
                            let workspaceRootExternal =
                                let currentDir =
                                    System.IO.Directory.GetCurrentDirectory ()
                                    |> SpiralSm.to_lower
                                let workspaceRoot = workspaceRoot |> SpiralSm.to_lower
                                if currentDir |> SpiralSm.starts_with workspaceRoot
                                then None
                                else Some workspaceRoot
                            return!
                                builderCommand
                                |> Array.map (fun builderCommand -> async {
                                    let! exitCode, result =
                                        SpiralRuntime.execution_options (fun x ->
                                            { x with
                                                l0 = cancellationToken
                                                l1 =
                                                    let path =
                                                        workspaceRoot </> $@"workspace/target/release/spiral_builder{SpiralRuntime.get_executable_suffix ()}"
                                                        |> System.IO.Path.GetFullPath
                                                    $"{path} fsharp --fs-path \"{fsxPath}\" --command \"{builderCommand}\""
                                                l2 = [|
                                                    "AUTOMATION", assemblyName = "dotnet-repl" |> string
                                                    "TRACE_LEVEL", $"%A{traceLevel}"
                                                |]
                                                l6 = workspaceRootExternal
                                            }
                                        )
                                        |> SpiralRuntime.execute_with_options_async
                                    trace Debug (fun () -> $"Eval.eval / spiral_builder / exitCode: {exitCode} / result: {result |> SpiralSm.ellipsis_end 400}") _locals
                                    return
                                        if exitCode = 0
                                        then result |> Ok
                                        else result |> Error
                                })
                                |> Async.Parallel
                        }

                    let cancellationToken = defaultArg cancellationToken System.Threading.CancellationToken.None

                    let fsxResult =
                        if builderCommand.Length > 0
                        then None
                        else
                            try
                                let ch, errors = fsi_eval code cancellationToken
                                let errors =
                                    errors
                                    |> Array.map (fun (e1, e2, e3, _) ->
                                        (e1, e2, e3, ("", (0, 0), (0, 0)))
                                    )
                                let errors =
                                    if errors |> Array.isEmpty
                                    then errors
                                    else
                                        errors
                                        |> Array.append [|
                                            TraceLevel.Critical, $"Eval.eval / fsi_eval errors / errors[-1] / fsxPath: {fsxPath} / builderCommand: %A{builderCommand} / code: {code |> SpiralSm.ellipsis_end 400}", 0, ("", (0, 0), (0, 0))
                                        |]
                                Some (ch, errors)
                            with ex ->
                                trace Critical (fun () -> $"Eval.eval / fsi_eval try ex / code : {code |> SpiralSm.ellipsis_end 400} / ex: {ex |> SpiralSm.format_exception}") _locals
                                None

                    match fsxResult, spiralBuilderResult with
                    | Some (ch, errors), [||] ->
                        let errors = errors |> Array.append spiralErrors
                        match ch with
                        | Choice1Of2 v ->
                            allCode <- newAllCode
                            return Ok(v), errors
                        | Choice2Of2 ex -> return Error ex, errors
                    | _, [||] ->
                        let ch, errors = fsi_eval "()" cancellationToken
                        match ch with
                        | Choice1Of2 v ->
                            allCode <- newAllCode
                            return Ok(v), errors
                        | Choice2Of2 ex ->
                            return Error ex, errors
                    | _, spiralBuilderResult ->
                        try
                            let codes =
                                spiralBuilderResult
                                |> Array.map (fun spiralBuilderResult' ->
                                    let spiralBuilderResult'', errors =
                                        match spiralBuilderResult' with
                                        | Ok x ->
                                            let x = x |> FSharp.Json.Json.deserialize<Map<string,string>>
                                            x, [||]
                                        | Error error ->
                                            ([] |> Map),
                                            [|
                                                (
                                                    TraceLevel.Critical, $"Eval.eval / evalResult error / errors[0] / fsxPath: {fsxPath} / builderCommand: %A{builderCommand} / spiralBuilderResult': %A{spiralBuilderResult'} / error: %A{error}", 0, ("", (0, 0), (0, 0))
                                                )
                                            |]

                                    if errors |> Array.isEmpty |> not || spiralBuilderResult'' |> Map.containsKey "command_result" |> not
                                    then Error (Exception $"Eval.eval / evalResult errors / Exception / spiralBuilderResult'': %A{spiralBuilderResult''}"), errors
                                    else
                                        let commandResult = spiralBuilderResult''.["command_result"] |> FSharp.Json.Json.deserialize<Map<string,string>>

                                        let extension = commandResult.["extension"]
                                        if printCode
                                        then _trace (fun () -> $""".{extension}:{'\n'}{commandResult.["code"]}""")
                                        let code =
                                            let header =
                                                if printCode || spiralBuilderResult.Length > 1
                                                then $".{extension} output:\n" else
                                                ""
                                            let output = commandResult.["output"]
                                            $"{header}{output}"
                                        Ok code, [||]
                                )
                            let result, errors =
                                (((Ok []), [||]), codes)
                                ||> Array.fold (fun (acc_code, acc_errors) (code, errors) ->
                                    match code, acc_code with
                                    | Ok code, Ok acc_code ->
                                        let errors =
                                            acc_errors
                                            |> Array.append errors
                                            |> Array.append spiralErrors
                                        let errors =
                                            if errors |> Array.isEmpty
                                            then errors
                                            else
                                                errors
                                                |> Array.append [|
                                                    TraceLevel.Critical, $"Eval.eval / fsi_eval2 errors / errors[-1] / fsxPath: {fsxPath} / builderCommand: %A{builderCommand} / code: {code |> SpiralSm.ellipsis_end 400}", 0, ("", (0, 0), (0, 0))
                                                |]
                                        Ok (code :: acc_code), errors
                                    | Error error, _
                                    | _, Error error ->
                                        Error error,
                                        acc_errors |> Array.append errors
                                )
                            match result with
                            | Ok code ->
                                let code = code |> List.rev |> String.concat "\n\n"
                                let code =
                                    if printCode
                                    then $"\"\"\"{code}\n\n\n\"\"\""
                                    else $"\"\"\"{code}\n\"\"\""
                                let ch, errors2 = fsi_eval code cancellationToken
                                let errors =
                                    errors
                                    |> Array.append errors2
                                match ch with
                                | Choice1Of2 v ->
                                    allCode <- newAllCode
                                    return Ok(v), errors
                                | Choice2Of2 ex ->
                                    return Error ex, errors
                            | Error error ->
                                return Error error, errors
                        with ex ->
                            trace Critical (fun () -> $"Eval.eval / try 2 ex / spiralBuilderResult: %A{spiralBuilderResult} / ex: {ex |> SpiralSm.format_exception}") _locals
                            return Error (Exception $"Eval.eval / try 2 ex / Exception / spiralBuilderResult: %A{spiralBuilderResult} / ex: {ex |> SpiralSm.format_exception}"),
                            [|
                                (
                                    TraceLevel.Critical, $"Eval.eval / try 2 ex / errors[0] / spiralBuilderResult: %A{spiralBuilderResult} / ex: {ex |> SpiralSm.format_exception}", 0, ("", (0, 0), (0, 0))
                                )
                            |]
                | Some (Ok (_, _, errors)) when errors |> List.isEmpty |> not ->
                    return errors.[0] |> fst |> Exception |> Error,
                    mapErrors (TraceLevel.Critical, errors, lastTopLevelIndex) allCode
                | Some (Error ex) ->
                    trace Critical (fun () -> $"Eval.eval / buildCodeResult Error / buildCodeResult: %A{buildCodeResult} / ex: {ex |> SpiralSm.format_exception}") _locals
                    return Error (Exception $"Eval.eval / buildCodeResult Error / Exception / buildCodeResult: %A{buildCodeResult} / ex: {ex |> SpiralSm.format_exception}"),
                    [|
                        (
                            TraceLevel.Critical, $"Eval.eval / buildCodeResult Error / errors[0] / buildCodeResult: %A{buildCodeResult} / ex: {ex |> SpiralSm.format_exception}", 0, ("", (0, 0), (0, 0))
                        )
                    |]
                | _ ->
                    return Error (Exception $"Eval.eval / buildCodeResult / Exception / buildCodeResult: %A{buildCodeResult}"),
                    [|
                        (
                            TraceLevel.Critical, $"Eval.eval / buildCodeResult / errors[0] / buildCodeResult: %A{buildCodeResult}", 0, ("", (0, 0), (0, 0))
                        )
                    |]
            with ex ->
                trace Critical (fun () -> $"Eval.eval / try 1 ex / lines : %A{lines} / ex: {ex |> SpiralSm.format_exception}") _locals
                return Error (Exception $"Eval.eval / try 1 ex / Exception / %A{lines} / ex: {ex |> SpiralSm.format_exception}"),
                [|
                    (
                        TraceLevel.Critical, $"Eval.eval / try 1 ex / errors[0] / %A{lines} / ex: {ex |> SpiralSm.format_exception}", 0, ("", (0, 0), (0, 0))
                    )
                |]
        }
        |> Async.runWithTimeout timeout
        |> Option.defaultValue (
            Error (Exception $"Eval.eval / Async.runWithTimeout / Exception / timeout: {timeout} / %A{lines}"),
            [|
                (
                    TraceLevel.Critical, $"Eval.eval / Async.runWithTimeout / errors[0] / timeout: {timeout} / %A{lines}", 0, ("", (0, 0), (0, 0))
                )
            |]
        )
