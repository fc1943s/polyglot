#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = unit
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
type System_IO_FileInfo = unit
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US5
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : std_path_PathBuf
    | US33_1 of f1_0 : string
and [<Struct>] US34 =
    | US34_0 of f0_0 : std_path_PathBuf
    | US34_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US36 =
    | US36_0 of f0_0 : string
    | US36_1 of f1_0 : string
and [<Struct>] US35 =
    | US35_0 of f0_0 : US36
    | US35_1
and [<Struct>] US37 =
    | US37_0
    | US37_1
    | US37_2
and [<Struct>] US38 =
    | US38_0 of f0_0 : US37
    | US38_1
and [<Struct>] US39 =
    | US39_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US39_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : int32 * f0_1 : string
    | US40_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US41 =
    | US41_0 of f0_0 : std_collections_HashMap<string, string>
    | US41_1
and [<Struct>] US42 =
    | US42_0 of f0_0 : US5
    | US42_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US43 =
    | US43_0 of f0_0 : std_fs_FileType
    | US43_1 of f1_0 : std_string_String
and [<Struct>] US44 =
    | US44_0
    | US44_1
    | US44_2
and [<Struct>] US45 =
    | US45_0 of f0_0 : async_walkdir_DirEntry
    | US45_1 of f1_0 : std_string_String
and [<Struct>] US46 =
    | US46_0 of f0_0 : string * f0_1 : string
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v65 : string = "Pip"
    let v66 : string list = v65 :: v62 
    let v69 : (string list -> (string [])) = List.toArray
    let v70 : (string []) = v69 v66
    let v73 : string = "$0.to_vec()"
    let v74 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v70 v73 
    let v75 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "x"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr () v77 
    let v79 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : string = "&*$0"
    let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v80 
    let _v79 = v81 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v82 : string = "&*$0"
    let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v82 
    let _v79 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "&*$0"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v84 
    let _v79 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v86 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v86 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v92 
    #endif
#else
    let v95 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v95 
    #endif
    let v98 : Ref<Str> = _v79 
    let v103 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v104 : string = "String::from($0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v104 
    let _v103 = v105 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v106 : string = "String::from($0)"
    let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v106 
    let _v103 = v107 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v108 : string = "String::from($0)"
    let v109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v108 
    let _v103 = v109 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v116 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v116 
    #endif
#else
    let v119 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v119 
    #endif
    let v122 : std_string_String = _v103 
    let v127 : string = "Box::new($0)"
    let v128 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v122 v127 
    let v129 : string = "Box::leak($0)"
    let v130 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let v131 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v132 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v130 v131 
    let v133 : string = "true; $0 }).collect::<Vec<_>>()"
    let v134 : bool = Fable.Core.RustInterop.emitRustExpr v132 v133 
    let v135 : string = "_vec_map"
    let v136 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v135 
    let v137 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v138 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "$0.value_parser($1)"
    let v140 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v138) v139 
    let v141 : string = "clap::Command::arg($0, $1)"
    let v142 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v140) v141 
    let v143 : string = "NAME"
    let v144 : string = "r#\"" + v143 + "\"#"
    let v145 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v144 
    let v146 : string = "VERSION"
    let v147 : string = "r#\"" + v146 + "\"#"
    let v148 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v145; v148|]
    let v150 : unativeint = 1 |> unativeint 
    let v153 : unativeint = 0 |> unativeint 
    let v156 : unativeint = 0 |> unativeint 
    let v159 : bool = v153 = v156 
    let v167 : clap_builder_ValueRange =
        if v159 then
            let v162 : string = "clap::builder::ValueRange::new($0..)"
            let v163 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v150 v162 
            v163
        else
            let v164 : string = ""
            let v165 : string = "clap::builder::ValueRange::new($0.." + v164 + "$1)"
            let v166 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v150, v153) v165 
            v166
    let v168 : string = "deps"
    let v169 : string = "r#\"" + v168 + "\"#"
    let v170 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v169 
    let v171 : string = "clap::Arg::new($0)"
    let v172 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v170 v171 
    let v173 : string = "$0.short($1)"
    let v174 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v172, 'd') v173 
    let v175 : string = "r#\"" + v168 + "\"#"
    let v176 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v175 
    let v177 : string = "$0.long($1)"
    let v178 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v174, v176) v177 
    let v179 : string = "$0.to_vec()"
    let v180 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v149 v179 
    let v181 : string = "$0.value_names($1)"
    let v182 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v178, v180) v181 
    let v183 : string = "$0.num_args($1)"
    let v184 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v182, v167) v183 
    let v185 : string = "clap::ArgAction::Append"
    let v186 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v185 
    let v187 : string = "$0.action($1)"
    let v188 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v184, v186) v187 
    let v189 : string = "clap::Command::arg($0, $1)"
    let v190 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v142, v188) v189 
    let v191 : string = "clap::Command::subcommand($0, v190)"
    let v192 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v191 
    let v193 : string = "fable"
    let v194 : string = "r#\"" + v193 + "\"#"
    let v195 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "clap::Command::new($0)"
    let v197 : clap_Command = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let v198 : string = "fs-path"
    let v199 : string = "r#\"" + v198 + "\"#"
    let v200 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v199 
    let v201 : string = "clap::Arg::new($0)"
    let v202 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v200 v201 
    let v203 : string = "$0.short($1)"
    let v204 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v202, 'f') v203 
    let v205 : string = "r#\"" + v198 + "\"#"
    let v206 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : string = "$0.long($1)"
    let v208 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v204, v206) v207 
    let v209 : string = "$0.required($1)"
    let v210 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v208, true) v209 
    let v211 : string = "clap::Command::arg($0, $1)"
    let v212 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v197, v210) v211 
    let v213 : string = "r#\"" + v0 + "\"#"
    let v214 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v213 
    let v215 : string = "clap::Arg::new($0)"
    let v216 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v214 v215 
    let v217 : string = "$0.short($1)"
    let v218 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v216, 'c') v217 
    let v219 : string = "r#\"" + v0 + "\"#"
    let v220 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v219 
    let v221 : string = "$0.long($1)"
    let v222 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v218, v220) v221 
    let v223 : string = "clap::Command::arg($0, $1)"
    let v224 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v212, v222) v223 
    let v225 : string = "clap::Command::subcommand($0, v224)"
    let v226 : clap_Command = Fable.Core.RustInterop.emitRustExpr v192 v225 
    let v227 : string = "rust"
    let v228 : string = "r#\"" + v227 + "\"#"
    let v229 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v228 
    let v230 : string = "clap::Command::new($0)"
    let v231 : clap_Command = Fable.Core.RustInterop.emitRustExpr v229 v230 
    let v232 : string = "r#\"" + v198 + "\"#"
    let v233 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v232 
    let v234 : string = "clap::Arg::new($0)"
    let v235 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v233 v234 
    let v236 : string = "$0.short($1)"
    let v237 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v235, 'f') v236 
    let v238 : string = "r#\"" + v198 + "\"#"
    let v239 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v238 
    let v240 : string = "$0.long($1)"
    let v241 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v237, v239) v240 
    let v242 : string = "$0.required($1)"
    let v243 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v241, true) v242 
    let v244 : string = "clap::Command::arg($0, $1)"
    let v245 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v231, v243) v244 
    let v246 : string = "r#\"" + v143 + "\"#"
    let v247 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v246 
    let v248 : string = "r#\"" + v146 + "\"#"
    let v249 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v248 
    let v250 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v247; v249|]
    let v251 : unativeint = 1 |> unativeint 
    let v254 : unativeint = 0 |> unativeint 
    let v257 : unativeint = 0 |> unativeint 
    let v260 : bool = v254 = v257 
    let v268 : clap_builder_ValueRange =
        if v260 then
            let v263 : string = "clap::builder::ValueRange::new($0..)"
            let v264 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v251 v263 
            v264
        else
            let v265 : string = ""
            let v266 : string = "clap::builder::ValueRange::new($0.." + v265 + "$1)"
            let v267 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v251, v254) v266 
            v267
    let v269 : string = "r#\"" + v168 + "\"#"
    let v270 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v269 
    let v271 : string = "clap::Arg::new($0)"
    let v272 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v270 v271 
    let v273 : string = "$0.short($1)"
    let v274 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v272, 'd') v273 
    let v275 : string = "r#\"" + v168 + "\"#"
    let v276 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v275 
    let v277 : string = "$0.long($1)"
    let v278 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v274, v276) v277 
    let v279 : string = "$0.to_vec()"
    let v280 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v250 v279 
    let v281 : string = "$0.value_names($1)"
    let v282 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v278, v280) v281 
    let v283 : string = "$0.num_args($1)"
    let v284 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v282, v268) v283 
    let v285 : string = "clap::ArgAction::Append"
    let v286 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "$0.action($1)"
    let v288 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v284, v286) v287 
    let v289 : string = "clap::Command::arg($0, $1)"
    let v290 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v245, v288) v289 
    let v291 : unativeint = 0 |> unativeint 
    let v294 : unativeint = 1 |> unativeint 
    let v297 : unativeint = 0 |> unativeint 
    let v300 : bool = v294 = v297 
    let v308 : clap_builder_ValueRange =
        if v300 then
            let v303 : string = "clap::builder::ValueRange::new($0..)"
            let v304 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v291 v303 
            v304
        else
            let v305 : string = "="
            let v306 : string = "clap::builder::ValueRange::new($0.." + v305 + "$1)"
            let v307 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v291, v294) v306 
            v307
    let v309 : string = "wasm"
    let v310 : string = "r#\"" + v309 + "\"#"
    let v311 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v310 
    let v312 : string = "clap::Arg::new($0)"
    let v313 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v311 v312 
    let v314 : string = "$0.short($1)"
    let v315 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v313, 'w') v314 
    let v316 : string = "r#\"" + v309 + "\"#"
    let v317 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : string = "$0.long($1)"
    let v319 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v315, v317) v318 
    let v320 : string = "$0.num_args($1)"
    let v321 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v319, v308) v320 
    let v322 : string = "$0.require_equals($1)"
    let v323 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v321, true) v322 
    let v324 : string = ""
    let v325 : string = "r#\"" + v324 + "\"#"
    let v326 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v325 
    let v327 : string = "$0.default_missing_value($1)"
    let v328 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v323, v326) v327 
    let v329 : string = "clap::Command::arg($0, $1)"
    let v330 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v290, v328) v329 
    let v331 : unativeint = 0 |> unativeint 
    let v334 : unativeint = 1 |> unativeint 
    let v337 : unativeint = 0 |> unativeint 
    let v340 : bool = v334 = v337 
    let v348 : clap_builder_ValueRange =
        if v340 then
            let v343 : string = "clap::builder::ValueRange::new($0..)"
            let v344 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v331 v343 
            v344
        else
            let v345 : string = "="
            let v346 : string = "clap::builder::ValueRange::new($0.." + v345 + "$1)"
            let v347 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v331, v334) v346 
            v347
    let v349 : string = "contract"
    let v350 : string = "r#\"" + v349 + "\"#"
    let v351 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v350 
    let v352 : string = "clap::Arg::new($0)"
    let v353 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let v354 : string = "$0.short($1)"
    let v355 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v353, 'c') v354 
    let v356 : string = "r#\"" + v349 + "\"#"
    let v357 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v356 
    let v358 : string = "$0.long($1)"
    let v359 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v355, v357) v358 
    let v360 : string = "$0.num_args($1)"
    let v361 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v359, v348) v360 
    let v362 : string = "$0.require_equals($1)"
    let v363 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v361, true) v362 
    let v364 : string = "r#\"" + v324 + "\"#"
    let v365 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v364 
    let v366 : string = "$0.default_missing_value($1)"
    let v367 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v363, v365) v366 
    let v368 : string = "clap::Command::arg($0, $1)"
    let v369 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v330, v367) v368 
    let v370 : string = "cleanup"
    let v371 : string = "r#\"" + v370 + "\"#"
    let v372 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v371 
    let v373 : string = "clap::Arg::new($0)"
    let v374 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v372 v373 
    let v375 : string = "$0.short($1)"
    let v376 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v374, 'l') v375 
    let v377 : string = "r#\"" + v370 + "\"#"
    let v378 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v377 
    let v379 : string = "$0.long($1)"
    let v380 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v376, v378) v379 
    let v381 : string = "true"
    let v382 : string = "r#\"" + v381 + "\"#"
    let v383 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v382 
    let v384 : string = "$0.default_value($1)"
    let v385 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v380, v383) v384 
    let v386 : string = "clap::ArgAction::SetFalse"
    let v387 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v386 
    let v388 : string = "$0.action($1)"
    let v389 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v385, v387) v388 
    let v390 : string = "clap::Command::arg($0, $1)"
    let v391 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v369, v389) v390 
    let v392 : string = "clap::Command::subcommand($0, v391)"
    let v393 : clap_Command = Fable.Core.RustInterop.emitRustExpr v226 v392 
    let v394 : string = "typescript"
    let v395 : string = "r#\"" + v394 + "\"#"
    let v396 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v395 
    let v397 : string = "clap::Command::new($0)"
    let v398 : clap_Command = Fable.Core.RustInterop.emitRustExpr v396 v397 
    let v399 : string = "r#\"" + v198 + "\"#"
    let v400 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v399 
    let v401 : string = "clap::Arg::new($0)"
    let v402 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v400 v401 
    let v403 : string = "$0.short($1)"
    let v404 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v402, 'f') v403 
    let v405 : string = "r#\"" + v198 + "\"#"
    let v406 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v405 
    let v407 : string = "$0.long($1)"
    let v408 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v404, v406) v407 
    let v409 : string = "$0.required($1)"
    let v410 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v408, true) v409 
    let v411 : string = "clap::Command::arg($0, $1)"
    let v412 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v398, v410) v411 
    let v413 : string = "r#\"" + v143 + "\"#"
    let v414 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v413 
    let v415 : string = "r#\"" + v146 + "\"#"
    let v416 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v415 
    let v417 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v414; v416|]
    let v418 : unativeint = 1 |> unativeint 
    let v421 : unativeint = 0 |> unativeint 
    let v424 : unativeint = 0 |> unativeint 
    let v427 : bool = v421 = v424 
    let v434 : clap_builder_ValueRange =
        if v427 then
            let v430 : string = "clap::builder::ValueRange::new($0..)"
            let v431 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v418 v430 
            v431
        else
            let v432 : string = "clap::builder::ValueRange::new($0.." + v324 + "$1)"
            let v433 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v418, v421) v432 
            v433
    let v435 : string = "r#\"" + v168 + "\"#"
    let v436 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v435 
    let v437 : string = "clap::Arg::new($0)"
    let v438 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v436 v437 
    let v439 : string = "$0.short($1)"
    let v440 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v438, 'd') v439 
    let v441 : string = "r#\"" + v168 + "\"#"
    let v442 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "$0.long($1)"
    let v444 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v440, v442) v443 
    let v445 : string = "$0.to_vec()"
    let v446 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v417 v445 
    let v447 : string = "$0.value_names($1)"
    let v448 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v444, v446) v447 
    let v449 : string = "$0.num_args($1)"
    let v450 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v448, v434) v449 
    let v451 : string = "clap::ArgAction::Append"
    let v452 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v451 
    let v453 : string = "$0.action($1)"
    let v454 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v450, v452) v453 
    let v455 : string = "clap::Command::arg($0, $1)"
    let v456 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v412, v454) v455 
    let v457 : string = "clap::Command::subcommand($0, v456)"
    let v458 : clap_Command = Fable.Core.RustInterop.emitRustExpr v393 v457 
    let v459 : string = "python"
    let v460 : string = "r#\"" + v459 + "\"#"
    let v461 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v460 
    let v462 : string = "clap::Command::new($0)"
    let v463 : clap_Command = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let v464 : string = "r#\"" + v198 + "\"#"
    let v465 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v464 
    let v466 : string = "clap::Arg::new($0)"
    let v467 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v465 v466 
    let v468 : string = "$0.short($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v467, 'f') v468 
    let v470 : string = "r#\"" + v198 + "\"#"
    let v471 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v470 
    let v472 : string = "$0.long($1)"
    let v473 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, v471) v472 
    let v474 : string = "$0.required($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v473, true) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v463, v475) v476 
    let v478 : string = "r#\"" + v143 + "\"#"
    let v479 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v478 
    let v480 : string = "r#\"" + v146 + "\"#"
    let v481 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v480 
    let v482 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v479; v481|]
    let v483 : unativeint = 1 |> unativeint 
    let v486 : unativeint = 0 |> unativeint 
    let v489 : unativeint = 0 |> unativeint 
    let v492 : bool = v486 = v489 
    let v499 : clap_builder_ValueRange =
        if v492 then
            let v495 : string = "clap::builder::ValueRange::new($0..)"
            let v496 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v483 v495 
            v496
        else
            let v497 : string = "clap::builder::ValueRange::new($0.." + v324 + "$1)"
            let v498 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v483, v486) v497 
            v498
    let v500 : string = "r#\"" + v168 + "\"#"
    let v501 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v500 
    let v502 : string = "clap::Arg::new($0)"
    let v503 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v501 v502 
    let v504 : string = "$0.short($1)"
    let v505 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v503, 'd') v504 
    let v506 : string = "r#\"" + v168 + "\"#"
    let v507 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v506 
    let v508 : string = "$0.long($1)"
    let v509 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v505, v507) v508 
    let v510 : string = "$0.to_vec()"
    let v511 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v482 v510 
    let v512 : string = "$0.value_names($1)"
    let v513 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v509, v511) v512 
    let v514 : string = "$0.num_args($1)"
    let v515 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v513, v499) v514 
    let v516 : string = "clap::ArgAction::Append"
    let v517 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v516 
    let v518 : string = "$0.action($1)"
    let v519 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v515, v517) v518 
    let v520 : string = "clap::Command::arg($0, $1)"
    let v521 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v477, v519) v520 
    let v522 : string = "clap::Command::subcommand($0, v521)"
    let v523 : clap_Command = Fable.Core.RustInterop.emitRustExpr v458 v522 
    let v524 : string = "dib"
    let v525 : string = "r#\"" + v524 + "\"#"
    let v526 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v525 
    let v527 : string = "clap::Command::new($0)"
    let v528 : clap_Command = Fable.Core.RustInterop.emitRustExpr v526 v527 
    let v529 : string = "path"
    let v530 : string = "r#\"" + v529 + "\"#"
    let v531 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v530 
    let v532 : string = "clap::Arg::new($0)"
    let v533 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v531 v532 
    let v534 : string = "$0.short($1)"
    let v535 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v533, 'p') v534 
    let v536 : string = "r#\"" + v529 + "\"#"
    let v537 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v536 
    let v538 : string = "$0.long($1)"
    let v539 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v535, v537) v538 
    let v540 : string = "$0.required($1)"
    let v541 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v539, true) v540 
    let v542 : string = "clap::Command::arg($0, $1)"
    let v543 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v528, v541) v542 
    let v544 : string = "u8"
    let v545 : string = "clap::value_parser!(" + v544 + ").into()"
    let v546 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v545 
    let v547 : string = "retries"
    let v548 : string = "r#\"" + v547 + "\"#"
    let v549 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v548 
    let v550 : string = "clap::Arg::new($0)"
    let v551 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v549 v550 
    let v552 : string = "$0.short($1)"
    let v553 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v551, 'r') v552 
    let v554 : string = "r#\"" + v547 + "\"#"
    let v555 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v554 
    let v556 : string = "$0.long($1)"
    let v557 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v553, v555) v556 
    let v558 : string = "$0.value_parser($1)"
    let v559 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v557, v546) v558 
    let v560 : string = "clap::Command::arg($0, $1)"
    let v561 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v543, v559) v560 
    let v562 : string = "working-directory"
    let v563 : string = "r#\"" + v562 + "\"#"
    let v564 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v563 
    let v565 : string = "clap::Arg::new($0)"
    let v566 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v564 v565 
    let v567 : string = "$0.short($1)"
    let v568 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v566, 'w') v567 
    let v569 : string = "r#\"" + v562 + "\"#"
    let v570 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v569 
    let v571 : string = "$0.long($1)"
    let v572 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v568, v570) v571 
    let v573 : string = "clap::Command::arg($0, $1)"
    let v574 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v561, v572) v573 
    let v575 : string = "clap::Command::subcommand($0, v574)"
    let v576 : clap_Command = Fable.Core.RustInterop.emitRustExpr v523 v575 
    v576
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method4(v0)
    let v3 : string = "std::env::var(&*$0)"
    let v4 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "x"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "fable_library_rust::String_::fromString($0)"
    let v10 : string = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "true; $0 })"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "_result_map_"
    let v14 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = method5()
    let v16 : string = "$0.unwrap_or($1)"
    let v17 : string = Fable.Core.RustInterop.emitRustExpr struct (v14, v15) v16 
    let _v1 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v18 : US3 = US3_1
    let v19 : US4 = US4_2(v18)
    let v20 : string = $"env.get_environment_variable / target: {v19} / var: {v0}"
    let v21 : string = failwith<string> v20
    let _v1 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : US3 = US3_2
    let v23 : US4 = US4_2(v22)
    let v24 : string = $"env.get_environment_variable / target: {v23} / var: {v0}"
    let v25 : string = failwith<string> v24
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : string = "process.env[$0] ?? \"\""
    let v27 : string = Fable.Core.JsInterop.emitJsExpr v0 v26 
    let _v1 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v28 : string = "os"
    let v29 : IOsEnviron = Fable.Core.PyInterop.importAll v28 
    let v30 : string = "v29.environ"
    let v31 : obj = Fable.Core.PyInterop.emitPyExpr () v30 
    let v34 : string = "v31.get($0)"
    let v35 : string = Fable.Core.PyInterop.emitPyExpr v0 v34 
    let mutable _v35 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v38 : (string -> string option) = Option.ofObj
    let v39 : string option = v38 v35
    v39 
    #else
    Some v35 
    #endif
    |> fun x -> _v35 <- Some x
    let v40 : string option = match _v35 with Some x -> x | None -> failwith "optionm'.of_obj / _v35=None"
    let v43 : (string -> US5) = method6()
    let v44 : US5 option = v40 |> Option.map v43 
    let v55 : US5 = US5_1
    let v56 : US5 = v44 |> Option.defaultValue v55 
    let v63 : string =
        match v56 with
        | US5_1 -> (* None *)
            let v61 : string = ""
            v61
        | US5_0(v60) -> (* Some *)
            v60
    let _v1 = v63 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : US3 = US3_1
    let v65 : US4 = US4_0(v64)
    let v66 : string = $"env.get_environment_variable / target: {v65} / var: {v0}"
    let v67 : string = failwith<string> v66
    let _v1 = v67 
    #endif
#else
    let v68 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v69 : string = v68 v0
    let mutable _v69 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v70 : (string -> string option) = Option.ofObj
    let v71 : string option = v70 v69
    v71 
    #else
    Some v69 
    #endif
    |> fun x -> _v69 <- Some x
    let v72 : string option = match _v69 with Some x -> x | None -> failwith "optionm'.of_obj / _v69=None"
    let v75 : (string -> US5) = method6()
    let v76 : US5 option = v72 |> Option.map v75 
    let v87 : US5 = US5_1
    let v88 : US5 = v76 |> Option.defaultValue v87 
    let v95 : string =
        match v88 with
        | US5_1 -> (* None *)
            let v93 : string = ""
            v93
        | US5_0(v92) -> (* Some *)
            v92
    let _v1 = v95 
    #endif
    let v96 : string = _v1 
    v96
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    let v2 : bool = "Verbose" = v1
    let v6 : US1 =
        if v2 then
            let v3 : US0 = US0_0
            US1_0(v3)
        else
            US1_1
    let v47 : US1 =
        match v6 with
        | US1_1 -> (* None *)
            let v9 : bool = "Debug" = v1
            let v13 : US1 =
                if v9 then
                    let v10 : US0 = US0_1
                    US1_0(v10)
                else
                    US1_1
            match v13 with
            | US1_1 -> (* None *)
                let v16 : bool = "Info" = v1
                let v20 : US1 =
                    if v16 then
                        let v17 : US0 = US0_2
                        US1_0(v17)
                    else
                        US1_1
                match v20 with
                | US1_1 -> (* None *)
                    let v23 : bool = "Warning" = v1
                    let v27 : US1 =
                        if v23 then
                            let v24 : US0 = US0_3
                            US1_0(v24)
                        else
                            US1_1
                    match v27 with
                    | US1_1 -> (* None *)
                        let v30 : bool = "Critical" = v1
                        let v34 : US1 =
                            if v30 then
                                let v31 : US0 = US0_4
                                US1_0(v31)
                            else
                                US1_1
                        match v34 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v35) -> (* Some *)
                            US1_0(v35)
                    | US1_0(v28) -> (* Some *)
                        US1_0(v28)
                | US1_0(v21) -> (* Some *)
                    US1_0(v21)
            | US1_0(v14) -> (* Some *)
                US1_0(v14)
        | US1_0(v7) -> (* Some *)
            US1_0(v7)
    let v48 : string = "AUTOMATION"
    let v49 : string = method3(v48)
    let v50 : string = "True"
    let v51 : bool = v49 <> v50 
    let v107 : US2 =
        if v51 then
            US2_1
        else
            let v55 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v56 : System.DateTime = System.DateTime.Now
            let _v55 = v56 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v57 : System.DateTime = System.DateTime.Now
            let _v55 = v57 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v58 : System.DateTime = null |> unbox<System.DateTime>
            let _v55 = v58 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v61 : System.DateTime = System.DateTime.Now
            let _v55 = v61 
            #endif
#if FABLE_COMPILER_PYTHON
            let v62 : System.DateTime = System.DateTime.Now
            let _v55 = v62 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v63 : System.DateTime = System.DateTime.Now
            let _v55 = v63 
            #endif
#else
            let v64 : System.DateTime = System.DateTime.Now
            let _v55 = v64 
            #endif
            let v65 : System.DateTime = _v55 
            let v70 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v71 : (System.DateTime -> int64) = _.Ticks
            let v72 : int64 = v71 v65
            let _v70 = v72 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v73 : (System.DateTime -> int64) = _.Ticks
            let v74 : int64 = v73 v65
            let _v70 = v74 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v75 : int64 = null |> unbox<int64>
            let _v70 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v78 : (System.DateTime -> int64) = _.Ticks
            let v79 : int64 = v78 v65
            let _v70 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : (System.DateTime -> int64) = _.Ticks
            let v81 : int64 = v80 v65
            let _v70 = v81 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v82 : (System.DateTime -> int64) = _.Ticks
            let v83 : int64 = v82 v65
            let _v70 = v83 
            #endif
#else
            let v84 : (System.DateTime -> int64) = _.Ticks
            let v85 : int64 = v84 v65
            let _v70 = v85 
            #endif
            let v86 : int64 = _v70 
            let v103 : int64 = v86 |> int64 
            US2_0(v103)
    struct (v47, v107)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v2 : US1, v3 : US2) = method2()
    let _v1 = struct (v2, v3) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : US1 = US1_1
    let v5 : US2 = US2_1
    let _v1 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "AUTOMATION"
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "String::from($0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v23 
    #endif
#else
    let v26 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v26 
    #endif
    let v29 : std_string_String = _v10 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v29 v34 
    let _v7 = v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v36 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "fable_library_rust::String_::fromString($0)"
    let v63 : string = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let _v7 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "String::from($0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v67 
    let _v66 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v69 
    let _v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v71 : string = "String::from($0)"
    let v72 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v79 
    #endif
#else
    let v82 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v82 
    #endif
    let v85 : std_string_String = _v66 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v85 v90 
    let _v7 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v92 : string = null |> unbox<string>
    let _v7 = v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : string = null |> unbox<string>
    let _v7 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : string = null |> unbox<string>
    let _v7 = v98 
    #endif
#else
    let v101 : string = null |> unbox<string>
    let _v7 = v101 
    #endif
    let v104 : string = _v7 
    let v109 : string = "True"
    let v110 : bool = v104 <> v109 
    let v121 : US2 =
        if v110 then
            US2_1
        else
            let v114 : string = $"near_sdk::env::block_timestamp()"
            let v115 : uint64 = Fable.Core.RustInterop.emitRustExpr () v114 
            let v116 : (uint64 -> int64) = int64
            let v117 : int64 = v116 v115
            US2_0(v117)
    let v122 : US1 = US1_1
    let _v1 = struct (v122, v121) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v123 : US1, v124 : US2) = method2()
    let _v1 = struct (v123, v124) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v125 : US1, v126 : US2) = method2()
    let _v1 = struct (v125, v126) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v127 : US1, v128 : US2) = method2()
    let _v1 = struct (v127, v128) 
    #endif
#else
    let struct (v129 : US1, v130 : US2) = method2()
    let _v1 = struct (v129, v130) 
    #endif
    let struct (v131 : US1, v132 : US2) = _v1 
    let v137 : Mut0 = {l0 = 1L} : Mut0
    let v138 : (string -> unit) = closure4()
    let v139 : Mut1 = {l0 = v138} : Mut1
    let v140 : Mut2 = {l0 = true} : Mut2
    let v141 : string = ""
    let v142 : Mut3 = {l0 = v141} : Mut3
    let v145 : US0 =
        match v131 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v143) -> (* Some *)
            v143
    let v146 : Mut4 = {l0 = v145} : Mut4
    let v153 : int64 option =
        match v132 with
        | US2_1 -> (* None *)
            let v151 : int64 option = None
            v151
        | US2_0(v147) -> (* Some *)
            let v148 : int64 option = Some v147 
            v148
    struct (v137, v139, v140, v142, v146, v153)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v8 
        ()
and method7 (v0 : US0) : bool =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : US0 = v21.l0
    let v36 : bool = v19.l0
    let v37 : bool = v36 = false
    if v37 then
        false
    else
        let v38 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v39 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v35
        let v40 : bool = v38 >= v39
        v40
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : (int64 -> US2) = method9()
    let v8 : US2 option = v5 |> Option.map v7 
    let v19 : US2 = US2_1
    let v20 : US2 = v8 |> Option.defaultValue v19 
    let v117 : System.DateTime =
        match v20 with
        | US2_1 -> (* None *)
            let v101 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v102 : System.DateTime = System.DateTime.Now
            let _v101 = v102 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v103 : System.DateTime = System.DateTime.Now
            let _v101 = v103 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v104 : System.DateTime = null |> unbox<System.DateTime>
            let _v101 = v104 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v107 : System.DateTime = System.DateTime.Now
            let _v101 = v107 
            #endif
#if FABLE_COMPILER_PYTHON
            let v108 : System.DateTime = System.DateTime.Now
            let _v101 = v108 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v109 : System.DateTime = System.DateTime.Now
            let _v101 = v109 
            #endif
#else
            let v110 : System.DateTime = System.DateTime.Now
            let _v101 = v110 
            #endif
            let v111 : System.DateTime = _v101 
            v111
        | US2_0(v24) -> (* Some *)
            let v25 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v26 : System.DateTime = System.DateTime.Now
            let _v25 = v26 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : System.DateTime = System.DateTime.Now
            let _v25 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : System.DateTime = null |> unbox<System.DateTime>
            let _v25 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : System.DateTime = System.DateTime.Now
            let _v25 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : System.DateTime = System.DateTime.Now
            let _v25 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v33 : System.DateTime = System.DateTime.Now
            let _v25 = v33 
            #endif
#else
            let v34 : System.DateTime = System.DateTime.Now
            let _v25 = v34 
            #endif
            let v35 : System.DateTime = _v25 
            let v40 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v41 : (System.DateTime -> int64) = _.Ticks
            let v42 : int64 = v41 v35
            let _v40 = v42 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v43 : (System.DateTime -> int64) = _.Ticks
            let v44 : int64 = v43 v35
            let _v40 = v44 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v45 : int64 = null |> unbox<int64>
            let _v40 = v45 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v48 : (System.DateTime -> int64) = _.Ticks
            let v49 : int64 = v48 v35
            let _v40 = v49 
            #endif
#if FABLE_COMPILER_PYTHON
            let v50 : (System.DateTime -> int64) = _.Ticks
            let v51 : int64 = v50 v35
            let _v40 = v51 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v52 : (System.DateTime -> int64) = _.Ticks
            let v53 : int64 = v52 v35
            let _v40 = v53 
            #endif
#else
            let v54 : (System.DateTime -> int64) = _.Ticks
            let v55 : int64 = v54 v35
            let _v40 = v55 
            #endif
            let v56 : int64 = _v40 
            let v73 : int64 = v56 |> int64 
            let v76 : int64 = v73 - v24
            let v77 : System.TimeSpan = v76 |> System.TimeSpan 
            let v82 : (System.TimeSpan -> int32) = _.Hours
            let v83 : int32 = v82 v77
            let v86 : (System.TimeSpan -> int32) = _.Minutes
            let v87 : int32 = v86 v77
            let v90 : (System.TimeSpan -> int32) = _.Seconds
            let v91 : int32 = v90 v77
            let v94 : (System.TimeSpan -> int32) = _.Milliseconds
            let v95 : int32 = v94 v77
            let v98 : System.DateTime = System.DateTime (1, 1, 1, v83, v87, v91, v95)
            v98
    let v118 : string = method10()
    let v121 : bool = v118 = ""
    let v123 : string =
        if v121 then
            let v122 : string = "M-d-y hh:mm:ss tt"
            v122
        else
            v118
    let v124 : (string -> string) = v117.ToString
    let v125 : string = v124 v123
    let _v6 = v125 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : (int64 -> US2) = method9()
    let v140 : US2 option = v5 |> Option.map v139 
    let v151 : US2 = US2_1
    let v152 : US2 = v140 |> Option.defaultValue v151 
    let v249 : System.DateTime =
        match v152 with
        | US2_1 -> (* None *)
            let v233 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v234 : System.DateTime = System.DateTime.Now
            let _v233 = v234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v235 : System.DateTime = System.DateTime.Now
            let _v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v236 : System.DateTime = null |> unbox<System.DateTime>
            let _v233 = v236 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v239 : System.DateTime = System.DateTime.Now
            let _v233 = v239 
            #endif
#if FABLE_COMPILER_PYTHON
            let v240 : System.DateTime = System.DateTime.Now
            let _v233 = v240 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v241 : System.DateTime = System.DateTime.Now
            let _v233 = v241 
            #endif
#else
            let v242 : System.DateTime = System.DateTime.Now
            let _v233 = v242 
            #endif
            let v243 : System.DateTime = _v233 
            v243
        | US2_0(v156) -> (* Some *)
            let v157 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v158 : System.DateTime = System.DateTime.Now
            let _v157 = v158 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v159 : System.DateTime = System.DateTime.Now
            let _v157 = v159 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v160 : System.DateTime = null |> unbox<System.DateTime>
            let _v157 = v160 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v163 : System.DateTime = System.DateTime.Now
            let _v157 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v164 : System.DateTime = System.DateTime.Now
            let _v157 = v164 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v165 : System.DateTime = System.DateTime.Now
            let _v157 = v165 
            #endif
#else
            let v166 : System.DateTime = System.DateTime.Now
            let _v157 = v166 
            #endif
            let v167 : System.DateTime = _v157 
            let v172 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v173 : (System.DateTime -> int64) = _.Ticks
            let v174 : int64 = v173 v167
            let _v172 = v174 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v175 : (System.DateTime -> int64) = _.Ticks
            let v176 : int64 = v175 v167
            let _v172 = v176 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v177 : int64 = null |> unbox<int64>
            let _v172 = v177 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v167
            let _v172 = v181 
            #endif
#if FABLE_COMPILER_PYTHON
            let v182 : (System.DateTime -> int64) = _.Ticks
            let v183 : int64 = v182 v167
            let _v172 = v183 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v184 : (System.DateTime -> int64) = _.Ticks
            let v185 : int64 = v184 v167
            let _v172 = v185 
            #endif
#else
            let v186 : (System.DateTime -> int64) = _.Ticks
            let v187 : int64 = v186 v167
            let _v172 = v187 
            #endif
            let v188 : int64 = _v172 
            let v205 : int64 = v188 |> int64 
            let v208 : int64 = v205 - v156
            let v209 : System.TimeSpan = v208 |> System.TimeSpan 
            let v214 : (System.TimeSpan -> int32) = _.Hours
            let v215 : int32 = v214 v209
            let v218 : (System.TimeSpan -> int32) = _.Minutes
            let v219 : int32 = v218 v209
            let v222 : (System.TimeSpan -> int32) = _.Seconds
            let v223 : int32 = v222 v209
            let v226 : (System.TimeSpan -> int32) = _.Milliseconds
            let v227 : int32 = v226 v209
            let v230 : System.DateTime = System.DateTime (1, 1, 1, v215, v219, v223, v227)
            v230
    let v250 : string = method10()
    let v253 : bool = v250 = ""
    let v255 : string =
        if v253 then
            let v254 : string = "M-d-y hh:mm:ss tt"
            v254
        else
            v250
    let v256 : (string -> string) = v249.ToString
    let v257 : string = v256 v255
    let _v6 = v257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v271 : string = $"near_sdk::env::block_timestamp()"
    let v272 : uint64 = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : (int64 -> US2) = method9()
    let v274 : US2 option = v5 |> Option.map v273 
    let v285 : US2 = US2_1
    let v286 : US2 = v274 |> Option.defaultValue v285 
    let v297 : uint64 =
        match v286 with
        | US2_1 -> (* None *)
            v272
        | US2_0(v290) -> (* Some *)
            let v291 : (int64 -> uint64) = uint64
            let v292 : uint64 = v291 v290
            let v295 : uint64 = v272 - v292
            v295
    let v298 : uint64 = v297 / 1000000000UL
    let v299 : uint64 = v298 % 60UL
    let v300 : uint64 = v298 / 60UL
    let v301 : uint64 = v300 % 60UL
    let v302 : uint64 = v298 / 3600UL
    let v303 : uint64 = v302 % 24UL
    let v304 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v305 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v303, v301, v299) v304 
    let v306 : string = "fable_library_rust::String_::fromString($0)"
    let v307 : string = Fable.Core.RustInterop.emitRustExpr v305 v306 
    let _v6 = v307 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v308 : (int64 -> US2) = method9()
    let v309 : US2 option = v5 |> Option.map v308 
    let v320 : US2 = US2_1
    let v321 : US2 = v309 |> Option.defaultValue v320 
    let v418 : System.DateTime =
        match v321 with
        | US2_1 -> (* None *)
            let v402 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v403 : System.DateTime = System.DateTime.Now
            let _v402 = v403 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v404 : System.DateTime = System.DateTime.Now
            let _v402 = v404 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v405 : System.DateTime = null |> unbox<System.DateTime>
            let _v402 = v405 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v408 : System.DateTime = System.DateTime.Now
            let _v402 = v408 
            #endif
#if FABLE_COMPILER_PYTHON
            let v409 : System.DateTime = System.DateTime.Now
            let _v402 = v409 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v410 : System.DateTime = System.DateTime.Now
            let _v402 = v410 
            #endif
#else
            let v411 : System.DateTime = System.DateTime.Now
            let _v402 = v411 
            #endif
            let v412 : System.DateTime = _v402 
            v412
        | US2_0(v325) -> (* Some *)
            let v326 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v327 : System.DateTime = System.DateTime.Now
            let _v326 = v327 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v328 : System.DateTime = System.DateTime.Now
            let _v326 = v328 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v329 : System.DateTime = null |> unbox<System.DateTime>
            let _v326 = v329 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v332 : System.DateTime = System.DateTime.Now
            let _v326 = v332 
            #endif
#if FABLE_COMPILER_PYTHON
            let v333 : System.DateTime = System.DateTime.Now
            let _v326 = v333 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v334 : System.DateTime = System.DateTime.Now
            let _v326 = v334 
            #endif
#else
            let v335 : System.DateTime = System.DateTime.Now
            let _v326 = v335 
            #endif
            let v336 : System.DateTime = _v326 
            let v341 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v342 : (System.DateTime -> int64) = _.Ticks
            let v343 : int64 = v342 v336
            let _v341 = v343 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v344 : (System.DateTime -> int64) = _.Ticks
            let v345 : int64 = v344 v336
            let _v341 = v345 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v346 : int64 = null |> unbox<int64>
            let _v341 = v346 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v349 : (System.DateTime -> int64) = _.Ticks
            let v350 : int64 = v349 v336
            let _v341 = v350 
            #endif
#if FABLE_COMPILER_PYTHON
            let v351 : (System.DateTime -> int64) = _.Ticks
            let v352 : int64 = v351 v336
            let _v341 = v352 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v353 : (System.DateTime -> int64) = _.Ticks
            let v354 : int64 = v353 v336
            let _v341 = v354 
            #endif
#else
            let v355 : (System.DateTime -> int64) = _.Ticks
            let v356 : int64 = v355 v336
            let _v341 = v356 
            #endif
            let v357 : int64 = _v341 
            let v374 : int64 = v357 |> int64 
            let v377 : int64 = v374 - v325
            let v378 : System.TimeSpan = v377 |> System.TimeSpan 
            let v383 : (System.TimeSpan -> int32) = _.Hours
            let v384 : int32 = v383 v378
            let v387 : (System.TimeSpan -> int32) = _.Minutes
            let v388 : int32 = v387 v378
            let v391 : (System.TimeSpan -> int32) = _.Seconds
            let v392 : int32 = v391 v378
            let v395 : (System.TimeSpan -> int32) = _.Milliseconds
            let v396 : int32 = v395 v378
            let v399 : System.DateTime = System.DateTime (1, 1, 1, v384, v388, v392, v396)
            v399
    let v419 : string = method11()
    let v422 : bool = v419 = ""
    let v424 : string =
        if v422 then
            let v423 : string = "M-d-y hh:mm:ss tt"
            v423
        else
            v419
    let v425 : (string -> string) = v418.ToString
    let v426 : string = v425 v424
    let _v6 = v426 
    #endif
#if FABLE_COMPILER_PYTHON
    let v440 : (int64 -> US2) = method9()
    let v441 : US2 option = v5 |> Option.map v440 
    let v452 : US2 = US2_1
    let v453 : US2 = v441 |> Option.defaultValue v452 
    let v550 : System.DateTime =
        match v453 with
        | US2_1 -> (* None *)
            let v534 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v535 : System.DateTime = System.DateTime.Now
            let _v534 = v535 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v536 : System.DateTime = System.DateTime.Now
            let _v534 = v536 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v537 : System.DateTime = null |> unbox<System.DateTime>
            let _v534 = v537 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v540 : System.DateTime = System.DateTime.Now
            let _v534 = v540 
            #endif
#if FABLE_COMPILER_PYTHON
            let v541 : System.DateTime = System.DateTime.Now
            let _v534 = v541 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v542 : System.DateTime = System.DateTime.Now
            let _v534 = v542 
            #endif
#else
            let v543 : System.DateTime = System.DateTime.Now
            let _v534 = v543 
            #endif
            let v544 : System.DateTime = _v534 
            v544
        | US2_0(v457) -> (* Some *)
            let v458 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v459 : System.DateTime = System.DateTime.Now
            let _v458 = v459 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v460 : System.DateTime = System.DateTime.Now
            let _v458 = v460 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v461 : System.DateTime = null |> unbox<System.DateTime>
            let _v458 = v461 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v464 : System.DateTime = System.DateTime.Now
            let _v458 = v464 
            #endif
#if FABLE_COMPILER_PYTHON
            let v465 : System.DateTime = System.DateTime.Now
            let _v458 = v465 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v466 : System.DateTime = System.DateTime.Now
            let _v458 = v466 
            #endif
#else
            let v467 : System.DateTime = System.DateTime.Now
            let _v458 = v467 
            #endif
            let v468 : System.DateTime = _v458 
            let v473 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v474 : (System.DateTime -> int64) = _.Ticks
            let v475 : int64 = v474 v468
            let _v473 = v475 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v476 : (System.DateTime -> int64) = _.Ticks
            let v477 : int64 = v476 v468
            let _v473 = v477 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v478 : int64 = null |> unbox<int64>
            let _v473 = v478 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v481 : (System.DateTime -> int64) = _.Ticks
            let v482 : int64 = v481 v468
            let _v473 = v482 
            #endif
#if FABLE_COMPILER_PYTHON
            let v483 : (System.DateTime -> int64) = _.Ticks
            let v484 : int64 = v483 v468
            let _v473 = v484 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v485 : (System.DateTime -> int64) = _.Ticks
            let v486 : int64 = v485 v468
            let _v473 = v486 
            #endif
#else
            let v487 : (System.DateTime -> int64) = _.Ticks
            let v488 : int64 = v487 v468
            let _v473 = v488 
            #endif
            let v489 : int64 = _v473 
            let v506 : int64 = v489 |> int64 
            let v509 : int64 = v506 - v457
            let v510 : System.TimeSpan = v509 |> System.TimeSpan 
            let v515 : (System.TimeSpan -> int32) = _.Hours
            let v516 : int32 = v515 v510
            let v519 : (System.TimeSpan -> int32) = _.Minutes
            let v520 : int32 = v519 v510
            let v523 : (System.TimeSpan -> int32) = _.Seconds
            let v524 : int32 = v523 v510
            let v527 : (System.TimeSpan -> int32) = _.Milliseconds
            let v528 : int32 = v527 v510
            let v531 : System.DateTime = System.DateTime (1, 1, 1, v516, v520, v524, v528)
            v531
    let v551 : string = method11()
    let v554 : bool = v551 = ""
    let v556 : string =
        if v554 then
            let v555 : string = "M-d-y hh:mm:ss tt"
            v555
        else
            v551
    let v557 : (string -> string) = v550.ToString
    let v558 : string = v557 v556
    let _v6 = v558 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v572 : (int64 -> US2) = method9()
    let v573 : US2 option = v5 |> Option.map v572 
    let v584 : US2 = US2_1
    let v585 : US2 = v573 |> Option.defaultValue v584 
    let v682 : System.DateTime =
        match v585 with
        | US2_1 -> (* None *)
            let v666 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v667 : System.DateTime = System.DateTime.Now
            let _v666 = v667 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v668 : System.DateTime = System.DateTime.Now
            let _v666 = v668 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v669 : System.DateTime = null |> unbox<System.DateTime>
            let _v666 = v669 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v672 : System.DateTime = System.DateTime.Now
            let _v666 = v672 
            #endif
#if FABLE_COMPILER_PYTHON
            let v673 : System.DateTime = System.DateTime.Now
            let _v666 = v673 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v674 : System.DateTime = System.DateTime.Now
            let _v666 = v674 
            #endif
#else
            let v675 : System.DateTime = System.DateTime.Now
            let _v666 = v675 
            #endif
            let v676 : System.DateTime = _v666 
            v676
        | US2_0(v589) -> (* Some *)
            let v590 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v591 : System.DateTime = System.DateTime.Now
            let _v590 = v591 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v592 : System.DateTime = System.DateTime.Now
            let _v590 = v592 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v593 : System.DateTime = null |> unbox<System.DateTime>
            let _v590 = v593 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v596 : System.DateTime = System.DateTime.Now
            let _v590 = v596 
            #endif
#if FABLE_COMPILER_PYTHON
            let v597 : System.DateTime = System.DateTime.Now
            let _v590 = v597 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v598 : System.DateTime = System.DateTime.Now
            let _v590 = v598 
            #endif
#else
            let v599 : System.DateTime = System.DateTime.Now
            let _v590 = v599 
            #endif
            let v600 : System.DateTime = _v590 
            let v605 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v606 : (System.DateTime -> int64) = _.Ticks
            let v607 : int64 = v606 v600
            let _v605 = v607 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v608 : (System.DateTime -> int64) = _.Ticks
            let v609 : int64 = v608 v600
            let _v605 = v609 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v610 : int64 = null |> unbox<int64>
            let _v605 = v610 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v613 : (System.DateTime -> int64) = _.Ticks
            let v614 : int64 = v613 v600
            let _v605 = v614 
            #endif
#if FABLE_COMPILER_PYTHON
            let v615 : (System.DateTime -> int64) = _.Ticks
            let v616 : int64 = v615 v600
            let _v605 = v616 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v617 : (System.DateTime -> int64) = _.Ticks
            let v618 : int64 = v617 v600
            let _v605 = v618 
            #endif
#else
            let v619 : (System.DateTime -> int64) = _.Ticks
            let v620 : int64 = v619 v600
            let _v605 = v620 
            #endif
            let v621 : int64 = _v605 
            let v638 : int64 = v621 |> int64 
            let v641 : int64 = v638 - v589
            let v642 : System.TimeSpan = v641 |> System.TimeSpan 
            let v647 : (System.TimeSpan -> int32) = _.Hours
            let v648 : int32 = v647 v642
            let v651 : (System.TimeSpan -> int32) = _.Minutes
            let v652 : int32 = v651 v642
            let v655 : (System.TimeSpan -> int32) = _.Seconds
            let v656 : int32 = v655 v642
            let v659 : (System.TimeSpan -> int32) = _.Milliseconds
            let v660 : int32 = v659 v642
            let v663 : System.DateTime = System.DateTime (1, 1, 1, v648, v652, v656, v660)
            v663
    let v683 : string = method11()
    let v686 : bool = v683 = ""
    let v688 : string =
        if v686 then
            let v687 : string = "M-d-y hh:mm:ss tt"
            v687
        else
            v683
    let v689 : (string -> string) = v682.ToString
    let v690 : string = v689 v688
    let _v6 = v690 
    #endif
#else
    let v704 : (int64 -> US2) = method9()
    let v705 : US2 option = v5 |> Option.map v704 
    let v716 : US2 = US2_1
    let v717 : US2 = v705 |> Option.defaultValue v716 
    let v814 : System.DateTime =
        match v717 with
        | US2_1 -> (* None *)
            let v798 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v799 : System.DateTime = System.DateTime.Now
            let _v798 = v799 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v800 : System.DateTime = System.DateTime.Now
            let _v798 = v800 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v801 : System.DateTime = null |> unbox<System.DateTime>
            let _v798 = v801 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v804 : System.DateTime = System.DateTime.Now
            let _v798 = v804 
            #endif
#if FABLE_COMPILER_PYTHON
            let v805 : System.DateTime = System.DateTime.Now
            let _v798 = v805 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v806 : System.DateTime = System.DateTime.Now
            let _v798 = v806 
            #endif
#else
            let v807 : System.DateTime = System.DateTime.Now
            let _v798 = v807 
            #endif
            let v808 : System.DateTime = _v798 
            v808
        | US2_0(v721) -> (* Some *)
            let v722 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v723 : System.DateTime = System.DateTime.Now
            let _v722 = v723 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v724 : System.DateTime = System.DateTime.Now
            let _v722 = v724 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v725 : System.DateTime = null |> unbox<System.DateTime>
            let _v722 = v725 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v728 : System.DateTime = System.DateTime.Now
            let _v722 = v728 
            #endif
#if FABLE_COMPILER_PYTHON
            let v729 : System.DateTime = System.DateTime.Now
            let _v722 = v729 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v730 : System.DateTime = System.DateTime.Now
            let _v722 = v730 
            #endif
#else
            let v731 : System.DateTime = System.DateTime.Now
            let _v722 = v731 
            #endif
            let v732 : System.DateTime = _v722 
            let v737 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v738 : (System.DateTime -> int64) = _.Ticks
            let v739 : int64 = v738 v732
            let _v737 = v739 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v740 : (System.DateTime -> int64) = _.Ticks
            let v741 : int64 = v740 v732
            let _v737 = v741 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v742 : int64 = null |> unbox<int64>
            let _v737 = v742 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v745 : (System.DateTime -> int64) = _.Ticks
            let v746 : int64 = v745 v732
            let _v737 = v746 
            #endif
#if FABLE_COMPILER_PYTHON
            let v747 : (System.DateTime -> int64) = _.Ticks
            let v748 : int64 = v747 v732
            let _v737 = v748 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v749 : (System.DateTime -> int64) = _.Ticks
            let v750 : int64 = v749 v732
            let _v737 = v750 
            #endif
#else
            let v751 : (System.DateTime -> int64) = _.Ticks
            let v752 : int64 = v751 v732
            let _v737 = v752 
            #endif
            let v753 : int64 = _v737 
            let v770 : int64 = v753 |> int64 
            let v773 : int64 = v770 - v721
            let v774 : System.TimeSpan = v773 |> System.TimeSpan 
            let v779 : (System.TimeSpan -> int32) = _.Hours
            let v780 : int32 = v779 v774
            let v783 : (System.TimeSpan -> int32) = _.Minutes
            let v784 : int32 = v783 v774
            let v787 : (System.TimeSpan -> int32) = _.Seconds
            let v788 : int32 = v787 v774
            let v791 : (System.TimeSpan -> int32) = _.Milliseconds
            let v792 : int32 = v791 v774
            let v795 : System.DateTime = System.DateTime (1, 1, 1, v780, v784, v788, v792)
            v795
    let v815 : string = method11()
    let v818 : bool = v815 = ""
    let v820 : string =
        if v818 then
            let v819 : string = "M-d-y hh:mm:ss tt"
            v819
        else
            v815
    let v821 : (string -> string) = v814.ToString
    let v822 : string = v821 v820
    let _v6 = v822 
    #endif
    let v836 : string = _v6 
    v836
and method14 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method13 (v0 : char) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"{v0}"
    let v6 : unit = ()
    let v7 : (unit -> unit) = closure7(v2, v3)
    let v8 : unit = (fun () -> v7 (); v6) ()
    let v11 : string = v2.l0
    v11
and method15 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v0 : string = "Debug"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_blue"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_blue"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_blue"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[94m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[94m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[94m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[94m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method17 (v0 : (string [])) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "args"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"%A{v0}"
    let v33 : string = $"{v30}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = " }"
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v2, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = v2.l0
    v50
and method18 (v0 : string) : string =
    let v1 : char list = []
    let v2 : (char list -> (char [])) = List.toArray
    let v3 : (char []) = v2 v1
    let v6 : string = v0.TrimStart v3 
    let v28 : char list = []
    let v29 : char list = '/' :: v28 
    let v32 : char list = ' ' :: v29 
    let v35 : (char list -> (char [])) = List.toArray
    let v36 : (char []) = v35 v32
    let v39 : string = v6.TrimEnd v36 
    v39
and method16 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method17(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.main"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure10(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method19 (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure8(v17)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : (string -> unit) = closure9()
    let v41 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v42 
    let _v41 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v43 
    let _v41 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = v20.l0
    let v45 : bool = v44 = ""
    let v53 : string =
        if v45 then
            v0
        else
            let v46 : bool = v0 = ""
            if v46 then
                let v47 : string = v20.l0
                v47
            else
                let v48 : string = v20.l0
                let v49 : string = "\n"
                let v50 : string = v48 + v49 
                let v51 : string = v50 + v0 
                v51
    let v54 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v55 
    let _v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v57 
    let _v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v59 
    let _v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v61 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v61 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v67 
    #endif
#else
    let v70 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v70 
    #endif
    let v73 : Ref<Str> = _v54 
    let v78 : string = $"$0.chars()"
    let v79 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v73 v78 
    let v80 : string = "$0"
    let v81 : _ = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.collect::<Vec<_>>()"
    let v83 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v85 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v87 : bool = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "x"
    let v89 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "String::from_iter($0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "true; $0 }).collect::<Vec<_>>()"
    let v93 : bool = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "_vec_map"
    let v95 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "$0.len()"
    let v97 : unativeint = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : int32 = v97 |> int32 
    let v105 : string = ""
    let v106 : bool = v0 <> v105 
    let v110 : bool =
        if v106 then
            let v109 : bool = v98 <= 1
            v109
        else
            false
    if v110 then
        v20.l0 <- v53
        ()
    else
        v20.l0 <- v105
        let v111 : string = "true; $0.into_iter().for_each(|x| { //"
        let v112 : bool = Fable.Core.RustInterop.emitRustExpr v95 v111 
        let v113 : string = "x"
        let v114 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v113 
        let v115 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v116 : bool = Fable.Core.RustInterop.emitRustExpr v114 v115 
        let v117 : string = $"true"
        let v118 : bool = Fable.Core.RustInterop.emitRustExpr () v117 
        let v119 : string = "true; }); //"
        let v120 : bool = Fable.Core.RustInterop.emitRustExpr () v119 
        ()
    let _v41 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v40 v0
    let _v41 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    v40 v0
    let _v41 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v40 v0
    let _v41 = () 
    #endif
#else
    v40 v0
    let _v41 = () 
    #endif
    _v41 
    let v121 : (string -> unit) = v18.l0
    v121 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method16(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "String::from($0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method21 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method22 () : string =
    let v0 : string = "py-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method23 () : (std_string_String -> US7) =
    closure13()
and method24 () : string =
    let v0 : string = "env"
    v0
and method25 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method26 () : (Vec<std_string_String> -> US11) =
    closure14()
and method27 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method30 (v0 : string) : string =
    v0
and method29 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method30(v0)
    struct (v1, v2)
and method28 (v0 : string, v1 : string) : string =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v16 
    #endif
#else
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v19 
    #endif
    let v22 : Ref<Str> = _v3 
    let v27 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v28 
    let _v27 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v30 
    let _v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v32 
    let _v27 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v40 
    #endif
#else
    let v43 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v43 
    #endif
    let v46 : std_string_String = _v27 
    let v51 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v52 : string = "std::path::PathBuf::from($0)"
    let v53 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v52 
    let _v51 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "std::path::PathBuf::from($0)"
    let v55 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v54 
    let _v51 = v55 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v56 : string = "std::path::PathBuf::from($0)"
    let v57 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v56 
    let _v51 = v57 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v58 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v58 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v64 
    #endif
#else
    let v67 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v67 
    #endif
    let v70 : std_path_PathBuf = _v51 
    let v75 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "&*$0"
    let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v76 
    let _v75 = v77 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v78 : string = "&*$0"
    let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v78 
    let _v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v80 : string = "&*$0"
    let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let _v75 = v81 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v88 
    #endif
#else
    let v91 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v91 
    #endif
    let v94 : Ref<Str> = _v75 
    let v99 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = "String::from($0)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v100 
    let _v99 = v101 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = "String::from($0)"
    let v103 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v102 
    let _v99 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "String::from($0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v104 
    let _v99 = v105 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v112 
    #endif
#else
    let v115 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v115 
    #endif
    let v118 : std_string_String = _v99 
    let v123 : string = "$0.join($1)"
    let v124 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v70, v118) v123 
    let v125 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v126 : string = "$0.display()"
    let v127 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v126 
    let _v125 = v127 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v128 : string = "$0.display()"
    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v128 
    let _v125 = v129 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = "$0.display()"
    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v130 
    let _v125 = v131 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v135 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v138 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v138 
    #endif
#else
    let v141 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v141 
    #endif
    let v144 : std_path_Display = _v125 
    let v149 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v150 : string = "format!(\"{}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let _v149 = v151 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v152 : string = "format!(\"{}\", $0)"
    let v153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v152 
    let _v149 = v153 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v154 : string = "format!(\"{}\", $0)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v154 
    let _v149 = v155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v159 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v159 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v162 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v162 
    #endif
#else
    let v165 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v165 
    #endif
    let v168 : std_string_String = _v149 
    let v173 : string = "fable_library_rust::String_::fromString($0)"
    let v174 : string = Fable.Core.RustInterop.emitRustExpr v168 v173 
    let _v2 = v174 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v175 : US3 = US3_1
    let v176 : US4 = US4_2(v175)
    let v177 : string = $"file_system.(</>) / target: {v176} / a: {v0} / b: {v1}"
    let v178 : string = failwith<string> v177
    let _v2 = v178 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v179 : string = null |> unbox<string>
    let _v2 = v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v182 : string = "path"
    let v183 : IPathJoin = Fable.Core.JsInterop.importAll v182 
    let struct (v184 : string, v185 : string) = method29(v1, v0)
    let v186 : string = "v183.join($0, $1)"
    let v187 : string = Fable.Core.JsInterop.emitJsExpr struct (v184, v185) v186 
    let _v2 = v187 
    #endif
#if FABLE_COMPILER_PYTHON
    let v188 : US3 = US3_0
    let v189 : US4 = US4_4(v188)
    let v190 : string = $"file_system.(</>) / target: {v189} / a: {v0} / b: {v1}"
    let v191 : string = failwith<string> v190
    let _v2 = v191 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v192 : US3 = US3_1
    let v193 : US4 = US4_0(v192)
    let v194 : string = $"file_system.(</>) / target: {v193} / a: {v0} / b: {v1}"
    let v195 : string = failwith<string> v194
    let _v2 = v195 
    #endif
#else
    let v196 : string = System.IO.Path.Combine (v0, v1)
    let _v2 = v196 
    #endif
    let v197 : string = _v2 
    v197
and method32 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v78 : bool =
        if v75 then
            let v76 : string = "$0.is_dir()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v69 v76 
            v77
        else
            false
    let _v1 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : bool = null |> unbox<bool>
    let _v1 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : bool = null |> unbox<bool>
    let _v1 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "fs"
    let v86 : IFsExistsSync = Fable.Core.JsInterop.importAll v85 
    let v87 : string = "$0.existsSync($1)"
    let v88 : bool = Fable.Core.JsInterop.emitJsExpr struct (v86, v0) v87 
    let _v1 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : bool = null |> unbox<bool>
    let _v1 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _v1 = v92 
    #endif
#else
    let v95 : (string -> bool) = System.IO.Directory.Exists
    let v96 : bool = v95 v0
    let _v1 = v96 
    #endif
    let v97 : bool = _v1 
    v97
and method34 (v0 : string) : string option =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v75 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v81 : string = "$0.display()"
    let v82 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v81 
    let _v80 = v82 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : string = "$0.display()"
    let v84 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v83 
    let _v80 = v84 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "$0.display()"
    let v86 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v85 
    let _v80 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v93 
    #endif
#else
    let v96 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v96 
    #endif
    let v99 : std_path_Display = _v80 
    let v104 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v105 : string = "format!(\"{}\", $0)"
    let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let _v104 = v106 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v107 : string = "format!(\"{}\", $0)"
    let v108 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v107 
    let _v104 = v108 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v109 : string = "format!(\"{}\", $0)"
    let v110 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v109 
    let _v104 = v110 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v111 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v117 
    #endif
#else
    let v120 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v120 
    #endif
    let v123 : std_string_String = _v104 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v123 v128 
    let v130 : string = "true; $0 })"
    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v129 v130 
    let v132 : string = "_optionm_map_"
    let v133 : string option = Fable.Core.RustInterop.emitRustExpr () v132 
    let _v1 = v133 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v134 : string option = null |> unbox<string option>
    let _v1 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string option = null |> unbox<string option>
    let _v1 = v137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v140 : string = "path"
    let v141 : IPathDirname = Fable.Core.JsInterop.importAll v140 
    let v142 : string = "v141.dirname($0)"
    let v143 : string = Fable.Core.JsInterop.emitJsExpr v0 v142 
    let v144 : string option = Some v143 
    let _v1 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : string option = null |> unbox<string option>
    let _v1 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v150 : string option = null |> unbox<string option>
    let _v1 = v150 
    #endif
#else
    let v153 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v154 : System_IO_DirectoryInfo = v153 v0
    let v155 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v158 : bool = v154 = v155 
    let v188 : US5 =
        if v158 then
            US5_1
        else
            let v162 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v163 : string = null |> unbox<string>
            let _v162 = v163 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v166 : string = null |> unbox<string>
            let _v162 = v166 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v169 : string = null |> unbox<string>
            let _v162 = v169 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v172 : string = null |> unbox<string>
            let _v162 = v172 
            #endif
#if FABLE_COMPILER_PYTHON
            let v175 : string = null |> unbox<string>
            let _v162 = v175 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : string = null |> unbox<string>
            let _v162 = v178 
            #endif
#else
            let v181 : string = v154.FullName
            let _v162 = v181 
            #endif
            let v182 : string = _v162 
            US5_0(v182)
    let v195 : string option =
        match v188 with
        | US5_1 -> (* None *)
            let v193 : string option = None
            v193
        | US5_0(v189) -> (* Some *)
            let v190 : string option = Some v189 
            v190
    let _v1 = v195 
    #endif
    let v196 : string option = _v1 
    v196
and closure15 () (v0 : string) : string option =
    method34(v0)
and method33 () : (string -> string option) =
    closure15()
and method35 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method28(v2, v0)
    let v4 : bool = method32(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method33()
        let v7 : string option = v6 v2
        let v8 : (string -> US5) = method6()
        let v9 : US5 option = v7 |> Option.map v8 
        let v20 : US5 = US5_1
        let v21 : US5 = v9 |> Option.defaultValue v20 
        match v21 with
        | US5_1 -> (* None *)
            let v27 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v27)
        | US5_0(v25) -> (* Some *)
            method35(v0, v1, v25)
and method31 (v0 : string, v1 : string) : US12 =
    let v2 : string = method28(v1, v0)
    let v3 : bool = method32(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method33()
        let v6 : string option = v5 v1
        let v7 : (string -> US5) = method6()
        let v8 : US5 option = v6 |> Option.map v7 
        let v19 : US5 = US5_1
        let v20 : US5 = v8 |> Option.defaultValue v19 
        match v20 with
        | US5_1 -> (* None *)
            let v26 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v26)
        | US5_0(v24) -> (* Some *)
            method35(v0, v1, v24)
and method36 () : string =
    
    
    
    
    
    let v0 : string = "Warning"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_yellow"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_yellow"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_yellow"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[93m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[93m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[93m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[93m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method38 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "error"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method37 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method38(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "file_system.get_workspace_root"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure16 (v0 : string) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method36()
        let v39 : string = method37(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method39 () : string =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "$0.unwrap()"
    let v5 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "$0.unwrap()"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "$0.unwrap()"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v12 
    #endif
#else
    let v13 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v13 
    #endif
    let v14 : std_path_PathBuf = _v3 
    let v17 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "$0.display()"
    let v19 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v18 
    let _v17 = v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "$0.display()"
    let v21 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v20 
    let _v17 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "$0.display()"
    let v23 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v22 
    let _v17 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v27 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v30 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v30 
    #endif
#else
    let v33 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v33 
    #endif
    let v36 : std_path_Display = _v17 
    let v41 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "format!(\"{}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v42 
    let _v41 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "format!(\"{}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v44 
    let _v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "format!(\"{}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v46 
    let _v41 = v47 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v54 
    #endif
#else
    let v57 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v57 
    #endif
    let v60 : std_string_String = _v41 
    let v65 : string = "fable_library_rust::String_::fromString($0)"
    let v66 : string = Fable.Core.RustInterop.emitRustExpr v60 v65 
    let _v0 = v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v67 : string = null |> unbox<string>
    let _v0 = v67 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = null |> unbox<string>
    let _v0 = v70 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : string = null |> unbox<string>
    let _v0 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : string = null |> unbox<string>
    let _v0 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : string = null |> unbox<string>
    let _v0 = v79 
    #endif
#else
    let v82 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v83 : string = v82 ()
    let _v0 = v83 
    #endif
    let v84 : string = _v0 
    v84
and method40 () : string =
    let v0 : string = "\n"
    v0
and method43 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v78 : bool =
        if v75 then
            let v76 : string = "$0.is_file()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v69 v76 
            v77
        else
            false
    let _v1 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : bool = null |> unbox<bool>
    let _v1 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : bool = null |> unbox<bool>
    let _v1 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "fs"
    let v86 : IFsExistsSync = Fable.Core.JsInterop.importAll v85 
    let v87 : string = "$0.existsSync($1)"
    let v88 : bool = Fable.Core.JsInterop.emitJsExpr struct (v86, v0) v87 
    let _v1 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : bool = null |> unbox<bool>
    let _v1 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _v1 = v92 
    #endif
#else
    let v95 : (string -> bool) = System.IO.File.Exists
    let v96 : bool = v95 v0
    let _v1 = v96 
    #endif
    let v97 : bool = _v1 
    v97
and method42 (v0 : string, v1 : string) : bool =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method43(v0)
    let v4 : bool = v3 = false
    let v87 : bool =
        if v4 then
            false
        else
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0)"
            let v8 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            let v9 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v10 : string = "$0.unwrap()"
            let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v10 
            let _v9 = v11 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v12 : string = "$0.unwrap()"
            let v13 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v12 
            let _v9 = v13 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v14 : string = "$0.unwrap()"
            let v15 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v14 
            let _v9 = v15 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v16 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v16 
            #endif
#if FABLE_COMPILER_PYTHON
            let v17 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v17 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v18 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v18 
            #endif
#else
            let v19 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v19 
            #endif
            let v20 : Vec<uint8> = _v9 
            let _v6 = v20 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v23 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v23 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v26 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v26 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v35 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v35 
            #endif
#else
            let v38 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v39 : string = "$0.to_vec()"
            let v40 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let _v6 = v40 
            #endif
            let v41 : Vec<uint8> = _v6 
            let v46 : Vec<uint8> = method27(v41)
            let v47 : string = "std::string::String::from_utf8($0)"
            let v48 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v46 v47 
            let v49 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v50 : string = "$0.unwrap()"
            let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v50 
            let _v49 = v51 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v52 : string = "$0.unwrap()"
            let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v52 
            let _v49 = v53 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v54 : string = "$0.unwrap()"
            let v55 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v54 
            let _v49 = v55 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v56 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v56 
            #endif
#if FABLE_COMPILER_PYTHON
            let v57 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v57 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v58 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v58 
            #endif
#else
            let v59 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v59 
            #endif
            let v60 : std_string_String = _v49 
            let v63 : string = "fable_library_rust::String_::fromString($0)"
            let v64 : string = Fable.Core.RustInterop.emitRustExpr v60 v63 
            let _v5 = v64 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = null |> unbox<string>
            let _v5 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v68 : string = null |> unbox<string>
            let _v5 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : string = null |> unbox<string>
            let _v5 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : string = null |> unbox<string>
            let _v5 = v74 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v77 : string = null |> unbox<string>
            let _v5 = v77 
            #endif
#else
            let v80 : string = v0 |> System.IO.File.ReadAllText
            let _v5 = v80 
            #endif
            let v81 : string = _v5 
            let v86 : bool = v1 = v81
            v86
    let _v2 = v87 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v88 : bool = null |> unbox<bool>
    let _v2 = v88 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : bool = null |> unbox<bool>
    let _v2 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v94 : bool = null |> unbox<bool>
    let _v2 = v94 
    #endif
#if FABLE_COMPILER_PYTHON
    let v97 : bool = null |> unbox<bool>
    let _v2 = v97 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v100 : bool = null |> unbox<bool>
    let _v2 = v100 
    #endif
#else
    let v103 : bool = null |> unbox<bool>
    let _v2 = v103 
    #endif
    let v106 : bool = _v2 
    v106
and method45 (v0 : string) : string =
    v0
and closure17 () (v0 : std_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method46 () : (std_io_Error -> std_string_String) =
    closure17()
and closure18 () () : US13 =
    US13_0
and method47 () : (unit -> US13) =
    closure18()
and closure19 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and method48 () : (std_string_String -> US13) =
    closure19()
and method49 () : string =
    
    
    
    
    
    let v0 : string = "Critical"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_red"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_red"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_red"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[91m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[91m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[91m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[91m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method51 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "dir"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "error"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "format!(\"{:#?}\", $0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "format!(\"{:#?}\", $0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v70 
    let v72 : string = "fable_library_rust::String_::fromString($0)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let _v65 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _v65 = v77 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v1}"
    let _v65 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v81 : string = $"%A{v1}"
    let _v65 = v81 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{v1}"
    let _v65 = v84 
    #endif
#else
    let v87 : string = $"%A{v1}"
    let _v65 = v87 
    #endif
    let v90 : string = _v65 
    let v95 : string = $"{v90}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v3, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = " }"
    let v104 : string = $"{v103}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v3, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v112 : string = v3.l0
    v112
and method50 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method51(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure20 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method50(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method52 () : string =
    
    
    
    
    
    let v0 : string = "Verbose"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_black"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_black"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_black"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[90m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[90m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[90m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[90m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method54 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "dir"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method53 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method54(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "file_system.create_dir"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure21 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method52()
        let v39 : string = method53(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method57 (v0 : string) : string =
    v0
and method56 (v0 : bool, v1 : string) : unit =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method57(v1)
    let v4 : bool = method32(v3)
    if v4 then
        if v0 then
            let v5 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v5 
            ()
        else
            let v6 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v6 
            ()
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    let _v2 = () 
    #endif
    _v2 
    ()
and closure22 (v0 : string) () : unit =
    let v1 : bool = true
    method56(v1, v0)
and method55 (v0 : string) : (unit -> unit) =
    closure22(v0)
and method58 (v0 : string) : (unit -> unit) =
    closure22(v0)
and method60 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "dir"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method59 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method60(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure23 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method59(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method63 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.file_name()"
    let v75 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "$0.to_os_string()"
    let v81 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.to_str()"
    let v83 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.unwrap()"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "String::from($0)"
    let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v87 
    let _v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v89 
    let _v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v96 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v99 
    #endif
#else
    let v102 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v102 
    #endif
    let v105 : std_string_String = _v86 
    let v110 : string = "fable_library_rust::String_::fromString($0)"
    let v111 : string = Fable.Core.RustInterop.emitRustExpr v105 v110 
    let v112 : string = "true; $0 })"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "_optionm_map_"
    let v115 : string option = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : (string -> US5) = method6()
    let v117 : US5 option = v115 |> Option.map v116 
    let v128 : US5 = US5_1
    let v129 : US5 = v117 |> Option.defaultValue v128 
    let v136 : string =
        match v129 with
        | US5_1 -> (* None *)
            let v134 : string = ""
            v134
        | US5_0(v133) -> (* Some *)
            v133
    let _v1 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : US3 = US3_1
    let v138 : US4 = US4_2(v137)
    let v139 : string = $"file_system.get_file_name / target: {v138} / path: {v0}"
    let v140 : string = failwith<string> v139
    let _v1 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = null |> unbox<string>
    let _v1 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : US3 = US3_0
    let v145 : US4 = US4_3(v144)
    let v146 : string = $"file_system.get_file_name / target: {v145} / path: {v0}"
    let v147 : string = failwith<string> v146
    let _v1 = v147 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : US3 = US3_0
    let v149 : US4 = US4_4(v148)
    let v150 : string = $"file_system.get_file_name / target: {v149} / path: {v0}"
    let v151 : string = failwith<string> v150
    let _v1 = v151 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : US3 = US3_1
    let v153 : US4 = US4_0(v152)
    let v154 : string = $"file_system.get_file_name / target: {v153} / path: {v0}"
    let v155 : string = failwith<string> v154
    let _v1 = v155 
    #endif
#else
    let v156 : (string -> string) = System.IO.Path.GetFileName
    let v157 : string = v156 v0
    let _v1 = v157 
    #endif
    let v158 : string = _v1 
    v158
and method65 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "ex"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "path"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method64 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method65(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.delete_directory_async"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure25 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method63(v0)
        let v41 : string = method64(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method62 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : unit = ()
    let _v12 =
        async {
            try
            let v13 : bool = true
            method56(v13, v0)
            return v1 
            with ex ->
                let v14 : exn = ex
                let v15 : int64 = v1 % 100L
                let v16 : bool = v15 = 0L
                if v16 then
                    let v17 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v18 : string = $"%A{v14}"
                    let _v17 = v18 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v21 : string = $"%A{v14}"
                    let _v17 = v21 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v24 : string = $"%A{v14}"
                    let _v17 = v24 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v27 : string = $"%A{v14}"
                    let _v17 = v27 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v30 : string = $"%A{v14}"
                    let _v17 = v30 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v33 : string = $"%A{v14}"
                    let _v17 = v33 
                    #endif
#else
                    let v36 : string = $"{v14.GetType ()}: {v14.Message}"
                    let _v17 = v36 
                    #endif
                    let v37 : string = _v17 
                    let v42 : unit = ()
                    let v43 : (unit -> unit) = closure25(v0, v37)
                    let v44 : unit = (fun () -> v43 (); v42) ()
                    ()
                let v85 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v86 : (int32 -> Async<unit>) = Async.Sleep
                let v87 : Async<unit> = v86 10
                let _v85 = v87 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v88 : (int32 -> Async<unit>) = Async.Sleep
                let v89 : Async<unit> = v88 10
                let _v85 = v89 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v90 : (int32 -> Async<unit>) = Async.Sleep
                let v91 : Async<unit> = v90 10
                let _v85 = v91 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v92 : (int32 -> Async<unit>) = Async.Sleep
                let v93 : Async<unit> = v92 10
                let _v85 = v93 
                #endif
#if FABLE_COMPILER_PYTHON
                let v94 : (int32 -> Async<unit>) = Async.Sleep
                let v95 : Async<unit> = v94 10
                let _v85 = v95 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v96 : (int32 -> Async<unit>) = Async.Sleep
                let v97 : Async<unit> = v96 10
                let _v85 = v97 
                #endif
#else
                let v98 : (int32 -> Async<unit>) = Async.Sleep
                let v99 : Async<unit> = v98 10
                let _v85 = v99 
                #endif
                let v100 : Async<unit> = _v85 
                do! v100 
                let v105 : int64 = v1 + 1L
                let v106 : Async<int64> = method62(v0, v105)
                return! v106 
                (*
                ()
            *)
            (*
            let v107 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v108 : Async<int64> = _v12 
    let _v2 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : unit = ()
    let _v109 =
        async {
            try
            let v110 : bool = true
            method56(v110, v0)
            return v1 
            with ex ->
                let v111 : exn = ex
                let v112 : int64 = v1 % 100L
                let v113 : bool = v112 = 0L
                if v113 then
                    let v114 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v115 : string = $"%A{v111}"
                    let _v114 = v115 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v118 : string = $"%A{v111}"
                    let _v114 = v118 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v121 : string = $"%A{v111}"
                    let _v114 = v121 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v124 : string = $"%A{v111}"
                    let _v114 = v124 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v127 : string = $"%A{v111}"
                    let _v114 = v127 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v130 : string = $"%A{v111}"
                    let _v114 = v130 
                    #endif
#else
                    let v133 : string = $"{v111.GetType ()}: {v111.Message}"
                    let _v114 = v133 
                    #endif
                    let v134 : string = _v114 
                    let v139 : unit = ()
                    let v140 : (unit -> unit) = closure25(v0, v134)
                    let v141 : unit = (fun () -> v140 (); v139) ()
                    ()
                let v182 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v183 : (int32 -> Async<unit>) = Async.Sleep
                let v184 : Async<unit> = v183 10
                let _v182 = v184 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v185 : (int32 -> Async<unit>) = Async.Sleep
                let v186 : Async<unit> = v185 10
                let _v182 = v186 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v187 : (int32 -> Async<unit>) = Async.Sleep
                let v188 : Async<unit> = v187 10
                let _v182 = v188 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v189 : (int32 -> Async<unit>) = Async.Sleep
                let v190 : Async<unit> = v189 10
                let _v182 = v190 
                #endif
#if FABLE_COMPILER_PYTHON
                let v191 : (int32 -> Async<unit>) = Async.Sleep
                let v192 : Async<unit> = v191 10
                let _v182 = v192 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v193 : (int32 -> Async<unit>) = Async.Sleep
                let v194 : Async<unit> = v193 10
                let _v182 = v194 
                #endif
#else
                let v195 : (int32 -> Async<unit>) = Async.Sleep
                let v196 : Async<unit> = v195 10
                let _v182 = v196 
                #endif
                let v197 : Async<unit> = _v182 
                do! v197 
                let v202 : int64 = v1 + 1L
                let v203 : Async<int64> = method62(v0, v202)
                return! v203 
                (*
                ()
            *)
            (*
            let v204 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v205 : Async<int64> = _v109 
    let _v2 = v205 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v206 : unit = ()
    let _v206 =
        async {
            try
            let v207 : bool = true
            method56(v207, v0)
            return v1 
            with ex ->
                let v208 : exn = ex
                let v209 : int64 = v1 % 100L
                let v210 : bool = v209 = 0L
                if v210 then
                    let v211 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v212 : string = $"%A{v208}"
                    let _v211 = v212 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v215 : string = $"%A{v208}"
                    let _v211 = v215 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v218 : string = $"%A{v208}"
                    let _v211 = v218 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v221 : string = $"%A{v208}"
                    let _v211 = v221 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v224 : string = $"%A{v208}"
                    let _v211 = v224 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v227 : string = $"%A{v208}"
                    let _v211 = v227 
                    #endif
#else
                    let v230 : string = $"{v208.GetType ()}: {v208.Message}"
                    let _v211 = v230 
                    #endif
                    let v231 : string = _v211 
                    let v236 : unit = ()
                    let v237 : (unit -> unit) = closure25(v0, v231)
                    let v238 : unit = (fun () -> v237 (); v236) ()
                    ()
                let v279 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v280 : (int32 -> Async<unit>) = Async.Sleep
                let v281 : Async<unit> = v280 10
                let _v279 = v281 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v282 : (int32 -> Async<unit>) = Async.Sleep
                let v283 : Async<unit> = v282 10
                let _v279 = v283 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v284 : (int32 -> Async<unit>) = Async.Sleep
                let v285 : Async<unit> = v284 10
                let _v279 = v285 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v286 : (int32 -> Async<unit>) = Async.Sleep
                let v287 : Async<unit> = v286 10
                let _v279 = v287 
                #endif
#if FABLE_COMPILER_PYTHON
                let v288 : (int32 -> Async<unit>) = Async.Sleep
                let v289 : Async<unit> = v288 10
                let _v279 = v289 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v290 : (int32 -> Async<unit>) = Async.Sleep
                let v291 : Async<unit> = v290 10
                let _v279 = v291 
                #endif
#else
                let v292 : (int32 -> Async<unit>) = Async.Sleep
                let v293 : Async<unit> = v292 10
                let _v279 = v293 
                #endif
                let v294 : Async<unit> = _v279 
                do! v294 
                let v299 : int64 = v1 + 1L
                let v300 : Async<int64> = method62(v0, v299)
                return! v300 
                (*
                ()
            *)
            (*
            let v301 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v302 : Async<int64> = _v206 
    let _v2 = v302 
    #endif
#else
    let v303 : unit = ()
    let _v303 =
        async {
            try
            let v304 : bool = true
            method56(v304, v0)
            return v1 
            with ex ->
                let v305 : exn = ex
                let v306 : int64 = v1 % 100L
                let v307 : bool = v306 = 0L
                if v307 then
                    let v308 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v309 : string = $"%A{v305}"
                    let _v308 = v309 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v312 : string = $"%A{v305}"
                    let _v308 = v312 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v315 : string = $"%A{v305}"
                    let _v308 = v315 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v318 : string = $"%A{v305}"
                    let _v308 = v318 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v321 : string = $"%A{v305}"
                    let _v308 = v321 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v324 : string = $"%A{v305}"
                    let _v308 = v324 
                    #endif
#else
                    let v327 : string = $"{v305.GetType ()}: {v305.Message}"
                    let _v308 = v327 
                    #endif
                    let v328 : string = _v308 
                    let v333 : unit = ()
                    let v334 : (unit -> unit) = closure25(v0, v328)
                    let v335 : unit = (fun () -> v334 (); v333) ()
                    ()
                let v376 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v377 : (int32 -> Async<unit>) = Async.Sleep
                let v378 : Async<unit> = v377 10
                let _v376 = v378 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v379 : (int32 -> Async<unit>) = Async.Sleep
                let v380 : Async<unit> = v379 10
                let _v376 = v380 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v381 : (int32 -> Async<unit>) = Async.Sleep
                let v382 : Async<unit> = v381 10
                let _v376 = v382 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v383 : (int32 -> Async<unit>) = Async.Sleep
                let v384 : Async<unit> = v383 10
                let _v376 = v384 
                #endif
#if FABLE_COMPILER_PYTHON
                let v385 : (int32 -> Async<unit>) = Async.Sleep
                let v386 : Async<unit> = v385 10
                let _v376 = v386 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v387 : (int32 -> Async<unit>) = Async.Sleep
                let v388 : Async<unit> = v387 10
                let _v376 = v388 
                #endif
#else
                let v389 : (int32 -> Async<unit>) = Async.Sleep
                let v390 : Async<unit> = v389 10
                let _v376 = v390 
                #endif
                let v391 : Async<unit> = _v376 
                do! v391 
                let v396 : int64 = v1 + 1L
                let v397 : Async<int64> = method62(v0, v396)
                return! v397 
                (*
                ()
            *)
            (*
            let v398 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v399 : Async<int64> = _v303 
    let _v2 = v399 
    #endif
    let v400 : Async<int64> = _v2 
    v400
and closure24 (v0 : string) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v17 
    #endif
#else
    let v20 : int64 = 0L
    let v21 : Async<int64> = method62(v0, v20)
    let _v1 = v21 
    #endif
    let v22 : Async<int64> = _v1 
    let v27 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : Async<unit> = null |> unbox<Async<unit>>
    let _v27 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : Async<unit> = null |> unbox<Async<unit>>
    let _v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : Async<unit> = null |> unbox<Async<unit>>
    let _v27 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v38 : Async<unit> = v37 v22
    let _v27 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v40 : Async<unit> = v39 v22
    let _v27 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v42 : Async<unit> = v41 v22
    let _v27 = v42 
    #endif
#else
    let v43 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v44 : Async<unit> = v43 v22
    let _v27 = v44 
    #endif
    let v45 : Async<unit> = _v27 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : (Async<unit> -> unit) = Async.RunSynchronously
    v51 v45
    let _v50 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : (Async<unit> -> unit) = Async.RunSynchronously
    v52 v45
    let _v50 = () 
    #endif
#else
    let v53 : (Async<unit> -> unit) = Async.RunSynchronously
    v53 v45
    let _v50 = () 
    #endif
    _v50 
    ()
and method61 (v0 : string) : (unit -> unit) =
    closure24(v0)
and method66 (v0 : string) : (unit -> unit) =
    closure24(v0)
and method44 (v0 : string) : System.IDisposable =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method45(v0)
    let v3 : string = "std::fs::create_dir_all(&*$0)"
    let v4 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (std_io_Error -> std_string_String) = method46()
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v15 
    #endif
#else
    let v16 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v16 
    #endif
    let v17 : Result<unit, std_string_String> = _v6 
    let v20 : (unit -> US13) = method47()
    let v21 : (std_string_String -> US13) = method48()
    let v22 : US13 = match v17 with Ok () -> v20 () | Error x -> v21 x
    match v22 with
    | US13_1(v65) -> (* Error *)
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure20(v2, v65)
        let v68 : unit = (fun () -> v67 (); v66) ()
        ()
    | US13_0 -> (* Ok *)
        let v23 : unit = ()
        let v24 : (unit -> unit) = closure21(v2)
        let v25 : unit = (fun () -> v24 (); v23) ()
        ()
    let v108 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v109 : (unit -> unit) = method55(v2)
    let v110 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v109 "$0()" )
    let _v108 = v110 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : (unit -> unit) = method55(v2)
    let v112 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v111 "$0()" )
    let _v108 = v112 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v113 : (unit -> unit) = method55(v2)
    let v114 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v113 "$0()" )
    let _v108 = v114 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v115 : (unit -> unit) = method58(v2)
    let v116 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v115 () }
    let _v108 = v116 
    #endif
#if FABLE_COMPILER_PYTHON
    let v117 : (unit -> unit) = method58(v2)
    let v118 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v117 () }
    let _v108 = v118 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v119 : (unit -> unit) = method58(v2)
    let v120 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v119 () }
    let _v108 = v120 
    #endif
#else
    let v121 : (unit -> unit) = method58(v2)
    let v122 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v121 () }
    let _v108 = v122 
    #endif
    let v123 : System.IDisposable = _v108 
    let _v1 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v127 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v134 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v149 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v149 
    #endif
#else
    let v152 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v153 : System_IO_DirectoryInfo = v152 v0
    let _v133 = v153 
    #endif
    let v154 : System_IO_DirectoryInfo = _v133 
    let v159 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v160 : bool = null |> unbox<bool>
    let _v159 = v160 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : bool = null |> unbox<bool>
    let _v159 = v163 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v166 : bool = null |> unbox<bool>
    let _v159 = v166 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v169 : bool = null |> unbox<bool>
    let _v159 = v169 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : bool = null |> unbox<bool>
    let _v159 = v172 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v175 : bool = null |> unbox<bool>
    let _v159 = v175 
    #endif
#else
    let v178 : bool = v154.Exists
    let _v159 = v178 
    #endif
    let v179 : bool = _v159 
    let v184 : bool = v179 = false
    if v184 then
        let v185 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v186 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v186 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v189 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v189 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v192 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v192 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v195 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v195 
        #endif
#if FABLE_COMPILER_PYTHON
        let v198 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v198 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v201 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v201 
        #endif
#else
        let v204 : System.DateTime = v154.CreationTime
        let _v185 = v204 
        #endif
        let v205 : System.DateTime = _v185 
        let v210 : _ = {| Exists = v179; CreationTime = v205 |}
        let v211 : string = $"%A{v210}"
        let v214 : unit = ()
        let v215 : (unit -> unit) = closure23(v0, v211)
        let v216 : unit = (fun () -> v215 (); v214) ()
        ()
    let v256 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v257 : (unit -> unit) = method61(v0)
    let v258 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v257 "$0()" )
    let _v256 = v258 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v259 : (unit -> unit) = method61(v0)
    let v260 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v259 "$0()" )
    let _v256 = v260 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v261 : (unit -> unit) = method61(v0)
    let v262 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v261 "$0()" )
    let _v256 = v262 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v263 : (unit -> unit) = method66(v0)
    let v264 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v263 () }
    let _v256 = v264 
    #endif
#if FABLE_COMPILER_PYTHON
    let v265 : (unit -> unit) = method66(v0)
    let v266 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v265 () }
    let _v256 = v266 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v267 : (unit -> unit) = method66(v0)
    let v268 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v267 () }
    let _v256 = v268 
    #endif
#else
    let v269 : (unit -> unit) = method66(v0)
    let v270 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v269 () }
    let _v256 = v270 
    #endif
    let v271 : System.IDisposable = _v256 
    let _v1 = v271 
    #endif
#if FABLE_COMPILER_PYTHON
    let v275 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v276 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v276 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v279 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v279 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v282 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v282 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v285 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v285 
    #endif
#if FABLE_COMPILER_PYTHON
    let v288 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v288 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v291 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v291 
    #endif
#else
    let v294 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v295 : System_IO_DirectoryInfo = v294 v0
    let _v275 = v295 
    #endif
    let v296 : System_IO_DirectoryInfo = _v275 
    let v301 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v302 : bool = null |> unbox<bool>
    let _v301 = v302 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : bool = null |> unbox<bool>
    let _v301 = v305 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v308 : bool = null |> unbox<bool>
    let _v301 = v308 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v311 : bool = null |> unbox<bool>
    let _v301 = v311 
    #endif
#if FABLE_COMPILER_PYTHON
    let v314 : bool = null |> unbox<bool>
    let _v301 = v314 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v317 : bool = null |> unbox<bool>
    let _v301 = v317 
    #endif
#else
    let v320 : bool = v296.Exists
    let _v301 = v320 
    #endif
    let v321 : bool = _v301 
    let v326 : bool = v321 = false
    if v326 then
        let v327 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v328 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v328 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v331 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v331 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v334 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v334 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v337 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v337 
        #endif
#if FABLE_COMPILER_PYTHON
        let v340 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v340 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v343 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v343 
        #endif
#else
        let v346 : System.DateTime = v296.CreationTime
        let _v327 = v346 
        #endif
        let v347 : System.DateTime = _v327 
        let v352 : _ = {| Exists = v321; CreationTime = v347 |}
        let v353 : string = $"%A{v352}"
        let v356 : unit = ()
        let v357 : (unit -> unit) = closure23(v0, v353)
        let v358 : unit = (fun () -> v357 (); v356) ()
        ()
    let v398 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v399 : (unit -> unit) = method61(v0)
    let v400 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v399 "$0()" )
    let _v398 = v400 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v401 : (unit -> unit) = method61(v0)
    let v402 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v401 "$0()" )
    let _v398 = v402 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v403 : (unit -> unit) = method61(v0)
    let v404 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v403 "$0()" )
    let _v398 = v404 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v405 : (unit -> unit) = method66(v0)
    let v406 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v405 () }
    let _v398 = v406 
    #endif
#if FABLE_COMPILER_PYTHON
    let v407 : (unit -> unit) = method66(v0)
    let v408 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v407 () }
    let _v398 = v408 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v409 : (unit -> unit) = method66(v0)
    let v410 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v409 () }
    let _v398 = v410 
    #endif
#else
    let v411 : (unit -> unit) = method66(v0)
    let v412 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v411 () }
    let _v398 = v412 
    #endif
    let v413 : System.IDisposable = _v398 
    let _v1 = v413 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v417 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v418 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v418 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v421 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v421 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v424 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v424 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v427 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v427 
    #endif
#if FABLE_COMPILER_PYTHON
    let v430 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v430 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v433 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v433 
    #endif
#else
    let v436 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v437 : System_IO_DirectoryInfo = v436 v0
    let _v417 = v437 
    #endif
    let v438 : System_IO_DirectoryInfo = _v417 
    let v443 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v444 : bool = null |> unbox<bool>
    let _v443 = v444 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v447 : bool = null |> unbox<bool>
    let _v443 = v447 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v450 : bool = null |> unbox<bool>
    let _v443 = v450 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v453 : bool = null |> unbox<bool>
    let _v443 = v453 
    #endif
#if FABLE_COMPILER_PYTHON
    let v456 : bool = null |> unbox<bool>
    let _v443 = v456 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v459 : bool = null |> unbox<bool>
    let _v443 = v459 
    #endif
#else
    let v462 : bool = v438.Exists
    let _v443 = v462 
    #endif
    let v463 : bool = _v443 
    let v468 : bool = v463 = false
    if v468 then
        let v469 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v470 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v470 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v473 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v473 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v476 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v476 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v479 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v479 
        #endif
#if FABLE_COMPILER_PYTHON
        let v482 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v482 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v485 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v485 
        #endif
#else
        let v488 : System.DateTime = v438.CreationTime
        let _v469 = v488 
        #endif
        let v489 : System.DateTime = _v469 
        let v494 : _ = {| Exists = v463; CreationTime = v489 |}
        let v495 : string = $"%A{v494}"
        let v498 : unit = ()
        let v499 : (unit -> unit) = closure23(v0, v495)
        let v500 : unit = (fun () -> v499 (); v498) ()
        ()
    let v540 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v541 : (unit -> unit) = method61(v0)
    let v542 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v541 "$0()" )
    let _v540 = v542 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v543 : (unit -> unit) = method61(v0)
    let v544 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v543 "$0()" )
    let _v540 = v544 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v545 : (unit -> unit) = method61(v0)
    let v546 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v545 "$0()" )
    let _v540 = v546 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v547 : (unit -> unit) = method66(v0)
    let v548 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v547 () }
    let _v540 = v548 
    #endif
#if FABLE_COMPILER_PYTHON
    let v549 : (unit -> unit) = method66(v0)
    let v550 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v549 () }
    let _v540 = v550 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v551 : (unit -> unit) = method66(v0)
    let v552 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v551 () }
    let _v540 = v552 
    #endif
#else
    let v553 : (unit -> unit) = method66(v0)
    let v554 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v553 () }
    let _v540 = v554 
    #endif
    let v555 : System.IDisposable = _v540 
    let _v1 = v555 
    #endif
#else
    let v559 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v560 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v560 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v563 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v563 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v566 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v566 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v569 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v569 
    #endif
#if FABLE_COMPILER_PYTHON
    let v572 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v572 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v575 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v575 
    #endif
#else
    let v578 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v579 : System_IO_DirectoryInfo = v578 v0
    let _v559 = v579 
    #endif
    let v580 : System_IO_DirectoryInfo = _v559 
    let v585 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v586 : bool = null |> unbox<bool>
    let _v585 = v586 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v589 : bool = null |> unbox<bool>
    let _v585 = v589 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v592 : bool = null |> unbox<bool>
    let _v585 = v592 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v595 : bool = null |> unbox<bool>
    let _v585 = v595 
    #endif
#if FABLE_COMPILER_PYTHON
    let v598 : bool = null |> unbox<bool>
    let _v585 = v598 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v601 : bool = null |> unbox<bool>
    let _v585 = v601 
    #endif
#else
    let v604 : bool = v580.Exists
    let _v585 = v604 
    #endif
    let v605 : bool = _v585 
    let v610 : bool = v605 = false
    if v610 then
        let v611 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v612 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v612 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v615 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v615 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v618 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v624 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v627 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v627 
        #endif
#else
        let v630 : System.DateTime = v580.CreationTime
        let _v611 = v630 
        #endif
        let v631 : System.DateTime = _v611 
        let v636 : _ = {| Exists = v605; CreationTime = v631 |}
        let v637 : string = $"%A{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure23(v0, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        ()
    let v682 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v683 : (unit -> unit) = method61(v0)
    let v684 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v683 "$0()" )
    let _v682 = v684 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v685 : (unit -> unit) = method61(v0)
    let v686 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v685 "$0()" )
    let _v682 = v686 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v687 : (unit -> unit) = method61(v0)
    let v688 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v687 "$0()" )
    let _v682 = v688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v689 : (unit -> unit) = method66(v0)
    let v690 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v689 () }
    let _v682 = v690 
    #endif
#if FABLE_COMPILER_PYTHON
    let v691 : (unit -> unit) = method66(v0)
    let v692 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v691 () }
    let _v682 = v692 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v693 : (unit -> unit) = method66(v0)
    let v694 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v693 () }
    let _v682 = v694 
    #endif
#else
    let v695 : (unit -> unit) = method66(v0)
    let v696 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v695 () }
    let _v682 = v696 
    #endif
    let v697 : System.IDisposable = _v682 
    let _v1 = v697 
    #endif
    let v701 : System.IDisposable = _v1 
    v701
and method67 (v0 : string) : string =
    v0
and method41 (v0 : string, v1 : string) : unit =
    let v2 : bool = method42(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method34(v0)
        let v5 : string = ""
        let v6 : string = v4 |> Option.defaultValue v5 
        let v9 : bool = method32(v6)
        let v10 : bool = v9 = false
        if v10 then
            let v11 : System.IDisposable = method44(v6)
            ()
        let v12 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v13 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v13 
        let _v12 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v12 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v12 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v12 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v12 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v12 = () 
        #endif
#else
        let v14 : string = method67(v1)
        System.IO.File.WriteAllText (v0, v14)
        let _v12 = () 
        #endif
        _v12 
        ()
and method69 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method71 () : string =
    let v0 : string = ""
    v0
and method72 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure28 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure27 () (v0 : char) : (UH0 -> UH0) =
    closure28(v0)
and method73 () : (char -> (UH0 -> UH0)) =
    closure27()
and method74 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v24 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v4
                let v20 : (string -> System.Text.StringBuilder) = v1.Append
                let v21 : System.Text.StringBuilder = v20 v17
                v1
        method74(v5, v24, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure26 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v9 : char = v0.[int 0]
        let v10 : bool = v9 = '"'
        if v10 then
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v0
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v0.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v9
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method72(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method73()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
            US15_0(v9, v30, v75, v76, v77)
        else
            let v79 : string = "\n"
            let v80 : int32 = v0.IndexOf v79 
            let v83 : int32 = v80 - 1
            let v84 : bool = -2 = v83
            let v91 : int32 =
                if v84 then
                    let v85 : (string -> int32) = String.length
                    let v86 : int32 = v85 v0
                    let v89 : int32 = v86 + 1
                    v89
                else
                    let v90 : int32 = v83 + 1
                    v90
            let v92 : int32 = 0 |> int32 
            let v99 : int32 = v91 |> int32 
            let v106 : int32 = v99 - 1
            let v107 : string = v0.[int v92..int v106]
            let v111 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v107}"
            let v114 : int32 = v3 - 1
            let v115 : (int32 -> (string -> string)) = String.replicate
            let v116 : (string -> string) = v115 v114
            let v117 : string = " "
            let v118 : string = v116 v117
            let v121 : string = "^"
            let v122 : string = v118 + v121 
            let v123 : string = $"{v111}
{v122}
"
            US15_1(v123)
and closure29 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v9 : char = v0.[int 0]
        let v10 : bool = v9 = '''
        if v10 then
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v0
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v0.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v9
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method72(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method73()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
            US15_0(v9, v30, v75, v76, v77)
        else
            let v79 : string = "\n"
            let v80 : int32 = v0.IndexOf v79 
            let v83 : int32 = v80 - 1
            let v84 : bool = -2 = v83
            let v91 : int32 =
                if v84 then
                    let v85 : (string -> int32) = String.length
                    let v86 : int32 = v85 v0
                    let v89 : int32 = v86 + 1
                    v89
                else
                    let v90 : int32 = v83 + 1
                    v90
            let v92 : int32 = 0 |> int32 
            let v99 : int32 = v91 |> int32 
            let v106 : int32 = v99 - 1
            let v107 : string = v0.[int v92..int v106]
            let v111 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v107}"
            let v114 : int32 = v3 - 1
            let v115 : (int32 -> (string -> string)) = String.replicate
            let v116 : (string -> string) = v115 v114
            let v117 : string = " "
            let v118 : string = v116 v117
            let v121 : string = "^"
            let v122 : string = v118 + v121 
            let v123 : string = $"{v111}
{v122}
"
            US15_1(v123)
and method75 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method75(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US15_1(v3)
and method76 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method76(v0, v17)
and method77 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v109 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : (char list -> (char [])) = List.toArray
            let v14 : (char []) = v13 v10
            let v17 : string = $"parsing.none_of / unexpected end of input / chars: %A{v14} / s: %A{struct (v2, v3, v4)}"
            US15_1(v17)
        else
            let v21 : char = v1.[int 0]
            let v22 : int64 = 0L
            let v23 : bool = method76(v21, v22)
            let v24 : bool = v23 = false
            if v24 then
                let v25 : (string -> int32) = String.length
                let v26 : int32 = v25 v1
                let v29 : int32 = 1 |> int32 
                let v36 : int32 = v26 |> int32 
                let v43 : int32 = v36 - 1
                let v44 : string = v1.[int v29..int v43]
                let v48 : (char -> string) = _.ToString()
                let v49 : string = v48 v21
                let v52 : int32 = v49.Length
                let v53 : (char []) = Array.zeroCreate<char> (v52)
                let v54 : Mut5 = {l0 = 0} : Mut5
                while method72(v52, v54) do
                    let v56 : int32 = v54.l0
                    let v57 : char = v49.[int v56]
                    v53.[int v56] <- v57
                    let v58 : int32 = v56 + 1
                    v54.l0 <- v58
                    ()
                let v59 : char list = v53 |> Array.toList
                let v62 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v63 : (char -> (UH0 -> UH0)) = method73()
                let v64 : (char list -> (UH0 -> UH0)) = v62 v63
                let v65 : (UH0 -> UH0) = v64 v59
                let v66 : UH0 = UH0_0
                let v67 : UH0 = v65 v66
                let struct (v89 : System.Text.StringBuilder, v90 : int32, v91 : int32) = method74(v67, v2, v3, v4)
                US15_0(v21, v44, v89, v90, v91)
            else
                let v93 : char list = []
                let v94 : char list = ''' :: v93 
                let v97 : char list = '"' :: v94 
                let v100 : (char list -> (char [])) = List.toArray
                let v101 : (char []) = v100 v97
                let v104 : string = $"parsing.none_of / unexpected char: '{v21}' / chars: %A{v101} / s: %A{struct (v2, v3, v4)}"
                US15_1(v104)
    let v121 : US15 =
        match v109 with
        | US15_1(v118) -> (* Error *)
            US15_1(v118)
        | US15_0(v110, v111, v112, v113, v114) -> (* Ok *)
            let v115 : bool = '\\' = v110
            let v116 : char =
                if v115 then
                    '/'
                else
                    v110
            US15_0(v116, v111, v112, v113, v114)
    match v121 with
    | US15_1(v137) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : (char -> string) = _.ToString()
        let v128 : string = v127 v122
        let v131 : string = v0 + v128 
        method77(v131, v123, v124, v125, v126)
and method78 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method78(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US15_1(v5)
and method79 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method79(v0, v21)
and method80 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v115 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = ''' :: v7 
            let v13 : char list = '"' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method79(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method72(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method73()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method74(v70, v2, v3, v4)
                US15_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = ' ' :: v96 
                let v100 : char list = ''' :: v97 
                let v103 : char list = '"' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US15_1(v110)
    let v127 : US15 =
        match v115 with
        | US15_1(v124) -> (* Error *)
            US15_1(v124)
        | US15_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : bool = '\\' = v116
            let v122 : char =
                if v121 then
                    '/'
                else
                    v116
            US15_0(v122, v117, v118, v119, v120)
    match v127 with
    | US15_1(v143) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v128, v129, v130, v131, v132) -> (* Ok *)
        let v133 : (char -> string) = _.ToString()
        let v134 : string = v133 v128
        let v137 : string = v0 + v134 
        method80(v137, v129, v130, v131, v132)
and method81 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method81(v0, v6)
        else
            v1
and method82 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v79 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v10 : char = v1.[int 0]
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v1
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v1.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v10
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method72(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method73()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v2, v3, v4)
            US15_0(v10, v30, v75, v76, v77)
    match v79 with
    | US15_1(v95) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v80, v81, v82, v83, v84) -> (* Ok *)
        let v85 : (char -> string) = _.ToString()
        let v86 : string = v85 v80
        let v89 : string = v0 + v86 
        method82(v89, v81, v82, v83, v84)
and method70 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : string = method71()
    let v11 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v12 : System.Text.StringBuilder = v11 v10
    let v15 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure26()
    let v16 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure29()
    let v17 : UH1 = UH1_0
    let v18 : UH1 = UH1_1(v16, v17)
    let v19 : UH1 = UH1_1(v15, v18)
    let v20 : US15 = method75(v7, v12, v19)
    let v202 : US16 =
        match v20 with
        | US15_1(v199) -> (* Error *)
            US16_1(v199)
        | US15_0(v21, v22, v23, v24, v25) -> (* Ok *)
            let v26 : bool = "" = v22
            let v130 : US15 =
                if v26 then
                    let v27 : char list = []
                    let v28 : char list = ''' :: v27 
                    let v31 : char list = '"' :: v28 
                    let v34 : (char list -> (char [])) = List.toArray
                    let v35 : (char []) = v34 v31
                    let v38 : string = $"parsing.none_of / unexpected end of input / chars: %A{v35} / s: %A{struct (v23, v24, v25)}"
                    US15_1(v38)
                else
                    let v42 : char = v22.[int 0]
                    let v43 : int64 = 0L
                    let v44 : bool = method76(v42, v43)
                    let v45 : bool = v44 = false
                    if v45 then
                        let v46 : (string -> int32) = String.length
                        let v47 : int32 = v46 v22
                        let v50 : int32 = 1 |> int32 
                        let v57 : int32 = v47 |> int32 
                        let v64 : int32 = v57 - 1
                        let v65 : string = v22.[int v50..int v64]
                        let v69 : (char -> string) = _.ToString()
                        let v70 : string = v69 v42
                        let v73 : int32 = v70.Length
                        let v74 : (char []) = Array.zeroCreate<char> (v73)
                        let v75 : Mut5 = {l0 = 0} : Mut5
                        while method72(v73, v75) do
                            let v77 : int32 = v75.l0
                            let v78 : char = v70.[int v77]
                            v74.[int v77] <- v78
                            let v79 : int32 = v77 + 1
                            v75.l0 <- v79
                            ()
                        let v80 : char list = v74 |> Array.toList
                        let v83 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v84 : (char -> (UH0 -> UH0)) = method73()
                        let v85 : (char list -> (UH0 -> UH0)) = v83 v84
                        let v86 : (UH0 -> UH0) = v85 v80
                        let v87 : UH0 = UH0_0
                        let v88 : UH0 = v86 v87
                        let struct (v110 : System.Text.StringBuilder, v111 : int32, v112 : int32) = method74(v88, v23, v24, v25)
                        US15_0(v42, v65, v110, v111, v112)
                    else
                        let v114 : char list = []
                        let v115 : char list = ''' :: v114 
                        let v118 : char list = '"' :: v115 
                        let v121 : (char list -> (char [])) = List.toArray
                        let v122 : (char []) = v121 v118
                        let v125 : string = $"parsing.none_of / unexpected char: '{v42}' / chars: %A{v122} / s: %A{struct (v23, v24, v25)}"
                        US15_1(v125)
            let v142 : US15 =
                match v130 with
                | US15_1(v139) -> (* Error *)
                    US15_1(v139)
                | US15_0(v131, v132, v133, v134, v135) -> (* Ok *)
                    let v136 : bool = '\\' = v131
                    let v137 : char =
                        if v136 then
                            '/'
                        else
                            v131
                    US15_0(v137, v132, v133, v134, v135)
            let v161 : US16 =
                match v142 with
                | US15_1(v158) -> (* Error *)
                    US16_1(v158)
                | US15_0(v143, v144, v145, v146, v147) -> (* Ok *)
                    let v148 : (char -> string) = _.ToString()
                    let v149 : string = v148 v143
                    let struct (v152 : string, v153 : string, v154 : System.Text.StringBuilder, v155 : int32, v156 : int32) = method77(v149, v144, v145, v146, v147)
                    US16_0(v152, v153, v154, v155, v156)
            let v171 : US16 =
                match v161 with
                | US16_1(v168) -> (* Error *)
                    US16_0(v6, v22, v23, v24, v25)
                | US16_0(v162, v163, v164, v165, v166) -> (* Ok *)
                    US16_0(v162, v163, v164, v165, v166)
            match v171 with
            | US16_1(v194) -> (* Error *)
                let v195 : string = "parsing.between / expected content"
                US16_1(v195)
            | US16_0(v172, v173, v174, v175, v176) -> (* Ok *)
                let v177 : UH1 = UH1_0
                let v178 : UH1 = UH1_1(v16, v177)
                let v179 : UH1 = UH1_1(v15, v178)
                let v180 : US15 = method78(v173, v174, v175, v176, v179)
                match v180 with
                | US15_1(v187) -> (* Error *)
                    let v188 : string = $"parsing.between / expected closing delimiter / e: %A{v187} / input: %A{struct (v7, v12, 1, 1)} / rest1: %A{struct (v22, v23, v24, v25)} / rest2: %A{struct (v173, v174, v175, v176)}"
                    US16_1(v188)
                | US15_0(v181, v182, v183, v184, v185) -> (* Ok *)
                    US16_0(v172, v182, v183, v184, v185)
    let v414 : US16 =
        match v202 with
        | US16_1(v208) -> (* Error *)
            let v209 : bool = "" = v7
            let v321 : US15 =
                if v209 then
                    let v210 : char list = []
                    let v211 : char list = ' ' :: v210 
                    let v214 : char list = ''' :: v211 
                    let v217 : char list = '"' :: v214 
                    let v220 : (char list -> (char [])) = List.toArray
                    let v221 : (char []) = v220 v217
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v221} / s: %A{struct (v12, 1, 1)}"
                    US15_1(v224)
                else
                    let v228 : char = v7.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method79(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v232 : (string -> int32) = String.length
                        let v233 : int32 = v232 v7
                        let v236 : int32 = 1 |> int32 
                        let v243 : int32 = v233 |> int32 
                        let v250 : int32 = v243 - 1
                        let v251 : string = v7.[int v236..int v250]
                        let v255 : (char -> string) = _.ToString()
                        let v256 : string = v255 v228
                        let v259 : int32 = v256.Length
                        let v260 : (char []) = Array.zeroCreate<char> (v259)
                        let v261 : Mut5 = {l0 = 0} : Mut5
                        while method72(v259, v261) do
                            let v263 : int32 = v261.l0
                            let v264 : char = v256.[int v263]
                            v260.[int v263] <- v264
                            let v265 : int32 = v263 + 1
                            v261.l0 <- v265
                            ()
                        let v266 : char list = v260 |> Array.toList
                        let v269 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v270 : (char -> (UH0 -> UH0)) = method73()
                        let v271 : (char list -> (UH0 -> UH0)) = v269 v270
                        let v272 : (UH0 -> UH0) = v271 v266
                        let v273 : UH0 = UH0_0
                        let v274 : UH0 = v272 v273
                        let v296 : int32 = 1
                        let v297 : int32 = 1
                        let struct (v298 : System.Text.StringBuilder, v299 : int32, v300 : int32) = method74(v274, v12, v296, v297)
                        US15_0(v228, v251, v298, v299, v300)
                    else
                        let v302 : char list = []
                        let v303 : char list = ' ' :: v302 
                        let v306 : char list = ''' :: v303 
                        let v309 : char list = '"' :: v306 
                        let v312 : (char list -> (char [])) = List.toArray
                        let v313 : (char []) = v312 v309
                        let v316 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v313} / s: %A{struct (v12, 1, 1)}"
                        US15_1(v316)
            let v333 : US15 =
                match v321 with
                | US15_1(v330) -> (* Error *)
                    US15_1(v330)
                | US15_0(v322, v323, v324, v325, v326) -> (* Ok *)
                    let v327 : bool = '\\' = v322
                    let v328 : char =
                        if v327 then
                            '/'
                        else
                            v322
                    US15_0(v328, v323, v324, v325, v326)
            let v352 : US16 =
                match v333 with
                | US15_1(v349) -> (* Error *)
                    US16_1(v349)
                | US15_0(v334, v335, v336, v337, v338) -> (* Ok *)
                    let v339 : (char -> string) = _.ToString()
                    let v340 : string = v339 v334
                    let struct (v343 : string, v344 : string, v345 : System.Text.StringBuilder, v346 : int32, v347 : int32) = method80(v340, v335, v336, v337, v338)
                    US16_0(v343, v344, v345, v346, v347)
            match v352 with
            | US16_1(v358) -> (* Error *)
                let v359 : int32 = v7.Length
                let v360 : bool = v359 = 0
                let v366 : US18 =
                    if v360 then
                        US18_0(v7, v12, 1, 1)
                    else
                        let v362 : string = $"parsing.eof / expected end of input / input: %A{v7}"
                        US18_1(v362)
                let v375 : US16 =
                    match v366 with
                    | US18_1(v372) -> (* Error *)
                        US16_1(v372)
                    | US18_0(v367, v368, v369, v370) -> (* Ok *)
                        US16_0(v6, v367, v368, v369, v370)
                match v375 with
                | US16_1(v407) -> (* Error *)
                    US16_1(v407)
                | US16_0(v376, v377, v378, v379, v380) -> (* Ok *)
                    let v381 : int32 = 0
                    let v382 : int32 = method81(v377, v381)
                    let v383 : (string -> int32) = String.length
                    let v384 : int32 = v383 v377
                    let v387 : int32 = v382 |> int32 
                    let v394 : int32 = v384 |> int32 
                    let v401 : int32 = v394 - 1
                    let v402 : string = v377.[int v387..int v401]
                    US16_0(v376, v402, v378, v379, v380)
            | US16_0(v353, v354, v355, v356, v357) -> (* Ok *)
                v352
        | US16_0(v203, v204, v205, v206, v207) -> (* Ok *)
            v202
    let v685 : US19 =
        match v414 with
        | US16_1(v682) -> (* Error *)
            US19_1(v682)
        | US16_0(v415, v416, v417, v418, v419) -> (* Ok *)
            let v420 : bool = "" = v416
            let v544 : US15 =
                if v420 then
                    let v421 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v417, v418, v419)}"
                    US15_1(v421)
                else
                    let v425 : char = v416.[int 0]
                    let v426 : bool = v425 = ' '
                    if v426 then
                        let v427 : (string -> int32) = String.length
                        let v428 : int32 = v427 v416
                        let v431 : int32 = 1 |> int32 
                        let v438 : int32 = v428 |> int32 
                        let v445 : int32 = v438 - 1
                        let v446 : string = v416.[int v431..int v445]
                        let v450 : (char -> string) = _.ToString()
                        let v451 : string = v450 v425
                        let v454 : int32 = v451.Length
                        let v455 : (char []) = Array.zeroCreate<char> (v454)
                        let v456 : Mut5 = {l0 = 0} : Mut5
                        while method72(v454, v456) do
                            let v458 : int32 = v456.l0
                            let v459 : char = v451.[int v458]
                            v455.[int v458] <- v459
                            let v460 : int32 = v458 + 1
                            v456.l0 <- v460
                            ()
                        let v461 : char list = v455 |> Array.toList
                        let v464 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v465 : (char -> (UH0 -> UH0)) = method73()
                        let v466 : (char list -> (UH0 -> UH0)) = v464 v465
                        let v467 : (UH0 -> UH0) = v466 v461
                        let v468 : UH0 = UH0_0
                        let v469 : UH0 = v467 v468
                        let struct (v491 : System.Text.StringBuilder, v492 : int32, v493 : int32) = method74(v469, v417, v418, v419)
                        US15_0(v425, v446, v491, v492, v493)
                    else
                        let v495 : string = "\n"
                        let v496 : int32 = v416.IndexOf v495 
                        let v499 : int32 = v496 - 1
                        let v500 : bool = -2 = v499
                        let v507 : int32 =
                            if v500 then
                                let v501 : (string -> int32) = String.length
                                let v502 : int32 = v501 v416
                                let v505 : int32 = v502 + 1
                                v505
                            else
                                let v506 : int32 = v499 + 1
                                v506
                        let v508 : int32 = 0 |> int32 
                        let v515 : int32 = v507 |> int32 
                        let v522 : int32 = v515 - 1
                        let v523 : string = v416.[int v508..int v522]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v418} / col: {v419}
{v417}{v523}"
                        let v530 : int32 = v419 - 1
                        let v531 : (int32 -> (string -> string)) = String.replicate
                        let v532 : (string -> string) = v531 v530
                        let v533 : string = " "
                        let v534 : string = v532 v533
                        let v537 : string = "^"
                        let v538 : string = v534 + v537 
                        let v539 : string = $"{v527}
{v538}
"
                        US15_1(v539)
            let v556 : US20 =
                match v544 with
                | US15_1(v552) -> (* Error *)
                    let v553 : US17 = US17_1
                    US20_0(v553, v416, v417, v418, v419)
                | US15_0(v545, v546, v547, v548, v549) -> (* Ok *)
                    let v550 : US17 = US17_0(v545)
                    US20_0(v550, v546, v547, v548, v549)
            let v659 : US16 =
                match v556 with
                | US20_1(v656) -> (* Error *)
                    US16_1(v656)
                | US20_0(v557, v558, v559, v560, v561) -> (* Ok *)
                    let v562 : bool = "" = v558
                    let v636 : US15 =
                        if v562 then
                            let v563 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v559, v560, v561)}"
                            US15_1(v563)
                        else
                            let v567 : char = v558.[int 0]
                            let v568 : (string -> int32) = String.length
                            let v569 : int32 = v568 v558
                            let v572 : int32 = 1 |> int32 
                            let v579 : int32 = v569 |> int32 
                            let v586 : int32 = v579 - 1
                            let v587 : string = v558.[int v572..int v586]
                            let v591 : (char -> string) = _.ToString()
                            let v592 : string = v591 v567
                            let v595 : int32 = v592.Length
                            let v596 : (char []) = Array.zeroCreate<char> (v595)
                            let v597 : Mut5 = {l0 = 0} : Mut5
                            while method72(v595, v597) do
                                let v599 : int32 = v597.l0
                                let v600 : char = v592.[int v599]
                                v596.[int v599] <- v600
                                let v601 : int32 = v599 + 1
                                v597.l0 <- v601
                                ()
                            let v602 : char list = v596 |> Array.toList
                            let v605 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v606 : (char -> (UH0 -> UH0)) = method73()
                            let v607 : (char list -> (UH0 -> UH0)) = v605 v606
                            let v608 : (UH0 -> UH0) = v607 v602
                            let v609 : UH0 = UH0_0
                            let v610 : UH0 = v608 v609
                            let struct (v632 : System.Text.StringBuilder, v633 : int32, v634 : int32) = method74(v610, v559, v560, v561)
                            US15_0(v567, v587, v632, v633, v634)
                    match v636 with
                    | US15_1(v652) -> (* Error *)
                        US16_1(v652)
                    | US15_0(v637, v638, v639, v640, v641) -> (* Ok *)
                        let v642 : (char -> string) = _.ToString()
                        let v643 : string = v642 v637
                        let struct (v646 : string, v647 : string, v648 : System.Text.StringBuilder, v649 : int32, v650 : int32) = method82(v643, v638, v639, v640, v641)
                        US16_0(v646, v647, v648, v649, v650)
            let v671 : US21 =
                match v659 with
                | US16_1(v667) -> (* Error *)
                    let v668 : US5 = US5_1
                    US21_0(v668, v416, v417, v418, v419)
                | US16_0(v660, v661, v662, v663, v664) -> (* Ok *)
                    let v665 : US5 = US5_0(v660)
                    US21_0(v665, v661, v662, v663, v664)
            match v671 with
            | US21_1(v678) -> (* Error *)
                US19_1(v678)
            | US21_0(v672, v673, v674, v675, v676) -> (* Ok *)
                US19_0(v415, v672, v673, v674, v675, v676)
    match v685 with
    | US19_1(v693) -> (* Error *)
        US14_1(v693)
    | US19_0(v686, v687, v688, v689, v690, v691) -> (* Ok *)
        US14_0(v686, v687)
and method85 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method85(v0, v25)
and method86 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v121 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v27 : char = v1.[int 0]
            let v28 : int64 = 0L
            let v29 : bool = method85(v27, v28)
            let v30 : bool = v29 = false
            if v30 then
                let v31 : (string -> int32) = String.length
                let v32 : int32 = v31 v1
                let v35 : int32 = 1 |> int32 
                let v42 : int32 = v32 |> int32 
                let v49 : int32 = v42 - 1
                let v50 : string = v1.[int v35..int v49]
                let v54 : (char -> string) = _.ToString()
                let v55 : string = v54 v27
                let v58 : int32 = v55.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method72(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v55.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method73()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v95 : System.Text.StringBuilder, v96 : int32, v97 : int32) = method74(v73, v2, v3, v4)
                US15_0(v27, v50, v95, v96, v97)
            else
                let v99 : char list = []
                let v100 : char list = ' ' :: v99 
                let v103 : char list = '"' :: v100 
                let v106 : char list = '`' :: v103 
                let v109 : char list = '\\' :: v106 
                let v112 : (char list -> (char [])) = List.toArray
                let v113 : (char []) = v112 v109
                let v116 : string = $"parsing.none_of / unexpected char: '{v27}' / chars: %A{v113} / s: %A{struct (v2, v3, v4)}"
                US15_1(v116)
    match v121 with
    | US15_1(v137) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : (char -> string) = _.ToString()
        let v128 : string = v127 v122
        let v131 : string = v0 + v128 
        method86(v131, v123, v124, v125, v126)
and method88 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method88(v0, v21)
and closure30 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v128 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v9 : char = v0.[int 0]
            let v10 : bool = v9 = '\\'
            if v10 then
                let v11 : (string -> int32) = String.length
                let v12 : int32 = v11 v0
                let v15 : int32 = 1 |> int32 
                let v22 : int32 = v12 |> int32 
                let v29 : int32 = v22 - 1
                let v30 : string = v0.[int v15..int v29]
                let v34 : (char -> string) = _.ToString()
                let v35 : string = v34 v9
                let v38 : int32 = v35.Length
                let v39 : (char []) = Array.zeroCreate<char> (v38)
                let v40 : Mut5 = {l0 = 0} : Mut5
                while method72(v38, v40) do
                    let v42 : int32 = v40.l0
                    let v43 : char = v35.[int v42]
                    v39.[int v42] <- v43
                    let v44 : int32 = v42 + 1
                    v40.l0 <- v44
                    ()
                let v45 : char list = v39 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method73()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v45
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
                US15_0(v9, v30, v75, v76, v77)
            else
                let v79 : string = "\n"
                let v80 : int32 = v0.IndexOf v79 
                let v83 : int32 = v80 - 1
                let v84 : bool = -2 = v83
                let v91 : int32 =
                    if v84 then
                        let v85 : (string -> int32) = String.length
                        let v86 : int32 = v85 v0
                        let v89 : int32 = v86 + 1
                        v89
                    else
                        let v90 : int32 = v83 + 1
                        v90
                let v92 : int32 = 0 |> int32 
                let v99 : int32 = v91 |> int32 
                let v106 : int32 = v99 - 1
                let v107 : string = v0.[int v92..int v106]
                let v111 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v107}"
                let v114 : int32 = v3 - 1
                let v115 : (int32 -> (string -> string)) = String.replicate
                let v116 : (string -> string) = v115 v114
                let v117 : string = " "
                let v118 : string = v116 v117
                let v121 : string = "^"
                let v122 : string = v118 + v121 
                let v123 : string = $"{v111}
{v122}
"
                US15_1(v123)
    let v212 : US15 =
        match v128 with
        | US15_1(v209) -> (* Error *)
            US15_1(v209)
        | US15_0(v129, v130, v131, v132, v133) -> (* Ok *)
            let v134 : bool = "" = v130
            if v134 then
                let v135 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v131, v132, v133)}"
                US15_1(v135)
            else
                let v139 : char = v130.[int 0]
                let v140 : (string -> int32) = String.length
                let v141 : int32 = v140 v130
                let v144 : int32 = 1 |> int32 
                let v151 : int32 = v141 |> int32 
                let v158 : int32 = v151 - 1
                let v159 : string = v130.[int v144..int v158]
                let v163 : (char -> string) = _.ToString()
                let v164 : string = v163 v139
                let v167 : int32 = v164.Length
                let v168 : (char []) = Array.zeroCreate<char> (v167)
                let v169 : Mut5 = {l0 = 0} : Mut5
                while method72(v167, v169) do
                    let v171 : int32 = v169.l0
                    let v172 : char = v164.[int v171]
                    v168.[int v171] <- v172
                    let v173 : int32 = v171 + 1
                    v169.l0 <- v173
                    ()
                let v174 : char list = v168 |> Array.toList
                let v177 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v178 : (char -> (UH0 -> UH0)) = method73()
                let v179 : (char list -> (UH0 -> UH0)) = v177 v178
                let v180 : (UH0 -> UH0) = v179 v174
                let v181 : UH0 = UH0_0
                let v182 : UH0 = v180 v181
                let struct (v204 : System.Text.StringBuilder, v205 : int32, v206 : int32) = method74(v182, v131, v132, v133)
                US15_0(v139, v159, v204, v205, v206)
    match v212 with
    | US15_1(v228) -> (* Error *)
        US16_1(v228)
    | US15_0(v213, v214, v215, v216, v217) -> (* Ok *)
        let v218 : (char -> string) = _.ToString()
        let v219 : string = v218 '\\'
        let v222 : (char -> string) = _.ToString()
        let v223 : string = v222 v213
        let v226 : string = v219 + v223 
        US16_0(v226, v214, v215, v216, v217)
and closure31 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v128 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v9 : char = v0.[int 0]
            let v10 : bool = v9 = '`'
            if v10 then
                let v11 : (string -> int32) = String.length
                let v12 : int32 = v11 v0
                let v15 : int32 = 1 |> int32 
                let v22 : int32 = v12 |> int32 
                let v29 : int32 = v22 - 1
                let v30 : string = v0.[int v15..int v29]
                let v34 : (char -> string) = _.ToString()
                let v35 : string = v34 v9
                let v38 : int32 = v35.Length
                let v39 : (char []) = Array.zeroCreate<char> (v38)
                let v40 : Mut5 = {l0 = 0} : Mut5
                while method72(v38, v40) do
                    let v42 : int32 = v40.l0
                    let v43 : char = v35.[int v42]
                    v39.[int v42] <- v43
                    let v44 : int32 = v42 + 1
                    v40.l0 <- v44
                    ()
                let v45 : char list = v39 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method73()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v45
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
                US15_0(v9, v30, v75, v76, v77)
            else
                let v79 : string = "\n"
                let v80 : int32 = v0.IndexOf v79 
                let v83 : int32 = v80 - 1
                let v84 : bool = -2 = v83
                let v91 : int32 =
                    if v84 then
                        let v85 : (string -> int32) = String.length
                        let v86 : int32 = v85 v0
                        let v89 : int32 = v86 + 1
                        v89
                    else
                        let v90 : int32 = v83 + 1
                        v90
                let v92 : int32 = 0 |> int32 
                let v99 : int32 = v91 |> int32 
                let v106 : int32 = v99 - 1
                let v107 : string = v0.[int v92..int v106]
                let v111 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v107}"
                let v114 : int32 = v3 - 1
                let v115 : (int32 -> (string -> string)) = String.replicate
                let v116 : (string -> string) = v115 v114
                let v117 : string = " "
                let v118 : string = v116 v117
                let v121 : string = "^"
                let v122 : string = v118 + v121 
                let v123 : string = $"{v111}
{v122}
"
                US15_1(v123)
    let v212 : US15 =
        match v128 with
        | US15_1(v209) -> (* Error *)
            US15_1(v209)
        | US15_0(v129, v130, v131, v132, v133) -> (* Ok *)
            let v134 : bool = "" = v130
            if v134 then
                let v135 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v131, v132, v133)}"
                US15_1(v135)
            else
                let v139 : char = v130.[int 0]
                let v140 : (string -> int32) = String.length
                let v141 : int32 = v140 v130
                let v144 : int32 = 1 |> int32 
                let v151 : int32 = v141 |> int32 
                let v158 : int32 = v151 - 1
                let v159 : string = v130.[int v144..int v158]
                let v163 : (char -> string) = _.ToString()
                let v164 : string = v163 v139
                let v167 : int32 = v164.Length
                let v168 : (char []) = Array.zeroCreate<char> (v167)
                let v169 : Mut5 = {l0 = 0} : Mut5
                while method72(v167, v169) do
                    let v171 : int32 = v169.l0
                    let v172 : char = v164.[int v171]
                    v168.[int v171] <- v172
                    let v173 : int32 = v171 + 1
                    v169.l0 <- v173
                    ()
                let v174 : char list = v168 |> Array.toList
                let v177 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v178 : (char -> (UH0 -> UH0)) = method73()
                let v179 : (char list -> (UH0 -> UH0)) = v177 v178
                let v180 : (UH0 -> UH0) = v179 v174
                let v181 : UH0 = UH0_0
                let v182 : UH0 = v180 v181
                let struct (v204 : System.Text.StringBuilder, v205 : int32, v206 : int32) = method74(v182, v131, v132, v133)
                US15_0(v139, v159, v204, v205, v206)
    match v212 with
    | US15_1(v228) -> (* Error *)
        US16_1(v228)
    | US15_0(v213, v214, v215, v216, v217) -> (* Ok *)
        let v218 : (char -> string) = _.ToString()
        let v219 : string = v218 '`'
        let v222 : (char -> string) = _.ToString()
        let v223 : string = v222 v213
        let v226 : string = v219 + v223 
        US16_0(v226, v214, v215, v216, v217)
and method89 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method89(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US16_1(v5)
and method90 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method90(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method87 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v115 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method88(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method72(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method73()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method74(v70, v2, v3, v4)
                US15_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = '"' :: v96 
                let v100 : char list = '`' :: v97 
                let v103 : char list = '\\' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US15_1(v110)
    let v129 : US16 =
        match v115 with
        | US15_1(v126) -> (* Error *)
            US16_1(v126)
        | US15_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v116
            US16_0(v122, v117, v118, v119, v120)
    let v143 : US16 =
        match v129 with
        | US16_1(v135) -> (* Error *)
            let v136 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure30()
            let v137 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure31()
            let v138 : UH3 = UH3_0
            let v139 : UH3 = UH3_1(v137, v138)
            let v140 : UH3 = UH3_1(v136, v139)
            method89(v1, v2, v3, v4, v140)
        | US16_0(v130, v131, v132, v133, v134) -> (* Ok *)
            v129
    match v143 with
    | US16_1(v151) -> (* Error *)
        let v152 : UH2 = UH2_0
        let v153 : UH2 = method90(v0, v152)
        US23_0(v153, v1, v2, v3, v4)
    | US16_0(v144, v145, v146, v147, v148) -> (* Ok *)
        let v149 : UH2 = UH2_1(v144, v0)
        method87(v149, v145, v146, v147, v148)
and method91 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method91(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method92 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v115 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method88(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method72(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method73()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method74(v70, v2, v3, v4)
                US15_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = '"' :: v96 
                let v100 : char list = '`' :: v97 
                let v103 : char list = '\\' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US15_1(v110)
    let v129 : US16 =
        match v115 with
        | US15_1(v126) -> (* Error *)
            US16_1(v126)
        | US15_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v116
            US16_0(v122, v117, v118, v119, v120)
    match v129 with
    | US16_1(v137) -> (* Error *)
        let v138 : UH2 = UH2_0
        let v139 : UH2 = method90(v0, v138)
        US23_0(v139, v1, v2, v3, v4)
    | US16_0(v130, v131, v132, v133, v134) -> (* Ok *)
        let v135 : UH2 = UH2_1(v130, v0)
        method92(v135, v131, v132, v133, v134)
and method84 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v121 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v27 : char = v1.[int 0]
            let v28 : int64 = 0L
            let v29 : bool = method85(v27, v28)
            let v30 : bool = v29 = false
            if v30 then
                let v31 : (string -> int32) = String.length
                let v32 : int32 = v31 v1
                let v35 : int32 = 1 |> int32 
                let v42 : int32 = v32 |> int32 
                let v49 : int32 = v42 - 1
                let v50 : string = v1.[int v35..int v49]
                let v54 : (char -> string) = _.ToString()
                let v55 : string = v54 v27
                let v58 : int32 = v55.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method72(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v55.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method73()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v95 : System.Text.StringBuilder, v96 : int32, v97 : int32) = method74(v73, v2, v3, v4)
                US15_0(v27, v50, v95, v96, v97)
            else
                let v99 : char list = []
                let v100 : char list = ' ' :: v99 
                let v103 : char list = '"' :: v100 
                let v106 : char list = '`' :: v103 
                let v109 : char list = '\\' :: v106 
                let v112 : (char list -> (char [])) = List.toArray
                let v113 : (char []) = v112 v109
                let v116 : string = $"parsing.none_of / unexpected char: '{v27}' / chars: %A{v113} / s: %A{struct (v2, v3, v4)}"
                US15_1(v116)
    let v140 : US16 =
        match v121 with
        | US15_1(v137) -> (* Error *)
            US16_1(v137)
        | US15_0(v122, v123, v124, v125, v126) -> (* Ok *)
            let v127 : (char -> string) = _.ToString()
            let v128 : string = v127 v122
            let struct (v131 : string, v132 : string, v133 : System.Text.StringBuilder, v134 : int32, v135 : int32) = method86(v128, v123, v124, v125, v126)
            US16_0(v131, v132, v133, v134, v135)
    let v517 : US16 =
        match v140 with
        | US16_1(v146) -> (* Error *)
            let v270 : US15 =
                if v5 then
                    let v147 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US15_1(v147)
                else
                    let v151 : char = v1.[int 0]
                    let v152 : bool = v151 = '"'
                    if v152 then
                        let v153 : (string -> int32) = String.length
                        let v154 : int32 = v153 v1
                        let v157 : int32 = 1 |> int32 
                        let v164 : int32 = v154 |> int32 
                        let v171 : int32 = v164 - 1
                        let v172 : string = v1.[int v157..int v171]
                        let v176 : (char -> string) = _.ToString()
                        let v177 : string = v176 v151
                        let v180 : int32 = v177.Length
                        let v181 : (char []) = Array.zeroCreate<char> (v180)
                        let v182 : Mut5 = {l0 = 0} : Mut5
                        while method72(v180, v182) do
                            let v184 : int32 = v182.l0
                            let v185 : char = v177.[int v184]
                            v181.[int v184] <- v185
                            let v186 : int32 = v184 + 1
                            v182.l0 <- v186
                            ()
                        let v187 : char list = v181 |> Array.toList
                        let v190 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v191 : (char -> (UH0 -> UH0)) = method73()
                        let v192 : (char list -> (UH0 -> UH0)) = v190 v191
                        let v193 : (UH0 -> UH0) = v192 v187
                        let v194 : UH0 = UH0_0
                        let v195 : UH0 = v193 v194
                        let struct (v217 : System.Text.StringBuilder, v218 : int32, v219 : int32) = method74(v195, v2, v3, v4)
                        US15_0(v151, v172, v217, v218, v219)
                    else
                        let v221 : string = "\n"
                        let v222 : int32 = v1.IndexOf v221 
                        let v225 : int32 = v222 - 1
                        let v226 : bool = -2 = v225
                        let v233 : int32 =
                            if v226 then
                                let v227 : (string -> int32) = String.length
                                let v228 : int32 = v227 v1
                                let v231 : int32 = v228 + 1
                                v231
                            else
                                let v232 : int32 = v225 + 1
                                v232
                        let v234 : int32 = 0 |> int32 
                        let v241 : int32 = v233 |> int32 
                        let v248 : int32 = v241 - 1
                        let v249 : string = v1.[int v234..int v248]
                        let v253 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v249}"
                        let v256 : int32 = v4 - 1
                        let v257 : (int32 -> (string -> string)) = String.replicate
                        let v258 : (string -> string) = v257 v256
                        let v259 : string = " "
                        let v260 : string = v258 v259
                        let v263 : string = "^"
                        let v264 : string = v260 + v263 
                        let v265 : string = $"{v253}
{v264}
"
                        US15_1(v265)
            let v454 : US16 =
                match v270 with
                | US15_1(v451) -> (* Error *)
                    US16_1(v451)
                | US15_0(v271, v272, v273, v274, v275) -> (* Ok *)
                    let v276 : UH2 = UH2_0
                    let v277 : US23 = method87(v276, v272, v273, v274, v275)
                    let v302 : US16 =
                        match v277 with
                        | US23_1(v299) -> (* Error *)
                            US16_1(v299)
                        | US23_0(v278, v279, v280, v281, v282) -> (* Ok *)
                            let v283 : string list = []
                            let v284 : string list = method91(v278, v283)
                            let v285 : unit = ()
                            let _v285 =
                                seq {
                                    for i = 0 to v284.Length - 1 do yield v284.[i]
                                    (*
                                    ()
                                *)
                                }
                                (*
                                ()
                            *)
                            let v286 : string seq = _v285 
                            let v292 : (string -> (string seq -> string)) = String.concat
                            let v293 : string = ""
                            let v294 : (string seq -> string) = v292 v293
                            let v295 : string = v294 v286
                            US16_0(v295, v279, v280, v281, v282)
                    match v302 with
                    | US16_1(v446) -> (* Error *)
                        let v447 : string = "parsing.between / expected content"
                        US16_1(v447)
                    | US16_0(v303, v304, v305, v306, v307) -> (* Ok *)
                        let v308 : bool = "" = v304
                        let v432 : US15 =
                            if v308 then
                                let v309 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v305, v306, v307)}"
                                US15_1(v309)
                            else
                                let v313 : char = v304.[int 0]
                                let v314 : bool = v313 = '"'
                                if v314 then
                                    let v315 : (string -> int32) = String.length
                                    let v316 : int32 = v315 v304
                                    let v319 : int32 = 1 |> int32 
                                    let v326 : int32 = v316 |> int32 
                                    let v333 : int32 = v326 - 1
                                    let v334 : string = v304.[int v319..int v333]
                                    let v338 : (char -> string) = _.ToString()
                                    let v339 : string = v338 v313
                                    let v342 : int32 = v339.Length
                                    let v343 : (char []) = Array.zeroCreate<char> (v342)
                                    let v344 : Mut5 = {l0 = 0} : Mut5
                                    while method72(v342, v344) do
                                        let v346 : int32 = v344.l0
                                        let v347 : char = v339.[int v346]
                                        v343.[int v346] <- v347
                                        let v348 : int32 = v346 + 1
                                        v344.l0 <- v348
                                        ()
                                    let v349 : char list = v343 |> Array.toList
                                    let v352 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v353 : (char -> (UH0 -> UH0)) = method73()
                                    let v354 : (char list -> (UH0 -> UH0)) = v352 v353
                                    let v355 : (UH0 -> UH0) = v354 v349
                                    let v356 : UH0 = UH0_0
                                    let v357 : UH0 = v355 v356
                                    let struct (v379 : System.Text.StringBuilder, v380 : int32, v381 : int32) = method74(v357, v305, v306, v307)
                                    US15_0(v313, v334, v379, v380, v381)
                                else
                                    let v383 : string = "\n"
                                    let v384 : int32 = v304.IndexOf v383 
                                    let v387 : int32 = v384 - 1
                                    let v388 : bool = -2 = v387
                                    let v395 : int32 =
                                        if v388 then
                                            let v389 : (string -> int32) = String.length
                                            let v390 : int32 = v389 v304
                                            let v393 : int32 = v390 + 1
                                            v393
                                        else
                                            let v394 : int32 = v387 + 1
                                            v394
                                    let v396 : int32 = 0 |> int32 
                                    let v403 : int32 = v395 |> int32 
                                    let v410 : int32 = v403 - 1
                                    let v411 : string = v304.[int v396..int v410]
                                    let v415 : string = $"parsing.p_char / expected: '{'"'}' / line: {v306} / col: {v307}
{v305}{v411}"
                                    let v418 : int32 = v307 - 1
                                    let v419 : (int32 -> (string -> string)) = String.replicate
                                    let v420 : (string -> string) = v419 v418
                                    let v421 : string = " "
                                    let v422 : string = v420 v421
                                    let v425 : string = "^"
                                    let v426 : string = v422 + v425 
                                    let v427 : string = $"{v415}
{v426}
"
                                    US15_1(v427)
                        match v432 with
                        | US15_1(v439) -> (* Error *)
                            let v440 : string = $"parsing.between / expected closing delimiter / e: %A{v439} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v272, v273, v274, v275)} / rest2: %A{struct (v304, v305, v306, v307)}"
                            US16_1(v440)
                        | US15_0(v433, v434, v435, v436, v437) -> (* Ok *)
                            US16_0(v303, v434, v435, v436, v437)
            match v454 with
            | US16_1(v460) -> (* Error *)
                let v461 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure30()
                let v462 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure31()
                let v463 : UH3 = UH3_0
                let v464 : UH3 = UH3_1(v462, v463)
                let v465 : UH3 = UH3_1(v461, v464)
                let v466 : US16 = method89(v1, v2, v3, v4, v465)
                let v477 : US16 =
                    match v466 with
                    | US16_1(v474) -> (* Error *)
                        US16_1(v474)
                    | US16_0(v467, v468, v469, v470, v471) -> (* Ok *)
                        let v472 : string = ""
                        US16_0(v472, v468, v469, v470, v471)
                let v488 : US23 =
                    match v477 with
                    | US16_1(v485) -> (* Error *)
                        US23_1(v485)
                    | US16_0(v478, v479, v480, v481, v482) -> (* Ok *)
                        let v483 : UH2 = UH2_0
                        method92(v483, v479, v480, v481, v482)
                match v488 with
                | US23_1(v510) -> (* Error *)
                    US16_1(v510)
                | US23_0(v489, v490, v491, v492, v493) -> (* Ok *)
                    let v494 : string list = []
                    let v495 : string list = method91(v489, v494)
                    let v496 : unit = ()
                    let _v496 =
                        seq {
                            for i = 0 to v495.Length - 1 do yield v495.[i]
                            (*
                            ()
                        *)
                        }
                        (*
                        ()
                    *)
                    let v497 : string seq = _v496 
                    let v503 : (string -> (string seq -> string)) = String.concat
                    let v504 : string = ""
                    let v505 : (string seq -> string) = v503 v504
                    let v506 : string = v505 v497
                    US16_0(v506, v490, v491, v492, v493)
            | US16_0(v455, v456, v457, v458, v459) -> (* Ok *)
                v454
        | US16_0(v141, v142, v143, v144, v145) -> (* Ok *)
            v140
    match v517 with
    | US16_1(v566) -> (* Error *)
        let v567 : UH2 = UH2_0
        let v568 : UH2 = method90(v0, v567)
        US23_0(v568, v1, v2, v3, v4)
    | US16_0(v518, v519, v520, v521, v522) -> (* Ok *)
        let v523 : int32 = 0
        let v524 : int32 = method81(v519, v523)
        let v525 : bool = 0 = v524
        let v552 : US18 =
            if v525 then
                let v526 : string = "parsing.spaces1 / expected at least one space"
                US18_1(v526)
            else
                let v528 : (string -> int32) = String.length
                let v529 : int32 = v528 v519
                let v532 : int32 = v524 |> int32 
                let v539 : int32 = v529 |> int32 
                let v546 : int32 = v539 - 1
                let v547 : string = v519.[int v532..int v546]
                US18_0(v547, v520, v521, v522)
        match v552 with
        | US18_1(v559) -> (* Error *)
            let v560 : UH2 = UH2_0
            let v561 : UH2 = UH2_1(v518, v560)
            let v562 : UH2 = method90(v0, v561)
            US23_0(v562, v519, v520, v521, v522)
        | US18_0(v553, v554, v555, v556) -> (* Ok *)
            let v557 : UH2 = UH2_1(v518, v0)
            method84(v557, v553, v554, v555, v556)
and method83 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : string = method71()
    let v11 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v12 : System.Text.StringBuilder = v11 v10
    let v15 : UH2 = UH2_0
    let v16 : int32 = 1
    let v17 : int32 = 1
    let v18 : US23 = method84(v15, v7, v12, v16, v17)
    match v18 with
    | US23_1(v31) -> (* Error *)
        US22_1(v31)
    | US23_0(v19, v20, v21, v22, v23) -> (* Ok *)
        let v24 : string list = []
        let v25 : string list = method91(v19, v24)
        let v26 : (string list -> (string [])) = List.toArray
        let v27 : (string []) = v26 v25
        US22_0(v27)
and method94 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = "{ "
    let v12 : string = $"{v11}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v10, v12)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v20 : string = "file_name"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v10, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v10, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v10, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v55 : string = "arguments"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v64 : string = $"{v29}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v10, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : string = $"{v1}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v10, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = $"{v46}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v10, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v88 : string = "options"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v29}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v10, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v11}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v10, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v10, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v29}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v10, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v10, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v46}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v10, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "cancellation_token"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v10, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v29}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v10, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v164 : string = "format!(\"{:#?}\", $0)"
    let v165 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v164 
    let v166 : string = "fable_library_rust::String_::fromString($0)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let _v163 = v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v168 : string = "format!(\"{:#?}\", $0)"
    let v169 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v168 
    let v170 : string = "fable_library_rust::String_::fromString($0)"
    let v171 : string = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let _v163 = v171 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v172 : string = "format!(\"{:#?}\", $0)"
    let v173 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v172 
    let v174 : string = "fable_library_rust::String_::fromString($0)"
    let v175 : string = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let _v163 = v175 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v176 : string = $"%A{v3}"
    let _v163 = v176 
    #endif
#if FABLE_COMPILER_PYTHON
    let v179 : string = $"%A{v3}"
    let _v163 = v179 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v182 : string = $"%A{v3}"
    let _v163 = v182 
    #endif
#else
    let v185 : string = $"%A{v3}"
    let _v163 = v185 
    #endif
    let v188 : string = _v163 
    let v193 : string = $"{v188}"
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure7(v10, v193)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v201 : string = $"{v46}"
    let v204 : unit = ()
    let v205 : (unit -> unit) = closure7(v10, v201)
    let v206 : unit = (fun () -> v205 (); v204) ()
    let v209 : string = "environment_variables"
    let v210 : string = $"{v209}"
    let v213 : unit = ()
    let v214 : (unit -> unit) = closure7(v10, v210)
    let v215 : unit = (fun () -> v214 (); v213) ()
    let v218 : string = $"{v29}"
    let v221 : unit = ()
    let v222 : (unit -> unit) = closure7(v10, v218)
    let v223 : unit = (fun () -> v222 (); v221) ()
    let v226 : string = $"%A{v4}"
    let v229 : string = $"{v226}"
    let v232 : unit = ()
    let v233 : (unit -> unit) = closure7(v10, v229)
    let v234 : unit = (fun () -> v233 (); v232) ()
    let v237 : string = $"{v46}"
    let v240 : unit = ()
    let v241 : (unit -> unit) = closure7(v10, v237)
    let v242 : unit = (fun () -> v241 (); v240) ()
    let v245 : string = "on_line"
    let v246 : string = $"{v245}"
    let v249 : unit = ()
    let v250 : (unit -> unit) = closure7(v10, v246)
    let v251 : unit = (fun () -> v250 (); v249) ()
    let v254 : string = $"{v29}"
    let v257 : unit = ()
    let v258 : (unit -> unit) = closure7(v10, v254)
    let v259 : unit = (fun () -> v258 (); v257) ()
    let v262 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v263 : string = "format!(\"{:#?}\", $0)"
    let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v263 
    let v265 : string = "fable_library_rust::String_::fromString($0)"
    let v266 : string = Fable.Core.RustInterop.emitRustExpr v264 v265 
    let _v262 = v266 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v267 : string = "format!(\"{:#?}\", $0)"
    let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v267 
    let v269 : string = "fable_library_rust::String_::fromString($0)"
    let v270 : string = Fable.Core.RustInterop.emitRustExpr v268 v269 
    let _v262 = v270 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v271 : string = "format!(\"{:#?}\", $0)"
    let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v271 
    let v273 : string = "fable_library_rust::String_::fromString($0)"
    let v274 : string = Fable.Core.RustInterop.emitRustExpr v272 v273 
    let _v262 = v274 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v275 : string = $"%A{v5}"
    let _v262 = v275 
    #endif
#if FABLE_COMPILER_PYTHON
    let v278 : string = $"%A{v5}"
    let _v262 = v278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v281 : string = $"%A{v5}"
    let _v262 = v281 
    #endif
#else
    let v284 : string = $"%A{v5}"
    let _v262 = v284 
    #endif
    let v287 : string = _v262 
    let v292 : string = $"{v287}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v10, v292)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v300 : string = $"{v46}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v10, v300)
    let v305 : unit = (fun () -> v304 (); v303) ()
    let v308 : string = "stdin"
    let v309 : string = $"{v308}"
    let v312 : unit = ()
    let v313 : (unit -> unit) = closure7(v10, v309)
    let v314 : unit = (fun () -> v313 (); v312) ()
    let v317 : string = $"{v29}"
    let v320 : unit = ()
    let v321 : (unit -> unit) = closure7(v10, v317)
    let v322 : unit = (fun () -> v321 (); v320) ()
    let v325 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v326 : string = "format!(\"{:#?}\", $0)"
    let v327 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v326 
    let v328 : string = "fable_library_rust::String_::fromString($0)"
    let v329 : string = Fable.Core.RustInterop.emitRustExpr v327 v328 
    let _v325 = v329 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v330 : string = "format!(\"{:#?}\", $0)"
    let v331 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v330 
    let v332 : string = "fable_library_rust::String_::fromString($0)"
    let v333 : string = Fable.Core.RustInterop.emitRustExpr v331 v332 
    let _v325 = v333 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v334 : string = "format!(\"{:#?}\", $0)"
    let v335 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v334 
    let v336 : string = "fable_library_rust::String_::fromString($0)"
    let v337 : string = Fable.Core.RustInterop.emitRustExpr v335 v336 
    let _v325 = v337 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v338 : string = $"%A{v6}"
    let _v325 = v338 
    #endif
#if FABLE_COMPILER_PYTHON
    let v341 : string = $"%A{v6}"
    let _v325 = v341 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v344 : string = $"%A{v6}"
    let _v325 = v344 
    #endif
#else
    let v347 : string = $"%A{v6}"
    let _v325 = v347 
    #endif
    let v350 : string = _v325 
    let v355 : string = $"{v350}"
    let v358 : unit = ()
    let v359 : (unit -> unit) = closure7(v10, v355)
    let v360 : unit = (fun () -> v359 (); v358) ()
    let v363 : string = $"{v46}"
    let v366 : unit = ()
    let v367 : (unit -> unit) = closure7(v10, v363)
    let v368 : unit = (fun () -> v367 (); v366) ()
    let v371 : string = "trace"
    let v372 : string = $"{v371}"
    let v375 : unit = ()
    let v376 : (unit -> unit) = closure7(v10, v372)
    let v377 : unit = (fun () -> v376 (); v375) ()
    let v380 : string = $"{v29}"
    let v383 : unit = ()
    let v384 : (unit -> unit) = closure7(v10, v380)
    let v385 : unit = (fun () -> v384 (); v383) ()
    let v390 : string =
        if v7 then
            let v388 : string = "true"
            v388
        else
            let v389 : string = "false"
            v389
    let v391 : string = $"{v390}"
    let v394 : unit = ()
    let v395 : (unit -> unit) = closure7(v10, v391)
    let v396 : unit = (fun () -> v395 (); v394) ()
    let v399 : string = $"{v46}"
    let v402 : unit = ()
    let v403 : (unit -> unit) = closure7(v10, v399)
    let v404 : unit = (fun () -> v403 (); v402) ()
    let v407 : string = "working_directory"
    let v408 : string = $"{v407}"
    let v411 : unit = ()
    let v412 : (unit -> unit) = closure7(v10, v408)
    let v413 : unit = (fun () -> v412 (); v411) ()
    let v416 : string = $"{v29}"
    let v419 : unit = ()
    let v420 : (unit -> unit) = closure7(v10, v416)
    let v421 : unit = (fun () -> v420 (); v419) ()
    let v424 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v425 : string = "format!(\"{:#?}\", $0)"
    let v426 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v425 
    let v427 : string = "fable_library_rust::String_::fromString($0)"
    let v428 : string = Fable.Core.RustInterop.emitRustExpr v426 v427 
    let _v424 = v428 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v429 : string = "format!(\"{:#?}\", $0)"
    let v430 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v429 
    let v431 : string = "fable_library_rust::String_::fromString($0)"
    let v432 : string = Fable.Core.RustInterop.emitRustExpr v430 v431 
    let _v424 = v432 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v433 : string = "format!(\"{:#?}\", $0)"
    let v434 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v433 
    let v435 : string = "fable_library_rust::String_::fromString($0)"
    let v436 : string = Fable.Core.RustInterop.emitRustExpr v434 v435 
    let _v424 = v436 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v437 : string = $"%A{v8}"
    let _v424 = v437 
    #endif
#if FABLE_COMPILER_PYTHON
    let v440 : string = $"%A{v8}"
    let _v424 = v440 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v443 : string = $"%A{v8}"
    let _v424 = v443 
    #endif
#else
    let v446 : string = $"%A{v8}"
    let _v424 = v446 
    #endif
    let v449 : string = _v424 
    let v454 : string = $"{v449}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v462 : string = " }"
    let v463 : string = $"{v462}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v10, v463)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v471 : string = $"{v462}"
    let v474 : unit = ()
    let v475 : (unit -> unit) = closure7(v10, v471)
    let v476 : unit = (fun () -> v475 (); v474) ()
    let v479 : string = v10.l0
    v479
and method93 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method94(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v19 : string = "runtime.execute_with_options"
    let v20 : string = $"{v6} {v7} #{v18} %s{v19} / {v17}"
    method18(v20)
and closure32 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = $"%A{v8}"
        let v50 : string = method93(v27, v28, v29, v30, v31, v32, v45, v46, v7, v47, v0, v1, v2, v3, v4, v5, v6)
        method19(v50)
and closure33 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method95 () : (std_process_Child option -> std_process_Child option) =
    closure33()
and closure34 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method96 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure34()
and closure35 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method97 () : (std_string_String -> US24) =
    closure35()
and method99 (v0 : std_string_String) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "error"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "format!(\"{:#?}\", $0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v31 
    let v33 : string = "fable_library_rust::String_::fromString($0)"
    let v34 : string = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "format!(\"{:#?}\", $0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v35 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let _v30 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _v30 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : string = $"%A{v0}"
    let _v30 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : string = $"%A{v0}"
    let _v30 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v30 = v49 
    #endif
#else
    let v52 : string = $"%A{v0}"
    let _v30 = v52 
    #endif
    let v55 : string = _v30 
    let v60 : string = $"{v55}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v2, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = " }"
    let v69 : string = $"{v68}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v2, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = v2.l0
    v77
and method98 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method99(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options / child error"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure36 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method49()
        let v39 : string = method98(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method100 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure37 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method101 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure37()
and closure38 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method102 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure38()
and method103 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure38()
and closure39 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method104 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure39()
and closure40 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method105 () : (std_string_String -> US26) =
    closure40()
and closure41 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method106 () : (std_string_String -> US26) =
    closure41()
and method108 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "trace'"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v33 : string =
        if v0 then
            let v31 : string = "true"
            v31
        else
            let v32 : string = "false"
            v32
    let v34 : string = $"{v33}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v3, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v3, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "e"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v3, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v22}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v68 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _v68 = v76 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _v68 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v1}"
    let _v68 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{v1}"
    let _v68 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : string = $"%A{v1}"
    let _v68 = v87 
    #endif
#else
    let v90 : string = $"%A{v1}"
    let _v68 = v90 
    #endif
    let v93 : string = _v68 
    let v98 : string = $"{v93}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v3, v98)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v106 : string = " }"
    let v107 : string = $"{v106}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v3, v107)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v115 : string = v3.l0
    v115
and method107 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method108(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.stdio_line"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure42 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method107(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method110 () : string =
    let v0 : string = method14()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method109 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method110()
    let v10 : int64 = v0.l0
    let v11 : string = $"{v6} {v7} #{v10} %s{v8} / {v9}"
    method18(v11)
and closure43 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method52()
        let v39 : bool = v0 = ""
        let v42 : string =
            if v39 then
                let v40 : string = ""
                v40
            else
                method109(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v42)
and closure44 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method111 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure44()
and method112 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure45 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US27 =
    US27_0(v0)
and method113 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US27) =
    closure45()
and method114 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure46 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US28 =
    US28_0(v0)
and method115 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US28) =
    closure46()
and method116 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method117 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure47 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and method118 () : (std_process_Output -> US29) =
    closure47()
and closure48 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method119 () : (std_string_String -> US29) =
    closure48()
and method120 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method99(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options / output error"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure49 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method49()
        let v39 : string = method120(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure50 () (v0 : int32) : US30 =
    US30_0(v0)
and method121 () : (int32 -> US30) =
    closure50()
and method123 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "std_trace_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method122 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method123(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / result"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure51 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method52()
        let v40 : int32 = v1.Length
        let v41 : string = method122(v20, v21, v22, v23, v24, v25, v38, v39, v0, v40)
        method19(v41)
and method126 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = "{ "
    let v12 : string = $"{v11}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v10, v12)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v20 : string = "file_name"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v10, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v10, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v10, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v55 : string = "arguments"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v64 : string = $"{v29}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v10, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : string = $"%A{v1}"
    let v75 : string = $"{v72}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v10, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v83 : string = $"{v46}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v10, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = "options"
    let v92 : string = $"{v91}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v10, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v100 : string = $"{v29}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v10, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v108 : string = $"{v11}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v10, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = "command"
    let v117 : string = $"{v116}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v10, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v125 : string = $"{v29}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v10, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = $"{v2}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v10, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v141 : string = $"{v46}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v10, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v149 : string = "cancellation_token"
    let v150 : string = $"{v149}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v10, v150)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v158 : string = $"{v29}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v10, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v166 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v167 : string = "format!(\"{:#?}\", $0)"
    let v168 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v167 
    let v169 : string = "fable_library_rust::String_::fromString($0)"
    let v170 : string = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let _v166 = v170 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v171 : string = "format!(\"{:#?}\", $0)"
    let v172 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v171 
    let v173 : string = "fable_library_rust::String_::fromString($0)"
    let v174 : string = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let _v166 = v174 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v175 : string = "format!(\"{:#?}\", $0)"
    let v176 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v175 
    let v177 : string = "fable_library_rust::String_::fromString($0)"
    let v178 : string = Fable.Core.RustInterop.emitRustExpr v176 v177 
    let _v166 = v178 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v179 : string = $"%A{v3}"
    let _v166 = v179 
    #endif
#if FABLE_COMPILER_PYTHON
    let v182 : string = $"%A{v3}"
    let _v166 = v182 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v185 : string = $"%A{v3}"
    let _v166 = v185 
    #endif
#else
    let v188 : string = $"%A{v3}"
    let _v166 = v188 
    #endif
    let v191 : string = _v166 
    let v196 : string = $"{v191}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v10, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v204 : string = $"{v46}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v10, v204)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v212 : string = "environment_variables"
    let v213 : string = $"{v212}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v10, v213)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v221 : string = $"{v29}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v10, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v229 : string = $"%A{v4}"
    let v232 : string = $"{v229}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v10, v232)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v240 : string = $"{v46}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v10, v240)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v248 : string = "on_line"
    let v249 : string = $"{v248}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v257 : string = $"{v29}"
    let v260 : unit = ()
    let v261 : (unit -> unit) = closure7(v10, v257)
    let v262 : unit = (fun () -> v261 (); v260) ()
    let v265 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v266 : string = "format!(\"{:#?}\", $0)"
    let v267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v266 
    let v268 : string = "fable_library_rust::String_::fromString($0)"
    let v269 : string = Fable.Core.RustInterop.emitRustExpr v267 v268 
    let _v265 = v269 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v270 : string = "format!(\"{:#?}\", $0)"
    let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v270 
    let v272 : string = "fable_library_rust::String_::fromString($0)"
    let v273 : string = Fable.Core.RustInterop.emitRustExpr v271 v272 
    let _v265 = v273 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v274 : string = "format!(\"{:#?}\", $0)"
    let v275 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v274 
    let v276 : string = "fable_library_rust::String_::fromString($0)"
    let v277 : string = Fable.Core.RustInterop.emitRustExpr v275 v276 
    let _v265 = v277 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v278 : string = $"%A{v5}"
    let _v265 = v278 
    #endif
#if FABLE_COMPILER_PYTHON
    let v281 : string = $"%A{v5}"
    let _v265 = v281 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v284 : string = $"%A{v5}"
    let _v265 = v284 
    #endif
#else
    let v287 : string = $"%A{v5}"
    let _v265 = v287 
    #endif
    let v290 : string = _v265 
    let v295 : string = $"{v290}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v10, v295)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v303 : string = $"{v46}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v10, v303)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v311 : string = "stdin"
    let v312 : string = $"{v311}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v10, v312)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v320 : string = $"{v29}"
    let v323 : unit = ()
    let v324 : (unit -> unit) = closure7(v10, v320)
    let v325 : unit = (fun () -> v324 (); v323) ()
    let v328 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v329 : string = "format!(\"{:#?}\", $0)"
    let v330 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v329 
    let v331 : string = "fable_library_rust::String_::fromString($0)"
    let v332 : string = Fable.Core.RustInterop.emitRustExpr v330 v331 
    let _v328 = v332 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v333 : string = "format!(\"{:#?}\", $0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v333 
    let v335 : string = "fable_library_rust::String_::fromString($0)"
    let v336 : string = Fable.Core.RustInterop.emitRustExpr v334 v335 
    let _v328 = v336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v337 : string = "format!(\"{:#?}\", $0)"
    let v338 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v337 
    let v339 : string = "fable_library_rust::String_::fromString($0)"
    let v340 : string = Fable.Core.RustInterop.emitRustExpr v338 v339 
    let _v328 = v340 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v341 : string = $"%A{v6}"
    let _v328 = v341 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : string = $"%A{v6}"
    let _v328 = v344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v347 : string = $"%A{v6}"
    let _v328 = v347 
    #endif
#else
    let v350 : string = $"%A{v6}"
    let _v328 = v350 
    #endif
    let v353 : string = _v328 
    let v358 : string = $"{v353}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v10, v358)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v366 : string = $"{v46}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v10, v366)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v374 : string = "trace"
    let v375 : string = $"{v374}"
    let v378 : unit = ()
    let v379 : (unit -> unit) = closure7(v10, v375)
    let v380 : unit = (fun () -> v379 (); v378) ()
    let v383 : string = $"{v29}"
    let v386 : unit = ()
    let v387 : (unit -> unit) = closure7(v10, v383)
    let v388 : unit = (fun () -> v387 (); v386) ()
    let v393 : string =
        if v7 then
            let v391 : string = "true"
            v391
        else
            let v392 : string = "false"
            v392
    let v394 : string = $"{v393}"
    let v397 : unit = ()
    let v398 : (unit -> unit) = closure7(v10, v394)
    let v399 : unit = (fun () -> v398 (); v397) ()
    let v402 : string = $"{v46}"
    let v405 : unit = ()
    let v406 : (unit -> unit) = closure7(v10, v402)
    let v407 : unit = (fun () -> v406 (); v405) ()
    let v410 : string = "working_directory"
    let v411 : string = $"{v410}"
    let v414 : unit = ()
    let v415 : (unit -> unit) = closure7(v10, v411)
    let v416 : unit = (fun () -> v415 (); v414) ()
    let v419 : string = $"{v29}"
    let v422 : unit = ()
    let v423 : (unit -> unit) = closure7(v10, v419)
    let v424 : unit = (fun () -> v423 (); v422) ()
    let v427 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v428 : string = "format!(\"{:#?}\", $0)"
    let v429 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v428 
    let v430 : string = "fable_library_rust::String_::fromString($0)"
    let v431 : string = Fable.Core.RustInterop.emitRustExpr v429 v430 
    let _v427 = v431 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v432 : string = "format!(\"{:#?}\", $0)"
    let v433 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v432 
    let v434 : string = "fable_library_rust::String_::fromString($0)"
    let v435 : string = Fable.Core.RustInterop.emitRustExpr v433 v434 
    let _v427 = v435 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v436 : string = "format!(\"{:#?}\", $0)"
    let v437 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v436 
    let v438 : string = "fable_library_rust::String_::fromString($0)"
    let v439 : string = Fable.Core.RustInterop.emitRustExpr v437 v438 
    let _v427 = v439 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v440 : string = $"%A{v8}"
    let _v427 = v440 
    #endif
#if FABLE_COMPILER_PYTHON
    let v443 : string = $"%A{v8}"
    let _v427 = v443 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v446 : string = $"%A{v8}"
    let _v427 = v446 
    #endif
#else
    let v449 : string = $"%A{v8}"
    let _v427 = v449 
    #endif
    let v452 : string = _v427 
    let v457 : string = $"{v452}"
    let v460 : unit = ()
    let v461 : (unit -> unit) = closure7(v10, v457)
    let v462 : unit = (fun () -> v461 (); v460) ()
    let v465 : string = " }"
    let v466 : string = $"{v465}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v10, v466)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v474 : string = $"{v465}"
    let v477 : unit = ()
    let v478 : (unit -> unit) = closure7(v10, v474)
    let v479 : unit = (fun () -> v478 (); v477) ()
    let v482 : string = v10.l0
    v482
and method125 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method126(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v19 : string = "runtime.execute_with_options_async"
    let v20 : string = $"{v6} {v7} #{v18} %s{v19} / {v17}"
    method18(v20)
and closure52 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method125(v27, v28, v29, v30, v31, v32, v45, v46, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method19(v47)
and method127 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and closure54 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US31 =
    US31_0(v0)
and method128 () : ((struct (int32 * string * bool) -> Async<unit>) -> US31) =
    closure54()
and closure55 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method52()
        let v39 : bool = v0 = ""
        let v42 : string =
            if v39 then
                let v40 : string = ""
                v40
            else
                method109(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v42)
and closure53 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _v20 =
        async {
            let v21 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v22 : string = null |> unbox<string>
            let _v21 = v22 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = null |> unbox<string>
            let _v21 = v25 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : string = null |> unbox<string>
            let _v21 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : string = null |> unbox<string>
            let _v21 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v34 : string = null |> unbox<string>
            let _v21 = v34 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v37 : string = null |> unbox<string>
            let _v21 = v37 
            #endif
#else
            let v40 : string = v9.Data
            let _v21 = v40 
            #endif
            let v41 : string = _v21 
            let v46 : string = null |> unbox<string>
            let v49 : bool = v41 = v46
            let v50 : bool = v49 <> true
            if v50 then
                let v51 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v52 : US31 option = v3 |> Option.map v51 
                let v63 : US31 = US31_1
                let v64 : US31 = v52 |> Option.defaultValue v63 
                match v64 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v68) -> (* Some *)
                    let v69 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v70 : int32 = null |> unbox<int32>
                    let _v69 = v70 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v73 : int32 = null |> unbox<int32>
                    let _v69 = v73 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v76 : int32 = null |> unbox<int32>
                    let _v69 = v76 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v79 : int32 = null |> unbox<int32>
                    let _v69 = v79 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v82 : int32 = null |> unbox<int32>
                    let _v69 = v82 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v85 : int32 = null |> unbox<int32>
                    let _v69 = v85 
                    #endif
#else
                    let v88 : int32 = v7.Id
                    let _v69 = v88 
                    #endif
                    let v89 : int32 = _v69 
                    let v94 : Async<unit> = v68 struct (v89, v41, false)
                    do! v94 
                    ()
                let v95 : string = $"> {v41}"
                if v5 then
                    let v96 : unit = ()
                    let v97 : (unit -> unit) = closure55(v95)
                    let v98 : unit = (fun () -> v97 (); v96) ()
                    ()
                else
                    let v141 : unit = ()
                    let v142 : (unit -> unit) = closure10(v95)
                    let v143 : unit = (fun () -> v142 (); v141) ()
                    ()
                let v145 : string = ""
                let v146 : string = $"{v145}{v41}{v145}"
                let v147 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v147 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v147 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v147 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v147 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v147 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v147 = () 
                #endif
#else
                let v148 : (string -> unit) = v8.Push
                v148 v146
                let _v147 = () 
                #endif
                _v147 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v149 : Async<unit> = _v20 
    let _v10 = v149 
    #endif
#if FABLE_COMPILER_PYTHON
    let v150 : unit = ()
    let _v150 =
        async {
            let v151 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v152 : string = null |> unbox<string>
            let _v151 = v152 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v155 : string = null |> unbox<string>
            let _v151 = v155 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v158 : string = null |> unbox<string>
            let _v151 = v158 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v161 : string = null |> unbox<string>
            let _v151 = v161 
            #endif
#if FABLE_COMPILER_PYTHON
            let v164 : string = null |> unbox<string>
            let _v151 = v164 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v167 : string = null |> unbox<string>
            let _v151 = v167 
            #endif
#else
            let v170 : string = v9.Data
            let _v151 = v170 
            #endif
            let v171 : string = _v151 
            let v176 : string = null |> unbox<string>
            let v179 : bool = v171 = v176
            let v180 : bool = v179 <> true
            if v180 then
                let v181 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v182 : US31 option = v3 |> Option.map v181 
                let v193 : US31 = US31_1
                let v194 : US31 = v182 |> Option.defaultValue v193 
                match v194 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v198) -> (* Some *)
                    let v199 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v200 : int32 = null |> unbox<int32>
                    let _v199 = v200 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v203 : int32 = null |> unbox<int32>
                    let _v199 = v203 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v206 : int32 = null |> unbox<int32>
                    let _v199 = v206 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v209 : int32 = null |> unbox<int32>
                    let _v199 = v209 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v212 : int32 = null |> unbox<int32>
                    let _v199 = v212 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v215 : int32 = null |> unbox<int32>
                    let _v199 = v215 
                    #endif
#else
                    let v218 : int32 = v7.Id
                    let _v199 = v218 
                    #endif
                    let v219 : int32 = _v199 
                    let v224 : Async<unit> = v198 struct (v219, v171, false)
                    do! v224 
                    ()
                let v225 : string = $"> {v171}"
                if v5 then
                    let v226 : unit = ()
                    let v227 : (unit -> unit) = closure55(v225)
                    let v228 : unit = (fun () -> v227 (); v226) ()
                    ()
                else
                    let v271 : unit = ()
                    let v272 : (unit -> unit) = closure10(v225)
                    let v273 : unit = (fun () -> v272 (); v271) ()
                    ()
                let v275 : string = ""
                let v276 : string = $"{v275}{v171}{v275}"
                let v277 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v277 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v277 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v277 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v277 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v277 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v277 = () 
                #endif
#else
                let v278 : (string -> unit) = v8.Push
                v278 v276
                let _v277 = () 
                #endif
                _v277 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v279 : Async<unit> = _v150 
    let _v10 = v279 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v280 : unit = ()
    let _v280 =
        async {
            let v281 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v282 : string = null |> unbox<string>
            let _v281 = v282 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v285 : string = null |> unbox<string>
            let _v281 = v285 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v288 : string = null |> unbox<string>
            let _v281 = v288 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v291 : string = null |> unbox<string>
            let _v281 = v291 
            #endif
#if FABLE_COMPILER_PYTHON
            let v294 : string = null |> unbox<string>
            let _v281 = v294 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v297 : string = null |> unbox<string>
            let _v281 = v297 
            #endif
#else
            let v300 : string = v9.Data
            let _v281 = v300 
            #endif
            let v301 : string = _v281 
            let v306 : string = null |> unbox<string>
            let v309 : bool = v301 = v306
            let v310 : bool = v309 <> true
            if v310 then
                let v311 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v312 : US31 option = v3 |> Option.map v311 
                let v323 : US31 = US31_1
                let v324 : US31 = v312 |> Option.defaultValue v323 
                match v324 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v328) -> (* Some *)
                    let v329 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v330 : int32 = null |> unbox<int32>
                    let _v329 = v330 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v333 : int32 = null |> unbox<int32>
                    let _v329 = v333 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v336 : int32 = null |> unbox<int32>
                    let _v329 = v336 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v339 : int32 = null |> unbox<int32>
                    let _v329 = v339 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v342 : int32 = null |> unbox<int32>
                    let _v329 = v342 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v345 : int32 = null |> unbox<int32>
                    let _v329 = v345 
                    #endif
#else
                    let v348 : int32 = v7.Id
                    let _v329 = v348 
                    #endif
                    let v349 : int32 = _v329 
                    let v354 : Async<unit> = v328 struct (v349, v301, false)
                    do! v354 
                    ()
                let v355 : string = $"> {v301}"
                if v5 then
                    let v356 : unit = ()
                    let v357 : (unit -> unit) = closure55(v355)
                    let v358 : unit = (fun () -> v357 (); v356) ()
                    ()
                else
                    let v401 : unit = ()
                    let v402 : (unit -> unit) = closure10(v355)
                    let v403 : unit = (fun () -> v402 (); v401) ()
                    ()
                let v405 : string = ""
                let v406 : string = $"{v405}{v301}{v405}"
                let v407 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v407 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v407 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v407 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v407 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v407 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v407 = () 
                #endif
#else
                let v408 : (string -> unit) = v8.Push
                v408 v406
                let _v407 = () 
                #endif
                _v407 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v409 : Async<unit> = _v280 
    let _v10 = v409 
    #endif
#else
    let v410 : unit = ()
    let _v410 =
        async {
            let v411 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v412 : string = null |> unbox<string>
            let _v411 = v412 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v415 : string = null |> unbox<string>
            let _v411 = v415 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v418 : string = null |> unbox<string>
            let _v411 = v418 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v421 : string = null |> unbox<string>
            let _v411 = v421 
            #endif
#if FABLE_COMPILER_PYTHON
            let v424 : string = null |> unbox<string>
            let _v411 = v424 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v427 : string = null |> unbox<string>
            let _v411 = v427 
            #endif
#else
            let v430 : string = v9.Data
            let _v411 = v430 
            #endif
            let v431 : string = _v411 
            let v436 : string = null |> unbox<string>
            let v439 : bool = v431 = v436
            let v440 : bool = v439 <> true
            if v440 then
                let v441 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v442 : US31 option = v3 |> Option.map v441 
                let v453 : US31 = US31_1
                let v454 : US31 = v442 |> Option.defaultValue v453 
                match v454 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v458) -> (* Some *)
                    let v459 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v460 : int32 = null |> unbox<int32>
                    let _v459 = v460 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v463 : int32 = null |> unbox<int32>
                    let _v459 = v463 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v466 : int32 = null |> unbox<int32>
                    let _v459 = v466 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v469 : int32 = null |> unbox<int32>
                    let _v459 = v469 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v472 : int32 = null |> unbox<int32>
                    let _v459 = v472 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v475 : int32 = null |> unbox<int32>
                    let _v459 = v475 
                    #endif
#else
                    let v478 : int32 = v7.Id
                    let _v459 = v478 
                    #endif
                    let v479 : int32 = _v459 
                    let v484 : Async<unit> = v458 struct (v479, v431, false)
                    do! v484 
                    ()
                let v485 : string = $"> {v431}"
                if v5 then
                    let v486 : unit = ()
                    let v487 : (unit -> unit) = closure55(v485)
                    let v488 : unit = (fun () -> v487 (); v486) ()
                    ()
                else
                    let v531 : unit = ()
                    let v532 : (unit -> unit) = closure10(v485)
                    let v533 : unit = (fun () -> v532 (); v531) ()
                    ()
                let v535 : string = ""
                let v536 : string = $"{v535}{v431}{v535}"
                let v537 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v537 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v537 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v537 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v537 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v537 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v537 = () 
                #endif
#else
                let v538 : (string -> unit) = v8.Push
                v538 v536
                let _v537 = () 
                #endif
                _v537 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v539 : Async<unit> = _v410 
    let _v10 = v539 
    #endif
    let v540 : Async<unit> = _v10 
    let v545 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v545 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v545 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v545 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v546 : (Async<unit> -> unit) = Async.StartImmediate
    v546 v540
    let _v545 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let v547 : (Async<unit> -> unit) = Async.StartImmediate
    v547 v540
    let _v545 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v548 : (Async<unit> -> unit) = Async.StartImmediate
    v548 v540
    let _v545 = () 
    #endif
#else
    let v549 : (Async<unit> -> unit) = Async.StartImmediate
    v549 v540
    let _v545 = () 
    #endif
    _v545 
    ()
and closure56 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _v20 =
        async {
            let v21 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v22 : string = null |> unbox<string>
            let _v21 = v22 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v25 : string = null |> unbox<string>
            let _v21 = v25 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : string = null |> unbox<string>
            let _v21 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : string = null |> unbox<string>
            let _v21 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v34 : string = null |> unbox<string>
            let _v21 = v34 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v37 : string = null |> unbox<string>
            let _v21 = v37 
            #endif
#else
            let v40 : string = v9.Data
            let _v21 = v40 
            #endif
            let v41 : string = _v21 
            let v46 : string = null |> unbox<string>
            let v49 : bool = v41 = v46
            let v50 : bool = v49 <> true
            if v50 then
                let v51 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v52 : US31 option = v3 |> Option.map v51 
                let v63 : US31 = US31_1
                let v64 : US31 = v52 |> Option.defaultValue v63 
                match v64 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v68) -> (* Some *)
                    let v69 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v70 : int32 = null |> unbox<int32>
                    let _v69 = v70 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v73 : int32 = null |> unbox<int32>
                    let _v69 = v73 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v76 : int32 = null |> unbox<int32>
                    let _v69 = v76 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v79 : int32 = null |> unbox<int32>
                    let _v69 = v79 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v82 : int32 = null |> unbox<int32>
                    let _v69 = v82 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v85 : int32 = null |> unbox<int32>
                    let _v69 = v85 
                    #endif
#else
                    let v88 : int32 = v7.Id
                    let _v69 = v88 
                    #endif
                    let v89 : int32 = _v69 
                    let v94 : Async<unit> = v68 struct (v89, v41, true)
                    do! v94 
                    ()
                let v95 : string = $"! {v41}"
                if v5 then
                    let v96 : unit = ()
                    let v97 : (unit -> unit) = closure55(v95)
                    let v98 : unit = (fun () -> v97 (); v96) ()
                    ()
                else
                    let v141 : unit = ()
                    let v142 : (unit -> unit) = closure10(v95)
                    let v143 : unit = (fun () -> v142 (); v141) ()
                    ()
                let v145 : string = "\u001b[7;4m"
                let v146 : string = "\u001b[0m"
                let v147 : string = $"{v145}{v41}{v146}"
                let v148 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v148 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v148 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v148 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v148 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v148 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v148 = () 
                #endif
#else
                let v149 : (string -> unit) = v8.Push
                v149 v147
                let _v148 = () 
                #endif
                _v148 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v150 : Async<unit> = _v20 
    let _v10 = v150 
    #endif
#if FABLE_COMPILER_PYTHON
    let v151 : unit = ()
    let _v151 =
        async {
            let v152 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v153 : string = null |> unbox<string>
            let _v152 = v153 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v156 : string = null |> unbox<string>
            let _v152 = v156 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v159 : string = null |> unbox<string>
            let _v152 = v159 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v162 : string = null |> unbox<string>
            let _v152 = v162 
            #endif
#if FABLE_COMPILER_PYTHON
            let v165 : string = null |> unbox<string>
            let _v152 = v165 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v168 : string = null |> unbox<string>
            let _v152 = v168 
            #endif
#else
            let v171 : string = v9.Data
            let _v152 = v171 
            #endif
            let v172 : string = _v152 
            let v177 : string = null |> unbox<string>
            let v180 : bool = v172 = v177
            let v181 : bool = v180 <> true
            if v181 then
                let v182 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v183 : US31 option = v3 |> Option.map v182 
                let v194 : US31 = US31_1
                let v195 : US31 = v183 |> Option.defaultValue v194 
                match v195 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v199) -> (* Some *)
                    let v200 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v201 : int32 = null |> unbox<int32>
                    let _v200 = v201 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v204 : int32 = null |> unbox<int32>
                    let _v200 = v204 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v207 : int32 = null |> unbox<int32>
                    let _v200 = v207 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v210 : int32 = null |> unbox<int32>
                    let _v200 = v210 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v213 : int32 = null |> unbox<int32>
                    let _v200 = v213 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v216 : int32 = null |> unbox<int32>
                    let _v200 = v216 
                    #endif
#else
                    let v219 : int32 = v7.Id
                    let _v200 = v219 
                    #endif
                    let v220 : int32 = _v200 
                    let v225 : Async<unit> = v199 struct (v220, v172, true)
                    do! v225 
                    ()
                let v226 : string = $"! {v172}"
                if v5 then
                    let v227 : unit = ()
                    let v228 : (unit -> unit) = closure55(v226)
                    let v229 : unit = (fun () -> v228 (); v227) ()
                    ()
                else
                    let v272 : unit = ()
                    let v273 : (unit -> unit) = closure10(v226)
                    let v274 : unit = (fun () -> v273 (); v272) ()
                    ()
                let v276 : string = "\u001b[7;4m"
                let v277 : string = "\u001b[0m"
                let v278 : string = $"{v276}{v172}{v277}"
                let v279 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v279 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v279 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v279 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v279 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v279 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v279 = () 
                #endif
#else
                let v280 : (string -> unit) = v8.Push
                v280 v278
                let _v279 = () 
                #endif
                _v279 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v281 : Async<unit> = _v151 
    let _v10 = v281 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v282 : unit = ()
    let _v282 =
        async {
            let v283 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v284 : string = null |> unbox<string>
            let _v283 = v284 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v287 : string = null |> unbox<string>
            let _v283 = v287 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v290 : string = null |> unbox<string>
            let _v283 = v290 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v293 : string = null |> unbox<string>
            let _v283 = v293 
            #endif
#if FABLE_COMPILER_PYTHON
            let v296 : string = null |> unbox<string>
            let _v283 = v296 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v299 : string = null |> unbox<string>
            let _v283 = v299 
            #endif
#else
            let v302 : string = v9.Data
            let _v283 = v302 
            #endif
            let v303 : string = _v283 
            let v308 : string = null |> unbox<string>
            let v311 : bool = v303 = v308
            let v312 : bool = v311 <> true
            if v312 then
                let v313 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v314 : US31 option = v3 |> Option.map v313 
                let v325 : US31 = US31_1
                let v326 : US31 = v314 |> Option.defaultValue v325 
                match v326 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v330) -> (* Some *)
                    let v331 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v332 : int32 = null |> unbox<int32>
                    let _v331 = v332 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v335 : int32 = null |> unbox<int32>
                    let _v331 = v335 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v338 : int32 = null |> unbox<int32>
                    let _v331 = v338 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v341 : int32 = null |> unbox<int32>
                    let _v331 = v341 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v344 : int32 = null |> unbox<int32>
                    let _v331 = v344 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v347 : int32 = null |> unbox<int32>
                    let _v331 = v347 
                    #endif
#else
                    let v350 : int32 = v7.Id
                    let _v331 = v350 
                    #endif
                    let v351 : int32 = _v331 
                    let v356 : Async<unit> = v330 struct (v351, v303, true)
                    do! v356 
                    ()
                let v357 : string = $"! {v303}"
                if v5 then
                    let v358 : unit = ()
                    let v359 : (unit -> unit) = closure55(v357)
                    let v360 : unit = (fun () -> v359 (); v358) ()
                    ()
                else
                    let v403 : unit = ()
                    let v404 : (unit -> unit) = closure10(v357)
                    let v405 : unit = (fun () -> v404 (); v403) ()
                    ()
                let v407 : string = "\u001b[7;4m"
                let v408 : string = "\u001b[0m"
                let v409 : string = $"{v407}{v303}{v408}"
                let v410 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v410 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v410 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v410 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v410 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v410 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v410 = () 
                #endif
#else
                let v411 : (string -> unit) = v8.Push
                v411 v409
                let _v410 = () 
                #endif
                _v410 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v412 : Async<unit> = _v282 
    let _v10 = v412 
    #endif
#else
    let v413 : unit = ()
    let _v413 =
        async {
            let v414 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v415 : string = null |> unbox<string>
            let _v414 = v415 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v418 : string = null |> unbox<string>
            let _v414 = v418 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v421 : string = null |> unbox<string>
            let _v414 = v421 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v424 : string = null |> unbox<string>
            let _v414 = v424 
            #endif
#if FABLE_COMPILER_PYTHON
            let v427 : string = null |> unbox<string>
            let _v414 = v427 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v430 : string = null |> unbox<string>
            let _v414 = v430 
            #endif
#else
            let v433 : string = v9.Data
            let _v414 = v433 
            #endif
            let v434 : string = _v414 
            let v439 : string = null |> unbox<string>
            let v442 : bool = v434 = v439
            let v443 : bool = v442 <> true
            if v443 then
                let v444 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v445 : US31 option = v3 |> Option.map v444 
                let v456 : US31 = US31_1
                let v457 : US31 = v445 |> Option.defaultValue v456 
                match v457 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v461) -> (* Some *)
                    let v462 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v463 : int32 = null |> unbox<int32>
                    let _v462 = v463 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v466 : int32 = null |> unbox<int32>
                    let _v462 = v466 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v469 : int32 = null |> unbox<int32>
                    let _v462 = v469 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v472 : int32 = null |> unbox<int32>
                    let _v462 = v472 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v475 : int32 = null |> unbox<int32>
                    let _v462 = v475 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v478 : int32 = null |> unbox<int32>
                    let _v462 = v478 
                    #endif
#else
                    let v481 : int32 = v7.Id
                    let _v462 = v481 
                    #endif
                    let v482 : int32 = _v462 
                    let v487 : Async<unit> = v461 struct (v482, v434, true)
                    do! v487 
                    ()
                let v488 : string = $"! {v434}"
                if v5 then
                    let v489 : unit = ()
                    let v490 : (unit -> unit) = closure55(v488)
                    let v491 : unit = (fun () -> v490 (); v489) ()
                    ()
                else
                    let v534 : unit = ()
                    let v535 : (unit -> unit) = closure10(v488)
                    let v536 : unit = (fun () -> v535 (); v534) ()
                    ()
                let v538 : string = "\u001b[7;4m"
                let v539 : string = "\u001b[0m"
                let v540 : string = $"{v538}{v434}{v539}"
                let v541 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v541 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v541 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v541 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v541 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v541 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v541 = () 
                #endif
#else
                let v542 : (string -> unit) = v8.Push
                v542 v540
                let _v541 = () 
                #endif
                _v541 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v543 : Async<unit> = _v413 
    let _v10 = v543 
    #endif
    let v544 : Async<unit> = _v10 
    let v549 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v549 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v549 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v549 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v550 : (Async<unit> -> unit) = Async.StartImmediate
    v550 v544
    let _v549 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let v551 : (Async<unit> -> unit) = Async.StartImmediate
    v551 v544
    let _v549 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v552 : (Async<unit> -> unit) = Async.StartImmediate
    v552 v544
    let _v549 = () 
    #endif
#else
    let v553 : (Async<unit> -> unit) = Async.StartImmediate
    v553 v544
    let _v549 = () 
    #endif
    _v549 
    ()
and closure57 () (v0 : System.Threading.CancellationToken) : US32 =
    US32_0(v0)
and method129 () : (System.Threading.CancellationToken -> US32) =
    closure57()
and closure58 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : bool = null |> unbox<bool>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : bool = null |> unbox<bool>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : bool = null |> unbox<bool>
    let _v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : bool = null |> unbox<bool>
    let _v1 = v17 
    #endif
#else
    let v20 : bool = v0.HasExited
    let _v1 = v20 
    #endif
    let v21 : bool = _v1 
    let v26 : bool = v21 = false
    if v26 then
        let v27 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let _v27 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v27 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v27 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v27 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v27 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v27 = () 
        #endif
#else
        let v28 : (unit -> unit) = v0.Kill
        v28 ()
        let _v27 = () 
        #endif
        _v27 
        ()
and method131 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "ex"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "format!(\"{:#?}\", $0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v31 
    let v33 : string = "fable_library_rust::String_::fromString($0)"
    let v34 : string = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "format!(\"{:#?}\", $0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v35 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let _v30 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _v30 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : string = $"%A{v0}"
    let _v30 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : string = $"%A{v0}"
    let _v30 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v30 = v49 
    #endif
#else
    let v52 : string = $"%A{v0}"
    let _v30 = v52 
    #endif
    let v55 : string = _v30 
    let v60 : string = $"{v55}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v2, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = " }"
    let v69 : string = $"{v68}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v2, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = v2.l0
    v77
and method130 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method131(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure59 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method36()
        let v39 : string = method130(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method133 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "output_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method132 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method133(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options_async"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure60 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v1.Length
        let v41 : string = method132(v20, v21, v22, v23, v24, v25, v38, v39, v0, v40)
        method19(v41)
and method124 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v23 
    #endif
#else
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v26 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : unit = ()
    let _v36 =
        async {
            let v37 : US14 = method70(v0)
            let struct (v48 : string, v49 : US5) =
                match v37 with
                | US14_1(v40) -> (* Error *)
                    let v41 : string = $"resultm.get / Result value was Error: {v40}"
                    failwith<struct (string * US5)> v41
                | US14_0(v38, v39) -> (* Ok *)
                    struct (v38, v39)
            let v50 : (string -> US5) = method6()
            let v51 : US5 option = v6 |> Option.map v50 
            let v62 : US5 = US5_1
            let v63 : US5 = v51 |> Option.defaultValue v62 
            let v70 : string =
                match v63 with
                | US5_1 -> (* None *)
                    let v68 : string = ""
                    v68
                | US5_0(v67) -> (* Some *)
                    v67
            let v71 : unit = ()
            let v72 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v49, v48)
            let v73 : unit = (fun () -> v72 (); v71) ()
            let v113 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v117 : string =
                match v49 with
                | US5_1 -> (* None *)
                    let v115 : string = ""
                    v115
                | US5_0(v114) -> (* Some *)
                    v114
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v117,
              StandardOutputEncoding = v113,
              WorkingDirectory = v70,
              FileName = v48,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v118 : System.Diagnostics.ProcessStartInfo = start_info
            let v119 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v120 : int32 = v119.Length
            let v121 : Mut5 = {l0 = 0} : Mut5
            while method72(v120, v121) do
                let v123 : int32 = v121.l0
                let struct (v124 : string, v125 : string) = v119.[int v123]
                v118.EnvironmentVariables.[v124] <- v125 
                let v126 : int32 = v123 + 1
                v121.l0 <- v126
                ()
            let v127 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v118)
            use v127 = v127 
            let v128 : System.Diagnostics.Process = v127 
            let v129 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v130 : System.Collections.Concurrent.ConcurrentStack<string> = v129 ()
            let v131 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v128, v130)
            v128.OutputDataReceived.Add v131 
            let v132 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v128, v130)
            v128.ErrorDataReceived.Add v132 
            let v133 : (unit -> bool) = v128.Start
            let v134 : bool = v133 ()
            let v135 : bool = v134 = false
            if v135 then
                let v136 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v136
            let v137 : (unit -> unit) = v128.BeginErrorReadLine
            v137 ()
            let v138 : (unit -> unit) = v128.BeginOutputReadLine
            v138 ()
            let v139 : (System.Threading.CancellationToken -> US32) = method129()
            let v140 : US32 option = v1 |> Option.map v139 
            let v151 : US32 = US32_1
            let v152 : US32 = v140 |> Option.defaultValue v151 
            let v159 : System.Threading.CancellationToken =
                match v152 with
                | US32_1 -> (* None *)
                    let v157 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v157
                | US32_0(v156) -> (* Some *)
                    v156
            let v160 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v161 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v160 = v161 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v164 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v160 = v164 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v167 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v160 = v167 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v170 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v160 = v170 
            #endif
#if FABLE_COMPILER_PYTHON
            let v173 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v160 = v173 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v176 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v160 = v176 
            #endif
#else
            let v179 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v180 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v179 = v180 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v183 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v179 = v183 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v186 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v179 = v186 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v189 : unit = ()
            let _v189 =
                async {
                    let v190 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v190 = v190 
                    let v191 : System.Threading.CancellationToken = v190 
                    let v192 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v193 : (System.Threading.CancellationToken []) = [|v191; v192; v159|]
                    let v194 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v195 : System.Threading.CancellationTokenSource = v194 v193
                    let v196 : System.Threading.CancellationToken = v195.Token
                    return v196 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v197 : Async<System.Threading.CancellationToken> = _v189 
            let _v179 = v197 
            #endif
#if FABLE_COMPILER_PYTHON
            let v198 : unit = ()
            let _v198 =
                async {
                    let v199 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v199 = v199 
                    let v200 : System.Threading.CancellationToken = v199 
                    let v201 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v202 : (System.Threading.CancellationToken []) = [|v200; v201; v159|]
                    let v203 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v204 : System.Threading.CancellationTokenSource = v203 v202
                    let v205 : System.Threading.CancellationToken = v204.Token
                    return v205 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v206 : Async<System.Threading.CancellationToken> = _v198 
            let _v179 = v206 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v207 : unit = ()
            let _v207 =
                async {
                    let v208 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v208 = v208 
                    let v209 : System.Threading.CancellationToken = v208 
                    let v210 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v211 : (System.Threading.CancellationToken []) = [|v209; v210; v159|]
                    let v212 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v213 : System.Threading.CancellationTokenSource = v212 v211
                    let v214 : System.Threading.CancellationToken = v213.Token
                    return v214 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v215 : Async<System.Threading.CancellationToken> = _v207 
            let _v179 = v215 
            #endif
#else
            let v216 : unit = ()
            let _v216 =
                async {
                    let v217 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v217 = v217 
                    let v218 : System.Threading.CancellationToken = v217 
                    let v219 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v220 : (System.Threading.CancellationToken []) = [|v218; v219; v159|]
                    let v221 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v222 : System.Threading.CancellationTokenSource = v221 v220
                    let v223 : System.Threading.CancellationToken = v222.Token
                    return v223 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v224 : Async<System.Threading.CancellationToken> = _v216 
            let _v179 = v224 
            #endif
            let v225 : Async<System.Threading.CancellationToken> = _v179 
            let _v160 = v225 
            #endif
            let v230 : Async<System.Threading.CancellationToken> = _v160 
            let! v230 = v230 
            let v235 : System.Threading.CancellationToken = v230 
            let v236 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v235.Register
            let v237 : (unit -> unit) = closure58(v128)
            let v238 : System.Threading.CancellationTokenRegistration = v236 v237
            use v238 = v238 
            let v239 : System.Threading.CancellationTokenRegistration = v238 
            let v240 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v241 : Async<int32> = null |> unbox<Async<int32>>
            let _v240 = v241 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v244 : Async<int32> = null |> unbox<Async<int32>>
            let _v240 = v244 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v247 : Async<int32> = null |> unbox<Async<int32>>
            let _v240 = v247 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v250 : unit = ()
            let _v250 =
                async {
                    try
                    let v251 : System.Threading.Tasks.Task = v128.WaitForExitAsync v235 
                    let v252 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v253 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v254 : Async<unit> = v253 v251
                    let _v252 = v254 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v255 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v256 : Async<unit> = v255 v251
                    let _v252 = v256 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v257 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v258 : Async<unit> = v257 v251
                    let _v252 = v258 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v259 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v260 : Async<unit> = v259 v251
                    let _v252 = v260 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v261 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v262 : Async<unit> = v261 v251
                    let _v252 = v262 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v263 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v264 : Async<unit> = v263 v251
                    let _v252 = v264 
                    #endif
#else
                    let v265 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v266 : Async<unit> = v265 v251
                    let _v252 = v266 
                    #endif
                    let v267 : Async<unit> = _v252 
                    do! v267 
                    let v272 : int32 = v128.ExitCode
                    return v272 
                    with ex ->
                        let v273 : exn = ex
                        let v274 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v275 : string = $"%A{v273}"
                        let _v274 = v275 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v278 : string = $"%A{v273}"
                        let _v274 = v278 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v281 : string = $"%A{v273}"
                        let _v274 = v281 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v284 : string = $"%A{v273}"
                        let _v274 = v284 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v287 : string = $"%A{v273}"
                        let _v274 = v287 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v290 : string = $"%A{v273}"
                        let _v274 = v290 
                        #endif
#else
                        let v293 : string = $"{v273.GetType ()}: {v273.Message}"
                        let _v274 = v293 
                        #endif
                        let v294 : string = _v274 
                        let v299 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v299 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v299 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v299 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v299 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v299 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v299 = () 
                        #endif
#else
                        let v300 : (string -> unit) = v130.Push
                        v300 v294
                        let _v299 = () 
                        #endif
                        _v299 
                        let v301 : System.Threading.Tasks.TaskCanceledException = v273 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v304 : unit = ()
                        let v305 : (unit -> unit) = closure59(v301)
                        let v306 : unit = (fun () -> v305 (); v304) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v346 : Async<int32> = _v250 
            let _v240 = v346 
            #endif
#if FABLE_COMPILER_PYTHON
            let v347 : unit = ()
            let _v347 =
                async {
                    try
                    let v348 : System.Threading.Tasks.Task = v128.WaitForExitAsync v235 
                    let v349 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v350 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v351 : Async<unit> = v350 v348
                    let _v349 = v351 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v352 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v353 : Async<unit> = v352 v348
                    let _v349 = v353 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v354 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v355 : Async<unit> = v354 v348
                    let _v349 = v355 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v356 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v357 : Async<unit> = v356 v348
                    let _v349 = v357 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v358 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v359 : Async<unit> = v358 v348
                    let _v349 = v359 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v360 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v361 : Async<unit> = v360 v348
                    let _v349 = v361 
                    #endif
#else
                    let v362 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v363 : Async<unit> = v362 v348
                    let _v349 = v363 
                    #endif
                    let v364 : Async<unit> = _v349 
                    do! v364 
                    let v369 : int32 = v128.ExitCode
                    return v369 
                    with ex ->
                        let v370 : exn = ex
                        let v371 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v372 : string = $"%A{v370}"
                        let _v371 = v372 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v375 : string = $"%A{v370}"
                        let _v371 = v375 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v378 : string = $"%A{v370}"
                        let _v371 = v378 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v381 : string = $"%A{v370}"
                        let _v371 = v381 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v384 : string = $"%A{v370}"
                        let _v371 = v384 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v387 : string = $"%A{v370}"
                        let _v371 = v387 
                        #endif
#else
                        let v390 : string = $"{v370.GetType ()}: {v370.Message}"
                        let _v371 = v390 
                        #endif
                        let v391 : string = _v371 
                        let v396 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v396 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v396 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v396 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v396 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v396 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v396 = () 
                        #endif
#else
                        let v397 : (string -> unit) = v130.Push
                        v397 v391
                        let _v396 = () 
                        #endif
                        _v396 
                        let v398 : System.Threading.Tasks.TaskCanceledException = v370 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v401 : unit = ()
                        let v402 : (unit -> unit) = closure59(v398)
                        let v403 : unit = (fun () -> v402 (); v401) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v443 : Async<int32> = _v347 
            let _v240 = v443 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v444 : unit = ()
            let _v444 =
                async {
                    try
                    let v445 : System.Threading.Tasks.Task = v128.WaitForExitAsync v235 
                    let v446 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v447 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v448 : Async<unit> = v447 v445
                    let _v446 = v448 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v449 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v450 : Async<unit> = v449 v445
                    let _v446 = v450 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v451 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v452 : Async<unit> = v451 v445
                    let _v446 = v452 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v453 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v454 : Async<unit> = v453 v445
                    let _v446 = v454 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v455 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v456 : Async<unit> = v455 v445
                    let _v446 = v456 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v457 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v458 : Async<unit> = v457 v445
                    let _v446 = v458 
                    #endif
#else
                    let v459 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v460 : Async<unit> = v459 v445
                    let _v446 = v460 
                    #endif
                    let v461 : Async<unit> = _v446 
                    do! v461 
                    let v466 : int32 = v128.ExitCode
                    return v466 
                    with ex ->
                        let v467 : exn = ex
                        let v468 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v469 : string = $"%A{v467}"
                        let _v468 = v469 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v472 : string = $"%A{v467}"
                        let _v468 = v472 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v475 : string = $"%A{v467}"
                        let _v468 = v475 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v478 : string = $"%A{v467}"
                        let _v468 = v478 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v481 : string = $"%A{v467}"
                        let _v468 = v481 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v484 : string = $"%A{v467}"
                        let _v468 = v484 
                        #endif
#else
                        let v487 : string = $"{v467.GetType ()}: {v467.Message}"
                        let _v468 = v487 
                        #endif
                        let v488 : string = _v468 
                        let v493 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v493 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v493 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v493 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v493 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v493 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v493 = () 
                        #endif
#else
                        let v494 : (string -> unit) = v130.Push
                        v494 v488
                        let _v493 = () 
                        #endif
                        _v493 
                        let v495 : System.Threading.Tasks.TaskCanceledException = v467 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v498 : unit = ()
                        let v499 : (unit -> unit) = closure59(v495)
                        let v500 : unit = (fun () -> v499 (); v498) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v540 : Async<int32> = _v444 
            let _v240 = v540 
            #endif
#else
            let v541 : unit = ()
            let _v541 =
                async {
                    try
                    let v542 : System.Threading.Tasks.Task = v128.WaitForExitAsync v235 
                    let v543 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v544 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v545 : Async<unit> = v544 v542
                    let _v543 = v545 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v546 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v547 : Async<unit> = v546 v542
                    let _v543 = v547 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v548 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v549 : Async<unit> = v548 v542
                    let _v543 = v549 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v550 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v551 : Async<unit> = v550 v542
                    let _v543 = v551 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v552 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v553 : Async<unit> = v552 v542
                    let _v543 = v553 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v554 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v555 : Async<unit> = v554 v542
                    let _v543 = v555 
                    #endif
#else
                    let v556 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v557 : Async<unit> = v556 v542
                    let _v543 = v557 
                    #endif
                    let v558 : Async<unit> = _v543 
                    do! v558 
                    let v563 : int32 = v128.ExitCode
                    return v563 
                    with ex ->
                        let v564 : exn = ex
                        let v565 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v566 : string = $"%A{v564}"
                        let _v565 = v566 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v569 : string = $"%A{v564}"
                        let _v565 = v569 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v572 : string = $"%A{v564}"
                        let _v565 = v572 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v575 : string = $"%A{v564}"
                        let _v565 = v575 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v578 : string = $"%A{v564}"
                        let _v565 = v578 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v581 : string = $"%A{v564}"
                        let _v565 = v581 
                        #endif
#else
                        let v584 : string = $"{v564.GetType ()}: {v564.Message}"
                        let _v565 = v584 
                        #endif
                        let v585 : string = _v565 
                        let v590 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v590 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v590 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v590 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v590 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v590 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v590 = () 
                        #endif
#else
                        let v591 : (string -> unit) = v130.Push
                        v591 v585
                        let _v590 = () 
                        #endif
                        _v590 
                        let v592 : System.Threading.Tasks.TaskCanceledException = v564 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v595 : unit = ()
                        let v596 : (unit -> unit) = closure59(v592)
                        let v597 : unit = (fun () -> v596 (); v595) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v637 : Async<int32> = _v541 
            let _v240 = v637 
            #endif
            let v638 : Async<int32> = _v240 
            let! v638 = v638 
            let v643 : int32 = v638 
            let v644 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v645 : string seq = v644 v130
            let v648 : (string seq -> string seq) = Seq.rev
            let v649 : string seq = v648 v645
            let v652 : string = method40()
            let v653 : (string -> (string seq -> string)) = String.concat
            let v654 : (string seq -> string) = v653 v652
            let v655 : string = v654 v649
            let v659 : unit = ()
            let v660 : (unit -> unit) = closure60(v643, v655)
            let v661 : unit = (fun () -> v660 (); v659) ()
            return struct (v643, v655) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v702 : Async<struct (int32 * string)> = _v36 
    let _v26 = v702 
    #endif
#if FABLE_COMPILER_PYTHON
    let v703 : unit = ()
    let _v703 =
        async {
            let v704 : US14 = method70(v0)
            let struct (v715 : string, v716 : US5) =
                match v704 with
                | US14_1(v707) -> (* Error *)
                    let v708 : string = $"resultm.get / Result value was Error: {v707}"
                    failwith<struct (string * US5)> v708
                | US14_0(v705, v706) -> (* Ok *)
                    struct (v705, v706)
            let v717 : (string -> US5) = method6()
            let v718 : US5 option = v6 |> Option.map v717 
            let v729 : US5 = US5_1
            let v730 : US5 = v718 |> Option.defaultValue v729 
            let v737 : string =
                match v730 with
                | US5_1 -> (* None *)
                    let v735 : string = ""
                    v735
                | US5_0(v734) -> (* Some *)
                    v734
            let v738 : unit = ()
            let v739 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v716, v715)
            let v740 : unit = (fun () -> v739 (); v738) ()
            let v780 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v784 : string =
                match v716 with
                | US5_1 -> (* None *)
                    let v782 : string = ""
                    v782
                | US5_0(v781) -> (* Some *)
                    v781
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v784,
              StandardOutputEncoding = v780,
              WorkingDirectory = v737,
              FileName = v715,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v785 : System.Diagnostics.ProcessStartInfo = start_info
            let v786 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v787 : int32 = v786.Length
            let v788 : Mut5 = {l0 = 0} : Mut5
            while method72(v787, v788) do
                let v790 : int32 = v788.l0
                let struct (v791 : string, v792 : string) = v786.[int v790]
                v785.EnvironmentVariables.[v791] <- v792 
                let v793 : int32 = v790 + 1
                v788.l0 <- v793
                ()
            let v794 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v785)
            use v794 = v794 
            let v795 : System.Diagnostics.Process = v794 
            let v796 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v797 : System.Collections.Concurrent.ConcurrentStack<string> = v796 ()
            let v798 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v795, v797)
            v795.OutputDataReceived.Add v798 
            let v799 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v795, v797)
            v795.ErrorDataReceived.Add v799 
            let v800 : (unit -> bool) = v795.Start
            let v801 : bool = v800 ()
            let v802 : bool = v801 = false
            if v802 then
                let v803 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v803
            let v804 : (unit -> unit) = v795.BeginErrorReadLine
            v804 ()
            let v805 : (unit -> unit) = v795.BeginOutputReadLine
            v805 ()
            let v806 : (System.Threading.CancellationToken -> US32) = method129()
            let v807 : US32 option = v1 |> Option.map v806 
            let v818 : US32 = US32_1
            let v819 : US32 = v807 |> Option.defaultValue v818 
            let v826 : System.Threading.CancellationToken =
                match v819 with
                | US32_1 -> (* None *)
                    let v824 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v824
                | US32_0(v823) -> (* Some *)
                    v823
            let v827 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v828 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v827 = v828 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v831 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v827 = v831 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v834 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v827 = v834 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v837 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v827 = v837 
            #endif
#if FABLE_COMPILER_PYTHON
            let v840 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v827 = v840 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v843 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v827 = v843 
            #endif
#else
            let v846 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v847 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v846 = v847 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v850 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v846 = v850 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v853 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v846 = v853 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v856 : unit = ()
            let _v856 =
                async {
                    let v857 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v857 = v857 
                    let v858 : System.Threading.CancellationToken = v857 
                    let v859 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v860 : (System.Threading.CancellationToken []) = [|v858; v859; v826|]
                    let v861 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v862 : System.Threading.CancellationTokenSource = v861 v860
                    let v863 : System.Threading.CancellationToken = v862.Token
                    return v863 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v864 : Async<System.Threading.CancellationToken> = _v856 
            let _v846 = v864 
            #endif
#if FABLE_COMPILER_PYTHON
            let v865 : unit = ()
            let _v865 =
                async {
                    let v866 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v866 = v866 
                    let v867 : System.Threading.CancellationToken = v866 
                    let v868 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v869 : (System.Threading.CancellationToken []) = [|v867; v868; v826|]
                    let v870 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v871 : System.Threading.CancellationTokenSource = v870 v869
                    let v872 : System.Threading.CancellationToken = v871.Token
                    return v872 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v873 : Async<System.Threading.CancellationToken> = _v865 
            let _v846 = v873 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v874 : unit = ()
            let _v874 =
                async {
                    let v875 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v875 = v875 
                    let v876 : System.Threading.CancellationToken = v875 
                    let v877 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v878 : (System.Threading.CancellationToken []) = [|v876; v877; v826|]
                    let v879 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v880 : System.Threading.CancellationTokenSource = v879 v878
                    let v881 : System.Threading.CancellationToken = v880.Token
                    return v881 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v882 : Async<System.Threading.CancellationToken> = _v874 
            let _v846 = v882 
            #endif
#else
            let v883 : unit = ()
            let _v883 =
                async {
                    let v884 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v884 = v884 
                    let v885 : System.Threading.CancellationToken = v884 
                    let v886 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v887 : (System.Threading.CancellationToken []) = [|v885; v886; v826|]
                    let v888 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v889 : System.Threading.CancellationTokenSource = v888 v887
                    let v890 : System.Threading.CancellationToken = v889.Token
                    return v890 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v891 : Async<System.Threading.CancellationToken> = _v883 
            let _v846 = v891 
            #endif
            let v892 : Async<System.Threading.CancellationToken> = _v846 
            let _v827 = v892 
            #endif
            let v897 : Async<System.Threading.CancellationToken> = _v827 
            let! v897 = v897 
            let v902 : System.Threading.CancellationToken = v897 
            let v903 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v902.Register
            let v904 : (unit -> unit) = closure58(v795)
            let v905 : System.Threading.CancellationTokenRegistration = v903 v904
            use v905 = v905 
            let v906 : System.Threading.CancellationTokenRegistration = v905 
            let v907 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v908 : Async<int32> = null |> unbox<Async<int32>>
            let _v907 = v908 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v911 : Async<int32> = null |> unbox<Async<int32>>
            let _v907 = v911 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v914 : Async<int32> = null |> unbox<Async<int32>>
            let _v907 = v914 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v917 : unit = ()
            let _v917 =
                async {
                    try
                    let v918 : System.Threading.Tasks.Task = v795.WaitForExitAsync v902 
                    let v919 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v920 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v921 : Async<unit> = v920 v918
                    let _v919 = v921 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v922 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v923 : Async<unit> = v922 v918
                    let _v919 = v923 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v924 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v925 : Async<unit> = v924 v918
                    let _v919 = v925 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v926 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v927 : Async<unit> = v926 v918
                    let _v919 = v927 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v928 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v929 : Async<unit> = v928 v918
                    let _v919 = v929 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v930 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v931 : Async<unit> = v930 v918
                    let _v919 = v931 
                    #endif
#else
                    let v932 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v933 : Async<unit> = v932 v918
                    let _v919 = v933 
                    #endif
                    let v934 : Async<unit> = _v919 
                    do! v934 
                    let v939 : int32 = v795.ExitCode
                    return v939 
                    with ex ->
                        let v940 : exn = ex
                        let v941 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v942 : string = $"%A{v940}"
                        let _v941 = v942 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v945 : string = $"%A{v940}"
                        let _v941 = v945 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v948 : string = $"%A{v940}"
                        let _v941 = v948 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v951 : string = $"%A{v940}"
                        let _v941 = v951 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v954 : string = $"%A{v940}"
                        let _v941 = v954 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v957 : string = $"%A{v940}"
                        let _v941 = v957 
                        #endif
#else
                        let v960 : string = $"{v940.GetType ()}: {v940.Message}"
                        let _v941 = v960 
                        #endif
                        let v961 : string = _v941 
                        let v966 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v966 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v966 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v966 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v966 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v966 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v966 = () 
                        #endif
#else
                        let v967 : (string -> unit) = v797.Push
                        v967 v961
                        let _v966 = () 
                        #endif
                        _v966 
                        let v968 : System.Threading.Tasks.TaskCanceledException = v940 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v971 : unit = ()
                        let v972 : (unit -> unit) = closure59(v968)
                        let v973 : unit = (fun () -> v972 (); v971) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1013 : Async<int32> = _v917 
            let _v907 = v1013 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1014 : unit = ()
            let _v1014 =
                async {
                    try
                    let v1015 : System.Threading.Tasks.Task = v795.WaitForExitAsync v902 
                    let v1016 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1017 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1018 : Async<unit> = v1017 v1015
                    let _v1016 = v1018 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1019 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1020 : Async<unit> = v1019 v1015
                    let _v1016 = v1020 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1021 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1022 : Async<unit> = v1021 v1015
                    let _v1016 = v1022 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1023 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1024 : Async<unit> = v1023 v1015
                    let _v1016 = v1024 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1025 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1026 : Async<unit> = v1025 v1015
                    let _v1016 = v1026 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1027 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1028 : Async<unit> = v1027 v1015
                    let _v1016 = v1028 
                    #endif
#else
                    let v1029 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1030 : Async<unit> = v1029 v1015
                    let _v1016 = v1030 
                    #endif
                    let v1031 : Async<unit> = _v1016 
                    do! v1031 
                    let v1036 : int32 = v795.ExitCode
                    return v1036 
                    with ex ->
                        let v1037 : exn = ex
                        let v1038 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1039 : string = $"%A{v1037}"
                        let _v1038 = v1039 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1042 : string = $"%A{v1037}"
                        let _v1038 = v1042 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1045 : string = $"%A{v1037}"
                        let _v1038 = v1045 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1048 : string = $"%A{v1037}"
                        let _v1038 = v1048 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1051 : string = $"%A{v1037}"
                        let _v1038 = v1051 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1054 : string = $"%A{v1037}"
                        let _v1038 = v1054 
                        #endif
#else
                        let v1057 : string = $"{v1037.GetType ()}: {v1037.Message}"
                        let _v1038 = v1057 
                        #endif
                        let v1058 : string = _v1038 
                        let v1063 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1063 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1063 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1063 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1063 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1063 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1063 = () 
                        #endif
#else
                        let v1064 : (string -> unit) = v797.Push
                        v1064 v1058
                        let _v1063 = () 
                        #endif
                        _v1063 
                        let v1065 : System.Threading.Tasks.TaskCanceledException = v1037 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1068 : unit = ()
                        let v1069 : (unit -> unit) = closure59(v1065)
                        let v1070 : unit = (fun () -> v1069 (); v1068) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1110 : Async<int32> = _v1014 
            let _v907 = v1110 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1111 : unit = ()
            let _v1111 =
                async {
                    try
                    let v1112 : System.Threading.Tasks.Task = v795.WaitForExitAsync v902 
                    let v1113 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1114 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1115 : Async<unit> = v1114 v1112
                    let _v1113 = v1115 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1116 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1117 : Async<unit> = v1116 v1112
                    let _v1113 = v1117 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1118 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1119 : Async<unit> = v1118 v1112
                    let _v1113 = v1119 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1120 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1121 : Async<unit> = v1120 v1112
                    let _v1113 = v1121 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1122 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1123 : Async<unit> = v1122 v1112
                    let _v1113 = v1123 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1124 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1125 : Async<unit> = v1124 v1112
                    let _v1113 = v1125 
                    #endif
#else
                    let v1126 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1127 : Async<unit> = v1126 v1112
                    let _v1113 = v1127 
                    #endif
                    let v1128 : Async<unit> = _v1113 
                    do! v1128 
                    let v1133 : int32 = v795.ExitCode
                    return v1133 
                    with ex ->
                        let v1134 : exn = ex
                        let v1135 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1136 : string = $"%A{v1134}"
                        let _v1135 = v1136 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1139 : string = $"%A{v1134}"
                        let _v1135 = v1139 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1142 : string = $"%A{v1134}"
                        let _v1135 = v1142 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1145 : string = $"%A{v1134}"
                        let _v1135 = v1145 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1148 : string = $"%A{v1134}"
                        let _v1135 = v1148 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1151 : string = $"%A{v1134}"
                        let _v1135 = v1151 
                        #endif
#else
                        let v1154 : string = $"{v1134.GetType ()}: {v1134.Message}"
                        let _v1135 = v1154 
                        #endif
                        let v1155 : string = _v1135 
                        let v1160 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1160 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1160 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1160 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1160 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1160 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1160 = () 
                        #endif
#else
                        let v1161 : (string -> unit) = v797.Push
                        v1161 v1155
                        let _v1160 = () 
                        #endif
                        _v1160 
                        let v1162 : System.Threading.Tasks.TaskCanceledException = v1134 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1165 : unit = ()
                        let v1166 : (unit -> unit) = closure59(v1162)
                        let v1167 : unit = (fun () -> v1166 (); v1165) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1207 : Async<int32> = _v1111 
            let _v907 = v1207 
            #endif
#else
            let v1208 : unit = ()
            let _v1208 =
                async {
                    try
                    let v1209 : System.Threading.Tasks.Task = v795.WaitForExitAsync v902 
                    let v1210 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1211 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1212 : Async<unit> = v1211 v1209
                    let _v1210 = v1212 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1213 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1214 : Async<unit> = v1213 v1209
                    let _v1210 = v1214 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1215 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1216 : Async<unit> = v1215 v1209
                    let _v1210 = v1216 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1217 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1218 : Async<unit> = v1217 v1209
                    let _v1210 = v1218 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1219 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1220 : Async<unit> = v1219 v1209
                    let _v1210 = v1220 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1221 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1222 : Async<unit> = v1221 v1209
                    let _v1210 = v1222 
                    #endif
#else
                    let v1223 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1224 : Async<unit> = v1223 v1209
                    let _v1210 = v1224 
                    #endif
                    let v1225 : Async<unit> = _v1210 
                    do! v1225 
                    let v1230 : int32 = v795.ExitCode
                    return v1230 
                    with ex ->
                        let v1231 : exn = ex
                        let v1232 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1233 : string = $"%A{v1231}"
                        let _v1232 = v1233 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1236 : string = $"%A{v1231}"
                        let _v1232 = v1236 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1239 : string = $"%A{v1231}"
                        let _v1232 = v1239 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1242 : string = $"%A{v1231}"
                        let _v1232 = v1242 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1245 : string = $"%A{v1231}"
                        let _v1232 = v1245 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1248 : string = $"%A{v1231}"
                        let _v1232 = v1248 
                        #endif
#else
                        let v1251 : string = $"{v1231.GetType ()}: {v1231.Message}"
                        let _v1232 = v1251 
                        #endif
                        let v1252 : string = _v1232 
                        let v1257 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1257 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1257 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1257 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1257 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1257 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1257 = () 
                        #endif
#else
                        let v1258 : (string -> unit) = v797.Push
                        v1258 v1252
                        let _v1257 = () 
                        #endif
                        _v1257 
                        let v1259 : System.Threading.Tasks.TaskCanceledException = v1231 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1262 : unit = ()
                        let v1263 : (unit -> unit) = closure59(v1259)
                        let v1264 : unit = (fun () -> v1263 (); v1262) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1304 : Async<int32> = _v1208 
            let _v907 = v1304 
            #endif
            let v1305 : Async<int32> = _v907 
            let! v1305 = v1305 
            let v1310 : int32 = v1305 
            let v1311 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v1312 : string seq = v1311 v797
            let v1315 : (string seq -> string seq) = Seq.rev
            let v1316 : string seq = v1315 v1312
            let v1319 : string = method40()
            let v1320 : (string -> (string seq -> string)) = String.concat
            let v1321 : (string seq -> string) = v1320 v1319
            let v1322 : string = v1321 v1316
            let v1326 : unit = ()
            let v1327 : (unit -> unit) = closure60(v1310, v1322)
            let v1328 : unit = (fun () -> v1327 (); v1326) ()
            return struct (v1310, v1322) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v1369 : Async<struct (int32 * string)> = _v703 
    let _v26 = v1369 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1370 : unit = ()
    let _v1370 =
        async {
            let v1371 : US14 = method70(v0)
            let struct (v1382 : string, v1383 : US5) =
                match v1371 with
                | US14_1(v1374) -> (* Error *)
                    let v1375 : string = $"resultm.get / Result value was Error: {v1374}"
                    failwith<struct (string * US5)> v1375
                | US14_0(v1372, v1373) -> (* Ok *)
                    struct (v1372, v1373)
            let v1384 : (string -> US5) = method6()
            let v1385 : US5 option = v6 |> Option.map v1384 
            let v1396 : US5 = US5_1
            let v1397 : US5 = v1385 |> Option.defaultValue v1396 
            let v1404 : string =
                match v1397 with
                | US5_1 -> (* None *)
                    let v1402 : string = ""
                    v1402
                | US5_0(v1401) -> (* Some *)
                    v1401
            let v1405 : unit = ()
            let v1406 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v1383, v1382)
            let v1407 : unit = (fun () -> v1406 (); v1405) ()
            let v1447 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v1451 : string =
                match v1383 with
                | US5_1 -> (* None *)
                    let v1449 : string = ""
                    v1449
                | US5_0(v1448) -> (* Some *)
                    v1448
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v1451,
              StandardOutputEncoding = v1447,
              WorkingDirectory = v1404,
              FileName = v1382,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v1452 : System.Diagnostics.ProcessStartInfo = start_info
            let v1453 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v1454 : int32 = v1453.Length
            let v1455 : Mut5 = {l0 = 0} : Mut5
            while method72(v1454, v1455) do
                let v1457 : int32 = v1455.l0
                let struct (v1458 : string, v1459 : string) = v1453.[int v1457]
                v1452.EnvironmentVariables.[v1458] <- v1459 
                let v1460 : int32 = v1457 + 1
                v1455.l0 <- v1460
                ()
            let v1461 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v1452)
            use v1461 = v1461 
            let v1462 : System.Diagnostics.Process = v1461 
            let v1463 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v1464 : System.Collections.Concurrent.ConcurrentStack<string> = v1463 ()
            let v1465 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v1462, v1464)
            v1462.OutputDataReceived.Add v1465 
            let v1466 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v1462, v1464)
            v1462.ErrorDataReceived.Add v1466 
            let v1467 : (unit -> bool) = v1462.Start
            let v1468 : bool = v1467 ()
            let v1469 : bool = v1468 = false
            if v1469 then
                let v1470 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v1470
            let v1471 : (unit -> unit) = v1462.BeginErrorReadLine
            v1471 ()
            let v1472 : (unit -> unit) = v1462.BeginOutputReadLine
            v1472 ()
            let v1473 : (System.Threading.CancellationToken -> US32) = method129()
            let v1474 : US32 option = v1 |> Option.map v1473 
            let v1485 : US32 = US32_1
            let v1486 : US32 = v1474 |> Option.defaultValue v1485 
            let v1493 : System.Threading.CancellationToken =
                match v1486 with
                | US32_1 -> (* None *)
                    let v1491 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v1491
                | US32_0(v1490) -> (* Some *)
                    v1490
            let v1494 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1495 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1494 = v1495 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1498 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1494 = v1498 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1501 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1494 = v1501 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1504 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1494 = v1504 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1507 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1494 = v1507 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1510 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1494 = v1510 
            #endif
#else
            let v1513 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1514 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1513 = v1514 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1517 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1513 = v1517 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1520 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v1513 = v1520 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1523 : unit = ()
            let _v1523 =
                async {
                    let v1524 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v1524 = v1524 
                    let v1525 : System.Threading.CancellationToken = v1524 
                    let v1526 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v1527 : (System.Threading.CancellationToken []) = [|v1525; v1526; v1493|]
                    let v1528 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v1529 : System.Threading.CancellationTokenSource = v1528 v1527
                    let v1530 : System.Threading.CancellationToken = v1529.Token
                    return v1530 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1531 : Async<System.Threading.CancellationToken> = _v1523 
            let _v1513 = v1531 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1532 : unit = ()
            let _v1532 =
                async {
                    let v1533 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v1533 = v1533 
                    let v1534 : System.Threading.CancellationToken = v1533 
                    let v1535 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v1536 : (System.Threading.CancellationToken []) = [|v1534; v1535; v1493|]
                    let v1537 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v1538 : System.Threading.CancellationTokenSource = v1537 v1536
                    let v1539 : System.Threading.CancellationToken = v1538.Token
                    return v1539 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1540 : Async<System.Threading.CancellationToken> = _v1532 
            let _v1513 = v1540 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1541 : unit = ()
            let _v1541 =
                async {
                    let v1542 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v1542 = v1542 
                    let v1543 : System.Threading.CancellationToken = v1542 
                    let v1544 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v1545 : (System.Threading.CancellationToken []) = [|v1543; v1544; v1493|]
                    let v1546 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v1547 : System.Threading.CancellationTokenSource = v1546 v1545
                    let v1548 : System.Threading.CancellationToken = v1547.Token
                    return v1548 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1549 : Async<System.Threading.CancellationToken> = _v1541 
            let _v1513 = v1549 
            #endif
#else
            let v1550 : unit = ()
            let _v1550 =
                async {
                    let v1551 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v1551 = v1551 
                    let v1552 : System.Threading.CancellationToken = v1551 
                    let v1553 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v1554 : (System.Threading.CancellationToken []) = [|v1552; v1553; v1493|]
                    let v1555 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v1556 : System.Threading.CancellationTokenSource = v1555 v1554
                    let v1557 : System.Threading.CancellationToken = v1556.Token
                    return v1557 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1558 : Async<System.Threading.CancellationToken> = _v1550 
            let _v1513 = v1558 
            #endif
            let v1559 : Async<System.Threading.CancellationToken> = _v1513 
            let _v1494 = v1559 
            #endif
            let v1564 : Async<System.Threading.CancellationToken> = _v1494 
            let! v1564 = v1564 
            let v1569 : System.Threading.CancellationToken = v1564 
            let v1570 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v1569.Register
            let v1571 : (unit -> unit) = closure58(v1462)
            let v1572 : System.Threading.CancellationTokenRegistration = v1570 v1571
            use v1572 = v1572 
            let v1573 : System.Threading.CancellationTokenRegistration = v1572 
            let v1574 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1575 : Async<int32> = null |> unbox<Async<int32>>
            let _v1574 = v1575 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1578 : Async<int32> = null |> unbox<Async<int32>>
            let _v1574 = v1578 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1581 : Async<int32> = null |> unbox<Async<int32>>
            let _v1574 = v1581 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1584 : unit = ()
            let _v1584 =
                async {
                    try
                    let v1585 : System.Threading.Tasks.Task = v1462.WaitForExitAsync v1569 
                    let v1586 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1587 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1588 : Async<unit> = v1587 v1585
                    let _v1586 = v1588 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1589 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1590 : Async<unit> = v1589 v1585
                    let _v1586 = v1590 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1591 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1592 : Async<unit> = v1591 v1585
                    let _v1586 = v1592 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1593 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1594 : Async<unit> = v1593 v1585
                    let _v1586 = v1594 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1595 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1596 : Async<unit> = v1595 v1585
                    let _v1586 = v1596 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1597 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1598 : Async<unit> = v1597 v1585
                    let _v1586 = v1598 
                    #endif
#else
                    let v1599 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1600 : Async<unit> = v1599 v1585
                    let _v1586 = v1600 
                    #endif
                    let v1601 : Async<unit> = _v1586 
                    do! v1601 
                    let v1606 : int32 = v1462.ExitCode
                    return v1606 
                    with ex ->
                        let v1607 : exn = ex
                        let v1608 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1609 : string = $"%A{v1607}"
                        let _v1608 = v1609 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1612 : string = $"%A{v1607}"
                        let _v1608 = v1612 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1615 : string = $"%A{v1607}"
                        let _v1608 = v1615 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1618 : string = $"%A{v1607}"
                        let _v1608 = v1618 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1621 : string = $"%A{v1607}"
                        let _v1608 = v1621 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1624 : string = $"%A{v1607}"
                        let _v1608 = v1624 
                        #endif
#else
                        let v1627 : string = $"{v1607.GetType ()}: {v1607.Message}"
                        let _v1608 = v1627 
                        #endif
                        let v1628 : string = _v1608 
                        let v1633 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1633 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1633 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1633 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1633 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1633 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1633 = () 
                        #endif
#else
                        let v1634 : (string -> unit) = v1464.Push
                        v1634 v1628
                        let _v1633 = () 
                        #endif
                        _v1633 
                        let v1635 : System.Threading.Tasks.TaskCanceledException = v1607 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1638 : unit = ()
                        let v1639 : (unit -> unit) = closure59(v1635)
                        let v1640 : unit = (fun () -> v1639 (); v1638) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1680 : Async<int32> = _v1584 
            let _v1574 = v1680 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1681 : unit = ()
            let _v1681 =
                async {
                    try
                    let v1682 : System.Threading.Tasks.Task = v1462.WaitForExitAsync v1569 
                    let v1683 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1684 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1685 : Async<unit> = v1684 v1682
                    let _v1683 = v1685 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1686 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1687 : Async<unit> = v1686 v1682
                    let _v1683 = v1687 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1688 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1689 : Async<unit> = v1688 v1682
                    let _v1683 = v1689 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1690 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1691 : Async<unit> = v1690 v1682
                    let _v1683 = v1691 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1692 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1693 : Async<unit> = v1692 v1682
                    let _v1683 = v1693 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1694 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1695 : Async<unit> = v1694 v1682
                    let _v1683 = v1695 
                    #endif
#else
                    let v1696 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1697 : Async<unit> = v1696 v1682
                    let _v1683 = v1697 
                    #endif
                    let v1698 : Async<unit> = _v1683 
                    do! v1698 
                    let v1703 : int32 = v1462.ExitCode
                    return v1703 
                    with ex ->
                        let v1704 : exn = ex
                        let v1705 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1706 : string = $"%A{v1704}"
                        let _v1705 = v1706 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1709 : string = $"%A{v1704}"
                        let _v1705 = v1709 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1712 : string = $"%A{v1704}"
                        let _v1705 = v1712 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1715 : string = $"%A{v1704}"
                        let _v1705 = v1715 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1718 : string = $"%A{v1704}"
                        let _v1705 = v1718 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1721 : string = $"%A{v1704}"
                        let _v1705 = v1721 
                        #endif
#else
                        let v1724 : string = $"{v1704.GetType ()}: {v1704.Message}"
                        let _v1705 = v1724 
                        #endif
                        let v1725 : string = _v1705 
                        let v1730 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1730 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1730 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1730 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1730 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1730 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1730 = () 
                        #endif
#else
                        let v1731 : (string -> unit) = v1464.Push
                        v1731 v1725
                        let _v1730 = () 
                        #endif
                        _v1730 
                        let v1732 : System.Threading.Tasks.TaskCanceledException = v1704 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1735 : unit = ()
                        let v1736 : (unit -> unit) = closure59(v1732)
                        let v1737 : unit = (fun () -> v1736 (); v1735) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1777 : Async<int32> = _v1681 
            let _v1574 = v1777 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1778 : unit = ()
            let _v1778 =
                async {
                    try
                    let v1779 : System.Threading.Tasks.Task = v1462.WaitForExitAsync v1569 
                    let v1780 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1781 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1782 : Async<unit> = v1781 v1779
                    let _v1780 = v1782 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1783 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1784 : Async<unit> = v1783 v1779
                    let _v1780 = v1784 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1785 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1786 : Async<unit> = v1785 v1779
                    let _v1780 = v1786 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1787 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1788 : Async<unit> = v1787 v1779
                    let _v1780 = v1788 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1789 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1790 : Async<unit> = v1789 v1779
                    let _v1780 = v1790 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1791 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1792 : Async<unit> = v1791 v1779
                    let _v1780 = v1792 
                    #endif
#else
                    let v1793 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1794 : Async<unit> = v1793 v1779
                    let _v1780 = v1794 
                    #endif
                    let v1795 : Async<unit> = _v1780 
                    do! v1795 
                    let v1800 : int32 = v1462.ExitCode
                    return v1800 
                    with ex ->
                        let v1801 : exn = ex
                        let v1802 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1803 : string = $"%A{v1801}"
                        let _v1802 = v1803 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1806 : string = $"%A{v1801}"
                        let _v1802 = v1806 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1809 : string = $"%A{v1801}"
                        let _v1802 = v1809 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1812 : string = $"%A{v1801}"
                        let _v1802 = v1812 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1815 : string = $"%A{v1801}"
                        let _v1802 = v1815 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1818 : string = $"%A{v1801}"
                        let _v1802 = v1818 
                        #endif
#else
                        let v1821 : string = $"{v1801.GetType ()}: {v1801.Message}"
                        let _v1802 = v1821 
                        #endif
                        let v1822 : string = _v1802 
                        let v1827 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1827 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1827 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1827 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1827 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1827 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1827 = () 
                        #endif
#else
                        let v1828 : (string -> unit) = v1464.Push
                        v1828 v1822
                        let _v1827 = () 
                        #endif
                        _v1827 
                        let v1829 : System.Threading.Tasks.TaskCanceledException = v1801 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1832 : unit = ()
                        let v1833 : (unit -> unit) = closure59(v1829)
                        let v1834 : unit = (fun () -> v1833 (); v1832) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1874 : Async<int32> = _v1778 
            let _v1574 = v1874 
            #endif
#else
            let v1875 : unit = ()
            let _v1875 =
                async {
                    try
                    let v1876 : System.Threading.Tasks.Task = v1462.WaitForExitAsync v1569 
                    let v1877 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1878 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1879 : Async<unit> = v1878 v1876
                    let _v1877 = v1879 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1880 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1881 : Async<unit> = v1880 v1876
                    let _v1877 = v1881 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1882 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1883 : Async<unit> = v1882 v1876
                    let _v1877 = v1883 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1884 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1885 : Async<unit> = v1884 v1876
                    let _v1877 = v1885 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1886 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1887 : Async<unit> = v1886 v1876
                    let _v1877 = v1887 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1888 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1889 : Async<unit> = v1888 v1876
                    let _v1877 = v1889 
                    #endif
#else
                    let v1890 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1891 : Async<unit> = v1890 v1876
                    let _v1877 = v1891 
                    #endif
                    let v1892 : Async<unit> = _v1877 
                    do! v1892 
                    let v1897 : int32 = v1462.ExitCode
                    return v1897 
                    with ex ->
                        let v1898 : exn = ex
                        let v1899 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1900 : string = $"%A{v1898}"
                        let _v1899 = v1900 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1903 : string = $"%A{v1898}"
                        let _v1899 = v1903 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1906 : string = $"%A{v1898}"
                        let _v1899 = v1906 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1909 : string = $"%A{v1898}"
                        let _v1899 = v1909 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1912 : string = $"%A{v1898}"
                        let _v1899 = v1912 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1915 : string = $"%A{v1898}"
                        let _v1899 = v1915 
                        #endif
#else
                        let v1918 : string = $"{v1898.GetType ()}: {v1898.Message}"
                        let _v1899 = v1918 
                        #endif
                        let v1919 : string = _v1899 
                        let v1924 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1924 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1924 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1924 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1924 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1924 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1924 = () 
                        #endif
#else
                        let v1925 : (string -> unit) = v1464.Push
                        v1925 v1919
                        let _v1924 = () 
                        #endif
                        _v1924 
                        let v1926 : System.Threading.Tasks.TaskCanceledException = v1898 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1929 : unit = ()
                        let v1930 : (unit -> unit) = closure59(v1926)
                        let v1931 : unit = (fun () -> v1930 (); v1929) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1971 : Async<int32> = _v1875 
            let _v1574 = v1971 
            #endif
            let v1972 : Async<int32> = _v1574 
            let! v1972 = v1972 
            let v1977 : int32 = v1972 
            let v1978 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v1979 : string seq = v1978 v1464
            let v1982 : (string seq -> string seq) = Seq.rev
            let v1983 : string seq = v1982 v1979
            let v1986 : string = method40()
            let v1987 : (string -> (string seq -> string)) = String.concat
            let v1988 : (string seq -> string) = v1987 v1986
            let v1989 : string = v1988 v1983
            let v1993 : unit = ()
            let v1994 : (unit -> unit) = closure60(v1977, v1989)
            let v1995 : unit = (fun () -> v1994 (); v1993) ()
            return struct (v1977, v1989) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v2036 : Async<struct (int32 * string)> = _v1370 
    let _v26 = v2036 
    #endif
#else
    let v2037 : unit = ()
    let _v2037 =
        async {
            let v2038 : US14 = method70(v0)
            let struct (v2049 : string, v2050 : US5) =
                match v2038 with
                | US14_1(v2041) -> (* Error *)
                    let v2042 : string = $"resultm.get / Result value was Error: {v2041}"
                    failwith<struct (string * US5)> v2042
                | US14_0(v2039, v2040) -> (* Ok *)
                    struct (v2039, v2040)
            let v2051 : (string -> US5) = method6()
            let v2052 : US5 option = v6 |> Option.map v2051 
            let v2063 : US5 = US5_1
            let v2064 : US5 = v2052 |> Option.defaultValue v2063 
            let v2071 : string =
                match v2064 with
                | US5_1 -> (* None *)
                    let v2069 : string = ""
                    v2069
                | US5_0(v2068) -> (* Some *)
                    v2068
            let v2072 : unit = ()
            let v2073 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v2050, v2049)
            let v2074 : unit = (fun () -> v2073 (); v2072) ()
            let v2114 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v2118 : string =
                match v2050 with
                | US5_1 -> (* None *)
                    let v2116 : string = ""
                    v2116
                | US5_0(v2115) -> (* Some *)
                    v2115
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v2118,
              StandardOutputEncoding = v2114,
              WorkingDirectory = v2071,
              FileName = v2049,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v2119 : System.Diagnostics.ProcessStartInfo = start_info
            let v2120 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v2121 : int32 = v2120.Length
            let v2122 : Mut5 = {l0 = 0} : Mut5
            while method72(v2121, v2122) do
                let v2124 : int32 = v2122.l0
                let struct (v2125 : string, v2126 : string) = v2120.[int v2124]
                v2119.EnvironmentVariables.[v2125] <- v2126 
                let v2127 : int32 = v2124 + 1
                v2122.l0 <- v2127
                ()
            let v2128 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v2119)
            use v2128 = v2128 
            let v2129 : System.Diagnostics.Process = v2128 
            let v2130 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v2131 : System.Collections.Concurrent.ConcurrentStack<string> = v2130 ()
            let v2132 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v2129, v2131)
            v2129.OutputDataReceived.Add v2132 
            let v2133 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v2129, v2131)
            v2129.ErrorDataReceived.Add v2133 
            let v2134 : (unit -> bool) = v2129.Start
            let v2135 : bool = v2134 ()
            let v2136 : bool = v2135 = false
            if v2136 then
                let v2137 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v2137
            let v2138 : (unit -> unit) = v2129.BeginErrorReadLine
            v2138 ()
            let v2139 : (unit -> unit) = v2129.BeginOutputReadLine
            v2139 ()
            let v2140 : (System.Threading.CancellationToken -> US32) = method129()
            let v2141 : US32 option = v1 |> Option.map v2140 
            let v2152 : US32 = US32_1
            let v2153 : US32 = v2141 |> Option.defaultValue v2152 
            let v2160 : System.Threading.CancellationToken =
                match v2153 with
                | US32_1 -> (* None *)
                    let v2158 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v2158
                | US32_0(v2157) -> (* Some *)
                    v2157
            let v2161 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2162 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2161 = v2162 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2165 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2161 = v2165 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2168 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2161 = v2168 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2171 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2161 = v2171 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2174 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2161 = v2174 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2177 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2161 = v2177 
            #endif
#else
            let v2180 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2181 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2180 = v2181 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2184 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2180 = v2184 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2187 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v2180 = v2187 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2190 : unit = ()
            let _v2190 =
                async {
                    let v2191 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v2191 = v2191 
                    let v2192 : System.Threading.CancellationToken = v2191 
                    let v2193 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v2194 : (System.Threading.CancellationToken []) = [|v2192; v2193; v2160|]
                    let v2195 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v2196 : System.Threading.CancellationTokenSource = v2195 v2194
                    let v2197 : System.Threading.CancellationToken = v2196.Token
                    return v2197 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2198 : Async<System.Threading.CancellationToken> = _v2190 
            let _v2180 = v2198 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2199 : unit = ()
            let _v2199 =
                async {
                    let v2200 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v2200 = v2200 
                    let v2201 : System.Threading.CancellationToken = v2200 
                    let v2202 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v2203 : (System.Threading.CancellationToken []) = [|v2201; v2202; v2160|]
                    let v2204 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v2205 : System.Threading.CancellationTokenSource = v2204 v2203
                    let v2206 : System.Threading.CancellationToken = v2205.Token
                    return v2206 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2207 : Async<System.Threading.CancellationToken> = _v2199 
            let _v2180 = v2207 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2208 : unit = ()
            let _v2208 =
                async {
                    let v2209 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v2209 = v2209 
                    let v2210 : System.Threading.CancellationToken = v2209 
                    let v2211 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v2212 : (System.Threading.CancellationToken []) = [|v2210; v2211; v2160|]
                    let v2213 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v2214 : System.Threading.CancellationTokenSource = v2213 v2212
                    let v2215 : System.Threading.CancellationToken = v2214.Token
                    return v2215 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2216 : Async<System.Threading.CancellationToken> = _v2208 
            let _v2180 = v2216 
            #endif
#else
            let v2217 : unit = ()
            let _v2217 =
                async {
                    let v2218 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v2218 = v2218 
                    let v2219 : System.Threading.CancellationToken = v2218 
                    let v2220 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v2221 : (System.Threading.CancellationToken []) = [|v2219; v2220; v2160|]
                    let v2222 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v2223 : System.Threading.CancellationTokenSource = v2222 v2221
                    let v2224 : System.Threading.CancellationToken = v2223.Token
                    return v2224 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2225 : Async<System.Threading.CancellationToken> = _v2217 
            let _v2180 = v2225 
            #endif
            let v2226 : Async<System.Threading.CancellationToken> = _v2180 
            let _v2161 = v2226 
            #endif
            let v2231 : Async<System.Threading.CancellationToken> = _v2161 
            let! v2231 = v2231 
            let v2236 : System.Threading.CancellationToken = v2231 
            let v2237 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v2236.Register
            let v2238 : (unit -> unit) = closure58(v2129)
            let v2239 : System.Threading.CancellationTokenRegistration = v2237 v2238
            use v2239 = v2239 
            let v2240 : System.Threading.CancellationTokenRegistration = v2239 
            let v2241 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2242 : Async<int32> = null |> unbox<Async<int32>>
            let _v2241 = v2242 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2245 : Async<int32> = null |> unbox<Async<int32>>
            let _v2241 = v2245 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2248 : Async<int32> = null |> unbox<Async<int32>>
            let _v2241 = v2248 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2251 : unit = ()
            let _v2251 =
                async {
                    try
                    let v2252 : System.Threading.Tasks.Task = v2129.WaitForExitAsync v2236 
                    let v2253 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2254 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2255 : Async<unit> = v2254 v2252
                    let _v2253 = v2255 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2256 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2257 : Async<unit> = v2256 v2252
                    let _v2253 = v2257 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2258 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2259 : Async<unit> = v2258 v2252
                    let _v2253 = v2259 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2260 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2261 : Async<unit> = v2260 v2252
                    let _v2253 = v2261 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2262 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2263 : Async<unit> = v2262 v2252
                    let _v2253 = v2263 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2264 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2265 : Async<unit> = v2264 v2252
                    let _v2253 = v2265 
                    #endif
#else
                    let v2266 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2267 : Async<unit> = v2266 v2252
                    let _v2253 = v2267 
                    #endif
                    let v2268 : Async<unit> = _v2253 
                    do! v2268 
                    let v2273 : int32 = v2129.ExitCode
                    return v2273 
                    with ex ->
                        let v2274 : exn = ex
                        let v2275 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2276 : string = $"%A{v2274}"
                        let _v2275 = v2276 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2279 : string = $"%A{v2274}"
                        let _v2275 = v2279 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2282 : string = $"%A{v2274}"
                        let _v2275 = v2282 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2285 : string = $"%A{v2274}"
                        let _v2275 = v2285 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2288 : string = $"%A{v2274}"
                        let _v2275 = v2288 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2291 : string = $"%A{v2274}"
                        let _v2275 = v2291 
                        #endif
#else
                        let v2294 : string = $"{v2274.GetType ()}: {v2274.Message}"
                        let _v2275 = v2294 
                        #endif
                        let v2295 : string = _v2275 
                        let v2300 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v2300 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v2300 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v2300 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v2300 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v2300 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v2300 = () 
                        #endif
#else
                        let v2301 : (string -> unit) = v2131.Push
                        v2301 v2295
                        let _v2300 = () 
                        #endif
                        _v2300 
                        let v2302 : System.Threading.Tasks.TaskCanceledException = v2274 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v2305 : unit = ()
                        let v2306 : (unit -> unit) = closure59(v2302)
                        let v2307 : unit = (fun () -> v2306 (); v2305) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2347 : Async<int32> = _v2251 
            let _v2241 = v2347 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2348 : unit = ()
            let _v2348 =
                async {
                    try
                    let v2349 : System.Threading.Tasks.Task = v2129.WaitForExitAsync v2236 
                    let v2350 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2351 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2352 : Async<unit> = v2351 v2349
                    let _v2350 = v2352 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2353 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2354 : Async<unit> = v2353 v2349
                    let _v2350 = v2354 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2355 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2356 : Async<unit> = v2355 v2349
                    let _v2350 = v2356 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2357 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2358 : Async<unit> = v2357 v2349
                    let _v2350 = v2358 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2359 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2360 : Async<unit> = v2359 v2349
                    let _v2350 = v2360 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2361 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2362 : Async<unit> = v2361 v2349
                    let _v2350 = v2362 
                    #endif
#else
                    let v2363 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2364 : Async<unit> = v2363 v2349
                    let _v2350 = v2364 
                    #endif
                    let v2365 : Async<unit> = _v2350 
                    do! v2365 
                    let v2370 : int32 = v2129.ExitCode
                    return v2370 
                    with ex ->
                        let v2371 : exn = ex
                        let v2372 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2373 : string = $"%A{v2371}"
                        let _v2372 = v2373 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2376 : string = $"%A{v2371}"
                        let _v2372 = v2376 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2379 : string = $"%A{v2371}"
                        let _v2372 = v2379 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2382 : string = $"%A{v2371}"
                        let _v2372 = v2382 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2385 : string = $"%A{v2371}"
                        let _v2372 = v2385 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2388 : string = $"%A{v2371}"
                        let _v2372 = v2388 
                        #endif
#else
                        let v2391 : string = $"{v2371.GetType ()}: {v2371.Message}"
                        let _v2372 = v2391 
                        #endif
                        let v2392 : string = _v2372 
                        let v2397 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v2397 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v2397 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v2397 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v2397 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v2397 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v2397 = () 
                        #endif
#else
                        let v2398 : (string -> unit) = v2131.Push
                        v2398 v2392
                        let _v2397 = () 
                        #endif
                        _v2397 
                        let v2399 : System.Threading.Tasks.TaskCanceledException = v2371 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v2402 : unit = ()
                        let v2403 : (unit -> unit) = closure59(v2399)
                        let v2404 : unit = (fun () -> v2403 (); v2402) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2444 : Async<int32> = _v2348 
            let _v2241 = v2444 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2445 : unit = ()
            let _v2445 =
                async {
                    try
                    let v2446 : System.Threading.Tasks.Task = v2129.WaitForExitAsync v2236 
                    let v2447 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2448 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2449 : Async<unit> = v2448 v2446
                    let _v2447 = v2449 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2450 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2451 : Async<unit> = v2450 v2446
                    let _v2447 = v2451 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2452 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2453 : Async<unit> = v2452 v2446
                    let _v2447 = v2453 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2454 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2455 : Async<unit> = v2454 v2446
                    let _v2447 = v2455 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2456 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2457 : Async<unit> = v2456 v2446
                    let _v2447 = v2457 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2458 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2459 : Async<unit> = v2458 v2446
                    let _v2447 = v2459 
                    #endif
#else
                    let v2460 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2461 : Async<unit> = v2460 v2446
                    let _v2447 = v2461 
                    #endif
                    let v2462 : Async<unit> = _v2447 
                    do! v2462 
                    let v2467 : int32 = v2129.ExitCode
                    return v2467 
                    with ex ->
                        let v2468 : exn = ex
                        let v2469 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2470 : string = $"%A{v2468}"
                        let _v2469 = v2470 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2473 : string = $"%A{v2468}"
                        let _v2469 = v2473 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2476 : string = $"%A{v2468}"
                        let _v2469 = v2476 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2479 : string = $"%A{v2468}"
                        let _v2469 = v2479 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2482 : string = $"%A{v2468}"
                        let _v2469 = v2482 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2485 : string = $"%A{v2468}"
                        let _v2469 = v2485 
                        #endif
#else
                        let v2488 : string = $"{v2468.GetType ()}: {v2468.Message}"
                        let _v2469 = v2488 
                        #endif
                        let v2489 : string = _v2469 
                        let v2494 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v2494 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v2494 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v2494 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v2494 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v2494 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v2494 = () 
                        #endif
#else
                        let v2495 : (string -> unit) = v2131.Push
                        v2495 v2489
                        let _v2494 = () 
                        #endif
                        _v2494 
                        let v2496 : System.Threading.Tasks.TaskCanceledException = v2468 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v2499 : unit = ()
                        let v2500 : (unit -> unit) = closure59(v2496)
                        let v2501 : unit = (fun () -> v2500 (); v2499) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2541 : Async<int32> = _v2445 
            let _v2241 = v2541 
            #endif
#else
            let v2542 : unit = ()
            let _v2542 =
                async {
                    try
                    let v2543 : System.Threading.Tasks.Task = v2129.WaitForExitAsync v2236 
                    let v2544 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2545 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2546 : Async<unit> = v2545 v2543
                    let _v2544 = v2546 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2547 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2548 : Async<unit> = v2547 v2543
                    let _v2544 = v2548 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2549 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2550 : Async<unit> = v2549 v2543
                    let _v2544 = v2550 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2551 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2552 : Async<unit> = v2551 v2543
                    let _v2544 = v2552 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2553 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2554 : Async<unit> = v2553 v2543
                    let _v2544 = v2554 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2555 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2556 : Async<unit> = v2555 v2543
                    let _v2544 = v2556 
                    #endif
#else
                    let v2557 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v2558 : Async<unit> = v2557 v2543
                    let _v2544 = v2558 
                    #endif
                    let v2559 : Async<unit> = _v2544 
                    do! v2559 
                    let v2564 : int32 = v2129.ExitCode
                    return v2564 
                    with ex ->
                        let v2565 : exn = ex
                        let v2566 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v2567 : string = $"%A{v2565}"
                        let _v2566 = v2567 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v2570 : string = $"%A{v2565}"
                        let _v2566 = v2570 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v2573 : string = $"%A{v2565}"
                        let _v2566 = v2573 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v2576 : string = $"%A{v2565}"
                        let _v2566 = v2576 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v2579 : string = $"%A{v2565}"
                        let _v2566 = v2579 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v2582 : string = $"%A{v2565}"
                        let _v2566 = v2582 
                        #endif
#else
                        let v2585 : string = $"{v2565.GetType ()}: {v2565.Message}"
                        let _v2566 = v2585 
                        #endif
                        let v2586 : string = _v2566 
                        let v2591 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v2591 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v2591 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v2591 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v2591 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v2591 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v2591 = () 
                        #endif
#else
                        let v2592 : (string -> unit) = v2131.Push
                        v2592 v2586
                        let _v2591 = () 
                        #endif
                        _v2591 
                        let v2593 : System.Threading.Tasks.TaskCanceledException = v2565 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v2596 : unit = ()
                        let v2597 : (unit -> unit) = closure59(v2593)
                        let v2598 : unit = (fun () -> v2597 (); v2596) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v2638 : Async<int32> = _v2542 
            let _v2241 = v2638 
            #endif
            let v2639 : Async<int32> = _v2241 
            let! v2639 = v2639 
            let v2644 : int32 = v2639 
            let v2645 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v2646 : string seq = v2645 v2131
            let v2649 : (string seq -> string seq) = Seq.rev
            let v2650 : string seq = v2649 v2646
            let v2653 : string = method40()
            let v2654 : (string -> (string seq -> string)) = String.concat
            let v2655 : (string seq -> string) = v2654 v2653
            let v2656 : string = v2655 v2650
            let v2660 : unit = ()
            let v2661 : (unit -> unit) = closure60(v2644, v2656)
            let v2662 : unit = (fun () -> v2661 (); v2660) ()
            return struct (v2644, v2656) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v2703 : Async<struct (int32 * string)> = _v2037 
    let _v26 = v2703 
    #endif
    let v2704 : Async<struct (int32 * string)> = _v26 
    let _v7 = v2704 
    #endif
    let v2709 : Async<struct (int32 * string)> = _v7 
    v2709
and method68 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method69(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US14 = method70(v8)
    let struct (v20 : string, v21 : US5) =
        match v9 with
        | US14_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US5)> v13
        | US14_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v25 : string =
        match v21 with
        | US5_1 -> (* None *)
            let v23 : string = ""
            v23
        | US5_0(v22) -> (* Some *)
            v22
    let v26 : US22 = method83(v25)
    let v34 : (string []) =
        match v26 with
        | US22_1(v28) -> (* Error *)
            let v29 : string = $"resultm.get / Result value was Error: {v28}"
            failwith<(string [])> v29
        | US22_0(v27) -> (* Ok *)
            v27
    let v35 : string = "$0.to_vec()"
    let v36 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "x"
    let v40 : string = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "&*$0"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v42 
    let _v41 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "&*$0"
    let v45 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v44 
    let _v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "&*$0"
    let v47 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v46 
    let _v41 = v47 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v54 
    #endif
#else
    let v57 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v57 
    #endif
    let v60 : Ref<Str> = _v41 
    let v65 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "String::from($0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _v65 = v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : string = "String::from($0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v68 
    let _v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = "String::from($0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v70 
    let _v65 = v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v72 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v72 
    #endif
#if FABLE_COMPILER_PYTHON
    let v75 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v75 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v78 
    #endif
#else
    let v81 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v81 
    #endif
    let v84 : std_string_String = _v65 
    let v89 : string = "true; $0 }).collect::<Vec<_>>()"
    let v90 : bool = Fable.Core.RustInterop.emitRustExpr v84 v89 
    let v91 : string = "_vec_map"
    let v92 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure32(v0, v1, v2, v3, v4, v5, v6, v20, v92)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v138 : bool = true
    let mutable _v138 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v139 : string = "std::process::Command::new(&*$0)"
    let v140 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v20 v139 
    let v141 : string = "true; let mut v140 = v140"
    let v142 : bool = Fable.Core.RustInterop.emitRustExpr () v141 
    let v143 : string = "true; std::process::Command::args(&mut v140, &*$0)"
    let v144 : bool = Fable.Core.RustInterop.emitRustExpr v92 v143 
    let v145 : string = "$0"
    let v146 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v140 v145 
    let v147 : string = "std::process::Stdio::piped()"
    let v148 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : string = "true; let mut v146 = v146"
    let v150 : bool = Fable.Core.RustInterop.emitRustExpr () v149 
    let v151 : string = "true; std::process::Command::stdout(&mut v146, std::process::Stdio::piped())"
    let v152 : bool = Fable.Core.RustInterop.emitRustExpr () v151 
    let v153 : string = "$0"
    let v154 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v146 v153 
    let v155 : string = "std::process::Stdio::piped()"
    let v156 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v155 
    let v157 : string = "true; let mut v154 = v154"
    let v158 : bool = Fable.Core.RustInterop.emitRustExpr () v157 
    let v159 : string = "true; std::process::Command::stderr(&mut v154, std::process::Stdio::piped())"
    let v160 : bool = Fable.Core.RustInterop.emitRustExpr () v159 
    let v161 : string = "$0"
    let v162 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v154 v161 
    let v163 : string = "std::process::Stdio::piped()"
    let v164 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v163 
    let v165 : string = "true; let mut v162 = v162"
    let v166 : bool = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = "true; std::process::Command::stdin(&mut v162, std::process::Stdio::piped())"
    let v168 : bool = Fable.Core.RustInterop.emitRustExpr () v167 
    let v169 : string = "$0"
    let v170 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v162 v169 
    let v171 : (string -> US5) = method6()
    let v172 : US5 option = v6 |> Option.map v171 
    let v183 : US5 = US5_1
    let v184 : US5 = v172 |> Option.defaultValue v183 
    let v198 : std_process_Command =
        match v184 with
        | US5_1 -> (* None *)
            let v195 : string = $"v170"
            let v196 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v195 
            v196
        | US5_0(v188) -> (* Some *)
            let v189 : string = "true; let mut v170 = v170"
            let v190 : bool = Fable.Core.RustInterop.emitRustExpr () v189 
            let v191 : string = "true; std::process::Command::current_dir(&mut v170, &*$0)"
            let v192 : bool = Fable.Core.RustInterop.emitRustExpr v188 v191 
            let v193 : string = $"v170"
            let v194 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v193 
            v194
    let v199 : uint64 = System.Convert.ToUInt64 v2.Length
    let v200 : bool = v199 = 0UL
    let v220 : std_process_Command =
        if v200 then
            v198
        else
            let v201 : string = "$0.to_vec()"
            let v202 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v201 
            let v203 : string = "true; let _vec_fold_ = $0.into_iter().fold(v198, |acc, x| { //"
            let v204 : bool = Fable.Core.RustInterop.emitRustExpr v202 v203 
            let v205 : string = "acc"
            let v206 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v205 
            let v207 : string = "x"
            let struct (v208 : string, v209 : string) = Fable.Core.RustInterop.emitRustExpr () v207 
            let v210 : string = "true; let mut v206 = v206"
            let v211 : bool = Fable.Core.RustInterop.emitRustExpr () v210 
            let v212 : string = "true; std::process::Command::env(&mut v206, &*$0, &*$1)"
            let v213 : bool = Fable.Core.RustInterop.emitRustExpr struct (v208, v209) v212 
            let v214 : string = "$0"
            let v215 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v206 v214 
            let v216 : string = "true; $0 })"
            let v217 : bool = Fable.Core.RustInterop.emitRustExpr v215 v216 
            let v218 : string = "_vec_fold_"
            let v219 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v218 
            v219
    let v221 : string = "true; let mut v220 = v220"
    let v222 : bool = Fable.Core.RustInterop.emitRustExpr () v221 
    let v223 : string = "std::process::Command::spawn(&mut v220)"
    let v224 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v223 
    let v225 : (std_io_Error -> std_string_String) = method46()
    let v226 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v227 : string = "$0.map_err(|x| $1(x))"
    let v228 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v227 
    let _v226 = v228 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v229 : string = "$0.map_err(|x| $1(x))"
    let v230 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v229 
    let _v226 = v230 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v231 : string = "$0.map_err(|x| $1(x))"
    let v232 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v231 
    let _v226 = v232 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v233 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v233 
    #endif
#if FABLE_COMPILER_PYTHON
    let v234 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v234 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v235 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v235 
    #endif
#else
    let v236 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v236 
    #endif
    let v237 : Result<std_process_Child, std_string_String> = _v226 
    let v240 : (std_process_Child option -> std_process_Child option) = method95()
    let v241 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v242 : bool = Fable.Core.RustInterop.emitRustExpr v237 v241 
    let v243 : string = "x"
    let v244 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v243 
    let v245 : std_process_Child option = Some v244 
    let v248 : std_process_Child option = v240 v245
    let v249 : string = "std::sync::Mutex::new(v248)"
    let v250 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v249 
    let v251 : string = "std::sync::Arc::new(v250)"
    let v252 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "true; $0 })"
    let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
    let v255 : string = "_result_map_"
    let v256 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v255 
    let v257 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method96()
    let v258 : (std_string_String -> US24) = method97()
    let v259 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v260 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v257, v258, v256) v259 
    let struct (v1406 : int32, v1407 : US7, v1408 : US25) =
        match v260 with
        | US24_1(v1358) -> (* Error *)
            let v1359 : unit = ()
            let v1360 : (unit -> unit) = closure36(v1358)
            let v1361 : unit = (fun () -> v1360 (); v1359) ()
            let v1401 : US7 = US7_0(v1358)
            let v1402 : US25 = US25_1
            struct (-1, v1401, v1402)
        | US24_0(v261) -> (* Ok *)
            let v262 : string = "true; let _capture = (|| { //"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0"
            let v265 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v264 
            let v266 : string = "v265.lock()"
            let v267 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v269 : string = "$0.unwrap()"
            let v270 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v269 
            let _v268 = v270 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v271 : string = "$0.unwrap()"
            let v272 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v271 
            let _v268 = v272 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v273 : string = "$0.unwrap()"
            let v274 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v273 
            let _v268 = v274 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v275 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v275 
            #endif
#if FABLE_COMPILER_PYTHON
            let v276 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v276 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v277 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v277 
            #endif
#else
            let v278 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v278 
            #endif
            let v279 : std_sync_MutexGuard<std_process_Child option> = _v268 
            let v282 : std_sync_MutexGuard<std_process_Child option> = method100(v279)
            let v283 : string = "true; let mut v282 = v282"
            let v284 : bool = Fable.Core.RustInterop.emitRustExpr () v283 
            let v285 : string = "&mut $0"
            let v286 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v282 v285 
            let v287 : string = "$0.as_mut()"
            let v288 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v286 v287 
            let v289 : string = "$0.unwrap()"
            let v290 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v288 v289 
            let v291 : string = "&mut $0.stdout"
            let v292 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v290 v291 
            let v293 : string = "Option::take($0)"
            let v294 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v292 v293 
            let v295 : string = "$0.unwrap()"
            let v296 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v294 v295 
            let v297 : string = "true; $0 })()"
            let v298 : bool = Fable.Core.RustInterop.emitRustExpr v296 v297 
            let v299 : string = "_capture"
            let v300 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v299 
            let v301 : string = "true; let _capture = (|| { //"
            let v302 : bool = Fable.Core.RustInterop.emitRustExpr () v301 
            let v303 : string = "$0"
            let v304 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v303 
            let v305 : string = "v304.lock()"
            let v306 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v305 
            let v307 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v308 : string = "$0.unwrap()"
            let v309 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v308 
            let _v307 = v309 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v310 : string = "$0.unwrap()"
            let v311 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v310 
            let _v307 = v311 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v312 : string = "$0.unwrap()"
            let v313 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v312 
            let _v307 = v313 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v314 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v314 
            #endif
#if FABLE_COMPILER_PYTHON
            let v315 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v315 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v316 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v316 
            #endif
#else
            let v317 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v317 
            #endif
            let v318 : std_sync_MutexGuard<std_process_Child option> = _v307 
            let v321 : std_sync_MutexGuard<std_process_Child option> = method100(v318)
            let v322 : string = "true; let mut v321 = v321"
            let v323 : bool = Fable.Core.RustInterop.emitRustExpr () v322 
            let v324 : string = "&mut $0"
            let v325 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v321 v324 
            let v326 : string = "$0.as_mut()"
            let v327 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v325 v326 
            let v328 : string = "$0.unwrap()"
            let v329 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v327 v328 
            let v330 : string = "&mut $0.stderr"
            let v331 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v329 v330 
            let v332 : string = "Option::take($0)"
            let v333 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v331 v332 
            let v334 : string = "$0.unwrap()"
            let v335 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : string = "true; $0 })()"
            let v337 : bool = Fable.Core.RustInterop.emitRustExpr v335 v336 
            let v338 : string = "_capture"
            let v339 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v338 
            let v340 : string = "true; let _capture = (|| { //"
            let v341 : bool = Fable.Core.RustInterop.emitRustExpr () v340 
            let v342 : string = "$0"
            let v343 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v342 
            let v344 : string = "v343.lock()"
            let v345 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v344 
            let v346 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v347 : string = "$0.unwrap()"
            let v348 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v347 
            let _v346 = v348 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v349 : string = "$0.unwrap()"
            let v350 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v349 
            let _v346 = v350 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v351 : string = "$0.unwrap()"
            let v352 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v351 
            let _v346 = v352 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v353 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v353 
            #endif
#if FABLE_COMPILER_PYTHON
            let v354 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v354 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v355 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v355 
            #endif
#else
            let v356 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v356 
            #endif
            let v357 : std_sync_MutexGuard<std_process_Child option> = _v346 
            let v360 : std_sync_MutexGuard<std_process_Child option> = method100(v357)
            let v361 : string = "true; let mut v360 = v360"
            let v362 : bool = Fable.Core.RustInterop.emitRustExpr () v361 
            let v363 : string = "&mut $0"
            let v364 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v360 v363 
            let v365 : string = "$0.as_mut()"
            let v366 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v364 v365 
            let v367 : string = "$0.unwrap()"
            let v368 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v366 v367 
            let v369 : string = "&mut $0.stdin"
            let v370 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v368 v369 
            let v371 : string = "Option::take($0)"
            let v372 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v370 v371 
            let v373 : string = "$0.unwrap()"
            let v374 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v372 v373 
            let v375 : std_process_ChildStdin option = Some v374 
            let v378 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method101()
            let v379 : std_process_ChildStdin option = v378 v375
            let v380 : string = "std::sync::Mutex::new(v379)"
            let v381 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v380 
            let v382 : string = "std::sync::Arc::new(v381)"
            let v383 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v382 
            let v384 : string = "true; $0 })()"
            let v385 : bool = Fable.Core.RustInterop.emitRustExpr v383 v384 
            let v386 : string = "_capture"
            let v387 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v386 
            let v388 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v389 : std_sync_mpsc_Sender<std_string_String>, v390 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v388 
            let v391 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method102()
            let v392 : std_sync_mpsc_Sender<std_string_String> = v391 v389
            let v393 : string = "std::sync::Mutex::new(v392)"
            let v394 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v393 
            let v395 : string = "std::sync::Arc::new(v394)"
            let v396 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v395 
            let v397 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method103()
            let v398 : std_sync_mpsc_Sender<std_string_String> = v397 v389
            let v399 : string = "std::sync::Mutex::new(v398)"
            let v400 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v399 
            let v401 : string = "std::sync::Arc::new(v400)"
            let v402 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v401 
            let v403 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method104()
            let v404 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v403 v390
            let v405 : string = "std::sync::Mutex::new(v404)"
            let v406 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v405 
            let v407 : string = "std::sync::Arc::new(v406)"
            let v408 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v407 
            let v409 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v410 : bool = Fable.Core.RustInterop.emitRustExpr () v409 
            let v411 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v412 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v300 v411 
            let v413 : string = "std::io::BufReader::new($0)"
            let v414 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v412 v413 
            let v415 : string = "std::io::BufRead::lines(v414)"
            let v416 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v415 
            let v417 : string = "true; let mut v416 = v416; let _iter_try_for_each = v416.try_for_each(|x| { //"
            let v418 : bool = Fable.Core.RustInterop.emitRustExpr () v417 
            let v419 : string = "x"
            let v420 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v419 
            let v421 : string = "$0.clone()"
            let v422 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v396 v421 
            let v423 : (std_io_Error -> std_string_String) = method46()
            let v424 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v425 : string = "$0.map_err(|x| $1(x))"
            let v426 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v425 
            let _v424 = v426 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v427 : string = "$0.map_err(|x| $1(x))"
            let v428 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v427 
            let _v424 = v428 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v429 : string = "$0.map_err(|x| $1(x))"
            let v430 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v429 
            let _v424 = v430 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v431 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v431 
            #endif
#if FABLE_COMPILER_PYTHON
            let v432 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v432 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v433 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v433 
            #endif
#else
            let v434 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v434 
            #endif
            let v435 : Result<std_string_String, std_string_String> = _v424 
            let v438 : (std_string_String -> US26) = method105()
            let v439 : (std_string_String -> US26) = method106()
            let v440 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v441 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v438, v439, v435) v440 
            let v636 : std_string_String =
                match v441 with
                | US26_1(v543) -> (* Error *)
                    let v544 : unit = ()
                    let v545 : (unit -> unit) = closure42(v5, v543)
                    let v546 : unit = (fun () -> v545 (); v544) ()
                    let v586 : string = $"\u001b[4;7m{v543}\u001b[0m"
                    let v587 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v588 : string = "&*$0"
                    let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v588 
                    let _v587 = v589 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v590 : string = "&*$0"
                    let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v590 
                    let _v587 = v591 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v592 : string = "&*$0"
                    let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v592 
                    let _v587 = v593 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v594 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v594 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v597 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v597 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v600 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v600 
                    #endif
#else
                    let v603 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v603 
                    #endif
                    let v606 : Ref<Str> = _v587 
                    let v611 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v612 : string = "String::from($0)"
                    let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v612 
                    let _v611 = v613 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v614 : string = "String::from($0)"
                    let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v614 
                    let _v611 = v615 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v616 : string = "String::from($0)"
                    let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v616 
                    let _v611 = v617 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v618 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v618 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v621 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v621 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v624 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v624 
                    #endif
#else
                    let v627 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v627 
                    #endif
                    let v630 : std_string_String = _v611 
                    v630
                | US26_0(v442) -> (* Ok *)
                    let v443 : string = "fable_library_rust::String_::fromString($0)"
                    let v444 : string = Fable.Core.RustInterop.emitRustExpr v442 v443 
                    let v445 : string = "encoding_rs::UTF_8"
                    let v446 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v445 
                    let v447 : string = "$0.encode(&*$1).0"
                    let v448 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v446, v444) v447 
                    let v449 : string = "$0.as_ref()"
                    let v450 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v448 v449 
                    let v451 : string = "std::str::from_utf8($0)"
                    let v452 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v450 v451 
                    let v453 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v454 : string = "$0.unwrap()"
                    let v455 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v454 
                    let _v453 = v455 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v456 : string = "$0.unwrap()"
                    let v457 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v456 
                    let _v453 = v457 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v458 : string = "$0.unwrap()"
                    let v459 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v458 
                    let _v453 = v459 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v460 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v460 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v461 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v461 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v462 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v462 
                    #endif
#else
                    let v463 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v463 
                    #endif
                    let v464 : Ref<Str> = _v453 
                    let v467 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v468 : string = "String::from($0)"
                    let v469 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v468 
                    let _v467 = v469 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v470 : string = "String::from($0)"
                    let v471 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v470 
                    let _v467 = v471 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v472 : string = "String::from($0)"
                    let v473 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v472 
                    let _v467 = v473 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v474 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v474 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v477 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v477 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v480 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v480 
                    #endif
#else
                    let v483 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v483 
                    #endif
                    let v486 : std_string_String = _v467 
                    let v491 : string = "fable_library_rust::String_::fromString($0)"
                    let v492 : string = Fable.Core.RustInterop.emitRustExpr v486 v491 
                    let v493 : string = $"> {v492}"
                    if v5 then
                        let v494 : unit = ()
                        let v495 : (unit -> unit) = closure43(v493)
                        let v496 : unit = (fun () -> v495 (); v494) ()
                        ()
                    else
                        let v539 : unit = ()
                        let v540 : (unit -> unit) = closure10(v493)
                        let v541 : unit = (fun () -> v540 (); v539) ()
                        ()
                    v486
            let v637 : string = "$0"
            let v638 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v422 v637 
            let v639 : string = "v638.lock()"
            let v640 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v639 
            let v641 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v642 : string = "$0.unwrap()"
            let v643 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v642 
            let _v641 = v643 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v644 : string = "$0.unwrap()"
            let v645 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v644 
            let _v641 = v645 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v646 : string = "$0.unwrap()"
            let v647 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v646 
            let _v641 = v647 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v648 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v648 
            #endif
#if FABLE_COMPILER_PYTHON
            let v649 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v649 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v650 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v650 
            #endif
#else
            let v651 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v651 
            #endif
            let v652 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _v641 
            let v655 : string = "&$0"
            let v656 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v652 v655 
            let v657 : string = "$0.send($1)"
            let v658 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v656, v636) v657 
            let v659 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method111()
            let v660 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v661 : string = "$0.map_err(|x| $1(x))"
            let v662 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v661 
            let _v660 = v662 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v663 : string = "$0.map_err(|x| $1(x))"
            let v664 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v663 
            let _v660 = v664 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v665 : string = "$0.map_err(|x| $1(x))"
            let v666 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v665 
            let _v660 = v666 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v667 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v667 
            #endif
#if FABLE_COMPILER_PYTHON
            let v668 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v668 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v669 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v669 
            #endif
#else
            let v670 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v670 
            #endif
            let v671 : Result<unit, std_string_String> = _v660 
            let v674 : string = "$0"
            let v675 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v671 v674 
            let v676 : string = "true; $0 }); //"
            let v677 : bool = Fable.Core.RustInterop.emitRustExpr v675 v676 
            let v678 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v679 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v678 
            let v680 : Result<unit, string> = method112(v679)
            let v681 : string = ""
            let v682 : string = "}"
            let v683 : string = v681 + v682 
            let v684 : _ = v680 
            let v685 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v686 : string = $"true; let v684 = $0"
            let v687 : bool = Fable.Core.RustInterop.emitRustExpr v684 v686 
            let _v685 = v687 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v688 : string = $"true; let v684 = $0"
            let v689 : bool = Fable.Core.RustInterop.emitRustExpr v684 v688 
            let _v685 = v689 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v690 : string = $"true; let v684 = $0"
            let v691 : bool = Fable.Core.RustInterop.emitRustExpr v684 v690 
            let _v685 = v691 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v692 : bool = true
            let _v685 = v692 
            #endif
#if FABLE_COMPILER_PYTHON
            let v693 : bool = true
            let _v685 = v693 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v694 : bool = true
            let _v685 = v694 
            #endif
#else
            let v695 : bool = true
            let _v685 = v695 
            #endif
            let v696 : bool = _v685 
            let v699 : string = $"true; v684 " + v683 + "); " + v681 + " // rust.fix_closure'"
            let v700 : bool = Fable.Core.RustInterop.emitRustExpr () v699 
            let v701 : string = "__spawn"
            let v702 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v701 
            let v703 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v704 : bool = Fable.Core.RustInterop.emitRustExpr () v703 
            let v705 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v706 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v339 v705 
            let v707 : string = "std::io::BufReader::new($0)"
            let v708 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v706 v707 
            let v709 : string = "std::io::BufRead::lines(v708)"
            let v710 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v709 
            let v711 : string = "true; let mut v710 = v710; let _iter_try_for_each = v710.try_for_each(|x| { //"
            let v712 : bool = Fable.Core.RustInterop.emitRustExpr () v711 
            let v713 : string = "x"
            let v714 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v713 
            let v715 : string = "$0.clone()"
            let v716 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v402 v715 
            let v717 : (std_io_Error -> std_string_String) = method46()
            let v718 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v719 : string = "$0.map_err(|x| $1(x))"
            let v720 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v714, v717) v719 
            let _v718 = v720 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v721 : string = "$0.map_err(|x| $1(x))"
            let v722 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v714, v717) v721 
            let _v718 = v722 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v723 : string = "$0.map_err(|x| $1(x))"
            let v724 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v714, v717) v723 
            let _v718 = v724 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v725 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v725 
            #endif
#if FABLE_COMPILER_PYTHON
            let v726 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v726 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v727 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v727 
            #endif
#else
            let v728 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v728 
            #endif
            let v729 : Result<std_string_String, std_string_String> = _v718 
            let v732 : (std_string_String -> US26) = method105()
            let v733 : (std_string_String -> US26) = method106()
            let v734 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v735 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v732, v733, v729) v734 
            let v978 : std_string_String =
                match v735 with
                | US26_1(v885) -> (* Error *)
                    let v886 : unit = ()
                    let v887 : (unit -> unit) = closure42(v5, v885)
                    let v888 : unit = (fun () -> v887 (); v886) ()
                    let v928 : string = $"\u001b[4;7m{v885}\u001b[0m"
                    let v929 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v930 : string = "&*$0"
                    let v931 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v928 v930 
                    let _v929 = v931 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v932 : string = "&*$0"
                    let v933 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v928 v932 
                    let _v929 = v933 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v934 : string = "&*$0"
                    let v935 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v928 v934 
                    let _v929 = v935 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v936 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v936 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v939 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v939 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v942 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v942 
                    #endif
#else
                    let v945 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v945 
                    #endif
                    let v948 : Ref<Str> = _v929 
                    let v953 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v954 : string = "String::from($0)"
                    let v955 : std_string_String = Fable.Core.RustInterop.emitRustExpr v948 v954 
                    let _v953 = v955 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v956 : string = "String::from($0)"
                    let v957 : std_string_String = Fable.Core.RustInterop.emitRustExpr v948 v956 
                    let _v953 = v957 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v958 : string = "String::from($0)"
                    let v959 : std_string_String = Fable.Core.RustInterop.emitRustExpr v948 v958 
                    let _v953 = v959 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v960 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v960 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v963 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v963 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v966 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v966 
                    #endif
#else
                    let v969 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v969 
                    #endif
                    let v972 : std_string_String = _v953 
                    v972
                | US26_0(v736) -> (* Ok *)
                    let v737 : string = "fable_library_rust::String_::fromString($0)"
                    let v738 : string = Fable.Core.RustInterop.emitRustExpr v736 v737 
                    let v739 : string = "encoding_rs::UTF_8"
                    let v740 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v739 
                    let v741 : string = "$0.encode(&*$1).0"
                    let v742 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v740, v738) v741 
                    let v743 : string = "$0.as_ref()"
                    let v744 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v742 v743 
                    let v745 : string = "std::str::from_utf8($0)"
                    let v746 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v744 v745 
                    let v747 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v748 : string = "$0.unwrap()"
                    let v749 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v748 
                    let _v747 = v749 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v750 : string = "$0.unwrap()"
                    let v751 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v750 
                    let _v747 = v751 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v752 : string = "$0.unwrap()"
                    let v753 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v752 
                    let _v747 = v753 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v754 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v754 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v755 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v755 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v756 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v756 
                    #endif
#else
                    let v757 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v757 
                    #endif
                    let v758 : Ref<Str> = _v747 
                    let v761 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v762 : string = "String::from($0)"
                    let v763 : std_string_String = Fable.Core.RustInterop.emitRustExpr v758 v762 
                    let _v761 = v763 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v764 : string = "String::from($0)"
                    let v765 : std_string_String = Fable.Core.RustInterop.emitRustExpr v758 v764 
                    let _v761 = v765 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v766 : string = "String::from($0)"
                    let v767 : std_string_String = Fable.Core.RustInterop.emitRustExpr v758 v766 
                    let _v761 = v767 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v768 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v768 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v771 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v771 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v774 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v774 
                    #endif
#else
                    let v777 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v777 
                    #endif
                    let v780 : std_string_String = _v761 
                    let v785 : string = "fable_library_rust::String_::fromString($0)"
                    let v786 : string = Fable.Core.RustInterop.emitRustExpr v780 v785 
                    let v787 : string = $"! {v786}"
                    if v5 then
                        let v788 : unit = ()
                        let v789 : (unit -> unit) = closure43(v787)
                        let v790 : unit = (fun () -> v789 (); v788) ()
                        ()
                    else
                        let v832 : unit = ()
                        let v833 : (unit -> unit) = closure10(v787)
                        let v834 : unit = (fun () -> v833 (); v832) ()
                        ()
                    let v836 : string = $"\u001b[4;7m{v780}\u001b[0m"
                    let v837 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v838 : string = "&*$0"
                    let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v838 
                    let _v837 = v839 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v840 : string = "&*$0"
                    let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v840 
                    let _v837 = v841 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v842 : string = "&*$0"
                    let v843 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v842 
                    let _v837 = v843 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v844 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v844 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v847 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v847 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v850 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v850 
                    #endif
#else
                    let v853 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v853 
                    #endif
                    let v856 : Ref<Str> = _v837 
                    let v861 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v862 : string = "String::from($0)"
                    let v863 : std_string_String = Fable.Core.RustInterop.emitRustExpr v856 v862 
                    let _v861 = v863 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v864 : string = "String::from($0)"
                    let v865 : std_string_String = Fable.Core.RustInterop.emitRustExpr v856 v864 
                    let _v861 = v865 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v866 : string = "String::from($0)"
                    let v867 : std_string_String = Fable.Core.RustInterop.emitRustExpr v856 v866 
                    let _v861 = v867 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v868 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v868 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v871 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v871 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v874 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v874 
                    #endif
#else
                    let v877 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v877 
                    #endif
                    let v880 : std_string_String = _v861 
                    v880
            let v979 : string = "$0"
            let v980 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v716 v979 
            let v981 : string = "v980.lock()"
            let v982 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v981 
            let v983 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v984 : string = "$0.unwrap()"
            let v985 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v984 
            let _v983 = v985 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v986 : string = "$0.unwrap()"
            let v987 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v986 
            let _v983 = v987 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v988 : string = "$0.unwrap()"
            let v989 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v988 
            let _v983 = v989 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v990 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v990 
            #endif
#if FABLE_COMPILER_PYTHON
            let v991 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v991 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v992 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v992 
            #endif
#else
            let v993 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v993 
            #endif
            let v994 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _v983 
            let v997 : string = "&$0"
            let v998 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v994 v997 
            let v999 : string = "$0.send($1)"
            let v1000 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v998, v978) v999 
            let v1001 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method111()
            let v1002 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1003 : string = "$0.map_err(|x| $1(x))"
            let v1004 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1000, v1001) v1003 
            let _v1002 = v1004 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1005 : string = "$0.map_err(|x| $1(x))"
            let v1006 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1000, v1001) v1005 
            let _v1002 = v1006 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1007 : string = "$0.map_err(|x| $1(x))"
            let v1008 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1000, v1001) v1007 
            let _v1002 = v1008 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1009 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1009 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1010 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1010 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1011 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1011 
            #endif
#else
            let v1012 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1012 
            #endif
            let v1013 : Result<unit, std_string_String> = _v1002 
            let v1016 : string = "$0"
            let v1017 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1013 v1016 
            let v1018 : string = "true; $0 }); //"
            let v1019 : bool = Fable.Core.RustInterop.emitRustExpr v1017 v1018 
            let v1020 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1021 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1020 
            let v1022 : Result<unit, string> = method112(v1021)
            let v1023 : string = v681 + v682 
            let v1024 : _ = v1022 
            let v1025 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1026 : string = $"true; let v1024 = $0"
            let v1027 : bool = Fable.Core.RustInterop.emitRustExpr v1024 v1026 
            let _v1025 = v1027 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1028 : string = $"true; let v1024 = $0"
            let v1029 : bool = Fable.Core.RustInterop.emitRustExpr v1024 v1028 
            let _v1025 = v1029 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1030 : string = $"true; let v1024 = $0"
            let v1031 : bool = Fable.Core.RustInterop.emitRustExpr v1024 v1030 
            let _v1025 = v1031 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1032 : bool = true
            let _v1025 = v1032 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1033 : bool = true
            let _v1025 = v1033 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1034 : bool = true
            let _v1025 = v1034 
            #endif
#else
            let v1035 : bool = true
            let _v1025 = v1035 
            #endif
            let v1036 : bool = _v1025 
            let v1039 : string = $"true; v1024 " + v1023 + "); " + v681 + " // rust.fix_closure'"
            let v1040 : bool = Fable.Core.RustInterop.emitRustExpr () v1039 
            let v1041 : string = "__spawn"
            let v1042 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1041 
            let v1043 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US27) = method113()
            let v1044 : US27 option = v4 |> Option.map v1043 
            let v1055 : US27 = US27_1
            let v1056 : US27 = v1044 |> Option.defaultValue v1055 
            match v1056 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v1060) -> (* Some *)
                let v1061 : string = "$0"
                let v1062 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v387 v1061 
                let v1063 : string = "v1062.lock()"
                let v1064 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1063 
                let v1065 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1066 : string = "$0.unwrap()"
                let v1067 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1064 v1066 
                let _v1065 = v1067 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1068 : string = "$0.unwrap()"
                let v1069 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1064 v1068 
                let _v1065 = v1069 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1070 : string = "$0.unwrap()"
                let v1071 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1064 v1070 
                let _v1065 = v1071 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1072 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1072 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1073 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1073 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1074 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1074 
                #endif
#else
                let v1075 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1075 
                #endif
                let v1076 : std_sync_MutexGuard<std_process_ChildStdin option> = _v1065 
                let v1079 : std_sync_MutexGuard<std_process_ChildStdin option> = method114(v1076)
                let v1080 : string = "true; let mut v1079 = v1079"
                let v1081 : bool = Fable.Core.RustInterop.emitRustExpr () v1080 
                let v1082 : string = "&mut $0"
                let v1083 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1079 v1082 
                let v1084 : string = "Option::take($0)"
                let v1085 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1083 v1084 
                let v1086 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1087 : bool = Fable.Core.RustInterop.emitRustExpr v1085 v1086 
                let v1088 : string = "x"
                let v1089 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1088 
                let v1090 : string = "std::sync::Mutex::new(v1089)"
                let v1091 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1090 
                let v1092 : string = "std::sync::Arc::new(v1091)"
                let v1093 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1092 
                let v1094 : string = "true; $0 })"
                let v1095 : bool = Fable.Core.RustInterop.emitRustExpr v1093 v1094 
                let v1096 : string = "_optionm_map_"
                let v1097 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1096 
                let v1098 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US28) = method115()
                let v1099 : US28 option = v1097 |> Option.map v1098 
                let v1110 : US28 = US28_1
                let v1111 : US28 = v1099 |> Option.defaultValue v1110 
                match v1111 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v1115) -> (* Some *)
                    v1060 v1115
                    let v1116 : string = "$0"
                    let v1117 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1115 v1116 
                    let v1118 : string = "v1117.lock()"
                    let v1119 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1118 
                    let v1120 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1121 : string = "$0.unwrap()"
                    let v1122 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1119 v1121 
                    let _v1120 = v1122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1123 : string = "$0.unwrap()"
                    let v1124 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1119 v1123 
                    let _v1120 = v1124 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1125 : string = "$0.unwrap()"
                    let v1126 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1119 v1125 
                    let _v1120 = v1126 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1127 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1128 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1128 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1129 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1129 
                    #endif
#else
                    let v1130 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1130 
                    #endif
                    let v1131 : std_sync_MutexGuard<std_process_ChildStdin> = _v1120 
                    let v1134 : std_sync_MutexGuard<std_process_ChildStdin> = method116(v1131)
                    let v1135 : string = "true; let mut v1134 = v1134"
                    let v1136 : bool = Fable.Core.RustInterop.emitRustExpr () v1135 
                    let v1137 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1138 : bool = Fable.Core.RustInterop.emitRustExpr v1134 v1137 
                    ()
            let v1139 : string = "$0"
            let v1140 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v1139 
            let v1141 : string = "v1140.lock()"
            let v1142 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1141 
            let v1143 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1144 : string = "$0.unwrap()"
            let v1145 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1142 v1144 
            let _v1143 = v1145 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1146 : string = "$0.unwrap()"
            let v1147 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1142 v1146 
            let _v1143 = v1147 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1148 : string = "$0.unwrap()"
            let v1149 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1142 v1148 
            let _v1143 = v1149 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1150 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1150 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1151 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1151 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1152 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1152 
            #endif
#else
            let v1153 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1153 
            #endif
            let v1154 : std_sync_MutexGuard<std_process_Child option> = _v1143 
            let v1157 : std_sync_MutexGuard<std_process_Child option> = method100(v1154)
            let v1158 : string = "true; let mut v1157 = v1157"
            let v1159 : bool = Fable.Core.RustInterop.emitRustExpr () v1158 
            let v1160 : string = "&mut $0"
            let v1161 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1157 v1160 
            let v1162 : string = "Option::take($0)"
            let v1163 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1161 v1162 
            let v1164 : string = "$0.unwrap()"
            let v1165 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1163 v1164 
            let v1166 : string = "$0.wait_with_output()"
            let v1167 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1165 v1166 
            let v1168 : (std_io_Error -> std_string_String) = method46()
            let v1169 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1170 : string = "$0.map_err(|x| $1(x))"
            let v1171 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1167, v1168) v1170 
            let _v1169 = v1171 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1172 : string = "$0.map_err(|x| $1(x))"
            let v1173 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1167, v1168) v1172 
            let _v1169 = v1173 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1174 : string = "$0.map_err(|x| $1(x))"
            let v1175 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1167, v1168) v1174 
            let _v1169 = v1175 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1176 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1176 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1177 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1177 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1178 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1178 
            #endif
#else
            let v1179 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1179 
            #endif
            let v1180 : Result<std_process_Output, std_string_String> = _v1169 
            let v1183 : std_thread_JoinHandle<Result<unit, string>> = method117(v1042)
            let v1184 : string = "v1183"
            let v1185 : string = v1184 + v681 
            let v1186 : string = v1185 + v681 
            let v1187 : std_thread_JoinHandle<Result<unit, string>> = method117(v702)
            let v1188 : string = "v1187"
            let v1189 : string = ", "
            let v1190 : string = v1188 + v1189 
            let v1191 : string = v1190 + v1186 
            let v1192 : string = "vec![" + v1191 + "]"
            let v1193 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1192 
            let v1194 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1195 : bool = Fable.Core.RustInterop.emitRustExpr v1193 v1194 
            let v1196 : string = "x"
            let v1197 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1196 
            let v1198 : string = "std::thread::JoinHandle::join($0)"
            let v1199 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1197 v1198 
            let v1200 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1201 : string = "$0.unwrap()"
            let v1202 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1199 v1201 
            let _v1200 = v1202 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1203 : string = "$0.unwrap()"
            let v1204 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1199 v1203 
            let _v1200 = v1204 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1205 : string = "$0.unwrap()"
            let v1206 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1199 v1205 
            let _v1200 = v1206 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1207 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1207 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1208 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1208 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1209 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1209 
            #endif
#else
            let v1210 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1210 
            #endif
            let v1211 : Result<unit, string> = _v1200 
            let v1214 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1215 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1211 v1215 
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1216 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1211 v1216 
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1217 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1211 v1217 
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
#else
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
            _v1214 
            let v1218 : string = $"true"
            let v1219 : bool = Fable.Core.RustInterop.emitRustExpr () v1218 
            let v1220 : string = "true; }}); { //"
            let v1221 : bool = Fable.Core.RustInterop.emitRustExpr () v1220 
            let v1222 : (std_process_Output -> US29) = method118()
            let v1223 : (std_string_String -> US29) = method119()
            let v1224 : US29 = match v1180 with Ok x -> v1222 x | Error x -> v1223 x
            match v1224 with
            | US29_1(v1307) -> (* Error *)
                let v1308 : unit = ()
                let v1309 : (unit -> unit) = closure49(v1307)
                let v1310 : unit = (fun () -> v1309 (); v1308) ()
                let v1350 : US7 = US7_0(v1307)
                let v1351 : US25 = US25_1
                struct (-2, v1350, v1351)
            | US29_0(v1225) -> (* Ok *)
                let v1226 : string = "$0.status"
                let v1227 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1225 v1226 
                let v1228 : string = "$0.code()"
                let v1229 : int32 option = Fable.Core.RustInterop.emitRustExpr v1227 v1228 
                let v1230 : (int32 -> US30) = method121()
                let v1231 : US30 option = v1229 |> Option.map v1230 
                let v1242 : US30 = US30_1
                let v1243 : US30 = v1231 |> Option.defaultValue v1242 
                match v1243 with
                | US30_1 -> (* None *)
                    let v1250 : string = "runtime.execute_with_options / exit_code=None"
                    let v1251 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1252 : string = "&*$0"
                    let v1253 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1250 v1252 
                    let _v1251 = v1253 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1254 : string = "&*$0"
                    let v1255 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1250 v1254 
                    let _v1251 = v1255 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1256 : string = "&*$0"
                    let v1257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1250 v1256 
                    let _v1251 = v1257 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1258 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1258 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1261 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1261 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1264 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1264 
                    #endif
#else
                    let v1267 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1267 
                    #endif
                    let v1270 : Ref<Str> = _v1251 
                    let v1275 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1276 : string = "String::from($0)"
                    let v1277 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1270 v1276 
                    let _v1275 = v1277 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1278 : string = "String::from($0)"
                    let v1279 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1270 v1278 
                    let _v1275 = v1279 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1280 : string = "String::from($0)"
                    let v1281 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1270 v1280 
                    let _v1275 = v1281 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1282 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1282 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1285 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1285 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1288 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1288 
                    #endif
#else
                    let v1291 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1291 
                    #endif
                    let v1294 : std_string_String = _v1275 
                    let v1299 : US7 = US7_0(v1294)
                    let v1300 : US25 = US25_0(v408)
                    struct (-1, v1299, v1300)
                | US30_0(v1247) -> (* Some *)
                    let v1248 : US7 = US7_1
                    let v1249 : US25 = US25_0(v408)
                    struct (v1247, v1248, v1249)
    let v1415 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v1408 with
        | US25_1 -> (* None *)
            let v1413 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v1413
        | US25_0(v1409) -> (* Some *)
            let v1410 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v1409 
            v1410
    let v1416 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v1417 : bool = Fable.Core.RustInterop.emitRustExpr v1415 v1416 
    let v1418 : string = "x"
    let v1419 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1418 
    let v1420 : string = "$0"
    let v1421 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1419 v1420 
    let v1422 : string = "v1421.lock()"
    let v1423 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v1422 
    let v1424 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1425 : string = "$0.unwrap()"
    let v1426 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1423 v1425 
    let _v1424 = v1426 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1427 : string = "$0.unwrap()"
    let v1428 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1423 v1427 
    let _v1424 = v1428 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1429 : string = "$0.unwrap()"
    let v1430 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1423 v1429 
    let _v1424 = v1430 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1431 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1431 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1432 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1432 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1433 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1433 
    #endif
#else
    let v1434 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1434 
    #endif
    let v1435 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _v1424 
    let v1438 : string = "$0.iter()"
    let v1439 : _ = Fable.Core.RustInterop.emitRustExpr v1435 v1438 
    let v1440 : string = "$0.collect::<Vec<_>>()"
    let v1441 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1439 v1440 
    let v1442 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v1443 : bool = Fable.Core.RustInterop.emitRustExpr v1441 v1442 
    let v1444 : string = "x"
    let v1445 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1444 
    let v1446 : string = "fable_library_rust::String_::fromString($0)"
    let v1447 : string = Fable.Core.RustInterop.emitRustExpr v1445 v1446 
    let v1448 : string = "true; $0 }).collect::<Vec<_>>()"
    let v1449 : bool = Fable.Core.RustInterop.emitRustExpr v1447 v1448 
    let v1450 : string = "_vec_map"
    let v1451 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1450 
    let v1452 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v1453 : (string []) = Fable.Core.RustInterop.emitRustExpr v1451 v1452 
    let v1454 : string seq = v1453 |> Seq.ofArray
    let v1457 : string = method40()
    let v1458 : (string -> (string seq -> string)) = String.concat
    let v1459 : (string seq -> string) = v1458 v1457
    let v1460 : string = v1459 v1454
    let v1464 : string = "true; $0 })"
    let v1465 : bool = Fable.Core.RustInterop.emitRustExpr v1460 v1464 
    let v1466 : string = "_optionm_map_"
    let v1467 : string option = Fable.Core.RustInterop.emitRustExpr () v1466 
    let v1474 : US5 =
        match v1407 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v1468) -> (* Some *)
            let v1469 : string = "fable_library_rust::String_::fromString($0)"
            let v1470 : string = Fable.Core.RustInterop.emitRustExpr v1468 v1469 
            US5_0(v1470)
    let v1478 : string =
        match v1474 with
        | US5_1 -> (* None *)
            let v1476 : string = ""
            v1476
        | US5_0(v1475) -> (* Some *)
            v1475
    let v1479 : string = v1467 |> Option.defaultValue v1478 
    let v1482 : unit = ()
    let v1483 : (unit -> unit) = closure51(v1406, v1479)
    let v1484 : unit = (fun () -> v1483 (); v1482) ()
    let v1525 : (int32 * string) = v1406, v1479 
    v1525 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v138 <- Some x
    let v1526 : (int32 * string) = match _v138 with Some x -> x | None -> failwith "base.capture / _v138=None"
    let (a, b) = v1526 
    let v2913 : int32 = a
    let v2914 : string = b
    let _v7 = struct (v2913, v2914) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v2919 : int32, v2920 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2919, v2920) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v2925 : int32, v2926 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2925, v2926) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v2931 : int32, v2932 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2931, v2932) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v2937 : int32, v2938 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2937, v2938) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v2943 : int32, v2944 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2943, v2944) 
    #endif
#else
    let v2949 : Async<struct (int32 * string)> = method124(v0, v1, v2, v3, v4, v5, v6)
    let v2950 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v2951 : int32, v2952 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2951, v2952) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v2957 : int32, v2958 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2957, v2958) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v2963 : int32, v2964 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2963, v2964) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v2969 : int32, v2970 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2969, v2970) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2975 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2976 : int32, v2977 : string) = v2975 v2949
    let _v2950 = struct (v2976, v2977) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2978 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2979 : int32, v2980 : string) = v2978 v2949
    let _v2950 = struct (v2979, v2980) 
    #endif
#else
    let v2981 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2982 : int32, v2983 : string) = v2981 v2949
    let _v2950 = struct (v2982, v2983) 
    #endif
    let struct (v2984 : int32, v2985 : string) = _v2950 
    let _v7 = struct (v2984, v2985) 
    #endif
    let struct (v2994 : int32, v2995 : string) = _v7 
    struct (v2994, v2995)
and method135 (v0 : US10, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "env"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : string = $"%A{v0}"
    let v36 : string = $"{v33}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v5, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v5, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v53 : string = "exit_code"
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v62 : string = $"{v24}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v70 : string = $"{v1}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = $"{v44}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v86 : string = "run_result"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = $"{v24}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v5, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = $"{v2}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v111 : string = $"{v44}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v119 : string = "new_code_path"
    let v120 : string = $"{v119}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v5, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v128 : string = $"{v24}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = $"{v3}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v5, v136)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v144 : string = " }"
    let v145 : string = $"{v144}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v5, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = v5.l0
    v153
and method134 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US10, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method135(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_cuda / env install error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure61 (v0 : US10, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method134(v22, v23, v24, v25, v26, v27, v40, v41, v0, v3, v2, v1)
        method19(v42)
and closure62 () (v0 : string) : US5 =
    US5_0(v0)
and closure63 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method40()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method137 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _v33 = v55 
    #endif
    let v58 : string = _v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "run_result"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "new_code_path"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "external_command"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method136 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method137(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_cuda / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure65 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method136(v22, v23, v24, v25, v26, v27, v40, v41, v3, v1, v0, v2)
        method19(v42)
and closure64 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure65(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method139 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : string = $"{v0}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = "; "
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v5, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = "run_result"
    let v51 : string = $"{v50}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v5, v51)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v59 : string = $"{v24}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v5, v59)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v67 : string = $"{v1}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v5, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v75 : string = $"{v41}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v5, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v83 : string = "new_code_path"
    let v84 : string = $"{v83}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v5, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v92 : string = $"{v24}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v100 : string = $"{v2}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v5, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v108 : string = $"{v41}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v5, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = "external_command"
    let v117 : string = $"{v116}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v5, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v125 : string = $"{v24}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v5, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = $"{v3}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v141 : string = " }"
    let v142 : string = $"{v141}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v150 : string = v5.l0
    v150
and method138 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method139(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_cuda / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure66 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method138(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and closure67 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "&*$0"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "&*$0"
    let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v63 
    #endif
#else
    let v66 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v66 
    #endif
    let v69 : Ref<Str> = _v50 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "String::from($0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "String::from($0)"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v87 
    #endif
#else
    let v90 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v90 
    #endif
    let v93 : std_string_String = _v74 
    let v98 : (std_string_String * std_string_String) = v45, v93 
    v98
and method140 () : string =
    let v0 : string = "fs-path"
    v0
and method141 () : string =
    let v0 : string = "command"
    v0
and method142 () : string =
    let v0 : string = "path"
    v0
and method151 (v0 : std_io_Error) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "fable_library_rust::String_::fromString($0)"
    let v7 : string = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _v3 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _v3 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : string = $"%A{v0}"
    let _v3 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : string = $"%A{v0}"
    let _v3 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : string = $"%A{v0}"
    let _v3 = v22 
    #endif
#else
    let v25 : string = $"%A{v0}"
    let _v3 = v25 
    #endif
    let v28 : string = _v3 
    let v33 : string = $"{v28}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = v2.l0
    v41
and closure69 () (v0 : std_io_Error) : string =
    method151(v0)
and method150 () : (std_io_Error -> string) =
    closure69()
and closure70 () (v0 : std_path_PathBuf) : US33 =
    US33_0(v0)
and method152 () : (std_path_PathBuf -> US33) =
    closure70()
and closure71 () (v0 : string) : US33 =
    US33_1(v0)
and method153 () : (string -> US33) =
    closure71()
and method156 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"{v0}"
    let v6 : unit = ()
    let v7 : (unit -> unit) = closure7(v2, v3)
    let v8 : unit = (fun () -> v7 (); v6) ()
    let v11 : string = v2.l0
    v11
and method155 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method63(v4)
    let v6 : string option = method34(v4)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v6 |> Option.map v7 
    let v19 : US5 = US5_1
    let v20 : US5 = v8 |> Option.defaultValue v19 
    let v24 : string = method156(v3)
    let v25 : bool = v2 >= 11uy
    if v25 then
        let v26 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v27 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v28 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v29 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v28 
        let _v27 = v29 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v30 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v31 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v30 
        let _v27 = v31 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v32 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v33 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v32 
        let _v27 = v33 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v34 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v34 
        #endif
#if FABLE_COMPILER_PYTHON
        let v37 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v37 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v40 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v40 
        #endif
#else
        let v43 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v43 
        #endif
        let v46 : std_io_Error = _v27 
        let v51 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v52 : string = "Err($0)"
        let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v52 
        let _v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : string = "Err($0)"
        let v55 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v54 
        let _v51 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v56 : string = "Err($0)"
        let v57 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v56 
        let _v51 = v57 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v58 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v58 
        #endif
#if FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v59 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v60 
        #endif
#else
        let v61 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v61 
        #endif
        let v62 : Result<std_path_PathBuf, std_io_Error> = _v51 
        v62
    else
        match v20 with
        | US5_0(v65) -> (* Some *)
            let v66 : string = ""
            let v67 : bool = v4 <> v66 
            if v67 then
                let v70 : uint8 = v2 + 1uy
                let v71 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v70
                let v72 : Result<std_path_PathBuf, std_io_Error> = v71 v65
                let v73 : (std_io_Error -> string) = method150()
                let v74 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v75 : string = "$0.map_err(|x| $1(x))"
                let v76 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v75 
                let _v74 = v76 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v77 : string = "$0.map_err(|x| $1(x))"
                let v78 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v77 
                let _v74 = v78 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79 : string = "$0.map_err(|x| $1(x))"
                let v80 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v79 
                let _v74 = v80 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v81 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v81 
                #endif
#if FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v82 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v83 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v83 
                #endif
#else
                let v84 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v84 
                #endif
                let v85 : Result<std_path_PathBuf, string> = _v74 
                let v88 : (std_path_PathBuf -> US33) = method152()
                let v89 : (string -> US33) = method153()
                let v90 : US33 = match v85 with Ok x -> v88 x | Error x -> v89 x
                match v90 with
                | US33_1(v206) -> (* Error *)
                    let v207 : string = $"file_system.read_link / error': {v206} / error: {v24} / name: {v5}"
                    let v208 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v209 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v210 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v209 
                    let _v208 = v210 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v211 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v212 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v211 
                    let _v208 = v212 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v213 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v214 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v213 
                    let _v208 = v214 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v215 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v215 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v218 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v218 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v221 
                    #endif
#else
                    let v224 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v224 
                    #endif
                    let v227 : std_io_Error = _v208 
                    let v232 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v233 : string = "Err($0)"
                    let v234 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v233 
                    let _v232 = v234 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v235 : string = "Err($0)"
                    let v236 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v235 
                    let _v232 = v236 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v237 : string = "Err($0)"
                    let v238 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v237 
                    let _v232 = v238 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v239 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v240 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v241 
                    #endif
#else
                    let v242 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v242 
                    #endif
                    let v243 : Result<std_path_PathBuf, std_io_Error> = _v232 
                    v243
                | US33_0(v91) -> (* Ok *)
                    let v92 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v93 : string = "$0.display()"
                    let v94 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v93 
                    let _v92 = v94 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v95 : string = "$0.display()"
                    let v96 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v95 
                    let _v92 = v96 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v97 : string = "$0.display()"
                    let v98 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v97 
                    let _v92 = v98 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v99 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v99 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v102 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v102 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v105 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v105 
                    #endif
#else
                    let v108 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v108 
                    #endif
                    let v111 : std_path_Display = _v92 
                    let v116 : string = v111 |> string 
                    let v119 : string = method28(v116, v5)
                    let v120 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v121 : string = "&*$0"
                    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v121 
                    let _v120 = v122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v123 : string = "&*$0"
                    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v123 
                    let _v120 = v124 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v125 : string = "&*$0"
                    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v125 
                    let _v120 = v126 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v133 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v133 
                    #endif
#else
                    let v136 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v136 
                    #endif
                    let v139 : Ref<Str> = _v120 
                    let v144 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v145 : string = "String::from($0)"
                    let v146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v145 
                    let _v144 = v146 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v147 : string = "String::from($0)"
                    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v147 
                    let _v144 = v148 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v149 : string = "String::from($0)"
                    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v149 
                    let _v144 = v150 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v151 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v151 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v154 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v154 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v157 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v157 
                    #endif
#else
                    let v160 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v160 
                    #endif
                    let v163 : std_string_String = _v144 
                    let v168 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "std::path::PathBuf::from($0)"
                    let v170 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "std::path::PathBuf::from($0)"
                    let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "std::path::PathBuf::from($0)"
                    let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v175 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v175 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v178 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v178 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v181 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v181 
                    #endif
#else
                    let v184 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v184 
                    #endif
                    let v187 : std_path_PathBuf = _v168 
                    let v192 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v193 : string = "Ok($0)"
                    let v194 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v193 
                    let _v192 = v194 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v195 : string = "Ok($0)"
                    let v196 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v195 
                    let _v192 = v196 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v197 : string = "Ok($0)"
                    let v198 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v197 
                    let _v192 = v198 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v199 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v200 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v201 
                    #endif
#else
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v202 
                    #endif
                    let v203 : Result<std_path_PathBuf, std_io_Error> = _v192 
                    v203
            else
                let v248 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
                let v249 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v250 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v251 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v250 
                let _v249 = v251 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v252 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v253 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v252 
                let _v249 = v253 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v254 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v255 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v254 
                let _v249 = v255 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v256 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v256 
                #endif
#if FABLE_COMPILER_PYTHON
                let v259 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v259 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v262 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v262 
                #endif
#else
                let v265 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v265 
                #endif
                let v268 : std_io_Error = _v249 
                let v273 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v274 : string = "Err($0)"
                let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v274 
                let _v273 = v275 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v276 : string = "Err($0)"
                let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v276 
                let _v273 = v277 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v278 : string = "Err($0)"
                let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v278 
                let _v273 = v279 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v280 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v280 
                #endif
#if FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v281 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v282 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v282 
                #endif
#else
                let v283 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v283 
                #endif
                let v284 : Result<std_path_PathBuf, std_io_Error> = _v273 
                v284
        | _ ->
            let v288 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
            let v289 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v290 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v291 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v290 
            let _v289 = v291 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v292 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v293 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v292 
            let _v289 = v293 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v294 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v295 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v294 
            let _v289 = v295 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v296 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v296 
            #endif
#if FABLE_COMPILER_PYTHON
            let v299 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v299 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v302 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v302 
            #endif
#else
            let v305 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v305 
            #endif
            let v308 : std_io_Error = _v289 
            let v313 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v314 : string = "Err($0)"
            let v315 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v314 
            let _v313 = v315 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v316 : string = "Err($0)"
            let v317 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v316 
            let _v313 = v317 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v318 : string = "Err($0)"
            let v319 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v318 
            let _v313 = v319 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v320 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v320 
            #endif
#if FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v321 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v322 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v322 
            #endif
#else
            let v323 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v323 
            #endif
            let v324 : Result<std_path_PathBuf, std_io_Error> = _v313 
            v324
and method154 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "std::fs::read_link(&*$0)"
    let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let v6 : (std_io_Error -> string) = method150()
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v8 
    let _v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "$0.map_err(|x| $1(x))"
    let v11 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v10 
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v12 
    let _v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v16 
    #endif
#else
    let v17 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v17 
    #endif
    let v18 : Result<std_path_PathBuf, string> = _v7 
    let v21 : (std_path_PathBuf -> US33) = method152()
    let v22 : (string -> US33) = method153()
    let v23 : US33 = match v18 with Ok x -> v21 x | Error x -> v22 x
    let v43 : Result<std_path_PathBuf, std_io_Error> =
        match v23 with
        | US33_1(v39) -> (* Error *)
            let v40 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method155(v0, v40, v1, v39, v2)
        | US33_0(v24) -> (* Ok *)
            let v25 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v26 : string = "Ok($0)"
            let v27 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v26 
            let _v25 = v27 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v28 : string = "Ok($0)"
            let v29 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v28 
            let _v25 = v29 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v30 : string = "Ok($0)"
            let v31 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v30 
            let _v25 = v31 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v32 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v32 
            #endif
#if FABLE_COMPILER_PYTHON
            let v33 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v33 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v34 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v34 
            #endif
#else
            let v35 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v35 
            #endif
            let v36 : Result<std_path_PathBuf, std_io_Error> = _v25 
            v36
    let _v3 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "std::fs::read_link(&*$0)"
    let v45 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v44 
    let v46 : (std_io_Error -> string) = method150()
    let v47 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "$0.map_err(|x| $1(x))"
    let v49 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v48 
    let _v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "$0.map_err(|x| $1(x))"
    let v51 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v50 
    let _v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "$0.map_err(|x| $1(x))"
    let v53 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v52 
    let _v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v56 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v56 
    #endif
#else
    let v57 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v57 
    #endif
    let v58 : Result<std_path_PathBuf, string> = _v47 
    let v61 : (std_path_PathBuf -> US33) = method152()
    let v62 : (string -> US33) = method153()
    let v63 : US33 = match v58 with Ok x -> v61 x | Error x -> v62 x
    let v83 : Result<std_path_PathBuf, std_io_Error> =
        match v63 with
        | US33_1(v79) -> (* Error *)
            let v80 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method155(v0, v80, v1, v79, v2)
        | US33_0(v64) -> (* Ok *)
            let v65 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v66 : string = "Ok($0)"
            let v67 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v66 
            let _v65 = v67 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v68 : string = "Ok($0)"
            let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v68 
            let _v65 = v69 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v70 : string = "Ok($0)"
            let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v70 
            let _v65 = v71 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v72 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v72 
            #endif
#if FABLE_COMPILER_PYTHON
            let v73 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v73 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v74 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v74 
            #endif
#else
            let v75 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v75 
            #endif
            let v76 : Result<std_path_PathBuf, std_io_Error> = _v65 
            v76
    let _v3 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "std::fs::read_link(&*$0)"
    let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v84 
    let v86 : (std_io_Error -> string) = method150()
    let v87 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v88 : string = "$0.map_err(|x| $1(x))"
    let v89 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v88 
    let _v87 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v90 : string = "$0.map_err(|x| $1(x))"
    let v91 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v90 
    let _v87 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v92 : string = "$0.map_err(|x| $1(x))"
    let v93 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v92 
    let _v87 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v94 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v94 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v96 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v96 
    #endif
#else
    let v97 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v97 
    #endif
    let v98 : Result<std_path_PathBuf, string> = _v87 
    let v101 : (std_path_PathBuf -> US33) = method152()
    let v102 : (string -> US33) = method153()
    let v103 : US33 = match v98 with Ok x -> v101 x | Error x -> v102 x
    let v123 : Result<std_path_PathBuf, std_io_Error> =
        match v103 with
        | US33_1(v119) -> (* Error *)
            let v120 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method155(v0, v120, v1, v119, v2)
        | US33_0(v104) -> (* Ok *)
            let v105 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v106 : string = "Ok($0)"
            let v107 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v106 
            let _v105 = v107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v108 : string = "Ok($0)"
            let v109 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v108 
            let _v105 = v109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v110 : string = "Ok($0)"
            let v111 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v110 
            let _v105 = v111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v112 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v114 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v114 
            #endif
#else
            let v115 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v115 
            #endif
            let v116 : Result<std_path_PathBuf, std_io_Error> = _v105 
            v116
    let _v3 = v123 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v124 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v124 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v130 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v130 
    #endif
#else
    let v133 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v133 
    #endif
    let v136 : Result<std_path_PathBuf, std_io_Error> = _v3 
    v136
and closure73 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method154(v0, v1, v2)
and closure72 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure73(v0, v1)
and method157 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method63(v0)
    let v5 : string option = method34(v0)
    let v6 : (string -> US5) = method6()
    let v7 : US5 option = v5 |> Option.map v6 
    let v18 : US5 = US5_1
    let v19 : US5 = v7 |> Option.defaultValue v18 
    let v23 : string = method156(v3)
    let v24 : bool = v2 >= 11uy
    if v24 then
        let v25 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v26 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v27 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v28 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v27 
        let _v26 = v28 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v29 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v30 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v29 
        let _v26 = v30 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v31 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v32 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v31 
        let _v26 = v32 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v36 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v39 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v39 
        #endif
#else
        let v42 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v42 
        #endif
        let v45 : std_io_Error = _v26 
        let v50 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : string = "Err($0)"
        let v52 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v51 
        let _v50 = v52 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v53 : string = "Err($0)"
        let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v53 
        let _v50 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v55 : string = "Err($0)"
        let v56 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v55 
        let _v50 = v56 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v57 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v57 
        #endif
#if FABLE_COMPILER_PYTHON
        let v58 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v58 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v59 
        #endif
#else
        let v60 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v60 
        #endif
        let v61 : Result<std_path_PathBuf, std_io_Error> = _v50 
        v61
    else
        match v19 with
        | US5_0(v64) -> (* Some *)
            let v65 : string = ""
            let v66 : bool = v0 <> v65 
            if v66 then
                let v69 : uint8 = v2 + 1uy
                let v70 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v69
                let v71 : Result<std_path_PathBuf, std_io_Error> = v70 v64
                let v72 : (std_io_Error -> string) = method150()
                let v73 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v74 : string = "$0.map_err(|x| $1(x))"
                let v75 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v74 
                let _v73 = v75 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76 : string = "$0.map_err(|x| $1(x))"
                let v77 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v76 
                let _v73 = v77 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v78 : string = "$0.map_err(|x| $1(x))"
                let v79 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v78 
                let _v73 = v79 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v80 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v80 
                #endif
#if FABLE_COMPILER_PYTHON
                let v81 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v81 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v82 
                #endif
#else
                let v83 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v83 
                #endif
                let v84 : Result<std_path_PathBuf, string> = _v73 
                let v87 : (std_path_PathBuf -> US33) = method152()
                let v88 : (string -> US33) = method153()
                let v89 : US33 = match v84 with Ok x -> v87 x | Error x -> v88 x
                match v89 with
                | US33_1(v205) -> (* Error *)
                    let v206 : string = $"file_system.read_link / error': {v205} / error: {v23} / name: {v4}"
                    let v207 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v208 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v209 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v208 
                    let _v207 = v209 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v210 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v211 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v210 
                    let _v207 = v211 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v212 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v213 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v212 
                    let _v207 = v213 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v214 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v214 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v220 
                    #endif
#else
                    let v223 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v223 
                    #endif
                    let v226 : std_io_Error = _v207 
                    let v231 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v232 : string = "Err($0)"
                    let v233 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v232 
                    let _v231 = v233 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v234 : string = "Err($0)"
                    let v235 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v234 
                    let _v231 = v235 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v236 : string = "Err($0)"
                    let v237 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v236 
                    let _v231 = v237 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v238 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v238 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v239 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v240 
                    #endif
#else
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v241 
                    #endif
                    let v242 : Result<std_path_PathBuf, std_io_Error> = _v231 
                    v242
                | US33_0(v90) -> (* Ok *)
                    let v91 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v92 : string = "$0.display()"
                    let v93 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v92 
                    let _v91 = v93 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v94 : string = "$0.display()"
                    let v95 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v94 
                    let _v91 = v95 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v96 : string = "$0.display()"
                    let v97 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v96 
                    let _v91 = v97 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v98 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v98 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v101 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v101 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v104 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v104 
                    #endif
#else
                    let v107 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v107 
                    #endif
                    let v110 : std_path_Display = _v91 
                    let v115 : string = v110 |> string 
                    let v118 : string = method28(v115, v4)
                    let v119 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "&*$0"
                    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v120 
                    let _v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "&*$0"
                    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v122 
                    let _v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "&*$0"
                    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                    let _v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v129 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v129 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v132 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v132 
                    #endif
#else
                    let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v135 
                    #endif
                    let v138 : Ref<Str> = _v119 
                    let v143 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v144 : string = "String::from($0)"
                    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v144 
                    let _v143 = v145 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v146 : string = "String::from($0)"
                    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v146 
                    let _v143 = v147 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v148 : string = "String::from($0)"
                    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v148 
                    let _v143 = v149 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v150 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v150 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v153 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v153 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v156 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v156 
                    #endif
#else
                    let v159 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v159 
                    #endif
                    let v162 : std_string_String = _v143 
                    let v167 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v168 : string = "std::path::PathBuf::from($0)"
                    let v169 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v168 
                    let _v167 = v169 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v170 : string = "std::path::PathBuf::from($0)"
                    let v171 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v170 
                    let _v167 = v171 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v172 : string = "std::path::PathBuf::from($0)"
                    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v172 
                    let _v167 = v173 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v174 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v174 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v177 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v177 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v180 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v180 
                    #endif
#else
                    let v183 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v183 
                    #endif
                    let v186 : std_path_PathBuf = _v167 
                    let v191 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v192 : string = "Ok($0)"
                    let v193 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v192 
                    let _v191 = v193 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v194 : string = "Ok($0)"
                    let v195 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v194 
                    let _v191 = v195 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v196 : string = "Ok($0)"
                    let v197 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v196 
                    let _v191 = v197 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v199 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v200 
                    #endif
#else
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v201 
                    #endif
                    let v202 : Result<std_path_PathBuf, std_io_Error> = _v191 
                    v202
            else
                let v247 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
                let v248 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v249 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v250 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v249 
                let _v248 = v250 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v251 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v252 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v251 
                let _v248 = v252 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v253 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v254 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v253 
                let _v248 = v254 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v255 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v255 
                #endif
#if FABLE_COMPILER_PYTHON
                let v258 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v258 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v261 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v261 
                #endif
#else
                let v264 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v264 
                #endif
                let v267 : std_io_Error = _v248 
                let v272 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v273 : string = "Err($0)"
                let v274 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v273 
                let _v272 = v274 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v275 : string = "Err($0)"
                let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v275 
                let _v272 = v276 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v277 : string = "Err($0)"
                let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v277 
                let _v272 = v278 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v279 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v279 
                #endif
#if FABLE_COMPILER_PYTHON
                let v280 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v281 
                #endif
#else
                let v282 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v282 
                #endif
                let v283 : Result<std_path_PathBuf, std_io_Error> = _v272 
                v283
        | _ ->
            let v287 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
            let v288 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v289 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v290 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v289 
            let _v288 = v290 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v291 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v292 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v291 
            let _v288 = v292 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v293 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v294 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v293 
            let _v288 = v294 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v295 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v295 
            #endif
#if FABLE_COMPILER_PYTHON
            let v298 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v298 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v301 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v301 
            #endif
#else
            let v304 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v304 
            #endif
            let v307 : std_io_Error = _v288 
            let v312 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v313 : string = "Err($0)"
            let v314 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v313 
            let _v312 = v314 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v315 : string = "Err($0)"
            let v316 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v315 
            let _v312 = v316 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v317 : string = "Err($0)"
            let v318 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v317 
            let _v312 = v318 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v319 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v319 
            #endif
#if FABLE_COMPILER_PYTHON
            let v320 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v320 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v321 
            #endif
#else
            let v322 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v322 
            #endif
            let v323 : Result<std_path_PathBuf, std_io_Error> = _v312 
            v323
and method149 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "std::fs::read_link(&*$0)"
    let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : (std_io_Error -> string) = method150()
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v15 
    #endif
#else
    let v16 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v16 
    #endif
    let v17 : Result<std_path_PathBuf, string> = _v6 
    let v20 : (std_path_PathBuf -> US33) = method152()
    let v21 : (string -> US33) = method153()
    let v22 : US33 = match v17 with Ok x -> v20 x | Error x -> v21 x
    let v42 : Result<std_path_PathBuf, std_io_Error> =
        match v22 with
        | US33_1(v38) -> (* Error *)
            let v39 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method157(v0, v39, v1, v38)
        | US33_0(v23) -> (* Ok *)
            let v24 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v25 : string = "Ok($0)"
            let v26 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v25 
            let _v24 = v26 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : string = "Ok($0)"
            let v28 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v27 
            let _v24 = v28 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v29 : string = "Ok($0)"
            let v30 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v29 
            let _v24 = v30 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v33 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v33 
            #endif
#else
            let v34 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v34 
            #endif
            let v35 : Result<std_path_PathBuf, std_io_Error> = _v24 
            v35
    let _v2 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "std::fs::read_link(&*$0)"
    let v44 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v43 
    let v45 : (std_io_Error -> string) = method150()
    let v46 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "$0.map_err(|x| $1(x))"
    let v48 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v47 
    let _v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "$0.map_err(|x| $1(x))"
    let v50 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v49 
    let _v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "$0.map_err(|x| $1(x))"
    let v52 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v51 
    let _v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v53 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v53 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v55 
    #endif
#else
    let v56 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v56 
    #endif
    let v57 : Result<std_path_PathBuf, string> = _v46 
    let v60 : (std_path_PathBuf -> US33) = method152()
    let v61 : (string -> US33) = method153()
    let v62 : US33 = match v57 with Ok x -> v60 x | Error x -> v61 x
    let v82 : Result<std_path_PathBuf, std_io_Error> =
        match v62 with
        | US33_1(v78) -> (* Error *)
            let v79 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method157(v0, v79, v1, v78)
        | US33_0(v63) -> (* Ok *)
            let v64 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v65 : string = "Ok($0)"
            let v66 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v65 
            let _v64 = v66 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v67 : string = "Ok($0)"
            let v68 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v67 
            let _v64 = v68 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v69 : string = "Ok($0)"
            let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v69 
            let _v64 = v70 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v72 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v72 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v73 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v73 
            #endif
#else
            let v74 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v74 
            #endif
            let v75 : Result<std_path_PathBuf, std_io_Error> = _v64 
            v75
    let _v2 = v82 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v83 : string = "std::fs::read_link(&*$0)"
    let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v83 
    let v85 : (std_io_Error -> string) = method150()
    let v86 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "$0.map_err(|x| $1(x))"
    let v88 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v87 
    let _v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "$0.map_err(|x| $1(x))"
    let v90 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v89 
    let _v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "$0.map_err(|x| $1(x))"
    let v92 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v91 
    let _v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v95 
    #endif
#else
    let v96 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v96 
    #endif
    let v97 : Result<std_path_PathBuf, string> = _v86 
    let v100 : (std_path_PathBuf -> US33) = method152()
    let v101 : (string -> US33) = method153()
    let v102 : US33 = match v97 with Ok x -> v100 x | Error x -> v101 x
    let v122 : Result<std_path_PathBuf, std_io_Error> =
        match v102 with
        | US33_1(v118) -> (* Error *)
            let v119 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method157(v0, v119, v1, v118)
        | US33_0(v103) -> (* Ok *)
            let v104 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v105 : string = "Ok($0)"
            let v106 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v105 
            let _v104 = v106 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v107 : string = "Ok($0)"
            let v108 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v107 
            let _v104 = v108 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v109 : string = "Ok($0)"
            let v110 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v109 
            let _v104 = v110 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v111 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v111 
            #endif
#if FABLE_COMPILER_PYTHON
            let v112 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v112 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v113 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v113 
            #endif
#else
            let v114 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v114 
            #endif
            let v115 : Result<std_path_PathBuf, std_io_Error> = _v104 
            v115
    let _v2 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v126 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v126 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v129 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v129 
    #endif
#else
    let v132 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v132 
    #endif
    let v135 : Result<std_path_PathBuf, std_io_Error> = _v2 
    v135
and method160 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method63(v4)
    let v6 : string option = method34(v4)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v6 |> Option.map v7 
    let v19 : US5 = US5_1
    let v20 : US5 = v8 |> Option.defaultValue v19 
    let v24 : string = method151(v3)
    let v25 : bool = v2 >= 11uy
    if v25 then
        let v26 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v27 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v28 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v29 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v28 
        let _v27 = v29 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v30 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v31 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v30 
        let _v27 = v31 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v32 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v33 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v32 
        let _v27 = v33 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v34 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v34 
        #endif
#if FABLE_COMPILER_PYTHON
        let v37 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v37 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v40 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v40 
        #endif
#else
        let v43 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v43 
        #endif
        let v46 : std_io_Error = _v27 
        let v51 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v52 : string = "Err($0)"
        let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v52 
        let _v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : string = "Err($0)"
        let v55 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v54 
        let _v51 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v56 : string = "Err($0)"
        let v57 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v56 
        let _v51 = v57 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v58 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v58 
        #endif
#if FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v59 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v60 
        #endif
#else
        let v61 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v61 
        #endif
        let v62 : Result<std_path_PathBuf, std_io_Error> = _v51 
        v62
    else
        match v20 with
        | US5_0(v65) -> (* Some *)
            let v66 : string = ""
            let v67 : bool = v4 <> v66 
            if v67 then
                let v70 : uint8 = v2 + 1uy
                let v71 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v70
                let v72 : Result<std_path_PathBuf, std_io_Error> = v71 v65
                let v73 : (std_io_Error -> string) = method150()
                let v74 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v75 : string = "$0.map_err(|x| $1(x))"
                let v76 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v75 
                let _v74 = v76 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v77 : string = "$0.map_err(|x| $1(x))"
                let v78 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v77 
                let _v74 = v78 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79 : string = "$0.map_err(|x| $1(x))"
                let v80 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v79 
                let _v74 = v80 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v81 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v81 
                #endif
#if FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v82 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v83 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v83 
                #endif
#else
                let v84 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v84 
                #endif
                let v85 : Result<std_path_PathBuf, string> = _v74 
                let v88 : (std_path_PathBuf -> US33) = method152()
                let v89 : (string -> US33) = method153()
                let v90 : US33 = match v85 with Ok x -> v88 x | Error x -> v89 x
                match v90 with
                | US33_1(v206) -> (* Error *)
                    let v207 : string = $"file_system.read_link / error': {v206} / error: {v24} / name: {v5}"
                    let v208 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v209 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v210 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v209 
                    let _v208 = v210 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v211 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v212 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v211 
                    let _v208 = v212 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v213 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v214 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v213 
                    let _v208 = v214 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v215 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v215 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v218 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v218 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v221 
                    #endif
#else
                    let v224 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v224 
                    #endif
                    let v227 : std_io_Error = _v208 
                    let v232 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v233 : string = "Err($0)"
                    let v234 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v233 
                    let _v232 = v234 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v235 : string = "Err($0)"
                    let v236 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v235 
                    let _v232 = v236 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v237 : string = "Err($0)"
                    let v238 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v237 
                    let _v232 = v238 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v239 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v240 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v241 
                    #endif
#else
                    let v242 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v242 
                    #endif
                    let v243 : Result<std_path_PathBuf, std_io_Error> = _v232 
                    v243
                | US33_0(v91) -> (* Ok *)
                    let v92 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v93 : string = "$0.display()"
                    let v94 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v93 
                    let _v92 = v94 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v95 : string = "$0.display()"
                    let v96 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v95 
                    let _v92 = v96 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v97 : string = "$0.display()"
                    let v98 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v97 
                    let _v92 = v98 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v99 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v99 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v102 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v102 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v105 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v105 
                    #endif
#else
                    let v108 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v108 
                    #endif
                    let v111 : std_path_Display = _v92 
                    let v116 : string = v111 |> string 
                    let v119 : string = method28(v116, v5)
                    let v120 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v121 : string = "&*$0"
                    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v121 
                    let _v120 = v122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v123 : string = "&*$0"
                    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v123 
                    let _v120 = v124 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v125 : string = "&*$0"
                    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v125 
                    let _v120 = v126 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v133 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v133 
                    #endif
#else
                    let v136 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v136 
                    #endif
                    let v139 : Ref<Str> = _v120 
                    let v144 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v145 : string = "String::from($0)"
                    let v146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v145 
                    let _v144 = v146 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v147 : string = "String::from($0)"
                    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v147 
                    let _v144 = v148 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v149 : string = "String::from($0)"
                    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v149 
                    let _v144 = v150 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v151 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v151 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v154 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v154 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v157 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v157 
                    #endif
#else
                    let v160 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v160 
                    #endif
                    let v163 : std_string_String = _v144 
                    let v168 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "std::path::PathBuf::from($0)"
                    let v170 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "std::path::PathBuf::from($0)"
                    let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "std::path::PathBuf::from($0)"
                    let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v175 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v175 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v178 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v178 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v181 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v181 
                    #endif
#else
                    let v184 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v184 
                    #endif
                    let v187 : std_path_PathBuf = _v168 
                    let v192 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v193 : string = "Ok($0)"
                    let v194 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v193 
                    let _v192 = v194 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v195 : string = "Ok($0)"
                    let v196 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v195 
                    let _v192 = v196 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v197 : string = "Ok($0)"
                    let v198 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v197 
                    let _v192 = v198 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v199 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v200 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v201 
                    #endif
#else
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v202 
                    #endif
                    let v203 : Result<std_path_PathBuf, std_io_Error> = _v192 
                    v203
            else
                let v248 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
                let v249 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v250 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v251 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v250 
                let _v249 = v251 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v252 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v253 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v252 
                let _v249 = v253 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v254 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v255 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v254 
                let _v249 = v255 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v256 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v256 
                #endif
#if FABLE_COMPILER_PYTHON
                let v259 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v259 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v262 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v262 
                #endif
#else
                let v265 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v265 
                #endif
                let v268 : std_io_Error = _v249 
                let v273 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v274 : string = "Err($0)"
                let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v274 
                let _v273 = v275 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v276 : string = "Err($0)"
                let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v276 
                let _v273 = v277 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v278 : string = "Err($0)"
                let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v278 
                let _v273 = v279 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v280 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v280 
                #endif
#if FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v281 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v282 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v282 
                #endif
#else
                let v283 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v283 
                #endif
                let v284 : Result<std_path_PathBuf, std_io_Error> = _v273 
                v284
        | _ ->
            let v288 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
            let v289 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v290 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v291 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v290 
            let _v289 = v291 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v292 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v293 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v292 
            let _v289 = v293 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v294 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v295 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v294 
            let _v289 = v295 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v296 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v296 
            #endif
#if FABLE_COMPILER_PYTHON
            let v299 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v299 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v302 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v302 
            #endif
#else
            let v305 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v305 
            #endif
            let v308 : std_io_Error = _v289 
            let v313 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v314 : string = "Err($0)"
            let v315 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v314 
            let _v313 = v315 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v316 : string = "Err($0)"
            let v317 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v316 
            let _v313 = v317 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v318 : string = "Err($0)"
            let v319 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v318 
            let _v313 = v319 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v320 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v320 
            #endif
#if FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v321 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v322 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v322 
            #endif
#else
            let v323 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v323 
            #endif
            let v324 : Result<std_path_PathBuf, std_io_Error> = _v313 
            v324
and method159 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v19 
    #endif
#else
    let v22 : (string -> System_IO_DirectoryInfo) = System_IO_DirectoryInfo 
    let v23 : System_IO_DirectoryInfo = v22 v2
    let _v3 = v23 
    #endif
    let v24 : System_IO_DirectoryInfo = _v3 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v39 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v39 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v45 
    #endif
#else
    let v48 : System.IO.FileAttributes = v24.Attributes
    let _v29 = v48 
    #endif
    let v49 : System.IO.FileAttributes = _v29 
    let v54 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v55 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v70 
    #endif
#else
    let v73 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _v54 = v73 
    #endif
    let v74 : System.IO.FileAttributes = _v54 
    let v79 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : bool = null |> unbox<bool>
    let _v79 = v80 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : bool = null |> unbox<bool>
    let _v79 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v86 : bool = null |> unbox<bool>
    let _v79 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : bool = null |> unbox<bool>
    let _v79 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _v79 = v92 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : bool = null |> unbox<bool>
    let _v79 = v95 
    #endif
#else
    let v98 : bool = v49.HasFlag v74 
    let _v79 = v98 
    #endif
    let v99 : bool = _v79 
    if v99 then
        let v104 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v105 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v108 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v108 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v111 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v111 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v120 
        #endif
#else
        let v123 : (string -> System_IO_FileInfo) = System_IO_FileInfo 
        let v124 : System_IO_FileInfo = v123 v2
        let _v104 = v124 
        #endif
        let v125 : System_IO_FileInfo = _v104 
        let v130 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v131 : string = null |> unbox<string>
        let _v130 = v131 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v134 : string = null |> unbox<string>
        let _v130 = v134 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v137 : string = null |> unbox<string>
        let _v130 = v137 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v140 : string = null |> unbox<string>
        let _v130 = v140 
        #endif
#if FABLE_COMPILER_PYTHON
        let v143 : string = null |> unbox<string>
        let _v130 = v143 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v146 : string = null |> unbox<string>
        let _v130 = v146 
        #endif
#else
        let v149 : string = v125.LinkTarget
        let _v130 = v149 
        #endif
        let v150 : string = _v130 
        let v155 : std_path_PathBuf = v150 |> unbox<std_path_PathBuf>
        let v158 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v159 : string = "Ok($0)"
        let v160 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v155 v159 
        let _v158 = v160 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v161 : string = "Ok($0)"
        let v162 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v155 v161 
        let _v158 = v162 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v163 : string = "Ok($0)"
        let v164 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v155 v163 
        let _v158 = v164 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v165 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v165 
        #endif
#if FABLE_COMPILER_PYTHON
        let v166 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v166 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v167 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v167 
        #endif
#else
        let v168 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v168 
        #endif
        let v169 : Result<std_path_PathBuf, std_io_Error> = _v158 
        v169
    else
        let v172 : string = $"file_system.read_link / Fsharp / The file or directory is not a reparse point. / path: {v0} / result: {v99} / path': {v2} / n: {v1}"
        let v173 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v174 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v175 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v172 v174 
        let _v173 = v175 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v176 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v177 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v172 v176 
        let _v173 = v177 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v178 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v179 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v172 v178 
        let _v173 = v179 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v180 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v180 
        #endif
#if FABLE_COMPILER_PYTHON
        let v183 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v183 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v186 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v186 
        #endif
#else
        let v189 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v189 
        #endif
        let v192 : std_io_Error = _v173 
        let v197 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure74(v0)
        method160(v0, v197, v1, v192, v2)
and closure75 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method159(v0, v1, v2)
and closure74 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure75(v0, v1)
and method161 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method63(v0)
    let v5 : string option = method34(v0)
    let v6 : (string -> US5) = method6()
    let v7 : US5 option = v5 |> Option.map v6 
    let v18 : US5 = US5_1
    let v19 : US5 = v7 |> Option.defaultValue v18 
    let v23 : string = method151(v3)
    let v24 : bool = v2 >= 11uy
    if v24 then
        let v25 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v26 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v27 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v28 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v27 
        let _v26 = v28 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v29 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v30 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v29 
        let _v26 = v30 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v31 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v32 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v31 
        let _v26 = v32 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v36 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v39 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v39 
        #endif
#else
        let v42 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v42 
        #endif
        let v45 : std_io_Error = _v26 
        let v50 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : string = "Err($0)"
        let v52 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v51 
        let _v50 = v52 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v53 : string = "Err($0)"
        let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v53 
        let _v50 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v55 : string = "Err($0)"
        let v56 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v55 
        let _v50 = v56 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v57 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v57 
        #endif
#if FABLE_COMPILER_PYTHON
        let v58 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v58 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v59 
        #endif
#else
        let v60 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v60 
        #endif
        let v61 : Result<std_path_PathBuf, std_io_Error> = _v50 
        v61
    else
        match v19 with
        | US5_0(v64) -> (* Some *)
            let v65 : string = ""
            let v66 : bool = v0 <> v65 
            if v66 then
                let v69 : uint8 = v2 + 1uy
                let v70 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v69
                let v71 : Result<std_path_PathBuf, std_io_Error> = v70 v64
                let v72 : (std_io_Error -> string) = method150()
                let v73 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v74 : string = "$0.map_err(|x| $1(x))"
                let v75 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v74 
                let _v73 = v75 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76 : string = "$0.map_err(|x| $1(x))"
                let v77 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v76 
                let _v73 = v77 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v78 : string = "$0.map_err(|x| $1(x))"
                let v79 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v78 
                let _v73 = v79 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v80 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v80 
                #endif
#if FABLE_COMPILER_PYTHON
                let v81 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v81 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v82 
                #endif
#else
                let v83 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v83 
                #endif
                let v84 : Result<std_path_PathBuf, string> = _v73 
                let v87 : (std_path_PathBuf -> US33) = method152()
                let v88 : (string -> US33) = method153()
                let v89 : US33 = match v84 with Ok x -> v87 x | Error x -> v88 x
                match v89 with
                | US33_1(v205) -> (* Error *)
                    let v206 : string = $"file_system.read_link / error': {v205} / error: {v23} / name: {v4}"
                    let v207 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v208 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v209 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v208 
                    let _v207 = v209 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v210 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v211 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v210 
                    let _v207 = v211 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v212 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v213 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v212 
                    let _v207 = v213 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v214 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v214 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v220 
                    #endif
#else
                    let v223 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v223 
                    #endif
                    let v226 : std_io_Error = _v207 
                    let v231 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v232 : string = "Err($0)"
                    let v233 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v232 
                    let _v231 = v233 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v234 : string = "Err($0)"
                    let v235 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v234 
                    let _v231 = v235 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v236 : string = "Err($0)"
                    let v237 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v236 
                    let _v231 = v237 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v238 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v238 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v239 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v240 
                    #endif
#else
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v241 
                    #endif
                    let v242 : Result<std_path_PathBuf, std_io_Error> = _v231 
                    v242
                | US33_0(v90) -> (* Ok *)
                    let v91 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v92 : string = "$0.display()"
                    let v93 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v92 
                    let _v91 = v93 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v94 : string = "$0.display()"
                    let v95 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v94 
                    let _v91 = v95 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v96 : string = "$0.display()"
                    let v97 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v96 
                    let _v91 = v97 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v98 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v98 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v101 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v101 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v104 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v104 
                    #endif
#else
                    let v107 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v107 
                    #endif
                    let v110 : std_path_Display = _v91 
                    let v115 : string = v110 |> string 
                    let v118 : string = method28(v115, v4)
                    let v119 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "&*$0"
                    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v120 
                    let _v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "&*$0"
                    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v122 
                    let _v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "&*$0"
                    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                    let _v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v129 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v129 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v132 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v132 
                    #endif
#else
                    let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v135 
                    #endif
                    let v138 : Ref<Str> = _v119 
                    let v143 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v144 : string = "String::from($0)"
                    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v144 
                    let _v143 = v145 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v146 : string = "String::from($0)"
                    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v146 
                    let _v143 = v147 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v148 : string = "String::from($0)"
                    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v148 
                    let _v143 = v149 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v150 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v150 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v153 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v153 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v156 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v156 
                    #endif
#else
                    let v159 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v159 
                    #endif
                    let v162 : std_string_String = _v143 
                    let v167 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v168 : string = "std::path::PathBuf::from($0)"
                    let v169 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v168 
                    let _v167 = v169 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v170 : string = "std::path::PathBuf::from($0)"
                    let v171 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v170 
                    let _v167 = v171 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v172 : string = "std::path::PathBuf::from($0)"
                    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v172 
                    let _v167 = v173 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v174 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v174 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v177 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v177 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v180 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v180 
                    #endif
#else
                    let v183 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v183 
                    #endif
                    let v186 : std_path_PathBuf = _v167 
                    let v191 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v192 : string = "Ok($0)"
                    let v193 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v192 
                    let _v191 = v193 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v194 : string = "Ok($0)"
                    let v195 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v194 
                    let _v191 = v195 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v196 : string = "Ok($0)"
                    let v197 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v196 
                    let _v191 = v197 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v199 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v200 
                    #endif
#else
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v201 
                    #endif
                    let v202 : Result<std_path_PathBuf, std_io_Error> = _v191 
                    v202
            else
                let v247 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
                let v248 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v249 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v250 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v249 
                let _v248 = v250 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v251 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v252 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v251 
                let _v248 = v252 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v253 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v254 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v253 
                let _v248 = v254 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v255 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v255 
                #endif
#if FABLE_COMPILER_PYTHON
                let v258 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v258 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v261 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v261 
                #endif
#else
                let v264 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v264 
                #endif
                let v267 : std_io_Error = _v248 
                let v272 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v273 : string = "Err($0)"
                let v274 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v273 
                let _v272 = v274 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v275 : string = "Err($0)"
                let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v275 
                let _v272 = v276 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v277 : string = "Err($0)"
                let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v277 
                let _v272 = v278 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v279 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v279 
                #endif
#if FABLE_COMPILER_PYTHON
                let v280 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v281 
                #endif
#else
                let v282 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v282 
                #endif
                let v283 : Result<std_path_PathBuf, std_io_Error> = _v272 
                v283
        | _ ->
            let v287 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
            let v288 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v289 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v290 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v289 
            let _v288 = v290 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v291 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v292 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v291 
            let _v288 = v292 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v293 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v294 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v293 
            let _v288 = v294 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v295 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v295 
            #endif
#if FABLE_COMPILER_PYTHON
            let v298 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v298 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v301 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v301 
            #endif
#else
            let v304 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v304 
            #endif
            let v307 : std_io_Error = _v288 
            let v312 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v313 : string = "Err($0)"
            let v314 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v313 
            let _v312 = v314 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v315 : string = "Err($0)"
            let v316 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v315 
            let _v312 = v316 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v317 : string = "Err($0)"
            let v318 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v317 
            let _v312 = v318 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v319 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v319 
            #endif
#if FABLE_COMPILER_PYTHON
            let v320 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v320 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v321 
            #endif
#else
            let v322 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v322 
            #endif
            let v323 : Result<std_path_PathBuf, std_io_Error> = _v312 
            v323
and method158 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v18 
    #endif
#else
    let v21 : (string -> System_IO_DirectoryInfo) = System_IO_DirectoryInfo 
    let v22 : System_IO_DirectoryInfo = v21 v0
    let _v2 = v22 
    #endif
    let v23 : System_IO_DirectoryInfo = _v2 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v41 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v44 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v44 
    #endif
#else
    let v47 : System.IO.FileAttributes = v23.Attributes
    let _v28 = v47 
    #endif
    let v48 : System.IO.FileAttributes = _v28 
    let v53 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v54 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v57 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v69 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v69 
    #endif
#else
    let v72 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _v53 = v72 
    #endif
    let v73 : System.IO.FileAttributes = _v53 
    let v78 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v79 : bool = null |> unbox<bool>
    let _v78 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v82 : bool = null |> unbox<bool>
    let _v78 = v82 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : bool = null |> unbox<bool>
    let _v78 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v88 : bool = null |> unbox<bool>
    let _v78 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : bool = null |> unbox<bool>
    let _v78 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v94 : bool = null |> unbox<bool>
    let _v78 = v94 
    #endif
#else
    let v97 : bool = v48.HasFlag v73 
    let _v78 = v97 
    #endif
    let v98 : bool = _v78 
    if v98 then
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v104 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v107 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v107 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v110 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v110 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v113 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v113 
        #endif
#if FABLE_COMPILER_PYTHON
        let v116 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v116 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v119 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v119 
        #endif
#else
        let v122 : (string -> System_IO_FileInfo) = System_IO_FileInfo 
        let v123 : System_IO_FileInfo = v122 v0
        let _v103 = v123 
        #endif
        let v124 : System_IO_FileInfo = _v103 
        let v129 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v130 : string = null |> unbox<string>
        let _v129 = v130 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v133 : string = null |> unbox<string>
        let _v129 = v133 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v136 : string = null |> unbox<string>
        let _v129 = v136 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v139 : string = null |> unbox<string>
        let _v129 = v139 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : string = null |> unbox<string>
        let _v129 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v145 : string = null |> unbox<string>
        let _v129 = v145 
        #endif
#else
        let v148 : string = v124.LinkTarget
        let _v129 = v148 
        #endif
        let v149 : string = _v129 
        let v154 : std_path_PathBuf = v149 |> unbox<std_path_PathBuf>
        let v157 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v158 : string = "Ok($0)"
        let v159 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v154 v158 
        let _v157 = v159 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v160 : string = "Ok($0)"
        let v161 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v154 v160 
        let _v157 = v161 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v162 : string = "Ok($0)"
        let v163 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v154 v162 
        let _v157 = v163 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v164 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v164 
        #endif
#if FABLE_COMPILER_PYTHON
        let v165 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v165 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v166 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v166 
        #endif
#else
        let v167 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v167 
        #endif
        let v168 : Result<std_path_PathBuf, std_io_Error> = _v157 
        v168
    else
        let v171 : string = $"file_system.read_link / Fsharp / The file or directory is not a reparse point. / path: {v0} / result: {v98} / path': {v0} / n: {v1}"
        let v172 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v173 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v174 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v171 v173 
        let _v172 = v174 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v175 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v176 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v171 v175 
        let _v172 = v176 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v177 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v178 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v171 v177 
        let _v172 = v178 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v179 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v179 
        #endif
#if FABLE_COMPILER_PYTHON
        let v182 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v182 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v185 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v185 
        #endif
#else
        let v188 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v188 
        #endif
        let v191 : std_io_Error = _v172 
        let v196 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure74(v0)
        method161(v0, v196, v1, v191)
and method148 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = method32(v0)
    let v7 : Result<std_path_PathBuf, std_io_Error> =
        if v2 then
            let v3 : string = "std::fs::read_link(&*$0)"
            let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v3 
            v4
        else
            let v5 : uint8 = 0uy
            method149(v0, v5)
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : bool = method32(v0)
    let v13 : Result<std_path_PathBuf, std_io_Error> =
        if v8 then
            let v9 : string = "std::fs::read_link(&*$0)"
            let v10 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v9 
            v10
        else
            let v11 : uint8 = 0uy
            method149(v0, v11)
    let _v1 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : bool = method32(v0)
    let v19 : Result<std_path_PathBuf, std_io_Error> =
        if v14 then
            let v15 : string = "std::fs::read_link(&*$0)"
            let v16 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v15 
            v16
        else
            let v17 : uint8 = 0uy
            method149(v0, v17)
    let _v1 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v1 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _v1 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method158(v0, v24)
    let _v1 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method158(v0, v26)
    let _v1 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _v1 
    v28
and closure76 () (v0 : std_path_PathBuf) : US34 =
    US34_0(v0)
and method162 () : (std_path_PathBuf -> US34) =
    closure76()
and method164 (v0 : string) : string =
    v0
and method163 (v0 : string, v1 : string, v2 : string) : string =
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = $"regex::Regex::new(&$0)"
    let v5 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.unwrap()"
    let v8 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v15 
    #endif
#else
    let v16 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v16 
    #endif
    let v17 : regex_Regex = _v6 
    let v20 : string = method164(v2)
    let v21 : string = $"$0.replace_all(&*$1, &*$2)"
    let v22 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v17, v20, v1) v21 
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let _v3 = v26 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : string = null |> unbox<string>
    let _v3 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = null |> unbox<string>
    let _v3 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : string = null |> unbox<string>
    let _v3 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : string = null |> unbox<string>
    let _v3 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : string = null |> unbox<string>
    let _v3 = v39 
    #endif
#else
    let v42 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _v3 = v42 
    #endif
    let v43 : string = _v3 
    v43
and method147 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method148(v0)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "$0.ok()"
        let v6 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v5 
        let _v4 = v6 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v7 : string = "$0.ok()"
        let v8 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v7 
        let _v4 = v8 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v9 : string = "$0.ok()"
        let v10 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v9 
        let _v4 = v10 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v11 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v11 
        #endif
#if FABLE_COMPILER_PYTHON
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v12 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v13 
        #endif
#else
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v14 
        #endif
        let v15 : std_path_PathBuf option = _v4 
        let v18 : (std_path_PathBuf -> US34) = method162()
        let v19 : US34 option = v15 |> Option.map v18 
        let v30 : US34 = US34_1
        let v31 : US34 = v19 |> Option.defaultValue v30 
        let v66 : string =
            match v31 with
            | US34_1 -> (* None *)
                v0
            | US34_0(v35) -> (* Some *)
                let v36 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v37 : string = "$0.display()"
                let v38 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v37 
                let _v36 = v38 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v39 : string = "$0.display()"
                let v40 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v39 
                let _v36 = v40 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v41 : string = "$0.display()"
                let v42 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v41 
                let _v36 = v42 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v43 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v43 
                #endif
#if FABLE_COMPILER_PYTHON
                let v46 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v46 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v49 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v49 
                #endif
#else
                let v52 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v52 
                #endif
                let v55 : std_path_Display = _v36 
                let v60 : string = v55 |> string 
                let v63 : bool = v60 = ""
                if v63 then
                    v0
                else
                    v60
        let v67 : bool = v66 = ""
        if v67 then
            let v68 : string = ""
            v68
        else
            let v69 : string = "^\\\\\\\\\\?\\\\"
            let v70 : string = ""
            let v71 : string = method163(v69, v70, v66)
            let v72 : string = $"{v71.[0] |> string |> _.ToLower()}{v71.[1..]}"
            let v73 : string = "\\"
            let v74 : string = "/"
            let v75 : string = v72.Replace (v73, v74)
            v75
and method165 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method166 () : char =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    let _v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v6 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v7 
    #endif
#else
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v8 
    #endif
    let v9 : char = _v0 
    v9
and method167 (v0 : string) : string =
    v0
and method146 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : bool = v75 = false
    let v230 : string =
        if v76 then
            let v77 : string = method39()
            let v78 : string = method28(v77, v0)
            let v79 : string = method147(v78)
            let v80 : string = "/"
            let v81 : (string []) = v79.Split v80 
            let v84 : (string []) = [||]
            let v85 : int32 = v81.Length
            let v86 : Mut6 = {l0 = 0; l1 = 0; l2 = v84} : Mut6
            while method165(v85, v86) do
                let v88 : int32 = v86.l0
                let v89 : int32 =  -v88
                let v90 : int32 = v89 + v85
                let v91 : int32 = v90 - 1
                let struct (v92 : int32, v93 : (string [])) = v86.l1, v86.l2
                let v94 : string = v81.[int v91]
                let v95 : bool = ".." = v94
                let struct (v139 : int32, v140 : (string [])) =
                    if v95 then
                        let v96 : int32 = v92 + 1
                        struct (v96, v93)
                    else
                        let v97 : bool = "." = v94
                        if v97 then
                            struct (v92, v93)
                        else
                            let v98 : bool = 0 = v92
                            if v98 then
                                let v99 : string = ":"
                                let v100 : bool = v94.EndsWith (v99, false, null)
                                if v100 then
                                    let v103 : string = $"{v77.[0]}:"
                                    let v104 : (string []) = [|v103|]
                                    let v105 : int32 = v104.Length
                                    let v106 : int32 = v93.Length
                                    let v107 : int32 = v105 + v106
                                    let v108 : (string []) = Array.zeroCreate<string> (v107)
                                    let v109 : Mut5 = {l0 = 0} : Mut5
                                    while method72(v107, v109) do
                                        let v111 : int32 = v109.l0
                                        let v112 : bool = v111 < v105
                                        let v116 : string =
                                            if v112 then
                                                let v113 : string = v104.[int v111]
                                                v113
                                            else
                                                let v114 : int32 = v111 - v105
                                                let v115 : string = v93.[int v114]
                                                v115
                                        v108.[int v111] <- v116
                                        let v117 : int32 = v111 + 1
                                        v109.l0 <- v117
                                        ()
                                    struct (0, v108)
                                else
                                    let v118 : (string []) = [|v94|]
                                    let v119 : int32 = v118.Length
                                    let v120 : int32 = v93.Length
                                    let v121 : int32 = v119 + v120
                                    let v122 : (string []) = Array.zeroCreate<string> (v121)
                                    let v123 : Mut5 = {l0 = 0} : Mut5
                                    while method72(v121, v123) do
                                        let v125 : int32 = v123.l0
                                        let v126 : bool = v125 < v119
                                        let v130 : string =
                                            if v126 then
                                                let v127 : string = v118.[int v125]
                                                v127
                                            else
                                                let v128 : int32 = v125 - v119
                                                let v129 : string = v93.[int v128]
                                                v129
                                        v122.[int v125] <- v130
                                        let v131 : int32 = v125 + 1
                                        v123.l0 <- v131
                                        ()
                                    struct (0, v122)
                            else
                                let v134 : int32 = v92 - 1
                                struct (v134, v93)
                let v141 : int32 = v88 + 1
                v86.l0 <- v141
                v86.l1 <- v139
                v86.l2 <- v140
                ()
            let struct (v142 : int32, v143 : (string [])) = v86.l1, v86.l2
            let v144 : unit = ()
            let _v144 =
                seq {
                    for i = 0 to v143.Length - 1 do yield v143.[i]
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v145 : string seq = _v144 
            let v151 : char = method166()
            let v152 : (char -> string) = _.ToString()
            let v153 : string = v152 v151
            let v156 : bool = v153 = "\n"
            let v158 : string =
                if v156 then
                    method167(v153)
                else
                    v153
            let v159 : (string -> (string seq -> string)) = String.concat
            let v160 : (string seq -> string) = v159 v158
            v160 v145
        else
            let v164 : string = "std::fs::canonicalize(&*$0)"
            let v165 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v164 
            let v166 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v167 : string = "$0.unwrap()"
            let v168 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v167 
            let _v166 = v168 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v169 : string = "$0.unwrap()"
            let v170 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v169 
            let _v166 = v170 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v171 : string = "$0.unwrap()"
            let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v165 v171 
            let _v166 = v172 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v173 : std_path_PathBuf = match v165 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v166 = v173 
            #endif
#if FABLE_COMPILER_PYTHON
            let v174 : std_path_PathBuf = match v165 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v166 = v174 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v175 : std_path_PathBuf = match v165 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v166 = v175 
            #endif
#else
            let v176 : std_path_PathBuf = match v165 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v166 = v176 
            #endif
            let v177 : std_path_PathBuf = _v166 
            let v180 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v181 : string = "$0.display()"
            let v182 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v177 v181 
            let _v180 = v182 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v183 : string = "$0.display()"
            let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v177 v183 
            let _v180 = v184 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v185 : string = "$0.display()"
            let v186 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v177 v185 
            let _v180 = v186 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v187 : std_path_Display = v177 |> unbox<std_path_Display>
            let _v180 = v187 
            #endif
#if FABLE_COMPILER_PYTHON
            let v190 : std_path_Display = v177 |> unbox<std_path_Display>
            let _v180 = v190 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v193 : std_path_Display = v177 |> unbox<std_path_Display>
            let _v180 = v193 
            #endif
#else
            let v196 : std_path_Display = v177 |> unbox<std_path_Display>
            let _v180 = v196 
            #endif
            let v199 : std_path_Display = _v180 
            let v204 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v205 : string = "format!(\"{}\", $0)"
            let v206 : std_string_String = Fable.Core.RustInterop.emitRustExpr v199 v205 
            let _v204 = v206 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v207 : string = "format!(\"{}\", $0)"
            let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v199 v207 
            let _v204 = v208 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v209 : string = "format!(\"{}\", $0)"
            let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v199 v209 
            let _v204 = v210 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v211 : std_string_String = null |> unbox<std_string_String>
            let _v204 = v211 
            #endif
#if FABLE_COMPILER_PYTHON
            let v214 : std_string_String = null |> unbox<std_string_String>
            let _v204 = v214 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v217 : std_string_String = null |> unbox<std_string_String>
            let _v204 = v217 
            #endif
#else
            let v220 : std_string_String = null |> unbox<std_string_String>
            let _v204 = v220 
            #endif
            let v223 : std_string_String = _v204 
            let v228 : string = "fable_library_rust::String_::fromString($0)"
            let v229 : string = Fable.Core.RustInterop.emitRustExpr v223 v228 
            v229
    let _v1 = v230 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v231 : string = null |> unbox<string>
    let _v1 = v231 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v234 : string = null |> unbox<string>
    let _v1 = v234 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : string = null |> unbox<string>
    let _v1 = v237 
    #endif
#if FABLE_COMPILER_PYTHON
    let v240 : string = null |> unbox<string>
    let _v1 = v240 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v243 : string = null |> unbox<string>
    let _v1 = v243 
    #endif
#else
    let v246 : (string -> string) = System.IO.Path.GetFullPath
    let v247 : string = v246 v0
    let _v1 = v247 
    #endif
    let v248 : string = _v1 
    v248
and method145 (v0 : string) : string =
    let v1 : string = method146(v0)
    method147(v1)
and method144 (v0 : string) : string =
    let v1 : string = method39()
    let v2 : string = method28(v1, v0)
    method145(v2)
and closure68 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method144(v2)
and method143 () : (std_string_String -> string) =
    closure68()
and method168 () : string =
    let v0 : string = "retries"
    v0
and method169 () : string =
    let v0 : string = "working-directory"
    v0
and method172 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v4, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = "exit_code"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v4, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v23 : string = " = "
    let v24 : string = $"{v23}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v4, v24)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v32 : string = $"{v0}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : string = "; "
    let v41 : string = $"{v40}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v4, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v49 : string = "repl_result"
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v58 : string = $"{v23}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v4, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v66 : string = $"{v1}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v4, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v74 : string = $"{v40}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = "retry"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = $"{v23}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v4, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v99 : string = $"{v2}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : string = " }"
    let v108 : string = $"{v107}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = v4.l0
    v116
and method171 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method172(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v13 : string = "spiral_builder.run / repl error"
    let v14 : string = $"{v6} {v7} #{v12} %s{v13} / {v11}"
    method18(v14)
and closure77 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method12()
        let v42 : string = $"{v1}/{v0}"
        let v43 : string = method171(v22, v23, v24, v25, v26, v27, v40, v41, v3, v2, v42)
        method19(v43)
and method170 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v21 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v19 : string option = None
            v19
        | US5_0(v15) -> (* Some *)
            let v16 : string option = Some v15 
            v16
    let v22 : bool = false
    let struct (v23 : int32, v24 : string) = method68(v9, v4, v14, v6, v7, v22, v21)
    let v25 : bool = v23 = 0
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v3 >= v1
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure77(v1, v3, v24, v23)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v71 : uint8 = v3 + 1uy
        method170(v0, v1, v2, v71)
and method174 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "jupyter_result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method173 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method174(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / dib / jupyter nbconvert"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure78 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method173(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method176 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "pwsh_replace_html_result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method175 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method176(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / dib / html cell ids"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure79 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method175(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method178 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method178(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / dib"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure80 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method177(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method179 () : string =
    let v0 : string = "cleanup"
    v0
and method180 () : string =
    let v0 : string = "wasm"
    v0
and method181 () : string =
    let v0 : string = "contract"
    v0
and method182 (v0 : string, v1 : string, v2 : US35) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v4, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = "extension"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v4, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v23 : string = " = "
    let v24 : string = $"{v23}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v4, v24)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v32 : string = $"{v0}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : string = "; "
    let v41 : string = $"{v40}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v4, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v49 : string = "code"
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v58 : string = $"{v23}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v4, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v66 : string = $"{v1}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v4, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v74 : string = $"{v40}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = "runtime"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = $"{v23}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v4, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v99 : string = $"%A{v2}"
    let v102 : string = $"{v99}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v110 : string = " }"
    let v111 : string = $"{v110}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v4, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v119 : string = v4.l0
    v119
and method184 () : string =
    let v0 : string = ""
    v0
and method185 () : string =
    let v0 : string = ""
    v0
and method183 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new($0)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v22 : string = "[$0; 1024]"
    let v23 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v22 
    let v24 : string = "true; loop { // rust.loop"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "true; let mut v23 = v23"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "std::io::Read::read(&mut v11, &mut v23)"
    let v29 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "$0.unwrap()"
    let v32 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v31 
    let _v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "$0.unwrap()"
    let v34 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "$0.unwrap()"
    let v36 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v39 
    #endif
#else
    let v40 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v40 
    #endif
    let v41 : unativeint = _v30 
    let v44 : bool = v41 = v19 
    if v44 then
        let v47 : string = "true; break"
        let v48 : bool = Fable.Core.RustInterop.emitRustExpr () v47 
        ()
    let v49 : unativeint = v41 |> unativeint 
    let v52 : unativeint = v49 |> unbox<unativeint>
    let v55 : string = "v23.len()"
    let v56 : unativeint = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : bool = v52 = v56 
    let v64 : Ref<Slice'<uint8>> =
        if v57 then
            let v60 : string = "&v23[v19..]"
            let v61 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v60 
            v61
        else
            let v62 : string = "&v23[$0..$1]"
            let v63 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v49) v62 
            v63
    let v65 : string = "sha2::Digest::update(&mut v16, v64)"
    Fable.Core.RustInterop.emitRustExpr () v65 
    let v66 : string = "true; } // rust.loop"
    let v67 : bool = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = "true; } // rust.loop"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "true; } // rust.loop"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "true; { // rust.loop"
    let v73 : bool = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "true; { // rust.loop"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "&sha2::Digest::finalize(v16)"
    let v77 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v79 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "x"
    let v83 : uint8 = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "format!(\"{:02x}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "true; $0 }).collect::<Vec<_>>()"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "_vec_map"
    let v91 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v93 : (string []) = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : unit = ()
    let _v94 =
        seq {
            for i = 0 to v93.Length - 1 do yield v93.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v95 : string seq = _v94 
    let v101 : string = method184()
    let v102 : bool = v101 = "\n"
    let v104 : string =
        if v102 then
            method167(v101)
        else
            v101
    let v105 : (string -> (string seq -> string)) = String.concat
    let v106 : (string seq -> string) = v105 v104
    let v107 : string = v106 v95
    let v110 : Result<string, std_io_Error> = Ok v107 
    let v111 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v112 : string = "$0.unwrap()"
    let v113 : string = Fable.Core.RustInterop.emitRustExpr v110 v112 
    let _v111 = v113 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v114 : string = "$0.unwrap()"
    let v115 : string = Fable.Core.RustInterop.emitRustExpr v110 v114 
    let _v111 = v115 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v116 : string = "$0.unwrap()"
    let v117 : string = Fable.Core.RustInterop.emitRustExpr v110 v116 
    let _v111 = v117 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v118 : string = match v110 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v111 = v118 
    #endif
#if FABLE_COMPILER_PYTHON
    let v119 : string = match v110 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v111 = v119 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v120 : string = match v110 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v111 = v120 
    #endif
#else
    let v121 : string = match v110 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v111 = v121 
    #endif
    let v122 : string = _v111 
    let _v1 = v122 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v125 : string = null |> unbox<string>
    let _v1 = v125 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v128 : string = null |> unbox<string>
    let _v1 = v128 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v131 : string = "crypto"
    let v132 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v131 
    let v133 : string = "v132.createHash($0)"
    let v134 : string = "sha256"
    let v135 : obj = Fable.Core.JsInterop.emitJsExpr v134 v133 
    let v136 : string = "$0.update($1, 'utf8')"
    let v137 : obj = Fable.Core.JsInterop.emitJsExpr struct (v135, v0) v136 
    let v138 : string = "$0.digest($1)"
    let v139 : string = "hex"
    let v140 : string = Fable.Core.JsInterop.emitJsExpr struct (v137, v139) v138 
    let _v1 = v140 
    #endif
#if FABLE_COMPILER_PYTHON
    let v141 : string = "hashlib"
    let v142 : IHashlibSha256 = Fable.Core.PyInterop.importAll v141 
    let v143 : string = "v142.sha256()"
    let v144 : obj = Fable.Core.PyInterop.emitPyExpr () v143 
    let v147 : string = "$0.encode($1)"
    let v148 : string = "utf-8"
    let v149 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v148) v147 
    let v152 : string = "v144.update($0)"
    Fable.Core.PyInterop.emitPyExpr v149 v152 
    let v153 : string = "v144.hexdigest()"
    let v154 : string = Fable.Core.PyInterop.emitPyExpr () v153 
    let _v1 = v154 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v157 : string = null |> unbox<string>
    let _v1 = v157 
    #endif
#else
    let v160 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v161 : System.Security.Cryptography.SHA256 = v160 ()
    use v161 = v161 
    let v162 : System.Security.Cryptography.SHA256 = v161 
    let v163 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v164 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v165 : (string -> (uint8 [])) = v164 v163
    let v166 : (uint8 []) = v165 v0
    let v167 : ((uint8 []) -> (uint8 [])) = v162.ComputeHash
    let v168 : (uint8 []) = v167 v166
    let v169 : int32 = v168.Length
    let v170 : (string []) = Array.zeroCreate<string> (v169)
    let v171 : Mut5 = {l0 = 0} : Mut5
    while method72(v169, v171) do
        let v173 : int32 = v171.l0
        let v174 : uint8 = v168.[int v173]
        let v175 : (string -> string) = v174.ToString
        let v176 : string = "x2"
        let v177 : string = v175 v176
        v170.[int v173] <- v177
        let v178 : int32 = v173 + 1
        v171.l0 <- v178
        ()
    let v179 : unit = ()
    let _v179 =
        seq {
            for i = 0 to v170.Length - 1 do yield v170.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v180 : string seq = _v179 
    let v186 : string = method185()
    let v187 : bool = v186 = "\n"
    let v189 : string =
        if v187 then
            method167(v186)
        else
            v186
    let v190 : (string -> (string seq -> string)) = String.concat
    let v191 : (string seq -> string) = v190 v189
    let v192 : string = v191 v180
    let _v1 = v192 
    #endif
    let v195 : string = _v1 
    v195
and method186 (v0 : US5, v1 : string, v2 : US38, v3 : string) : string =
    let v4 : string = "target/spiral_builder"
    let v5 : string = method28(v3, v4)
    let v6 : string = method28(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US38_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method28(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US37_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US37_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US37_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method28(v10, v42)
            method28(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method188 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method188(v0, v4, v2)
        let v6 : string = method28(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method189 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = method189(v3, v1)
        let v5 : string = $"<PackageReference Include=\"{v2}\" Version=\"*\" />"
        UH2_1(v5, v4)
    | UH2_0 -> (* Nil *)
        v1
and method187 (v0 : string, v1 : string, v2 : UH2, v3 : UH2, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method44(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method28(v4, v7)
    let v9 : string = method147(v8)
    method41(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method188(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method91(v11, v12)
    let v14 : unit = ()
    let _v14 =
        seq {
            for i = 0 to v13.Length - 1 do yield v13.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v15 : string seq = _v14 
    let v21 : (string -> (string seq -> string)) = String.concat
    let v22 : string = "\\n        "
    let v23 : (string seq -> string) = v21 v22
    let v24 : string = v23 v15
    let v27 : UH2 = UH2_0
    let v28 : UH2 = method189(v3, v27)
    let v29 : string list = []
    let v30 : string list = method91(v28, v29)
    let v31 : unit = ()
    let _v31 =
        seq {
            for i = 0 to v30.Length - 1 do yield v30.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v32 : string seq = _v31 
    let v38 : (string -> (string seq -> string)) = String.concat
    let v39 : (string seq -> string) = v38 v22
    let v40 : string = v39 v32
    let v43 : string = $"{v1}.fsproj"
    let v44 : string = method28(v4, v43)
    let v45 : string = method147(v44)
    let v46 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v47 : string = $"<PropertyGroup>"
    let v48 : string = "\n"
    let v49 : string = v46 + v48 
    let v50 : string = v49 + v47 
    let v51 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v52 : string = v50 + v48 
    let v53 : string = v52 + v51 
    let v54 : string = $"    <LangVersion>preview</LangVersion>"
    let v55 : string = v53 + v48 
    let v56 : string = v55 + v54 
    let v57 : string = $"    <RollForward>Major</RollForward>"
    let v58 : string = v56 + v48 
    let v59 : string = v58 + v57 
    let v60 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v61 : string = v59 + v48 
    let v62 : string = v61 + v60 
    let v63 : string = $"    <PublishAot>false</PublishAot>"
    let v64 : string = v62 + v48 
    let v65 : string = v64 + v63 
    let v66 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v67 : string = v65 + v48 
    let v68 : string = v67 + v66 
    let v69 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v70 : string = v68 + v48 
    let v71 : string = v70 + v69 
    let v72 : string = $"    <SelfContained>true</SelfContained>"
    let v73 : string = v71 + v48 
    let v74 : string = v73 + v72 
    let v75 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v76 : string = v74 + v48 
    let v77 : string = v76 + v75 
    let v78 : string = $"    <OutputType>Exe</OutputType>"
    let v79 : string = v77 + v48 
    let v80 : string = v79 + v78 
    let v81 : string = $"</PropertyGroup>"
    let v82 : string = v80 + v48 
    let v83 : string = v82 + v81 
    let v84 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v85 : string = v83 + v48 
    let v86 : string = v85 + v84 
    let v87 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v88 : string = v86 + v48 
    let v89 : string = v88 + v87 
    let v90 : string = $"</PropertyGroup>"
    let v91 : string = v89 + v48 
    let v92 : string = v91 + v90 
    let v93 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v94 : string = v92 + v48 
    let v95 : string = v94 + v93 
    let v96 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v97 : string = v95 + v48 
    let v98 : string = v97 + v96 
    let v99 : string = $"</PropertyGroup>"
    let v100 : string = v98 + v48 
    let v101 : string = v100 + v99 
    let v102 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v103 : string = v101 + v48 
    let v104 : string = v103 + v102 
    let v105 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v106 : string = v104 + v48 
    let v107 : string = v106 + v105 
    let v108 : string = $"</PropertyGroup>"
    let v109 : string = v107 + v48 
    let v110 : string = v109 + v108 
    let v111 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v112 : string = v110 + v48 
    let v113 : string = v112 + v111 
    let v114 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v115 : string = v113 + v48 
    let v116 : string = v115 + v114 
    let v117 : string = $"</PropertyGroup>"
    let v118 : string = v116 + v48 
    let v119 : string = v118 + v117 
    let v120 : string = $"<ItemGroup>"
    let v121 : string = v119 + v48 
    let v122 : string = v121 + v120 
    let v123 : string = $"    {v24}"
    let v124 : string = v122 + v48 
    let v125 : string = v124 + v123 
    let v126 : string = $"    <Compile Include=\"{v9}\" />"
    let v127 : string = v125 + v48 
    let v128 : string = v127 + v126 
    let v129 : string = $"</ItemGroup>"
    let v130 : string = v128 + v48 
    let v131 : string = v130 + v129 
    let v132 : string = $"<ItemGroup>"
    let v133 : string = v131 + v48 
    let v134 : string = v133 + v132 
    let v135 : string = $"    {v40}"
    let v136 : string = v134 + v48 
    let v137 : string = v136 + v135 
    let v138 : string = $"</ItemGroup>"
    let v139 : string = v137 + v48 
    let v140 : string = v139 + v138 
    let v141 : string = $"</Project>"
    let v142 : string = v140 + v48 
    let v143 : string = v142 + v141 
    method41(v45, v143)
    v45
and closure81 () (v0 : chrono_DateTime<chrono_Utc>) : US39 =
    US39_0(v0)
and method191 () : (chrono_DateTime<chrono_Utc> -> US39) =
    closure81()
and method192 () : string =
    let v0 : string = "hh:mm"
    v0
and method193 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method194 () : string =
    let v0 : string = "hhmm"
    v0
and method190 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime.UnixEpoch
    let v6 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v7 : System.DateTime = v6 v3
    let v10 : System.DateTimeKind = System.DateTimeKind.Local
    let v11 : System.DateTime = System.DateTime.SpecifyKind (v1, v10)
    let v14 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v15 : System.DateTime = v14 v11
    let v18 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : (System.DateTime -> int64) = _.Ticks
    let v20 : int64 = v19 v15
    let _v18 = v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : (System.DateTime -> int64) = _.Ticks
    let v22 : int64 = v21 v15
    let _v18 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : int64 = null |> unbox<int64>
    let _v18 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : (System.DateTime -> int64) = _.Ticks
    let v27 : int64 = v26 v15
    let _v18 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v28 : (System.DateTime -> int64) = _.Ticks
    let v29 : int64 = v28 v15
    let _v18 = v29 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v30 : (System.DateTime -> int64) = _.Ticks
    let v31 : int64 = v30 v15
    let _v18 = v31 
    #endif
#else
    let v32 : (System.DateTime -> int64) = _.Ticks
    let v33 : int64 = v32 v15
    let _v18 = v33 
    #endif
    let v34 : int64 = _v18 
    let v51 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v52 : (System.DateTime -> int64) = _.Ticks
    let v53 : int64 = v52 v7
    let _v51 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : (System.DateTime -> int64) = _.Ticks
    let v55 : int64 = v54 v7
    let _v51 = v55 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v56 : int64 = null |> unbox<int64>
    let _v51 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v59 : (System.DateTime -> int64) = _.Ticks
    let v60 : int64 = v59 v7
    let _v51 = v60 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : (System.DateTime -> int64) = _.Ticks
    let v62 : int64 = v61 v7
    let _v51 = v62 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : (System.DateTime -> int64) = _.Ticks
    let v64 : int64 = v63 v7
    let _v51 = v64 
    #endif
#else
    let v65 : (System.DateTime -> int64) = _.Ticks
    let v66 : int64 = v65 v7
    let _v51 = v66 
    #endif
    let v67 : int64 = _v51 
    let v84 : int64 = v34 |> int64 
    let v87 : int64 = v67 |> int64 
    let v90 : int64 = v84 - v87
    let v91 : int64 = v90 / 10L
    let v92 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v93 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : (chrono_DateTime<chrono_Utc> -> US39) = method191()
    let v95 : US39 option = v93 |> Option.map v94 
    let v106 : US39 = US39_1
    let v107 : US39 = v95 |> Option.defaultValue v106 
    let v127 : US5 =
        match v107 with
        | US39_1 -> (* None *)
            US5_1
        | US39_0(v111) -> (* Some *)
            let v112 : string = "$0.naive_utc()"
            let v113 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v111 v112 
            let v114 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v115 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : string = "%Y%m%d-%H%M-%S%f"
            let v117 : string = "r#\"" + v116 + "\"#"
            let v118 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v117 
            let v119 : string = "$0.format($1).to_string()"
            let v120 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118) v119 
            let v121 : string = "fable_library_rust::String_::fromString($0)"
            let v122 : string = Fable.Core.RustInterop.emitRustExpr v120 v121 
            let v123 : string = $"{v122.[0..17]}-{v122.[18..21]}-{v122.[22]}"
            US5_0(v123)
    let v131 : string =
        match v127 with
        | US5_1 -> (* None *)
            let v129 : string = ""
            v129
        | US5_0(v128) -> (* Some *)
            v128
    let v132 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v134 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v133 
    let _v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v138 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v141 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v141 
    #endif
#if FABLE_COMPILER_PYTHON
    let v144 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v147 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v132 = v147 
    #endif
#else
    let v148 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v132 = v148 
    #endif
    let v149 : System.TimeZoneInfo = _v132 
    let v154 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v155 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : (System.DateTime -> int64) = _.Ticks
    let v157 : int64 = v156 v15
    let _v155 = v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : (System.DateTime -> int64) = _.Ticks
    let v159 : int64 = v158 v15
    let _v155 = v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : int64 = null |> unbox<int64>
    let _v155 = v160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v163 : (System.DateTime -> int64) = _.Ticks
    let v164 : int64 = v163 v15
    let _v155 = v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : (System.DateTime -> int64) = _.Ticks
    let v166 : int64 = v165 v15
    let _v155 = v166 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v167 : (System.DateTime -> int64) = _.Ticks
    let v168 : int64 = v167 v15
    let _v155 = v168 
    #endif
#else
    let v169 : (System.DateTime -> int64) = _.Ticks
    let v170 : int64 = v169 v15
    let _v155 = v170 
    #endif
    let v171 : int64 = _v155 
    let v188 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v189 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v15, v171) v188 
    let v190 : System.TimeSpan = v189 |> System.TimeSpan 
    let _v154 = v190 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v193 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : (System.DateTime -> int64) = _.Ticks
    let v195 : int64 = v194 v15
    let _v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : (System.DateTime -> int64) = _.Ticks
    let v197 : int64 = v196 v15
    let _v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : int64 = null |> unbox<int64>
    let _v193 = v198 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : (System.DateTime -> int64) = _.Ticks
    let v202 : int64 = v201 v15
    let _v193 = v202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v203 : (System.DateTime -> int64) = _.Ticks
    let v204 : int64 = v203 v15
    let _v193 = v204 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v205 : (System.DateTime -> int64) = _.Ticks
    let v206 : int64 = v205 v15
    let _v193 = v206 
    #endif
#else
    let v207 : (System.DateTime -> int64) = _.Ticks
    let v208 : int64 = v207 v15
    let _v193 = v208 
    #endif
    let v209 : int64 = _v193 
    let v226 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v227 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v15, v209) v226 
    let v228 : System.TimeSpan = v227 |> System.TimeSpan 
    let _v154 = v228 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v231 : US3 = US3_2
    let v232 : US4 = US4_2(v231)
    let v233 : string = $"date_time.get_utc_offset / target: {v232}"
    let v234 : System.TimeSpan = failwith<System.TimeSpan> v233
    let _v154 = v234 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : US3 = US3_0
    let v238 : US4 = US4_3(v237)
    let v239 : string = $"date_time.get_utc_offset / target: {v238}"
    let v240 : System.TimeSpan = failwith<System.TimeSpan> v239
    let _v154 = v240 
    #endif
#if FABLE_COMPILER_PYTHON
    let v243 : US3 = US3_0
    let v244 : US4 = US4_4(v243)
    let v245 : string = $"date_time.get_utc_offset / target: {v244}"
    let v246 : System.TimeSpan = failwith<System.TimeSpan> v245
    let _v154 = v246 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v249 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v250 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v251 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v252 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v251 
    let _v250 = v252 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v253 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v253 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v256 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v256 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v259 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v259 
    #endif
#if FABLE_COMPILER_PYTHON
    let v262 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v262 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v265 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v250 = v265 
    #endif
#else
    let v266 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v250 = v266 
    #endif
    let v267 : System.TimeZoneInfo = _v250 
    let v272 : (System.DateTime -> System.TimeSpan) = v249 v267
    let v273 : System.TimeSpan = v272 v15
    let _v154 = v273 
    #endif
#else
    let v274 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v275 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v276 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v277 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v276 
    let _v275 = v277 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v278 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v278 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v281 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v281 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v284 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v284 
    #endif
#if FABLE_COMPILER_PYTHON
    let v287 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v287 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v290 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v275 = v290 
    #endif
#else
    let v291 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v275 = v291 
    #endif
    let v292 : System.TimeZoneInfo = _v275 
    let v297 : (System.DateTime -> System.TimeSpan) = v274 v292
    let v298 : System.TimeSpan = v297 v15
    let _v154 = v298 
    #endif
    let v299 : System.TimeSpan = _v154 
    let v307 : (System.TimeSpan -> int32) = _.Hours
    let v308 : int32 = v307 v299
    let v311 : bool = v308 > 0
    let v312 : uint8 =
        if v311 then
            1uy
        else
            0uy
    let v313 : string = method192()
    let v314 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v315 : string = v299.ToString v313 
    let _v314 = v315 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v318 : string = v299.ToString v313 
    let _v314 = v318 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = v299.ToString v313 
    let _v314 = v321 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v324 : string = v299.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v314 = v324 
    #endif
#if FABLE_COMPILER_PYTHON
    let v325 : string = v299.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v314 = v325 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v326 : string = v299.ToString v313 
    let _v314 = v326 
    #endif
#else
    let v329 : string = v299.ToString v313 
    let _v314 = v329 
    #endif
    let v332 : string = _v314 
    let v337 : string = $"{v312}{v332.[0..1]}{v332.[3..4]}"
    let v338 : (System.Guid -> string) = _.ToString()
    let v339 : string = v338 v0
    let v342 : int32 = v131.Length
    let v343 : int32 = v337.Length
    let v344 : int32 = v342 + v343
    let v345 : (string -> int32) = String.length
    let v346 : int32 = v345 v339
    let v349 : int32 = v344 |> int32 
    let v356 : int32 = v346 |> int32 
    let v363 : int32 = v356 - 1
    let v364 : string = v339.[int v349..int v363]
    let v368 : string = $"{v131}{v337}{v364}"
    let v369 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v370 : System.Guid = v368 |> System.Guid 
    let _v369 = v370 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v373 : System.Guid = v368 |> System.Guid 
    let _v369 = v373 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v376 : System.Guid = null |> unbox<System.Guid>
    let _v369 = v376 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v379 : System.Guid = v368 |> System.Guid 
    let _v369 = v379 
    #endif
#if FABLE_COMPILER_PYTHON
    let v382 : System.Guid = v368 |> System.Guid 
    let _v369 = v382 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v385 : System.Guid = v368 |> System.Guid 
    let _v369 = v385 
    #endif
#else
    let v388 : System.Guid = v368 |> System.Guid 
    let _v369 = v388 
    #endif
    let v391 : System.Guid = _v369 
    let _v2 = v391 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v396 : System.DateTime = System.DateTime.UnixEpoch
    let v399 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v400 : System.DateTime = v399 v396
    let v403 : System.DateTimeKind = System.DateTimeKind.Local
    let v404 : System.DateTime = System.DateTime.SpecifyKind (v1, v403)
    let v407 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v408 : System.DateTime = v407 v404
    let v411 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v412 : (System.DateTime -> int64) = _.Ticks
    let v413 : int64 = v412 v408
    let _v411 = v413 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v414 : (System.DateTime -> int64) = _.Ticks
    let v415 : int64 = v414 v408
    let _v411 = v415 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v416 : int64 = null |> unbox<int64>
    let _v411 = v416 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v419 : (System.DateTime -> int64) = _.Ticks
    let v420 : int64 = v419 v408
    let _v411 = v420 
    #endif
#if FABLE_COMPILER_PYTHON
    let v421 : (System.DateTime -> int64) = _.Ticks
    let v422 : int64 = v421 v408
    let _v411 = v422 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v423 : (System.DateTime -> int64) = _.Ticks
    let v424 : int64 = v423 v408
    let _v411 = v424 
    #endif
#else
    let v425 : (System.DateTime -> int64) = _.Ticks
    let v426 : int64 = v425 v408
    let _v411 = v426 
    #endif
    let v427 : int64 = _v411 
    let v444 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v445 : (System.DateTime -> int64) = _.Ticks
    let v446 : int64 = v445 v400
    let _v444 = v446 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v447 : (System.DateTime -> int64) = _.Ticks
    let v448 : int64 = v447 v400
    let _v444 = v448 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v449 : int64 = null |> unbox<int64>
    let _v444 = v449 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v452 : (System.DateTime -> int64) = _.Ticks
    let v453 : int64 = v452 v400
    let _v444 = v453 
    #endif
#if FABLE_COMPILER_PYTHON
    let v454 : (System.DateTime -> int64) = _.Ticks
    let v455 : int64 = v454 v400
    let _v444 = v455 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v456 : (System.DateTime -> int64) = _.Ticks
    let v457 : int64 = v456 v400
    let _v444 = v457 
    #endif
#else
    let v458 : (System.DateTime -> int64) = _.Ticks
    let v459 : int64 = v458 v400
    let _v444 = v459 
    #endif
    let v460 : int64 = _v444 
    let v477 : int64 = v427 |> int64 
    let v480 : int64 = v460 |> int64 
    let v483 : int64 = v477 - v480
    let v484 : int64 = v483 / 10L
    let v485 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v486 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v484 v485 
    let v487 : (chrono_DateTime<chrono_Utc> -> US39) = method191()
    let v488 : US39 option = v486 |> Option.map v487 
    let v499 : US39 = US39_1
    let v500 : US39 = v488 |> Option.defaultValue v499 
    let v520 : US5 =
        match v500 with
        | US39_1 -> (* None *)
            US5_1
        | US39_0(v504) -> (* Some *)
            let v505 : string = "$0.naive_utc()"
            let v506 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v504 v505 
            let v507 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v508 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v506 v507 
            let v509 : string = "%Y%m%d-%H%M-%S%f"
            let v510 : string = "r#\"" + v509 + "\"#"
            let v511 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v510 
            let v512 : string = "$0.format($1).to_string()"
            let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v508, v511) v512 
            let v514 : string = "fable_library_rust::String_::fromString($0)"
            let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
            let v516 : string = $"{v515.[0..17]}-{v515.[18..21]}-{v515.[22]}"
            US5_0(v516)
    let v524 : string =
        match v520 with
        | US5_1 -> (* None *)
            let v522 : string = ""
            v522
        | US5_0(v521) -> (* Some *)
            v521
    let v525 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v526 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v527 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v526 
    let _v525 = v527 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v528 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v528 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v531 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v531 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v534 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v534 
    #endif
#if FABLE_COMPILER_PYTHON
    let v537 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v537 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v540 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v525 = v540 
    #endif
#else
    let v541 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v525 = v541 
    #endif
    let v542 : System.TimeZoneInfo = _v525 
    let v547 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v548 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v549 : (System.DateTime -> int64) = _.Ticks
    let v550 : int64 = v549 v408
    let _v548 = v550 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v551 : (System.DateTime -> int64) = _.Ticks
    let v552 : int64 = v551 v408
    let _v548 = v552 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v553 : int64 = null |> unbox<int64>
    let _v548 = v553 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v556 : (System.DateTime -> int64) = _.Ticks
    let v557 : int64 = v556 v408
    let _v548 = v557 
    #endif
#if FABLE_COMPILER_PYTHON
    let v558 : (System.DateTime -> int64) = _.Ticks
    let v559 : int64 = v558 v408
    let _v548 = v559 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v560 : (System.DateTime -> int64) = _.Ticks
    let v561 : int64 = v560 v408
    let _v548 = v561 
    #endif
#else
    let v562 : (System.DateTime -> int64) = _.Ticks
    let v563 : int64 = v562 v408
    let _v548 = v563 
    #endif
    let v564 : int64 = _v548 
    let v581 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v582 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v408, v564) v581 
    let v583 : System.TimeSpan = v582 |> System.TimeSpan 
    let _v547 = v583 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v586 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v587 : (System.DateTime -> int64) = _.Ticks
    let v588 : int64 = v587 v408
    let _v586 = v588 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v589 : (System.DateTime -> int64) = _.Ticks
    let v590 : int64 = v589 v408
    let _v586 = v590 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v591 : int64 = null |> unbox<int64>
    let _v586 = v591 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v594 : (System.DateTime -> int64) = _.Ticks
    let v595 : int64 = v594 v408
    let _v586 = v595 
    #endif
#if FABLE_COMPILER_PYTHON
    let v596 : (System.DateTime -> int64) = _.Ticks
    let v597 : int64 = v596 v408
    let _v586 = v597 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v598 : (System.DateTime -> int64) = _.Ticks
    let v599 : int64 = v598 v408
    let _v586 = v599 
    #endif
#else
    let v600 : (System.DateTime -> int64) = _.Ticks
    let v601 : int64 = v600 v408
    let _v586 = v601 
    #endif
    let v602 : int64 = _v586 
    let v619 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v620 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v408, v602) v619 
    let v621 : System.TimeSpan = v620 |> System.TimeSpan 
    let _v547 = v621 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v624 : US3 = US3_2
    let v625 : US4 = US4_2(v624)
    let v626 : string = $"date_time.get_utc_offset / target: {v625}"
    let v627 : System.TimeSpan = failwith<System.TimeSpan> v626
    let _v547 = v627 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v630 : US3 = US3_0
    let v631 : US4 = US4_3(v630)
    let v632 : string = $"date_time.get_utc_offset / target: {v631}"
    let v633 : System.TimeSpan = failwith<System.TimeSpan> v632
    let _v547 = v633 
    #endif
#if FABLE_COMPILER_PYTHON
    let v636 : US3 = US3_0
    let v637 : US4 = US4_4(v636)
    let v638 : string = $"date_time.get_utc_offset / target: {v637}"
    let v639 : System.TimeSpan = failwith<System.TimeSpan> v638
    let _v547 = v639 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v642 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v643 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v644 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v645 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v644 
    let _v643 = v645 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v646 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v649 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v649 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v652 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v652 
    #endif
#if FABLE_COMPILER_PYTHON
    let v655 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v655 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v658 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v643 = v658 
    #endif
#else
    let v659 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v643 = v659 
    #endif
    let v660 : System.TimeZoneInfo = _v643 
    let v665 : (System.DateTime -> System.TimeSpan) = v642 v660
    let v666 : System.TimeSpan = v665 v408
    let _v547 = v666 
    #endif
#else
    let v667 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v668 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v669 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v670 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v669 
    let _v668 = v670 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v671 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v671 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v674 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v674 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v677 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v677 
    #endif
#if FABLE_COMPILER_PYTHON
    let v680 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v680 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v683 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v668 = v683 
    #endif
#else
    let v684 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v668 = v684 
    #endif
    let v685 : System.TimeZoneInfo = _v668 
    let v690 : (System.DateTime -> System.TimeSpan) = v667 v685
    let v691 : System.TimeSpan = v690 v408
    let _v547 = v691 
    #endif
    let v692 : System.TimeSpan = _v547 
    let v700 : (System.TimeSpan -> int32) = _.Hours
    let v701 : int32 = v700 v692
    let v704 : bool = v701 > 0
    let v705 : uint8 =
        if v704 then
            1uy
        else
            0uy
    let v706 : string = method192()
    let v707 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v708 : string = v692.ToString v706 
    let _v707 = v708 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v711 : string = v692.ToString v706 
    let _v707 = v711 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v714 : string = v692.ToString v706 
    let _v707 = v714 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v717 : string = v692.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v707 = v717 
    #endif
#if FABLE_COMPILER_PYTHON
    let v718 : string = v692.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v707 = v718 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v719 : string = v692.ToString v706 
    let _v707 = v719 
    #endif
#else
    let v722 : string = v692.ToString v706 
    let _v707 = v722 
    #endif
    let v725 : string = _v707 
    let v730 : string = $"{v705}{v725.[0..1]}{v725.[3..4]}"
    let v731 : (System.Guid -> string) = _.ToString()
    let v732 : string = v731 v0
    let v735 : int32 = v524.Length
    let v736 : int32 = v730.Length
    let v737 : int32 = v735 + v736
    let v738 : (string -> int32) = String.length
    let v739 : int32 = v738 v732
    let v742 : int32 = v737 |> int32 
    let v749 : int32 = v739 |> int32 
    let v756 : int32 = v749 - 1
    let v757 : string = v732.[int v742..int v756]
    let v761 : string = $"{v524}{v730}{v757}"
    let v762 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v763 : System.Guid = v761 |> System.Guid 
    let _v762 = v763 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v766 : System.Guid = v761 |> System.Guid 
    let _v762 = v766 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v769 : System.Guid = null |> unbox<System.Guid>
    let _v762 = v769 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v772 : System.Guid = v761 |> System.Guid 
    let _v762 = v772 
    #endif
#if FABLE_COMPILER_PYTHON
    let v775 : System.Guid = v761 |> System.Guid 
    let _v762 = v775 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v778 : System.Guid = v761 |> System.Guid 
    let _v762 = v778 
    #endif
#else
    let v781 : System.Guid = v761 |> System.Guid 
    let _v762 = v781 
    #endif
    let v784 : System.Guid = _v762 
    let _v2 = v784 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v789 : System.Guid = null |> unbox<System.Guid>
    let _v2 = v789 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v792 : string = method193()
    let v793 : bool = v792 = ""
    let v795 : string =
        if v793 then
            let v794 : string = "M-d-y hh:mm:ss tt"
            v794
        else
            v792
    let v796 : (string -> string) = v1.ToString
    let v797 : string = v796 v795
    let v811 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v812 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v813 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v812 
    let _v811 = v813 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v814 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v814 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v817 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v817 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v820 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v820 
    #endif
#if FABLE_COMPILER_PYTHON
    let v823 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v823 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v826 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v811 = v826 
    #endif
#else
    let v827 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v811 = v827 
    #endif
    let v828 : System.TimeZoneInfo = _v811 
    let v833 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v834 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v835 : (System.DateTime -> int64) = _.Ticks
    let v836 : int64 = v835 v1
    let _v834 = v836 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v837 : (System.DateTime -> int64) = _.Ticks
    let v838 : int64 = v837 v1
    let _v834 = v838 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v839 : int64 = null |> unbox<int64>
    let _v834 = v839 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v842 : (System.DateTime -> int64) = _.Ticks
    let v843 : int64 = v842 v1
    let _v834 = v843 
    #endif
#if FABLE_COMPILER_PYTHON
    let v844 : (System.DateTime -> int64) = _.Ticks
    let v845 : int64 = v844 v1
    let _v834 = v845 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v846 : (System.DateTime -> int64) = _.Ticks
    let v847 : int64 = v846 v1
    let _v834 = v847 
    #endif
#else
    let v848 : (System.DateTime -> int64) = _.Ticks
    let v849 : int64 = v848 v1
    let _v834 = v849 
    #endif
    let v850 : int64 = _v834 
    let v867 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v868 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v850) v867 
    let v869 : System.TimeSpan = v868 |> System.TimeSpan 
    let _v833 = v869 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v872 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v873 : (System.DateTime -> int64) = _.Ticks
    let v874 : int64 = v873 v1
    let _v872 = v874 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v875 : (System.DateTime -> int64) = _.Ticks
    let v876 : int64 = v875 v1
    let _v872 = v876 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v877 : int64 = null |> unbox<int64>
    let _v872 = v877 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v880 : (System.DateTime -> int64) = _.Ticks
    let v881 : int64 = v880 v1
    let _v872 = v881 
    #endif
#if FABLE_COMPILER_PYTHON
    let v882 : (System.DateTime -> int64) = _.Ticks
    let v883 : int64 = v882 v1
    let _v872 = v883 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v884 : (System.DateTime -> int64) = _.Ticks
    let v885 : int64 = v884 v1
    let _v872 = v885 
    #endif
#else
    let v886 : (System.DateTime -> int64) = _.Ticks
    let v887 : int64 = v886 v1
    let _v872 = v887 
    #endif
    let v888 : int64 = _v872 
    let v905 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v906 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v888) v905 
    let v907 : System.TimeSpan = v906 |> System.TimeSpan 
    let _v833 = v907 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v910 : US3 = US3_2
    let v911 : US4 = US4_2(v910)
    let v912 : string = $"date_time.get_utc_offset / target: {v911}"
    let v913 : System.TimeSpan = failwith<System.TimeSpan> v912
    let _v833 = v913 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v916 : US3 = US3_0
    let v917 : US4 = US4_3(v916)
    let v918 : string = $"date_time.get_utc_offset / target: {v917}"
    let v919 : System.TimeSpan = failwith<System.TimeSpan> v918
    let _v833 = v919 
    #endif
#if FABLE_COMPILER_PYTHON
    let v922 : US3 = US3_0
    let v923 : US4 = US4_4(v922)
    let v924 : string = $"date_time.get_utc_offset / target: {v923}"
    let v925 : System.TimeSpan = failwith<System.TimeSpan> v924
    let _v833 = v925 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v928 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v929 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v930 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v931 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v930 
    let _v929 = v931 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v932 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v932 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v935 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v935 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v938 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v938 
    #endif
#if FABLE_COMPILER_PYTHON
    let v941 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v941 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v944 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v929 = v944 
    #endif
#else
    let v945 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v929 = v945 
    #endif
    let v946 : System.TimeZoneInfo = _v929 
    let v951 : (System.DateTime -> System.TimeSpan) = v928 v946
    let v952 : System.TimeSpan = v951 v1
    let _v833 = v952 
    #endif
#else
    let v953 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v954 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v955 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v956 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v955 
    let _v954 = v956 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v957 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v957 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v960 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v960 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v963 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v963 
    #endif
#if FABLE_COMPILER_PYTHON
    let v966 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v966 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v969 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v954 = v969 
    #endif
#else
    let v970 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v954 = v970 
    #endif
    let v971 : System.TimeZoneInfo = _v954 
    let v976 : (System.DateTime -> System.TimeSpan) = v953 v971
    let v977 : System.TimeSpan = v976 v1
    let _v833 = v977 
    #endif
    let v978 : System.TimeSpan = _v833 
    let v986 : (System.TimeSpan -> int32) = _.Hours
    let v987 : int32 = v986 v978
    let v990 : bool = v987 > 0
    let v991 : uint8 =
        if v990 then
            1uy
        else
            0uy
    let v992 : string = method194()
    let v993 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v994 : string = v978.ToString v992 
    let _v993 = v994 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v997 : string = v978.ToString v992 
    let _v993 = v997 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1000 : string = v978.ToString v992 
    let _v993 = v1000 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1003 : string = v978.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v993 = v1003 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1004 : string = v978.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v993 = v1004 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1005 : string = v978.ToString v992 
    let _v993 = v1005 
    #endif
#else
    let v1008 : string = v978.ToString v992 
    let _v993 = v1008 
    #endif
    let v1011 : string = _v993 
    let v1016 : string = $"{v991}{v1011}"
    let v1017 : (System.Guid -> string) = _.ToString()
    let v1018 : string = v1017 v0
    let v1021 : int32 = v797.Length
    let v1022 : int32 = v1016.Length
    let v1023 : int32 = v1021 + v1022
    let v1024 : (string -> int32) = String.length
    let v1025 : int32 = v1024 v1018
    let v1028 : int32 = v1023 |> int32 
    let v1035 : int32 = v1025 |> int32 
    let v1042 : int32 = v1035 - 1
    let v1043 : string = v1018.[int v1028..int v1042]
    let v1047 : string = $"{v797}{v1016}{v1043}"
    let v1048 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1049 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1049 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1052 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1052 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1055 : System.Guid = null |> unbox<System.Guid>
    let _v1048 = v1055 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1058 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1058 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1061 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1061 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1064 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1064 
    #endif
#else
    let v1067 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1067 
    #endif
    let v1070 : System.Guid = _v1048 
    let _v2 = v1070 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1075 : string = method193()
    let v1076 : bool = v1075 = ""
    let v1078 : string =
        if v1076 then
            let v1077 : string = "M-d-y hh:mm:ss tt"
            v1077
        else
            v1075
    let v1079 : (string -> string) = v1.ToString
    let v1080 : string = v1079 v1078
    let v1094 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1095 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1096 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1095 
    let _v1094 = v1096 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1097 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1097 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1100 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1103 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1103 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1106 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1109 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1094 = v1109 
    #endif
#else
    let v1110 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1094 = v1110 
    #endif
    let v1111 : System.TimeZoneInfo = _v1094 
    let v1116 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1117 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1118 : (System.DateTime -> int64) = _.Ticks
    let v1119 : int64 = v1118 v1
    let _v1117 = v1119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1120 : (System.DateTime -> int64) = _.Ticks
    let v1121 : int64 = v1120 v1
    let _v1117 = v1121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1122 : int64 = null |> unbox<int64>
    let _v1117 = v1122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1125 : (System.DateTime -> int64) = _.Ticks
    let v1126 : int64 = v1125 v1
    let _v1117 = v1126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1127 : (System.DateTime -> int64) = _.Ticks
    let v1128 : int64 = v1127 v1
    let _v1117 = v1128 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1129 : (System.DateTime -> int64) = _.Ticks
    let v1130 : int64 = v1129 v1
    let _v1117 = v1130 
    #endif
#else
    let v1131 : (System.DateTime -> int64) = _.Ticks
    let v1132 : int64 = v1131 v1
    let _v1117 = v1132 
    #endif
    let v1133 : int64 = _v1117 
    let v1150 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1151 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1133) v1150 
    let v1152 : System.TimeSpan = v1151 |> System.TimeSpan 
    let _v1116 = v1152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1155 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1156 : (System.DateTime -> int64) = _.Ticks
    let v1157 : int64 = v1156 v1
    let _v1155 = v1157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1158 : (System.DateTime -> int64) = _.Ticks
    let v1159 : int64 = v1158 v1
    let _v1155 = v1159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1160 : int64 = null |> unbox<int64>
    let _v1155 = v1160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1163 : (System.DateTime -> int64) = _.Ticks
    let v1164 : int64 = v1163 v1
    let _v1155 = v1164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1165 : (System.DateTime -> int64) = _.Ticks
    let v1166 : int64 = v1165 v1
    let _v1155 = v1166 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1167 : (System.DateTime -> int64) = _.Ticks
    let v1168 : int64 = v1167 v1
    let _v1155 = v1168 
    #endif
#else
    let v1169 : (System.DateTime -> int64) = _.Ticks
    let v1170 : int64 = v1169 v1
    let _v1155 = v1170 
    #endif
    let v1171 : int64 = _v1155 
    let v1188 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1189 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1171) v1188 
    let v1190 : System.TimeSpan = v1189 |> System.TimeSpan 
    let _v1116 = v1190 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1193 : US3 = US3_2
    let v1194 : US4 = US4_2(v1193)
    let v1195 : string = $"date_time.get_utc_offset / target: {v1194}"
    let v1196 : System.TimeSpan = failwith<System.TimeSpan> v1195
    let _v1116 = v1196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1199 : US3 = US3_0
    let v1200 : US4 = US4_3(v1199)
    let v1201 : string = $"date_time.get_utc_offset / target: {v1200}"
    let v1202 : System.TimeSpan = failwith<System.TimeSpan> v1201
    let _v1116 = v1202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1205 : US3 = US3_0
    let v1206 : US4 = US4_4(v1205)
    let v1207 : string = $"date_time.get_utc_offset / target: {v1206}"
    let v1208 : System.TimeSpan = failwith<System.TimeSpan> v1207
    let _v1116 = v1208 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1211 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1212 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1213 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1214 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1213 
    let _v1212 = v1214 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1215 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1218 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1218 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1221 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1221 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1224 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1224 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1227 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1212 = v1227 
    #endif
#else
    let v1228 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1212 = v1228 
    #endif
    let v1229 : System.TimeZoneInfo = _v1212 
    let v1234 : (System.DateTime -> System.TimeSpan) = v1211 v1229
    let v1235 : System.TimeSpan = v1234 v1
    let _v1116 = v1235 
    #endif
#else
    let v1236 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1237 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1238 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1239 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1238 
    let _v1237 = v1239 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1240 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1240 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1243 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1243 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1246 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1246 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1249 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1249 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1252 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1237 = v1252 
    #endif
#else
    let v1253 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1237 = v1253 
    #endif
    let v1254 : System.TimeZoneInfo = _v1237 
    let v1259 : (System.DateTime -> System.TimeSpan) = v1236 v1254
    let v1260 : System.TimeSpan = v1259 v1
    let _v1116 = v1260 
    #endif
    let v1261 : System.TimeSpan = _v1116 
    let v1269 : (System.TimeSpan -> int32) = _.Hours
    let v1270 : int32 = v1269 v1261
    let v1273 : bool = v1270 > 0
    let v1274 : uint8 =
        if v1273 then
            1uy
        else
            0uy
    let v1275 : string = method194()
    let v1276 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1277 : string = v1261.ToString v1275 
    let _v1276 = v1277 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1280 : string = v1261.ToString v1275 
    let _v1276 = v1280 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1283 : string = v1261.ToString v1275 
    let _v1276 = v1283 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1286 : string = v1261.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1276 = v1286 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1287 : string = v1261.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1276 = v1287 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1288 : string = v1261.ToString v1275 
    let _v1276 = v1288 
    #endif
#else
    let v1291 : string = v1261.ToString v1275 
    let _v1276 = v1291 
    #endif
    let v1294 : string = _v1276 
    let v1299 : string = $"{v1274}{v1294}"
    let v1300 : (System.Guid -> string) = _.ToString()
    let v1301 : string = v1300 v0
    let v1304 : int32 = v1080.Length
    let v1305 : int32 = v1299.Length
    let v1306 : int32 = v1304 + v1305
    let v1307 : (string -> int32) = String.length
    let v1308 : int32 = v1307 v1301
    let v1311 : int32 = v1306 |> int32 
    let v1318 : int32 = v1308 |> int32 
    let v1325 : int32 = v1318 - 1
    let v1326 : string = v1301.[int v1311..int v1325]
    let v1330 : string = $"{v1080}{v1299}{v1326}"
    let v1331 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1332 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1332 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1335 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1335 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1338 : System.Guid = null |> unbox<System.Guid>
    let _v1331 = v1338 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1341 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1341 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1344 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1347 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1347 
    #endif
#else
    let v1350 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1350 
    #endif
    let v1353 : System.Guid = _v1331 
    let _v2 = v1353 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1358 : string = method193()
    let v1359 : bool = v1358 = ""
    let v1361 : string =
        if v1359 then
            let v1360 : string = "M-d-y hh:mm:ss tt"
            v1360
        else
            v1358
    let v1362 : (string -> string) = v1.ToString
    let v1363 : string = v1362 v1361
    let v1377 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1378 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1379 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1378 
    let _v1377 = v1379 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1380 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1380 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1383 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1383 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1386 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1386 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1389 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1389 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1392 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1377 = v1392 
    #endif
#else
    let v1393 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1377 = v1393 
    #endif
    let v1394 : System.TimeZoneInfo = _v1377 
    let v1399 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1400 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1401 : (System.DateTime -> int64) = _.Ticks
    let v1402 : int64 = v1401 v1
    let _v1400 = v1402 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1403 : (System.DateTime -> int64) = _.Ticks
    let v1404 : int64 = v1403 v1
    let _v1400 = v1404 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1405 : int64 = null |> unbox<int64>
    let _v1400 = v1405 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1408 : (System.DateTime -> int64) = _.Ticks
    let v1409 : int64 = v1408 v1
    let _v1400 = v1409 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1410 : (System.DateTime -> int64) = _.Ticks
    let v1411 : int64 = v1410 v1
    let _v1400 = v1411 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1412 : (System.DateTime -> int64) = _.Ticks
    let v1413 : int64 = v1412 v1
    let _v1400 = v1413 
    #endif
#else
    let v1414 : (System.DateTime -> int64) = _.Ticks
    let v1415 : int64 = v1414 v1
    let _v1400 = v1415 
    #endif
    let v1416 : int64 = _v1400 
    let v1433 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1434 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1416) v1433 
    let v1435 : System.TimeSpan = v1434 |> System.TimeSpan 
    let _v1399 = v1435 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1438 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1439 : (System.DateTime -> int64) = _.Ticks
    let v1440 : int64 = v1439 v1
    let _v1438 = v1440 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1441 : (System.DateTime -> int64) = _.Ticks
    let v1442 : int64 = v1441 v1
    let _v1438 = v1442 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1443 : int64 = null |> unbox<int64>
    let _v1438 = v1443 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1446 : (System.DateTime -> int64) = _.Ticks
    let v1447 : int64 = v1446 v1
    let _v1438 = v1447 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1448 : (System.DateTime -> int64) = _.Ticks
    let v1449 : int64 = v1448 v1
    let _v1438 = v1449 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1450 : (System.DateTime -> int64) = _.Ticks
    let v1451 : int64 = v1450 v1
    let _v1438 = v1451 
    #endif
#else
    let v1452 : (System.DateTime -> int64) = _.Ticks
    let v1453 : int64 = v1452 v1
    let _v1438 = v1453 
    #endif
    let v1454 : int64 = _v1438 
    let v1471 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1472 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1454) v1471 
    let v1473 : System.TimeSpan = v1472 |> System.TimeSpan 
    let _v1399 = v1473 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1476 : US3 = US3_2
    let v1477 : US4 = US4_2(v1476)
    let v1478 : string = $"date_time.get_utc_offset / target: {v1477}"
    let v1479 : System.TimeSpan = failwith<System.TimeSpan> v1478
    let _v1399 = v1479 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1482 : US3 = US3_0
    let v1483 : US4 = US4_3(v1482)
    let v1484 : string = $"date_time.get_utc_offset / target: {v1483}"
    let v1485 : System.TimeSpan = failwith<System.TimeSpan> v1484
    let _v1399 = v1485 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1488 : US3 = US3_0
    let v1489 : US4 = US4_4(v1488)
    let v1490 : string = $"date_time.get_utc_offset / target: {v1489}"
    let v1491 : System.TimeSpan = failwith<System.TimeSpan> v1490
    let _v1399 = v1491 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1494 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1495 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1496 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1497 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1496 
    let _v1495 = v1497 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1498 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1498 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1501 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1501 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1504 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1504 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1507 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1507 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1510 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1495 = v1510 
    #endif
#else
    let v1511 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1495 = v1511 
    #endif
    let v1512 : System.TimeZoneInfo = _v1495 
    let v1517 : (System.DateTime -> System.TimeSpan) = v1494 v1512
    let v1518 : System.TimeSpan = v1517 v1
    let _v1399 = v1518 
    #endif
#else
    let v1519 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1520 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1521 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1522 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1521 
    let _v1520 = v1522 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1523 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1523 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1526 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1526 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1529 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1529 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1532 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1532 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1535 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1520 = v1535 
    #endif
#else
    let v1536 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1520 = v1536 
    #endif
    let v1537 : System.TimeZoneInfo = _v1520 
    let v1542 : (System.DateTime -> System.TimeSpan) = v1519 v1537
    let v1543 : System.TimeSpan = v1542 v1
    let _v1399 = v1543 
    #endif
    let v1544 : System.TimeSpan = _v1399 
    let v1552 : (System.TimeSpan -> int32) = _.Hours
    let v1553 : int32 = v1552 v1544
    let v1556 : bool = v1553 > 0
    let v1557 : uint8 =
        if v1556 then
            1uy
        else
            0uy
    let v1558 : string = method194()
    let v1559 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1560 : string = v1544.ToString v1558 
    let _v1559 = v1560 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1563 : string = v1544.ToString v1558 
    let _v1559 = v1563 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1566 : string = v1544.ToString v1558 
    let _v1559 = v1566 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1569 : string = v1544.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1559 = v1569 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1570 : string = v1544.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1559 = v1570 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1571 : string = v1544.ToString v1558 
    let _v1559 = v1571 
    #endif
#else
    let v1574 : string = v1544.ToString v1558 
    let _v1559 = v1574 
    #endif
    let v1577 : string = _v1559 
    let v1582 : string = $"{v1557}{v1577}"
    let v1583 : (System.Guid -> string) = _.ToString()
    let v1584 : string = v1583 v0
    let v1587 : int32 = v1363.Length
    let v1588 : int32 = v1582.Length
    let v1589 : int32 = v1587 + v1588
    let v1590 : (string -> int32) = String.length
    let v1591 : int32 = v1590 v1584
    let v1594 : int32 = v1589 |> int32 
    let v1601 : int32 = v1591 |> int32 
    let v1608 : int32 = v1601 - 1
    let v1609 : string = v1584.[int v1594..int v1608]
    let v1613 : string = $"{v1363}{v1582}{v1609}"
    let v1614 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1615 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1615 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1618 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1618 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1621 : System.Guid = null |> unbox<System.Guid>
    let _v1614 = v1621 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1624 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1624 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1627 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1627 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1630 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1630 
    #endif
#else
    let v1633 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1633 
    #endif
    let v1636 : System.Guid = _v1614 
    let _v2 = v1636 
    #endif
#else
    let v1641 : string = method193()
    let v1642 : bool = v1641 = ""
    let v1644 : string =
        if v1642 then
            let v1643 : string = "M-d-y hh:mm:ss tt"
            v1643
        else
            v1641
    let v1645 : (string -> string) = v1.ToString
    let v1646 : string = v1645 v1644
    let v1660 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1661 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1662 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1661 
    let _v1660 = v1662 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1663 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1663 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1666 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1666 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1669 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1669 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1672 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1672 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1675 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1660 = v1675 
    #endif
#else
    let v1676 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1660 = v1676 
    #endif
    let v1677 : System.TimeZoneInfo = _v1660 
    let v1682 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1683 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1684 : (System.DateTime -> int64) = _.Ticks
    let v1685 : int64 = v1684 v1
    let _v1683 = v1685 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1686 : (System.DateTime -> int64) = _.Ticks
    let v1687 : int64 = v1686 v1
    let _v1683 = v1687 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1688 : int64 = null |> unbox<int64>
    let _v1683 = v1688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1691 : (System.DateTime -> int64) = _.Ticks
    let v1692 : int64 = v1691 v1
    let _v1683 = v1692 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1693 : (System.DateTime -> int64) = _.Ticks
    let v1694 : int64 = v1693 v1
    let _v1683 = v1694 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1695 : (System.DateTime -> int64) = _.Ticks
    let v1696 : int64 = v1695 v1
    let _v1683 = v1696 
    #endif
#else
    let v1697 : (System.DateTime -> int64) = _.Ticks
    let v1698 : int64 = v1697 v1
    let _v1683 = v1698 
    #endif
    let v1699 : int64 = _v1683 
    let v1716 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1717 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1699) v1716 
    let v1718 : System.TimeSpan = v1717 |> System.TimeSpan 
    let _v1682 = v1718 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1721 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1722 : (System.DateTime -> int64) = _.Ticks
    let v1723 : int64 = v1722 v1
    let _v1721 = v1723 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1724 : (System.DateTime -> int64) = _.Ticks
    let v1725 : int64 = v1724 v1
    let _v1721 = v1725 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1726 : int64 = null |> unbox<int64>
    let _v1721 = v1726 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1729 : (System.DateTime -> int64) = _.Ticks
    let v1730 : int64 = v1729 v1
    let _v1721 = v1730 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1731 : (System.DateTime -> int64) = _.Ticks
    let v1732 : int64 = v1731 v1
    let _v1721 = v1732 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1733 : (System.DateTime -> int64) = _.Ticks
    let v1734 : int64 = v1733 v1
    let _v1721 = v1734 
    #endif
#else
    let v1735 : (System.DateTime -> int64) = _.Ticks
    let v1736 : int64 = v1735 v1
    let _v1721 = v1736 
    #endif
    let v1737 : int64 = _v1721 
    let v1754 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1755 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1737) v1754 
    let v1756 : System.TimeSpan = v1755 |> System.TimeSpan 
    let _v1682 = v1756 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1759 : US3 = US3_2
    let v1760 : US4 = US4_2(v1759)
    let v1761 : string = $"date_time.get_utc_offset / target: {v1760}"
    let v1762 : System.TimeSpan = failwith<System.TimeSpan> v1761
    let _v1682 = v1762 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1765 : US3 = US3_0
    let v1766 : US4 = US4_3(v1765)
    let v1767 : string = $"date_time.get_utc_offset / target: {v1766}"
    let v1768 : System.TimeSpan = failwith<System.TimeSpan> v1767
    let _v1682 = v1768 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1771 : US3 = US3_0
    let v1772 : US4 = US4_4(v1771)
    let v1773 : string = $"date_time.get_utc_offset / target: {v1772}"
    let v1774 : System.TimeSpan = failwith<System.TimeSpan> v1773
    let _v1682 = v1774 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1777 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1778 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1779 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1780 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1779 
    let _v1778 = v1780 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1781 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1781 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1784 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1784 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1787 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1787 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1790 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1790 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1793 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1778 = v1793 
    #endif
#else
    let v1794 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1778 = v1794 
    #endif
    let v1795 : System.TimeZoneInfo = _v1778 
    let v1800 : (System.DateTime -> System.TimeSpan) = v1777 v1795
    let v1801 : System.TimeSpan = v1800 v1
    let _v1682 = v1801 
    #endif
#else
    let v1802 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1803 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1804 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1805 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1804 
    let _v1803 = v1805 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1806 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1806 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1809 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1809 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1812 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1812 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1815 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1815 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1818 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1803 = v1818 
    #endif
#else
    let v1819 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1803 = v1819 
    #endif
    let v1820 : System.TimeZoneInfo = _v1803 
    let v1825 : (System.DateTime -> System.TimeSpan) = v1802 v1820
    let v1826 : System.TimeSpan = v1825 v1
    let _v1682 = v1826 
    #endif
    let v1827 : System.TimeSpan = _v1682 
    let v1835 : (System.TimeSpan -> int32) = _.Hours
    let v1836 : int32 = v1835 v1827
    let v1839 : bool = v1836 > 0
    let v1840 : uint8 =
        if v1839 then
            1uy
        else
            0uy
    let v1841 : string = method194()
    let v1842 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1843 : string = v1827.ToString v1841 
    let _v1842 = v1843 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1846 : string = v1827.ToString v1841 
    let _v1842 = v1846 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1849 : string = v1827.ToString v1841 
    let _v1842 = v1849 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1852 : string = v1827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1842 = v1852 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1853 : string = v1827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1842 = v1853 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1854 : string = v1827.ToString v1841 
    let _v1842 = v1854 
    #endif
#else
    let v1857 : string = v1827.ToString v1841 
    let _v1842 = v1857 
    #endif
    let v1860 : string = _v1842 
    let v1865 : string = $"{v1840}{v1860}"
    let v1866 : (System.Guid -> string) = _.ToString()
    let v1867 : string = v1866 v0
    let v1870 : int32 = v1646.Length
    let v1871 : int32 = v1865.Length
    let v1872 : int32 = v1870 + v1871
    let v1873 : (string -> int32) = String.length
    let v1874 : int32 = v1873 v1867
    let v1877 : int32 = v1872 |> int32 
    let v1884 : int32 = v1874 |> int32 
    let v1891 : int32 = v1884 - 1
    let v1892 : string = v1867.[int v1877..int v1891]
    let v1896 : string = $"{v1646}{v1865}{v1892}"
    let v1897 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1898 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1898 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1901 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1901 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1904 : System.Guid = null |> unbox<System.Guid>
    let _v1897 = v1904 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1907 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1907 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1910 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1910 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1913 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1913 
    #endif
#else
    let v1916 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1916 
    #endif
    let v1919 : System.Guid = _v1897 
    let _v2 = v1919 
    #endif
    let v1924 : System.Guid = _v2 
    v1924
and method195 (v0 : string, v1 : string) : unit =
    let v2 : bool = method32(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method44(v0)
        ()
    let v5 : string option = method34(v1)
    let v6 : string = ""
    let v7 : string = v5 |> Option.defaultValue v6 
    let v10 : bool = method32(v7)
    let v11 : bool = v10 = false
    if v11 then
        let v12 : System.IDisposable = method44(v7)
        ()
    let v13 : bool = method32(v1)
    let v24 : bool =
        if v13 then
            let v14 : Result<std_path_PathBuf, std_io_Error> = method148(v1)
            let v15 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v16 : string = "$0.is_err()"
            let v17 : bool = Fable.Core.RustInterop.emitRustExpr v14 v16 
            let _v15 = v17 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v14 v18 
            let _v15 = v19 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v14 v20 
            let _v15 = v21 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _v15 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _v15 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _v15 = true 
            #endif
#else
            let _v15 = true 
            #endif
            let v22 : bool = _v15 
            v22
        else
            false
    if v24 then
        let v25 : bool = true
        method56(v25, v1)
    let v26 : bool = method32(v1)
    let v27 : bool = v26 = false
    if v27 then
        let v28 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v29 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v30 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v29 
        let v31 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v31 
        let _v28 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v28 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v28 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v28 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v28 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v28 = () 
        #endif
#else
        let v33 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        let _v28 = () 
        #endif
        _v28 
        ()
and method197 () : string =
    let v0 : string = "("
    v0
and method198 () : string =
    let v0 : string = " "
    v0
and method199 (v0 : US36) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"%A{v0}"
    let v6 : string = $"{v3}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = v2.l0
    v14
and method203 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "is_error"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string =
        if v0 then
            let v33 : string = "true"
            v33
        else
            let v34 : string = "false"
            v34
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v5, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v5, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v53 : string = "retry"
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v62 : string = $"{v24}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v70 : string = $"{v1}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = $"{v44}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v86 : string = "result"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = $"{v24}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v5, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = $"{v2}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v111 : string = ", "
    let v112 : string = $"{v111}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v5, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v120 : string = $"{v3}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v5, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v128 : string = " }"
    let v129 : string = $"{v128}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v5, v129)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v137 : string = v5.l0
    v137
and method202 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method203(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "common.retry_fn' / loop"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure82 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method12()
        let v43 : string = $"{v1}/{v0}"
        let v44 : string = method202(v23, v24, v25, v26, v27, v28, v41, v42, v4, v43, v2, v3)
        method19(v44)
and method201 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method68(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US40 =
        if v11 then
            US40_0(v9, v10)
        else
            US40_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US40_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US40_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure82(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v71 : uint8 = v8 + 1uy
        method201(v0, v1, v2, v3, v4, v5, v6, v7, v71)
and method200 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method201(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method196 (v0 : US35, v1 : string, v2 : string, v3 : string, v4 : US12) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "cfg!(windows)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : US3 = US3_0
    let v18 : US4 = US4_3(v17)
    let v19 : string = $"platform.is_windows / target: {v18}"
    let v20 : bool = failwith<bool> v19
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : US3 = US3_0
    let v22 : US4 = US4_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _v10 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v25 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v26 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v27 : bool = v26 v25
    let _v10 = v27 
    #endif
#else
    let v28 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v29 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v30 : bool = v29 v28
    let _v10 = v30 
    #endif
    let v31 : bool = _v10 
    let v39 : string =
        if v31 then
            let v37 : string = "_WINDOWS"
            v37
        else
            let v38 : string = "_LINUX"
            v38
    let v40 : string = $" --define {v39}"
    let v136 : string =
        match v0 with
        | US35_1 -> (* None *)
            let v134 : string = ""
            v134
        | US35_0(v41) -> (* Some *)
            let v42 : string = Unchecked.defaultof<_>
            let v45 : string = Unchecked.defaultof<_>
            let v50 : bool =
                match v41 with
                | US36_0(v48) -> (* Wasm *)
                    let v49 : bool = v42 = v48
                    v49
                | _ ->
                    false
            let v82 : US5 =
                if v50 then
                    let v51 : string = "Wasm"
                    US5_0(v51)
                else
                    let v53 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v54 : string = method197()
                    let _v53 = v54 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v55 : string = method197()
                    let _v53 = v55 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v56 : string = method197()
                    let _v53 = v56 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v57 : string = method198()
                    let _v53 = v57 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v58 : string = method198()
                    let _v53 = v58 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v59 : string = method198()
                    let _v53 = v59 
                    #endif
#else
                    let v60 : string = method198()
                    let _v53 = v60 
                    #endif
                    let v61 : string = _v53 
                    let v66 : US36 = US36_0(v42)
                    let v67 : string = method199(v66)
                    let v68 : (string []) = v67.Split v61 
                    let v71 : string = v68.[int 0]
                    let v74 : string = method199(v41)
                    let v75 : bool = v74.StartsWith (v71, false, null)
                    if v75 then
                        let v78 : string = "Wasm"
                        US5_0(v78)
                    else
                        US5_1
            let v126 : US5 =
                match v82 with
                | US5_1 -> (* None *)
                    let v87 : bool =
                        match v41 with
                        | US36_1(v85) -> (* Contract *)
                            let v86 : bool = v45 = v85
                            v86
                        | _ ->
                            false
                    let v119 : US5 =
                        if v87 then
                            let v88 : string = "Contract"
                            US5_0(v88)
                        else
                            let v90 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v91 : string = method197()
                            let _v90 = v91 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v92 : string = method197()
                            let _v90 = v92 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v93 : string = method197()
                            let _v90 = v93 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v94 : string = method198()
                            let _v90 = v94 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v95 : string = method198()
                            let _v90 = v95 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v96 : string = method198()
                            let _v90 = v96 
                            #endif
#else
                            let v97 : string = method198()
                            let _v90 = v97 
                            #endif
                            let v98 : string = _v90 
                            let v103 : US36 = US36_1(v45)
                            let v104 : string = method199(v103)
                            let v105 : (string []) = v104.Split v98 
                            let v108 : string = v105.[int 0]
                            let v111 : string = method199(v41)
                            let v112 : bool = v111.StartsWith (v108, false, null)
                            if v112 then
                                let v115 : string = "Contract"
                                US5_0(v115)
                            else
                                US5_1
                    match v119 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v120) -> (* Some *)
                        US5_0(v120)
                | US5_0(v83) -> (* Some *)
                    US5_0(v83)
            let v130 : string =
                match v126 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v127) -> (* Some *)
                    v127
            let v131 : (unit -> string) = v130.ToUpper
            let v132 : string = v131 ()
            let v133 : string = $" --define {v132}"
            v133
    let v137 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v40}{v136}"
    let v143 : Result<string, string> =
        match v4 with
        | US12_1(v140) -> (* Error *)
            let v141 : Result<string, string> = Error v140 
            v141
        | US12_0(v138) -> (* Ok *)
            let v139 : Result<string, string> = Ok v138 
            v139
    let v144 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v145 : string = "$0.ok()"
    let v146 : string option = Fable.Core.RustInterop.emitRustExpr v143 v145 
    let _v144 = v146 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = "$0.ok()"
    let v148 : string option = Fable.Core.RustInterop.emitRustExpr v143 v147 
    let _v144 = v148 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : string = "$0.ok()"
    let v150 : string option = Fable.Core.RustInterop.emitRustExpr v143 v149 
    let _v144 = v150 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v152 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v152 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v153 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v153 
    #endif
#else
    let v154 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v154 
    #endif
    let v155 : string option = _v144 
    let v158 : uint8 = 3uy
    let v159 : bool = true
    method200(v158, v137, v5, v6, v7, v8, v159, v155)
and method205 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "dotnet_fable_result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method204 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method205(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_rust / dotnet fable error"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure83 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method204(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and closure84 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "near-sdk"
    let v4 : bool = v2.Contains v3 
    v4
and method206 () : (std_string_String -> bool) =
    closure84()
and method207 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method208 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method209 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method210 () : string =
    let v0 : string = "("
    v0
and method211 () : string =
    let v0 : string = "("
    v0
and method213 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : string = "true; let _capture_move = (move || { //"
    let v51 : bool = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "Box::new($0)"
    let v53 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v45 v52 
    let v54 : string = "Box::leak($0)"
    let v55 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : string = "$0"
    let v57 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v56 
    let v58 : string = $"$0.captures_iter(v55)"
    let v59 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "true; let _regex_captures : Vec<_> = v59.map(|x| { //"
    let v61 : bool = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = $"x"
    let v63 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v62 
    let v64 : string = "Box::new($0)"
    let v65 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : string = "Box::leak($0)"
    let v67 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : string = $"$0.capture_names()"
    let v69 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v68 
    let v70 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v69.map(|x| { //"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "x.unwrap_or(\"\").to_string().into()"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "$0.clone()"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = $"v67.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v73 v76 
    let v78 : (string * string) = v75, v77 
    let v79 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "_regex_captures"
    let v82 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "true; $0 }).collect::<Vec<_>>()"
    let v84 : bool = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "_regex_captures"
    let v86 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : string = "true; $0 })()"
    let v88 : bool = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "_capture_move"
    let v90 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v89 
    v90
and closure85 () (v0 : std_collections_HashMap<string, string>) : US41 =
    US41_0(v0)
and method214 () : (std_collections_HashMap<string, string> -> US41) =
    closure85()
and method215 () : string =
    let v0 : string = "a"
    v0
and closure86 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method12()
        let v42 : string = $"{v0}/{3uy}"
        let v43 : string = method202(v22, v23, v24, v25, v26, v27, v40, v41, v3, v42, v1, v2)
        method19(v43)
and method212 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = "$0.ok()"
    let v17 : string option = Fable.Core.RustInterop.emitRustExpr v14 v16 
    let _v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v18 : string = "$0.ok()"
    let v19 : string option = Fable.Core.RustInterop.emitRustExpr v14 v18 
    let _v15 = v19 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v20 : string = "$0.ok()"
    let v21 : string option = Fable.Core.RustInterop.emitRustExpr v14 v20 
    let _v15 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v24 
    #endif
#else
    let v25 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v25 
    #endif
    let v26 : string option = _v15 
    let v29 : bool = true
    let struct (v30 : int32, v31 : string) = method68(v8, v3, v4, v5, v6, v29, v26)
    let v32 : string = "failed to load manifest for workspace member"
    let v33 : bool = v31.Contains v32 
    let v36 : bool = v33 = false
    let v177 : US40 =
        if v36 then
            let v37 : bool = v30 = 0
            if v37 then
                US40_0(v30, v31)
            else
                US40_1(v30, v31)
        else
            let v41 : string = $"regex::Regex::new(&$0)"
            let v42 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v43 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v42 v41 
            let v44 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v45 : string = "$0.unwrap()"
            let v46 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v45 
            let _v44 = v46 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v47 : string = "$0.unwrap()"
            let v48 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v47 
            let _v44 = v48 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v49 : string = "$0.unwrap()"
            let v50 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v49 
            let _v44 = v50 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v51 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v51 
            #endif
#if FABLE_COMPILER_PYTHON
            let v52 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v52 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v53 
            #endif
#else
            let v54 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v54 
            #endif
            let v55 : regex_Regex = _v44 
            let v58 : Vec<std_collections_HashMap<string, string>> = method213(v31, v55)
            let v59 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v60 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : std_collections_HashMap<string, string> option = v60 |> Array.tryItem 0 
            let v62 : (std_collections_HashMap<string, string> -> US41) = method214()
            let v63 : US41 option = v61 |> Option.map v62 
            let v74 : US41 = US41_1
            let v75 : US41 = v63 |> Option.defaultValue v74 
            let v103 : US42 =
                match v75 with
                | US41_1 -> (* None *)
                    US42_1
                | US41_0(v79) -> (* Some *)
                    let v80 : string = method215()
                    let v81 : string = "std::collections::HashMap::get(&$0, &v80).map(|x| x).cloned()"
                    let v82 : string option = Fable.Core.RustInterop.emitRustExpr v79 v81 
                    let v83 : (string -> US5) = method6()
                    let v84 : US5 option = v82 |> Option.map v83 
                    let v95 : US5 = US5_1
                    let v96 : US5 = v84 |> Option.defaultValue v95 
                    US42_0(v96)
            let v110 : US5 =
                match v103 with
                | US42_0(v104) -> (* Some *)
                    match v104 with
                    | US5_0(v105) -> (* Some *)
                        US5_0(v105)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v110 with
            | US5_1 -> (* None *)
                US40_1(v30, v31)
            | US5_0(v112) -> (* Some *)
                let v113 : bool = method43(v112)
                let v114 : bool = v113 = false
                if v114 then
                    let v115 : string option = method34(v112)
                    let v116 : string = ""
                    let v117 : string = v115 |> Option.defaultValue v116 
                    let v120 : System.IDisposable = method44(v117)
                    let v121 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v122 : System.DateTime = System.DateTime.Now
                    let _v121 = v122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v123 : System.DateTime = System.DateTime.Now
                    let _v121 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : System.DateTime = null |> unbox<System.DateTime>
                    let _v121 = v124 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : System.DateTime = System.DateTime.Now
                    let _v121 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v128 : System.DateTime = System.DateTime.Now
                    let _v121 = v128 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v129 : System.DateTime = System.DateTime.Now
                    let _v121 = v129 
                    #endif
#else
                    let v130 : System.DateTime = System.DateTime.Now
                    let _v121 = v130 
                    #endif
                    let v131 : System.DateTime = _v121 
                    let v136 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v137 : System.Guid = v136 ()
                    let v140 : System.Guid = method190(v137, v131)
                    let v141 : (System.Guid -> string) = _.ToString()
                    let v142 : string = v141 v140
                    let v145 : string = $"[package]"
                    let v146 : string = $"name = \"spiral_builder_{v142}\""
                    let v147 : string = "\n"
                    let v148 : string = v145 + v147 
                    let v149 : string = v148 + v146 
                    let v150 : string = $"version = \"0.0.1\""
                    let v151 : string = v149 + v147 
                    let v152 : string = v151 + v150 
                    let v153 : string = $"edition = \"2021\""
                    let v154 : string = v152 + v147 
                    let v155 : string = v154 + v153 
                    let v156 : string = $""
                    let v157 : string = v155 + v147 
                    let v158 : string = v157 + v156 
                    let v159 : string = $"[[bin]]"
                    let v160 : string = v158 + v147 
                    let v161 : string = v160 + v159 
                    let v162 : string = $"name = \"spiral_builder_{v142}\""
                    let v163 : string = v161 + v147 
                    let v164 : string = v163 + v162 
                    let v165 : string = $"path = \"spiral_builder.rs\""
                    let v166 : string = v164 + v147 
                    let v167 : string = v166 + v165 
                    let v168 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v112, v167) v169 
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let _v168 = () 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let _v168 = () 
                    #endif
#else
                    let v170 : string = method67(v167)
                    System.IO.File.WriteAllText (v112, v170)
                    let _v168 = () 
                    #endif
                    _v168 
                    ()
                let v171 : bool = v30 = 0
                if v171 then
                    US40_0(v30, v31)
                else
                    US40_1(v30, v31)
    let struct (v185 : bool, v186 : int32, v187 : string) =
        match v177 with
        | US40_1(v180, v181) -> (* Error *)
            struct (true, v180, v181)
        | US40_0(v178, v179) -> (* Ok *)
            struct (false, v178, v179)
    let v188 : bool = v185 = false
    let v190 : bool =
        if v188 then
            true
        else
            let v189 : bool = v2 >= 3uy
            v189
    if v190 then
        struct (v186, v187)
    else
        let v191 : unit = ()
        let v192 : (unit -> unit) = closure86(v2, v186, v187, v185)
        let v193 : unit = (fun () -> v192 (); v191) ()
        let v234 : uint8 = v2 + 1uy
        method212(v0, v1, v234)
and method217 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "cargo_fmt_result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method216 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method217(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_rust / cargo fmt error"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure87 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method216(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method218 () : string =
    let v0 : string = "{"
    v0
and closure88 () (v0 : string) : string =
    v0
and closure89 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure90 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method220 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v6, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v6, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v6, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v6, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "new_code_path"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v25}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v6, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = $"{v1}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v6, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = $"{v42}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v84 : string = "external_command"
    let v85 : string = $"{v84}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v93 : string = $"{v25}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v6, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = $"{v2}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v109 : string = $"{v42}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v6, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v117 : string = "cleanup"
    let v118 : string = $"{v117}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v6, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v126 : string = $"{v25}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v6, v126)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v136 : string =
        if v3 then
            let v134 : string = "true"
            v134
        else
            let v135 : string = "false"
            v135
    let v137 : string = $"{v136}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v6, v137)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v145 : string = $"{v42}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = "cargo_result"
    let v154 : string = $"{v153}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v6, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v162 : string = $"{v25}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v170 : string = $"{v4}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v6, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v178 : string = " }"
    let v179 : string = $"{v178}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v6, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = v6.l0
    v187
and method219 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method220(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v15 : string = "spiral_builder.process_rust / error"
    let v16 : string = $"{v6} {v7} #{v14} %s{v15} / {v13}"
    method18(v16)
and closure91 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method49()
        let v43 : string = method219(v23, v24, v25, v26, v27, v28, v41, v42, v3, v1, v4, v0, v2)
        method19(v43)
and closure93 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v5 : bool = v2 = false
    if v5 then
        let v6 : string = "profile [unoptimized] target"
        let v7 : bool = v0.Contains v6 
        let v10 : bool = v7 = false
        if v10 then
            let v11 : string = "profile [unoptimized + debuginfo] target"
            let v12 : bool = v0.Contains v11 
            let v15 : bool = v12 = false
            v15
        else
            false
    else
        false
and closure92 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : (string -> bool) = closure93()
    let v6 : (string []) = v2 |> Array.skipWhile v5 
    let v7 : (string []) = v6 |> Array.skip 2 
    let v8 : string seq = v7 |> Seq.ofArray
    let v11 : string = method40()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v8
and method222 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _v33 = v55 
    #endif
    let v58 : string = _v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "new_code_path"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "external_command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "cargo_result"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method221 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method222(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_rust / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure95 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method221(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure94 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure95(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method224 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v6, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v6, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v6, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v6, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "new_code_path"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v25}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v6, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = $"{v1}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v6, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = $"{v42}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v84 : string = "cargo_result"
    let v85 : string = $"{v84}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v93 : string = $"{v25}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v6, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = $"{v2}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v109 : string = $"{v42}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v6, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v117 : string = "cleanup"
    let v118 : string = $"{v117}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v6, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v126 : string = $"{v25}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v6, v126)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v136 : string =
        if v3 then
            let v134 : string = "true"
            v134
        else
            let v135 : string = "false"
            v135
    let v137 : string = $"{v136}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v6, v137)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v145 : string = $"{v42}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = "spiral_wasm_result"
    let v154 : string = $"{v153}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v6, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v162 : string = $"{v25}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v170 : string = $"{v4}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v6, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v178 : string = " }"
    let v179 : string = $"{v178}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v6, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = v6.l0
    v187
and method223 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method224(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v15 : string = "spiral_builder.process_rust / wasm error"
    let v16 : string = $"{v6} {v7} #{v14} %s{v15} / {v13}"
    method18(v16)
and closure96 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method49()
        let v43 : string = $"\n{v3}"
        let v44 : string = method223(v23, v24, v25, v26, v27, v28, v41, v42, v4, v1, v2, v0, v43)
        method19(v44)
and method226 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method14()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v7, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v7, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v7, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v7, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v43 : string = "; "
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v7, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = "new_code_path"
    let v53 : string = $"{v52}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v7, v53)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v61 : string = $"{v26}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v7, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v69 : string = $"{v1}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v7, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = $"{v43}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v7, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v85 : string = "wasm_path"
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v7, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v94 : string = $"{v26}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v7, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v102 : string = $"{v2}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v7, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v110 : string = $"{v43}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v7, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v118 : string = "command"
    let v119 : string = $"{v118}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v7, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v127 : string = $"{v26}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v7, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v135 : string = $"{v3}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v7, v135)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v143 : string = $"{v43}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v7, v143)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v151 : string = "cleanup"
    let v152 : string = $"{v151}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v7, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v160 : string = $"{v26}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v7, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v170 : string =
        if v4 then
            let v168 : string = "true"
            v168
        else
            let v169 : string = "false"
            v169
    let v171 : string = $"{v170}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v7, v171)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v179 : string = $"{v43}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v7, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = "cargo_result"
    let v188 : string = $"{v187}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v7, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v196 : string = $"{v26}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v7, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v204 : string = $"{v5}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v7, v204)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v212 : string = " }"
    let v213 : string = $"{v212}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v7, v213)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v221 : string = v7.l0
    v221
and method225 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method226(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v16 : string = "spiral_builder.process_rust / cargo error"
    let v17 : string = $"{v6} {v7} #{v15} %s{v16} / {v14}"
    method18(v17)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v8 : unit = ()
        let v9 : (unit -> unit) = closure2()
        let v10 : unit = (fun () -> v9 (); v8) ()
        let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
        let v42 : string = method8(v24, v25, v26, v27, v28, v29)
        let v43 : string = method49()
        let v44 : string = $"\n{v2}"
        let v45 : string = method225(v24, v25, v26, v27, v28, v29, v42, v43, v3, v1, v4, v5, v0, v44)
        method19(v45)
and method228 (v0 : string, v1 : UH4) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "new_code_path"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "cleanup"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"%A{v1}"
    let v68 : string = $"{v65}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v3, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = " }"
    let v77 : string = $"{v76}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v3, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v85 : string = v3.l0
    v85
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH4 = UH4_0
    let v20 : UH4 = UH4_1(v17, v18, v19)
    let v21 : UH4 = UH4_1(v15, v16, v20)
    let v22 : UH4 = UH4_1(v13, v14, v21)
    let v23 : UH4 = UH4_1(v11, v12, v22)
    let v24 : UH4 = UH4_1(v9, v10, v23)
    let v25 : string = method228(v8, v24)
    let v26 : int64 = v0.l0
    let v27 : string = "spiral_builder.process_rust / cleanup"
    let v28 : string = $"{v6} {v7} #{v26} %s{v27} / {v25}"
    method18(v28)
and closure98 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v13 : unit = ()
        let v14 : (unit -> unit) = closure2()
        let v15 : unit = (fun () -> v14 (); v13) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method52()
        let v49 : string = method227(v29, v30, v31, v32, v33, v34, v47, v48, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method19(v49)
and method229 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v5 
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#else
        let v6 : (string -> unit) = System.IO.File.Delete
        v6 v1
        let _v4 = () 
        #endif
        _v4 
        method229(v3)
    | UH4_0 -> (* Nil *)
        ()
and method230 (v0 : string) : string =
    v0
and method231 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure100 () (v0 : std_fs_FileType) : US43 =
    US43_0(v0)
and method232 () : (std_fs_FileType -> US43) =
    closure100()
and closure101 () (v0 : std_string_String) : US43 =
    US43_1(v0)
and method233 () : (std_string_String -> US43) =
    closure101()
and method234 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method235 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.file_name()"
    let v75 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "$0.to_os_string()"
    let v81 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.to_str()"
    let v83 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.unwrap()"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "String::from($0)"
    let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v87 
    let _v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v89 
    let _v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v96 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v99 
    #endif
#else
    let v102 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v102 
    #endif
    let v105 : std_string_String = _v86 
    let v110 : string = "fable_library_rust::String_::fromString($0)"
    let v111 : string = Fable.Core.RustInterop.emitRustExpr v105 v110 
    let v112 : string = "true; $0 })"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "_optionm_map_"
    let v115 : string option = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : (string -> US5) = method6()
    let v117 : US5 option = v115 |> Option.map v116 
    let v128 : US5 = US5_1
    let v129 : US5 = v117 |> Option.defaultValue v128 
    let v136 : string =
        match v129 with
        | US5_1 -> (* None *)
            let v134 : string = ""
            v134
        | US5_0(v133) -> (* Some *)
            v133
    let _v1 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : string = null |> unbox<string>
    let _v1 = v137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : string = null |> unbox<string>
    let _v1 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : string = null |> unbox<string>
    let _v1 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : string = null |> unbox<string>
    let _v1 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v149 : (string -> string) = System.IO.Path.GetDirectoryName
    let v150 : string = v149 v0
    let _v1 = v150 
    #endif
#else
    let v151 : (string -> string) = System.IO.Path.GetDirectoryName
    let v152 : string = v151 v0
    let _v1 = v152 
    #endif
    let v153 : string = _v1 
    v153
and method236 (v0 : US44) : US44 =
    v0
and method237 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and closure99 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "true; let __future_init = Box::pin(async move { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : async_walkdir_DirEntry = method231(v1)
    let v7 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v6))"
    let v8 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "v8.await"
    let v10 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : (std_io_Error -> std_string_String) = method46()
    let v12 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v10, v11) v13 
    let _v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v10, v11) v15 
    let _v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v10, v11) v17 
    let _v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v21 
    #endif
#else
    let v22 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v22 
    #endif
    let v23 : Result<std_fs_FileType, std_string_String> = _v12 
    let v26 : (std_fs_FileType -> US43) = method232()
    let v27 : (std_string_String -> US43) = method233()
    let v28 : US43 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v210 : US44 =
        match v28 with
        | US43_0(v29) -> (* Ok *)
            let v30 : std_fs_FileType = method234(v29)
            let v31 : string = "std::fs::FileType::is_dir(&v30)"
            let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
            let v33 : bool = v32 = false
            if v33 then
                US44_0
            else
                let v35 : string = "async_walkdir::DirEntry::path(&$0)"
                let v36 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v35 
                let v37 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v38 : string = "$0.display()"
                let v39 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v36 v38 
                let _v37 = v39 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v40 : string = "$0.display()"
                let v41 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v36 v40 
                let _v37 = v41 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v42 : string = "$0.display()"
                let v43 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v36 v42 
                let _v37 = v43 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v44 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v44 
                #endif
#if FABLE_COMPILER_PYTHON
                let v47 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v47 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v50 
                #endif
#else
                let v53 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v53 
                #endif
                let v56 : std_path_Display = _v37 
                let v61 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v62 : string = "format!(\"{}\", $0)"
                let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v56 v62 
                let _v61 = v63 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v64 : string = "format!(\"{}\", $0)"
                let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v56 v64 
                let _v61 = v65 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v66 : string = "format!(\"{}\", $0)"
                let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v56 v66 
                let _v61 = v67 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v68 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v68 
                #endif
#if FABLE_COMPILER_PYTHON
                let v71 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v71 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v74 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v74 
                #endif
#else
                let v77 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v77 
                #endif
                let v80 : std_string_String = _v61 
                let v85 : string = "fable_library_rust::String_::fromString($0)"
                let v86 : string = Fable.Core.RustInterop.emitRustExpr v80 v85 
                let v87 : string = method235(v86)
                let v88 : bool = v87.StartsWith (v0, false, null)
                let v91 : bool = v88 = false
                if v91 then
                    US44_1
                else
                    let v93 : string option = method34(v86)
                    let v94 : (string -> US5) = method6()
                    let v95 : US5 option = v93 |> Option.map v94 
                    let v106 : US5 = US5_1
                    let v107 : US5 = v95 |> Option.defaultValue v106 
                    match v107 with
                    | US5_0(v111) -> (* Some *)
                        let v112 : bool = v111.Contains v0 
                        let v115 : bool = v112 = false
                        if v115 then
                            US44_2
                        else
                            US44_1
                    | _ ->
                        US44_1
        | _ ->
            let v123 : string = "async_walkdir::DirEntry::path(&$0)"
            let v124 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v123 
            let v125 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v126 : string = "$0.display()"
            let v127 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v126 
            let _v125 = v127 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v128 : string = "$0.display()"
            let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v128 
            let _v125 = v129 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v130 : string = "$0.display()"
            let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v130 
            let _v125 = v131 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v132 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v132 
            #endif
#if FABLE_COMPILER_PYTHON
            let v135 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v135 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v138 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v138 
            #endif
#else
            let v141 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v141 
            #endif
            let v144 : std_path_Display = _v125 
            let v149 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v150 : string = "format!(\"{}\", $0)"
            let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v150 
            let _v149 = v151 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v152 : string = "format!(\"{}\", $0)"
            let v153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v152 
            let _v149 = v153 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v154 : string = "format!(\"{}\", $0)"
            let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v154 
            let _v149 = v155 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v156 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v156 
            #endif
#if FABLE_COMPILER_PYTHON
            let v159 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v159 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v162 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v162 
            #endif
#else
            let v165 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v165 
            #endif
            let v168 : std_string_String = _v149 
            let v173 : string = "fable_library_rust::String_::fromString($0)"
            let v174 : string = Fable.Core.RustInterop.emitRustExpr v168 v173 
            let v175 : string = method235(v174)
            let v176 : bool = v175.StartsWith (v0, false, null)
            let v179 : bool = v176 = false
            if v179 then
                US44_1
            else
                let v181 : string option = method34(v174)
                let v182 : (string -> US5) = method6()
                let v183 : US5 option = v181 |> Option.map v182 
                let v194 : US5 = US5_1
                let v195 : US5 = v183 |> Option.defaultValue v194 
                match v195 with
                | US5_0(v199) -> (* Some *)
                    let v200 : bool = v199.Contains v0 
                    let v203 : bool = v200 = false
                    if v203 then
                        US44_2
                    else
                        US44_1
                | _ ->
                    US44_1
    let v211 : US44 = method236(v210)
    let v212 : string = ""
    let v213 : string = "}"
    let v214 : string = v212 + v213 
    let v215 : _ = v211 
    let v216 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v217 : string = $"true; let v215 = $0"
    let v218 : bool = Fable.Core.RustInterop.emitRustExpr v215 v217 
    let _v216 = v218 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v219 : string = $"true; let v215 = $0"
    let v220 : bool = Fable.Core.RustInterop.emitRustExpr v215 v219 
    let _v216 = v220 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v221 : string = $"true; let v215 = $0"
    let v222 : bool = Fable.Core.RustInterop.emitRustExpr v215 v221 
    let _v216 = v222 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v223 : bool = true
    let _v216 = v223 
    #endif
#if FABLE_COMPILER_PYTHON
    let v224 : bool = true
    let _v216 = v224 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v225 : bool = true
    let _v216 = v225 
    #endif
#else
    let v226 : bool = true
    let _v216 = v226 
    #endif
    let v227 : bool = _v216 
    let v230 : string = $"true; v215 " + v214 + "); " + v212 + " // rust.fix_closure'"
    let v231 : bool = Fable.Core.RustInterop.emitRustExpr () v230 
    let v232 : string = "__future_init"
    let v233 : _ = Fable.Core.RustInterop.emitRustExpr () v232 
    let v234 : string = "v233"
    let v235 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US44>>, Send<Dyn<std_future_Future<US44>>>>>> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "v235.await"
    let v237 : US44 = Fable.Core.RustInterop.emitRustExpr () v236 
    let v246 : async_walkdir_Filtering =
        match v237 with
        | US44_2 -> (* Continue *)
            let v242 : string = "async_walkdir::Filtering::Continue"
            let v243 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v242 
            v243
        | US44_0 -> (* Ignore *)
            let v238 : string = "async_walkdir::Filtering::Ignore"
            let v239 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v238 
            v239
        | US44_1 -> (* IgnoreDir *)
            let v240 : string = "async_walkdir::Filtering::IgnoreDir"
            let v241 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v240 
            v241
    let v247 : async_walkdir_Filtering = method237(v246)
    let v248 : string = v212 + v213 
    let v249 : _ = v247 
    let v250 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v251 : string = $"true; let v249 = $0"
    let v252 : bool = Fable.Core.RustInterop.emitRustExpr v249 v251 
    let _v250 = v252 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v253 : string = $"true; let v249 = $0"
    let v254 : bool = Fable.Core.RustInterop.emitRustExpr v249 v253 
    let _v250 = v254 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v255 : string = $"true; let v249 = $0"
    let v256 : bool = Fable.Core.RustInterop.emitRustExpr v249 v255 
    let _v250 = v256 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v257 : bool = true
    let _v250 = v257 
    #endif
#if FABLE_COMPILER_PYTHON
    let v258 : bool = true
    let _v250 = v258 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v259 : bool = true
    let _v250 = v259 
    #endif
#else
    let v260 : bool = true
    let _v250 = v260 
    #endif
    let v261 : bool = _v250 
    let v264 : string = $"true; v249 " + v248 + "); " + v212 + " // rust.fix_closure'"
    let v265 : bool = Fable.Core.RustInterop.emitRustExpr () v264 
    let v266 : string = "__future_init"
    let v267 : _ = Fable.Core.RustInterop.emitRustExpr () v266 
    let v268 : string = "v267"
    let v269 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v268 
    v269
and closure103 () (v0 : async_walkdir_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method239 () : (async_walkdir_Error -> std_string_String) =
    closure103()
and closure104 () (v0 : async_walkdir_DirEntry) : US45 =
    US45_0(v0)
and method240 () : (async_walkdir_DirEntry -> US45) =
    closure104()
and closure105 () (v0 : std_string_String) : US45 =
    US45_1(v0)
and method241 () : (std_string_String -> US45) =
    closure105()
and method242 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method99(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_typescript / stream_filter_map"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure106 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method49()
        let v39 : string = method242(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure102 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method239()
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "$0.map_err(|x| $1(x))"
    let v5 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v12 
    #endif
#else
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v13 
    #endif
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = _v3 
    let v17 : (async_walkdir_DirEntry -> US45) = method240()
    let v18 : (std_string_String -> US45) = method241()
    let v19 : US45 = match v14 with Ok x -> v17 x | Error x -> v18 x
    let v193 : US46 =
        match v19 with
        | US45_1(v148) -> (* Error *)
            let v149 : unit = ()
            let v150 : (unit -> unit) = closure106(v148)
            let v151 : unit = (fun () -> v150 (); v149) ()
            US46_1
        | US45_0(v20) -> (* Ok *)
            let v21 : string = "async_walkdir::DirEntry::path(&$0)"
            let v22 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v20 v21 
            let v23 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v24 : string = "$0.display()"
            let v25 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v24 
            let _v23 = v25 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v26 : string = "$0.display()"
            let v27 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v26 
            let _v23 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : string = "$0.display()"
            let v29 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v28 
            let _v23 = v29 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v30 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v30 
            #endif
#if FABLE_COMPILER_PYTHON
            let v33 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v33 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v36 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v36 
            #endif
#else
            let v39 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v39 
            #endif
            let v42 : std_path_Display = _v23 
            let v47 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v48 : string = "format!(\"{}\", $0)"
            let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v48 
            let _v47 = v49 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v50 : string = "format!(\"{}\", $0)"
            let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v50 
            let _v47 = v51 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v52 : string = "format!(\"{}\", $0)"
            let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v52 
            let _v47 = v53 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v54 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v54 
            #endif
#if FABLE_COMPILER_PYTHON
            let v57 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v57 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v60 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v60 
            #endif
#else
            let v63 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v63 
            #endif
            let v66 : std_string_String = _v47 
            let v71 : string = "fable_library_rust::String_::fromString($0)"
            let v72 : string = Fable.Core.RustInterop.emitRustExpr v66 v71 
            let v73 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v74 : string = $"regex::Regex::new(&$0)"
            let v75 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v77 : string = "$0.unwrap()"
            let v78 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v77 
            let _v76 = v78 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v79 : string = "$0.unwrap()"
            let v80 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v79 
            let _v76 = v80 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v81 : string = "$0.unwrap()"
            let v82 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v81 
            let _v76 = v82 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v83 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v83 
            #endif
#if FABLE_COMPILER_PYTHON
            let v84 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v84 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v85 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v85 
            #endif
#else
            let v86 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v86 
            #endif
            let v87 : regex_Regex = _v76 
            let v90 : Vec<std_collections_HashMap<string, string>> = method213(v72, v87)
            let v91 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v92 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : std_collections_HashMap<string, string> option = v92 |> Array.tryItem 0 
            let v94 : (std_collections_HashMap<string, string> -> US41) = method214()
            let v95 : US41 option = v93 |> Option.map v94 
            let v106 : US41 = US41_1
            let v107 : US41 = v95 |> Option.defaultValue v106 
            let v135 : US42 =
                match v107 with
                | US41_1 -> (* None *)
                    US42_1
                | US41_0(v111) -> (* Some *)
                    let v112 : string = method215()
                    let v113 : string = "std::collections::HashMap::get(&$0, &v112).map(|x| x).cloned()"
                    let v114 : string option = Fable.Core.RustInterop.emitRustExpr v111 v113 
                    let v115 : (string -> US5) = method6()
                    let v116 : US5 option = v114 |> Option.map v115 
                    let v127 : US5 = US5_1
                    let v128 : US5 = v116 |> Option.defaultValue v127 
                    US42_0(v128)
            let v142 : US5 =
                match v135 with
                | US42_0(v136) -> (* Some *)
                    match v136 with
                    | US5_0(v137) -> (* Some *)
                        US5_0(v137)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v142 with
            | US5_1 -> (* None *)
                US46_1
            | US5_0(v143) -> (* Some *)
                US46_0(v72, v143)
    match v193 with
    | US46_1 -> (* None *)
        let v199 : struct (string * string) option = None
        v199
    | US46_0(v194, v195) -> (* Some *)
        let v196 : struct (string * string) option = Some struct (v194, v195) 
        v196
and method238 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure102(v0)
and closure107 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure108 () struct (v0 : string, v1 : string) : US46 =
    US46_0(v0, v1)
and method243 () : (struct (string * string) -> US46) =
    closure108()
and method245 (v0 : US46) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "version"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"%A{v0}"
    let v33 : string = $"{v30}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = " }"
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v2, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = v2.l0
    v50
and method244 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US46) : string =
    let v9 : string = method245(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_typescript"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure109 (v0 : US46) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method244(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method246 (v0 : string, v1 : string, v2 : US46) : unit =
    match v2 with
    | US46_1 -> (* None *)
        let v10 : string = $"spiral_builder.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US46_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method28(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method28(v0, v8)
        method195(v7, v9)
and method247 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method205(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_typescript"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure110 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method247(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method249 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "new_code_path"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method248 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method249(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_typescript"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure111 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method248(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method250 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method250(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method251 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method251(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure112 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method40()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method253 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _v33 = v55 
    #endif
    let v58 : string = _v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "new_code_path"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "external_command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "run_result"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method252 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method253(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_typescript / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure114 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method252(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure113 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure114(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method254 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method139(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_typescript / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure115 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method254(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and method255 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method205(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_python"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure116 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method255(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method256 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method249(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_python"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure117 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method256(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure118 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method40()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method257 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method253(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_python / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure120 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method257(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure119 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure120(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method258 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method139(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_python / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure121 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method258(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and method260 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "subcommand"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "format!(\"{:#?}\", $0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v36 : string = "format!(\"{:#?}\", $0)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v31 = v39 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v40 : string = "format!(\"{:#?}\", $0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v40 
    let v42 : string = "fable_library_rust::String_::fromString($0)"
    let v43 : string = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let _v31 = v43 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : string = $"%A{v0}"
    let _v31 = v44 
    #endif
#if FABLE_COMPILER_PYTHON
    let v47 : string = $"%A{v0}"
    let _v31 = v47 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v50 : string = $"%A{v0}"
    let _v31 = v50 
    #endif
#else
    let v53 : string = $"%A{v0}"
    let _v31 = v53 
    #endif
    let v56 : string = _v31 
    let v61 : string = $"{v56}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v3, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v69 : string = "; "
    let v70 : string = $"{v69}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = "arg_matches"
    let v79 : string = $"{v78}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v3, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v87 : string = $"{v22}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v3, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "format!(\"{:#?}\", $0)"
    let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v96 
    let v98 : string = "fable_library_rust::String_::fromString($0)"
    let v99 : string = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let _v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v100 : string = "format!(\"{:#?}\", $0)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v95 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "format!(\"{:#?}\", $0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v104 
    let v106 : string = "fable_library_rust::String_::fromString($0)"
    let v107 : string = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let _v95 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : string = $"%A{v1}"
    let _v95 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v111 : string = $"%A{v1}"
    let _v95 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : string = $"%A{v1}"
    let _v95 = v114 
    #endif
#else
    let v117 : string = $"%A{v1}"
    let _v95 = v117 
    #endif
    let v120 : string = _v95 
    let v125 : string = $"{v120}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = " }"
    let v134 : string = $"{v133}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v3, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v142 : string = v3.l0
    v142
and method259 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method260(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / invalid subcommand"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure122 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method259(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and closure123 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "&*$0"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "&*$0"
    let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v63 
    #endif
#else
    let v66 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v66 
    #endif
    let v69 : Ref<Str> = _v50 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "String::from($0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "String::from($0)"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v87 
    #endif
#else
    let v90 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v90 
    #endif
    let v93 : std_string_String = _v74 
    let v98 : (std_string_String * std_string_String) = v45, v93 
    v98
and closure124 () (v0 : serde_json_Error) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v20 v25 
    v26
and method261 () : (serde_json_Error -> string) =
    closure124()
and method262 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method20 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async move { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v5 : (Ref<Str> -> std_string_String) = closure11()
    let v6 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v5) v4 
    let v7 : (struct (std_string_String * clap_ArgMatches) -> US6) = method21()
    let v8 : US6 option = v6 |> Option.map v7 
    let v20 : US6 = US6_1
    let v21 : US6 = v8 |> Option.defaultValue v20 
    let v4788 : (struct (string * string) []) =
        match v21 with
        | US6_0(v25, v26) -> (* Some *)
            let v27 : string = "fable_library_rust::String_::fromString($0)"
            let v28 : string = Fable.Core.RustInterop.emitRustExpr v25 v27 
            let v29 : bool = v28 = "cuda"
            if v29 then
                let v30 : string = method22()
                let v31 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v32 : string = "&*$0"
                let v33 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v32 
                let _v31 = v33 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v34 : string = "&*$0"
                let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v34 
                let _v31 = v35 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v36 : string = "&*$0"
                let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v36 
                let _v31 = v37 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v38 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v38 
                #endif
#if FABLE_COMPILER_PYTHON
                let v41 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v41 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v44 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v44 
                #endif
#else
                let v47 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v47 
                #endif
                let v50 : Ref<Str> = _v31 
                let v55 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v56 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v50) v55 
                let v57 : (std_string_String -> US7) = method23()
                let v58 : US7 option = v56 |> Option.map v57 
                let v69 : US7 = US7_1
                let v70 : US7 = v58 |> Option.defaultValue v69 
                let v77 : std_string_String =
                    match v70 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v74) -> (* Some *)
                        v74
                let v78 : string = "fable_library_rust::String_::fromString($0)"
                let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
                let v80 : string = method24()
                let v81 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v82 : string = "&*$0"
                let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v82 
                let _v81 = v83 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v84 : string = "&*$0"
                let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v84 
                let _v81 = v85 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v86 : string = "&*$0"
                let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v86 
                let _v81 = v87 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v88 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v88 
                #endif
#if FABLE_COMPILER_PYTHON
                let v91 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v91 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v94 
                #endif
#else
                let v97 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v97 
                #endif
                let v100 : Ref<Str> = _v81 
                let v105 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v106 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v100) v105 
                let v107 : (std_string_String -> US7) = method23()
                let v108 : US7 option = v106 |> Option.map v107 
                let v119 : US7 = US7_1
                let v120 : US7 = v108 |> Option.defaultValue v119 
                let v149 : US8 =
                    match v120 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v124) -> (* Some *)
                        let v125 : string = "fable_library_rust::String_::fromString($0)"
                        let v126 : string = Fable.Core.RustInterop.emitRustExpr v124 v125 
                        
                        
                        let v127 : bool = "Pip" = v126
                        let v131 : US9 =
                            if v127 then
                                let v128 : US10 = US10_0
                                US9_0(v128)
                            else
                                US9_1
                        let v145 : US9 =
                            match v131 with
                            | US9_1 -> (* None *)
                                let v134 : bool = "Poetry" = v126
                                let v138 : US9 =
                                    if v134 then
                                        let v135 : US10 = US10_1
                                        US9_0(v135)
                                    else
                                        US9_1
                                match v138 with
                                | US9_1 -> (* None *)
                                    US9_1
                                | US9_0(v139) -> (* Some *)
                                    US9_0(v139)
                            | US9_0(v132) -> (* Some *)
                                US9_0(v132)
                        US8_0(v145)
                let v156 : US9 =
                    match v149 with
                    | US8_0(v150) -> (* Some *)
                        match v150 with
                        | US9_0(v151) -> (* Some *)
                            US9_0(v151)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v160 : US10 =
                    match v156 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v157) -> (* Some *)
                        v157
                let v161 : string = method25()
                let v162 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v163 : string = "&*$0"
                let v164 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v161 v163 
                let _v162 = v164 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v165 : string = "&*$0"
                let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v161 v165 
                let _v162 = v166 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v167 : string = "&*$0"
                let v168 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v161 v167 
                let _v162 = v168 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v169 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v169 
                #endif
#if FABLE_COMPILER_PYTHON
                let v172 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v172 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v175 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v175 
                #endif
#else
                let v178 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v178 
                #endif
                let v181 : Ref<Str> = _v162 
                let v186 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v187 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v181) v186 
                let v188 : (Vec<std_string_String> -> US11) = method26()
                let v189 : US11 option = v187 |> Option.map v188 
                let v200 : US11 = US11_1
                let v201 : US11 = v189 |> Option.defaultValue v200 
                let v205 : (std_string_String []) = [||]
                let v206 : string = "$0.to_vec()"
                let v207 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v205 v206 
                let v210 : Vec<std_string_String> =
                    match v201 with
                    | US11_1 -> (* None *)
                        v207
                    | US11_0(v208) -> (* Some *)
                        v208
                let v211 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v212 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v213 : string = "std::fs::read(&*$0)"
                let v214 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v79 v213 
                let v215 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v216 : string = "$0.unwrap()"
                let v217 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v214 v216 
                let _v215 = v217 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v218 : string = "$0.unwrap()"
                let v219 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v214 v218 
                let _v215 = v219 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v220 : string = "$0.unwrap()"
                let v221 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v214 v220 
                let _v215 = v221 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v222 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v222 
                #endif
#if FABLE_COMPILER_PYTHON
                let v223 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v223 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v224 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v224 
                #endif
#else
                let v225 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v225 
                #endif
                let v226 : Vec<uint8> = _v215 
                let _v212 = v226 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v229 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v229 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v232 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v232 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v235 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v235 
                #endif
#if FABLE_COMPILER_PYTHON
                let v238 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v238 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v241 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v241 
                #endif
#else
                let v244 : (uint8 []) = v79 |> System.IO.File.ReadAllBytes
                let v245 : string = "$0.to_vec()"
                let v246 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v244 v245 
                let _v212 = v246 
                #endif
                let v247 : Vec<uint8> = _v212 
                let v252 : Vec<uint8> = method27(v247)
                let v253 : string = "std::string::String::from_utf8($0)"
                let v254 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v252 v253 
                let v255 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v256 : string = "$0.unwrap()"
                let v257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v254 v256 
                let _v255 = v257 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v258 : string = "$0.unwrap()"
                let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v254 v258 
                let _v255 = v259 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v260 : string = "$0.unwrap()"
                let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _v255 = v261 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v262 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v262 
                #endif
#if FABLE_COMPILER_PYTHON
                let v263 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v263 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v264 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v264 
                #endif
#else
                let v265 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v265 
                #endif
                let v266 : std_string_String = _v255 
                let v269 : string = "fable_library_rust::String_::fromString($0)"
                let v270 : string = Fable.Core.RustInterop.emitRustExpr v266 v269 
                let _v211 = v270 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v271 : string = null |> unbox<string>
                let _v211 = v271 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v274 : string = null |> unbox<string>
                let _v211 = v274 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v277 : string = null |> unbox<string>
                let _v211 = v277 
                #endif
#if FABLE_COMPILER_PYTHON
                let v280 : string = null |> unbox<string>
                let _v211 = v280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v283 : string = null |> unbox<string>
                let _v211 = v283 
                #endif
#else
                let v286 : string = v79 |> System.IO.File.ReadAllText
                let _v211 = v286 
                #endif
                let v287 : string = _v211 
                let v292 : string = __SOURCE_DIRECTORY__
                let v293 : string = "polyglot"
                let v294 : string = ".devcontainer"
                let v295 : string = method28(v293, v294)
                let v296 : US12 = method31(v295, v292)
                let v344 : US5 =
                    match v296 with
                    | US12_1(v299) -> (* Error *)
                        let v300 : unit = ()
                        let v301 : (unit -> unit) = closure16(v299)
                        let v302 : unit = (fun () -> v301 (); v300) ()
                        US5_1
                    | US12_0(v297) -> (* Ok *)
                        US5_0(v297)
                let v399 : US5 =
                    match v344 with
                    | US5_1 -> (* None *)
                        let v347 : string = method39()
                        let v348 : string = method28(v293, v294)
                        let v349 : US12 = method31(v348, v347)
                        match v349 with
                        | US12_1(v352) -> (* Error *)
                            let v353 : unit = ()
                            let v354 : (unit -> unit) = closure16(v352)
                            let v355 : unit = (fun () -> v354 (); v353) ()
                            US5_1
                        | US12_0(v350) -> (* Ok *)
                            US5_0(v350)
                    | US5_0(v345) -> (* Some *)
                        US5_0(v345)
                let v403 : string =
                    match v399 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v400) -> (* Some *)
                        v400
                let v404 : string = method28(v403, v293)
                let v405 : string = method39()
                let v406 : (unit -> string) = v405.ToLower
                let v407 : string = v406 ()
                let v410 : (unit -> string) = v404.ToLower
                let v411 : string = v410 ()
                let v414 : bool = v407.StartsWith (v411, false, null)
                let v419 : US12 =
                    if v414 then
                        US12_1(v411)
                    else
                        US12_0(v411)
                let v425 : Result<string, string> =
                    match v419 with
                    | US12_1(v422) -> (* Error *)
                        let v423 : Result<string, string> = Error v422 
                        v423
                    | US12_0(v420) -> (* Ok *)
                        let v421 : Result<string, string> = Ok v420 
                        v421
                let v426 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v427 : bool = Fable.Core.RustInterop.emitRustExpr v425 v426 
                let v428 : string = "x"
                let v429 : string = Fable.Core.RustInterop.emitRustExpr () v428 
                let v430 : string = "true; $0 })"
                let v431 : bool = Fable.Core.RustInterop.emitRustExpr v429 v430 
                let v432 : string = "_result_unwrap_or_else"
                let v433 : string = Fable.Core.RustInterop.emitRustExpr () v432 
                let v434 : string option = method34(v79)
                let v435 : string = ""
                let v436 : string = v434 |> Option.defaultValue v435 
                let v444 : string =
                    match v160 with
                    | US10_0 -> (* Pip *)
                        let v439 : string = "requirements.txt"
                        method28(v436, v439)
                    | US10_1 -> (* Poetry *)
                        let v441 : string = "pyproject.toml"
                        method28(v436, v441)
                let v445 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v446 : bool = Fable.Core.RustInterop.emitRustExpr v210 v445 
                let v447 : string = "x"
                let v448 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v447 
                let v449 : string = "fable_library_rust::String_::fromString($0)"
                let v450 : string = Fable.Core.RustInterop.emitRustExpr v448 v449 
                let v451 : string = "="
                let v452 : bool = v450.Contains v451 
                let v465 : string =
                    if v452 then
                        v450
                    else
                        let v455 : string = "]"
                        let v456 : bool = v450.EndsWith (v455, false, null)
                        if v456 then
                            let v459 : string = $"={{version='*',features=["
                            let v460 : string = "["
                            let v461 : string = v450.Replace (v460, v459)
                            let v462 : string = $"{v461}}}"
                            v462
                        else
                            let v463 : string = $"{v450}='*'"
                            v463
                let v466 : string = "true; $0 }).collect::<Vec<_>>()"
                let v467 : bool = Fable.Core.RustInterop.emitRustExpr v465 v466 
                let v468 : string = "_vec_map"
                let v469 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v468 
                let v470 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v471 : (string []) = Fable.Core.RustInterop.emitRustExpr v469 v470 
                let v472 : unit = ()
                let _v472 =
                    seq {
                        for i = 0 to v471.Length - 1 do yield v471.[i]
                        (*
                        ()
                    *)
                    }
                    (*
                    ()
                *)
                let v473 : string seq = _v472 
                let v479 : string = method40()
                let v480 : (string -> (string seq -> string)) = String.concat
                let v481 : (string seq -> string) = v480 v479
                let v482 : string = v481 v473
                let v486 : bool = v482 = ""
                let struct (v542 : int32, v543 : string) =
                    if v486 then
                        struct (0, v435)
                    else
                        let v526 : string =
                            match v160 with
                            | US10_0 -> (* Pip *)
                                v482
                            | US10_1 -> (* Poetry *)
                                let v487 : string = $"[tool.poetry]"
                                let v488 : string = $"name = \"test\""
                                let v489 : string = "\n"
                                let v490 : string = v487 + v489 
                                let v491 : string = v490 + v488 
                                let v492 : string = $"version = \"0.0.1\""
                                let v493 : string = v491 + v489 
                                let v494 : string = v493 + v492 
                                let v495 : string = $"description = \"\""
                                let v496 : string = v494 + v489 
                                let v497 : string = v496 + v495 
                                let v498 : string = $"authors = []"
                                let v499 : string = v497 + v489 
                                let v500 : string = v499 + v498 
                                let v501 : string = $""
                                let v502 : string = v500 + v489 
                                let v503 : string = v502 + v501 
                                let v504 : string = $"[tool.poetry.dependencies]"
                                let v505 : string = v503 + v489 
                                let v506 : string = v505 + v504 
                                let v507 : string = $"python=\"~3.12\""
                                let v508 : string = v506 + v489 
                                let v509 : string = v508 + v507 
                                let v510 : string = $"{v482}"
                                let v511 : string = v509 + v489 
                                let v512 : string = v511 + v510 
                                let v513 : string = $""
                                let v514 : string = v512 + v489 
                                let v515 : string = v514 + v513 
                                let v516 : string = $"[build-system]"
                                let v517 : string = v515 + v489 
                                let v518 : string = v517 + v516 
                                let v519 : string = $"requires = [\"poetry-core\"]"
                                let v520 : string = v518 + v489 
                                let v521 : string = v520 + v519 
                                let v522 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v523 : string = v521 + v489 
                                let v524 : string = v523 + v522 
                                v524
                        method41(v444, v526)
                        let v527 : System.Threading.CancellationToken option = None
                        let v528 : (struct (string * string) []) = [||]
                        let v529 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v530 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v531 : string option = None
                        let v535 : string =
                            match v160 with
                            | US10_0 -> (* Pip *)
                                let v532 : string = $"pip install -r requirements.txt"
                                v532
                            | US10_1 -> (* Poetry *)
                                let v533 : string = $"poetry install"
                                v533
                        let v536 : string option = Some v436 
                        let v539 : bool = true
                        method68(v535, v527, v528, v529, v530, v539, v536)
                let v544 : bool = v542 <> 0 
                let struct (v710 : US5, v711 : US5, v712 : US5, v713 : US5) =
                    if v544 then
                        let v547 : unit = ()
                        let v548 : (unit -> unit) = closure61(v160, v79, v543, v542)
                        let v549 : unit = (fun () -> v548 (); v547) ()
                        let v589 : string = "py"
                        let v590 : US5 = US5_0(v589)
                        let v591 : US5 = US5_1
                        let v592 : US5 = US5_1
                        let v593 : US5 = US5_1
                        struct (v590, v591, v592, v593)
                    else
                        let v597 : string =
                            match v160 with
                            | US10_0 -> (* Pip *)
                                let v594 : string = $"python \"{v79}\""
                                v594
                            | US10_1 -> (* Poetry *)
                                let v595 : string = $"poetry run python \"{v79}\""
                                v595
                        let v598 : string = "TRACE_LEVEL"
                        let v599 : string = "Verbose"
                        let v600 : (struct (string * string) []) = [|struct (v598, v599)|]
                        let v601 : System.Threading.CancellationToken option = None
                        let v602 : (struct (string * string) []) = [||]
                        let v603 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v604 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v605 : string option = None
                        let v606 : string option = Some v436 
                        let v609 : bool = true
                        let struct (v610 : int32, v611 : string) = method68(v597, v601, v600, v603, v604, v609, v606)
                        let v612 : int32 = v600.Length
                        let v613 : (string []) = Array.zeroCreate<string> (v612)
                        let v614 : Mut5 = {l0 = 0} : Mut5
                        while method72(v612, v614) do
                            let v616 : int32 = v614.l0
                            let struct (v617 : string, v618 : string) = v600.[int v616]
                            let v619 : string = $"$env:{v617}=''{v618}''"
                            v613.[int v616] <- v619
                            let v620 : int32 = v616 + 1
                            v614.l0 <- v620
                            ()
                        let v621 : string seq = v613 |> Seq.ofArray
                        let v624 : (string -> (string seq -> string)) = String.concat
                        let v625 : string = ";"
                        let v626 : (string seq -> string) = v624 v625
                        let v627 : string = v626 v621
                        let v630 : string = $"pwsh -c '{v627}; {v597}'"
                        let v631 : bool = v610 = 0
                        let v636 : bool =
                            if v631 then
                                true
                            else
                                let v632 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v633 : bool = v611.Contains v632 
                                v633
                        let struct (v706 : US5, v707 : US5, v708 : US5, v709 : US5) =
                            if v636 then
                                let v637 : (string -> US5) = closure62()
                                let v638 : (unit -> string) = closure63(v611)
                                let v639 : (exn -> US5) = closure64(v79, v611, v630)
                                let v640 : US5 = US5_1
                                let result = ref v640
                                try
                                    result.Value <- v638 () |> v637 
                                with ex ->
                                    result.Value <- v639 ex 
                                let v641 : US5 = result.Value
                                let v651 : string option =
                                    match v641 with
                                    | US5_1 -> (* None *)
                                        let v649 : string option = None
                                        v649
                                    | US5_0(v645) -> (* Some *)
                                        let v646 : string option = Some v645 
                                        v646
                                let v652 : string = "$0.unwrap()"
                                let v653 : string = Fable.Core.RustInterop.emitRustExpr v651 v652 
                                let v654 : string = "py"
                                let v655 : US5 = US5_0(v654)
                                let v656 : US5 = US5_0(v287)
                                let v657 : US5 = US5_0(v79)
                                let v658 : US5 = US5_0(v653)
                                struct (v655, v656, v657, v658)
                            else
                                let v659 : unit = ()
                                let v660 : (unit -> unit) = closure66(v79, v611, v610, v630)
                                let v661 : unit = (fun () -> v660 (); v659) ()
                                let v701 : string = "py"
                                let v702 : US5 = US5_0(v701)
                                let v703 : US5 = US5_1
                                let v704 : US5 = US5_1
                                let v705 : US5 = US5_1
                                struct (v702, v703, v704, v705)
                        struct (v706, v707, v708, v709)
                let v716 : string =
                    match v710 with
                    | US5_1 -> (* None *)
                        v435
                    | US5_0(v714) -> (* Some *)
                        v714
                let v717 : string = "extension"
                let v720 : string =
                    match v711 with
                    | US5_1 -> (* None *)
                        v435
                    | US5_0(v718) -> (* Some *)
                        v718
                let v721 : string = "code"
                let v724 : string =
                    match v713 with
                    | US5_1 -> (* None *)
                        v435
                    | US5_0(v722) -> (* Some *)
                        v722
                let v725 : string = "output"
                let v726 : (struct (string * string) []) = [|struct (v717, v716); struct (v721, v720); struct (v725, v724)|]
                let v727 : string = "$0.to_vec()"
                let v728 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v726 v727 
                let v729 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v730 : (struct (string * string) -> (std_string_String * std_string_String)) = closure67()
                let v731 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v728, v730) v729 
                let v732 : string = "std::collections::BTreeMap::from_iter(v731.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v733 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v732 
                let v734 : string = "serde_json::to_string(&v733)"
                let v735 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v734 
                let v736 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v737 : string = "$0.unwrap()"
                let v738 : std_string_String = Fable.Core.RustInterop.emitRustExpr v735 v737 
                let _v736 = v738 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v739 : string = "$0.unwrap()"
                let v740 : std_string_String = Fable.Core.RustInterop.emitRustExpr v735 v739 
                let _v736 = v740 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v741 : string = "$0.unwrap()"
                let v742 : std_string_String = Fable.Core.RustInterop.emitRustExpr v735 v741 
                let _v736 = v742 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v743 : std_string_String = match v735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v736 = v743 
                #endif
#if FABLE_COMPILER_PYTHON
                let v744 : std_string_String = match v735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v736 = v744 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v745 : std_string_String = match v735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v736 = v745 
                #endif
#else
                let v746 : std_string_String = match v735 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v736 = v746 
                #endif
                let v747 : std_string_String = _v736 
                let v750 : string = "fable_library_rust::String_::fromString($0)"
                let v751 : string = Fable.Core.RustInterop.emitRustExpr v747 v750 
                let v752 : string = "command_result"
                [|struct (v752, v751)|]
            else
                let v754 : string = "fable_library_rust::String_::fromString($0)"
                let v755 : string = Fable.Core.RustInterop.emitRustExpr v25 v754 
                let v756 : bool = v755 = "fable"
                if v756 then
                    let v757 : string = method140()
                    let v758 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v759 : string = "&*$0"
                    let v760 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v757 v759 
                    let _v758 = v760 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v761 : string = "&*$0"
                    let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v757 v761 
                    let _v758 = v762 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v763 : string = "&*$0"
                    let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v757 v763 
                    let _v758 = v764 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v765 : Ref<Str> = v757 |> unbox<Ref<Str>>
                    let _v758 = v765 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v768 : Ref<Str> = v757 |> unbox<Ref<Str>>
                    let _v758 = v768 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v771 : Ref<Str> = v757 |> unbox<Ref<Str>>
                    let _v758 = v771 
                    #endif
#else
                    let v774 : Ref<Str> = v757 |> unbox<Ref<Str>>
                    let _v758 = v774 
                    #endif
                    let v777 : Ref<Str> = _v758 
                    let v782 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v783 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v777) v782 
                    let v784 : (std_string_String -> US7) = method23()
                    let v785 : US7 option = v783 |> Option.map v784 
                    let v796 : US7 = US7_1
                    let v797 : US7 = v785 |> Option.defaultValue v796 
                    let v804 : std_string_String =
                        match v797 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v801) -> (* Some *)
                            v801
                    let v805 : string = "fable_library_rust::String_::fromString($0)"
                    let v806 : string = Fable.Core.RustInterop.emitRustExpr v804 v805 
                    let v807 : string = method141()
                    let v808 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v809 : string = "&*$0"
                    let v810 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v809 
                    let _v808 = v810 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v811 : string = "&*$0"
                    let v812 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v811 
                    let _v808 = v812 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v813 : string = "&*$0"
                    let v814 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v807 v813 
                    let _v808 = v814 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v815 : Ref<Str> = v807 |> unbox<Ref<Str>>
                    let _v808 = v815 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v818 : Ref<Str> = v807 |> unbox<Ref<Str>>
                    let _v808 = v818 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v821 : Ref<Str> = v807 |> unbox<Ref<Str>>
                    let _v808 = v821 
                    #endif
#else
                    let v824 : Ref<Str> = v807 |> unbox<Ref<Str>>
                    let _v808 = v824 
                    #endif
                    let v827 : Ref<Str> = _v808 
                    let v832 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v833 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v827) v832 
                    let v834 : (std_string_String -> US7) = method23()
                    let v835 : US7 option = v833 |> Option.map v834 
                    let v846 : US7 = US7_1
                    let v847 : US7 = v835 |> Option.defaultValue v846 
                    let v857 : US5 =
                        match v847 with
                        | US7_1 -> (* None *)
                            US5_1
                        | US7_0(v851) -> (* Some *)
                            let v852 : string = "fable_library_rust::String_::fromString($0)"
                            let v853 : string = Fable.Core.RustInterop.emitRustExpr v851 v852 
                            US5_0(v853)
                    let v949 : string =
                        match v857 with
                        | US5_1 -> (* None *)
                            let v947 : string = "{}"
                            v947
                        | US5_0(v858) -> (* Some *)
                            let v859 : clap_Command = method0()
                            let v860 : string = $"_ {v858} --fs-path \"{v806}\""
                            let v861 : US22 = method83(v860)
                            let v869 : (string []) =
                                match v861 with
                                | US22_1(v863) -> (* Error *)
                                    let v864 : string = $"resultm.get / Result value was Error: {v863}"
                                    failwith<(string [])> v864
                                | US22_0(v862) -> (* Ok *)
                                    v862
                            let v870 : string = "$0.to_vec()"
                            let v871 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v869 v870 
                            let v872 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                            let v873 : bool = Fable.Core.RustInterop.emitRustExpr v871 v872 
                            let v874 : string = "x"
                            let v875 : string = Fable.Core.RustInterop.emitRustExpr () v874 
                            let v876 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v877 : string = "&*$0"
                            let v878 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v875 v877 
                            let _v876 = v878 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v879 : string = "&*$0"
                            let v880 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v875 v879 
                            let _v876 = v880 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v881 : string = "&*$0"
                            let v882 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v875 v881 
                            let _v876 = v882 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v883 : Ref<Str> = v875 |> unbox<Ref<Str>>
                            let _v876 = v883 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v886 : Ref<Str> = v875 |> unbox<Ref<Str>>
                            let _v876 = v886 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v889 : Ref<Str> = v875 |> unbox<Ref<Str>>
                            let _v876 = v889 
                            #endif
#else
                            let v892 : Ref<Str> = v875 |> unbox<Ref<Str>>
                            let _v876 = v892 
                            #endif
                            let v895 : Ref<Str> = _v876 
                            let v900 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v901 : string = "String::from($0)"
                            let v902 : std_string_String = Fable.Core.RustInterop.emitRustExpr v895 v901 
                            let _v900 = v902 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v903 : string = "String::from($0)"
                            let v904 : std_string_String = Fable.Core.RustInterop.emitRustExpr v895 v903 
                            let _v900 = v904 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v905 : string = "String::from($0)"
                            let v906 : std_string_String = Fable.Core.RustInterop.emitRustExpr v895 v905 
                            let _v900 = v906 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v907 : std_string_String = v895 |> unbox<std_string_String>
                            let _v900 = v907 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v910 : std_string_String = v895 |> unbox<std_string_String>
                            let _v900 = v910 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v913 : std_string_String = v895 |> unbox<std_string_String>
                            let _v900 = v913 
                            #endif
#else
                            let v916 : std_string_String = v895 |> unbox<std_string_String>
                            let _v900 = v916 
                            #endif
                            let v919 : std_string_String = _v900 
                            let v924 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v925 : bool = Fable.Core.RustInterop.emitRustExpr v919 v924 
                            let v926 : string = "_vec_map"
                            let v927 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v926 
                            let v928 : string = "clap::Command::get_matches_from($0, v927)"
                            let v929 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v859 v928 
                            let v930 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v0, v929)
                            let v931 : string = "v930.await"
                            let v932 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v931 
                            let v933 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v934 : string = "$0.unwrap()"
                            let v935 : string = Fable.Core.RustInterop.emitRustExpr v932 v934 
                            let _v933 = v935 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v936 : string = "$0.unwrap()"
                            let v937 : string = Fable.Core.RustInterop.emitRustExpr v932 v936 
                            let _v933 = v937 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v938 : string = "$0.unwrap()"
                            let v939 : string = Fable.Core.RustInterop.emitRustExpr v932 v938 
                            let _v933 = v939 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v940 : string = match v932 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v933 = v940 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v941 : string = match v932 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v933 = v941 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v942 : string = match v932 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v933 = v942 
                            #endif
#else
                            let v943 : string = match v932 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v933 = v943 
                            #endif
                            let v944 : string = _v933 
                            v944
                    let v950 : string = "command_result"
                    [|struct (v950, v949)|]
                else
                    let v952 : string = "fable_library_rust::String_::fromString($0)"
                    let v953 : string = Fable.Core.RustInterop.emitRustExpr v25 v952 
                    let v954 : bool = v953 = "dib"
                    if v954 then
                        let v955 : string = method142()
                        let v956 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v957 : string = "&*$0"
                        let v958 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v955 v957 
                        let _v956 = v958 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v959 : string = "&*$0"
                        let v960 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v955 v959 
                        let _v956 = v960 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v961 : string = "&*$0"
                        let v962 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v955 v961 
                        let _v956 = v962 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v963 : Ref<Str> = v955 |> unbox<Ref<Str>>
                        let _v956 = v963 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v966 : Ref<Str> = v955 |> unbox<Ref<Str>>
                        let _v956 = v966 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v969 : Ref<Str> = v955 |> unbox<Ref<Str>>
                        let _v956 = v969 
                        #endif
#else
                        let v972 : Ref<Str> = v955 |> unbox<Ref<Str>>
                        let _v956 = v972 
                        #endif
                        let v975 : Ref<Str> = _v956 
                        let v980 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v981 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v975) v980 
                        let v982 : (std_string_String -> string) = method143()
                        let v983 : string option = v981 |> Option.map v982 
                        let v996 : string = "$0.unwrap()"
                        let v997 : string = Fable.Core.RustInterop.emitRustExpr v983 v996 
                        let v998 : string = method168()
                        let v999 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1000 : string = "&*$0"
                        let v1001 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v998 v1000 
                        let _v999 = v1001 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1002 : string = "&*$0"
                        let v1003 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v998 v1002 
                        let _v999 = v1003 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1004 : string = "&*$0"
                        let v1005 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v998 v1004 
                        let _v999 = v1005 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1006 : Ref<Str> = v998 |> unbox<Ref<Str>>
                        let _v999 = v1006 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1009 : Ref<Str> = v998 |> unbox<Ref<Str>>
                        let _v999 = v1009 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1012 : Ref<Str> = v998 |> unbox<Ref<Str>>
                        let _v999 = v1012 
                        #endif
#else
                        let v1015 : Ref<Str> = v998 |> unbox<Ref<Str>>
                        let _v999 = v1015 
                        #endif
                        let v1018 : Ref<Str> = _v999 
                        let v1023 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1024 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1018) v1023 
                        let v1025 : uint8 = v1024 |> Option.defaultValue 1uy 
                        let v1028 : string = method169()
                        let v1029 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1030 : string = "&*$0"
                        let v1031 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1028 v1030 
                        let _v1029 = v1031 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1032 : string = "&*$0"
                        let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1028 v1032 
                        let _v1029 = v1033 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1034 : string = "&*$0"
                        let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1028 v1034 
                        let _v1029 = v1035 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1036 : Ref<Str> = v1028 |> unbox<Ref<Str>>
                        let _v1029 = v1036 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1039 : Ref<Str> = v1028 |> unbox<Ref<Str>>
                        let _v1029 = v1039 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1042 : Ref<Str> = v1028 |> unbox<Ref<Str>>
                        let _v1029 = v1042 
                        #endif
#else
                        let v1045 : Ref<Str> = v1028 |> unbox<Ref<Str>>
                        let _v1029 = v1045 
                        #endif
                        let v1048 : Ref<Str> = _v1029 
                        let v1053 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1054 : string option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1048) v1053 
                        let v1055 : (string -> US5) = method6()
                        let v1056 : US5 option = v1054 |> Option.map v1055 
                        let v1067 : US5 = US5_1
                        let v1068 : US5 = v1056 |> Option.defaultValue v1067 
                        let v1072 : uint8 = 1uy
                        let struct (v1073 : int32, v1074 : string) = method170(v1068, v1025, v997, v1072)
                        let v1075 : bool = v1073 <> 0 
                        let struct (v1371 : int32, v1372 : string) =
                            if v1075 then
                                struct (v1073, v1074)
                            else
                                let v1078 : System.Threading.CancellationToken option = None
                                let v1079 : (struct (string * string) []) = [||]
                                let v1080 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v1081 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v1082 : string option = None
                                let v1083 : string = $"jupyter nbconvert \"{v997}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v1084 : bool = true
                                let struct (v1085 : int32, v1086 : string) = method68(v1083, v1078, v1079, v1080, v1081, v1084, v1082)
                                let v1087 : unit = ()
                                let v1088 : (unit -> unit) = closure78(v1086, v1085)
                                let v1089 : unit = (fun () -> v1088 (); v1087) ()
                                let v1130 : bool = v1085 <> 0 
                                if v1130 then
                                    let v1133 : string = $"repl_result: {v1074}

jupyter_result: {v1086}"
                                    struct (v1085, v1133)
                                else
                                    let v1134 : string = "'"
                                    let v1135 : string = "''"
                                    let v1136 : string = v997.Replace (v1134, v1135)
                                    let v1137 : System.Threading.CancellationToken option = None
                                    let v1138 : (struct (string * string) []) = [||]
                                    let v1139 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v1140 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v1141 : string option = None
                                    let v1142 : string = $"pwsh -c \"$counter = 1; $path = '{v1136}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v1143 : bool = true
                                    let struct (v1144 : int32, v1145 : string) = method68(v1142, v1137, v1138, v1139, v1140, v1143, v1141)
                                    let v1146 : unit = ()
                                    let v1147 : (unit -> unit) = closure79(v1145, v1144)
                                    let v1148 : unit = (fun () -> v1147 (); v1146) ()
                                    let v1189 : string = $"{v997}.html"
                                    let v1190 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1191 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1192 : string = "std::fs::read(&*$0)"
                                    let v1193 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1189 v1192 
                                    let v1194 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1195 : string = "$0.unwrap()"
                                    let v1196 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1193 v1195 
                                    let _v1194 = v1196 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1197 : string = "$0.unwrap()"
                                    let v1198 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1193 v1197 
                                    let _v1194 = v1198 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1199 : string = "$0.unwrap()"
                                    let v1200 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1193 v1199 
                                    let _v1194 = v1200 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1201 : Vec<uint8> = match v1193 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1194 = v1201 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1202 : Vec<uint8> = match v1193 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1194 = v1202 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1203 : Vec<uint8> = match v1193 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1194 = v1203 
                                    #endif
#else
                                    let v1204 : Vec<uint8> = match v1193 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1194 = v1204 
                                    #endif
                                    let v1205 : Vec<uint8> = _v1194 
                                    let _v1191 = v1205 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1208 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1191 = v1208 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1211 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1191 = v1211 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1214 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1191 = v1214 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1217 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1191 = v1217 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1220 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1191 = v1220 
                                    #endif
#else
                                    let v1223 : (uint8 []) = v1189 |> System.IO.File.ReadAllBytes
                                    let v1224 : string = "$0.to_vec()"
                                    let v1225 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1223 v1224 
                                    let _v1191 = v1225 
                                    #endif
                                    let v1226 : Vec<uint8> = _v1191 
                                    let v1231 : Vec<uint8> = method27(v1226)
                                    let v1232 : string = "std::string::String::from_utf8($0)"
                                    let v1233 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1231 v1232 
                                    let v1234 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1235 : string = "$0.unwrap()"
                                    let v1236 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1233 v1235 
                                    let _v1234 = v1236 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1237 : string = "$0.unwrap()"
                                    let v1238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1233 v1237 
                                    let _v1234 = v1238 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1239 : string = "$0.unwrap()"
                                    let v1240 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1233 v1239 
                                    let _v1234 = v1240 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1241 : std_string_String = match v1233 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1234 = v1241 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1242 : std_string_String = match v1233 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1234 = v1242 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1243 : std_string_String = match v1233 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1234 = v1243 
                                    #endif
#else
                                    let v1244 : std_string_String = match v1233 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1234 = v1244 
                                    #endif
                                    let v1245 : std_string_String = _v1234 
                                    let v1248 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1249 : string = Fable.Core.RustInterop.emitRustExpr v1245 v1248 
                                    let _v1190 = v1249 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1250 : string = null |> unbox<string>
                                    let _v1190 = v1250 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1253 : string = null |> unbox<string>
                                    let _v1190 = v1253 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1256 : string = null |> unbox<string>
                                    let _v1190 = v1256 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1259 : string = null |> unbox<string>
                                    let _v1190 = v1259 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1262 : string = null |> unbox<string>
                                    let _v1190 = v1262 
                                    #endif
#else
                                    let v1265 : string = v1189 |> System.IO.File.ReadAllText
                                    let _v1190 = v1265 
                                    #endif
                                    let v1266 : string = _v1190 
                                    let v1271 : string = "\r\n"
                                    let v1272 : string = "\n"
                                    let v1273 : string = v1266.Replace (v1271, v1272)
                                    let v1274 : string = $"{v997}.html"
                                    let v1275 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1276 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1274, v1273) v1276 
                                    let _v1275 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v1275 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v1275 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v1275 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v1275 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v1275 = () 
                                    #endif
#else
                                    let v1277 : string = method67(v1273)
                                    System.IO.File.WriteAllText (v1274, v1277)
                                    let _v1275 = () 
                                    #endif
                                    _v1275 
                                    let v1278 : string = $"{v997}.ipynb"
                                    let v1279 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1280 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1281 : string = "std::fs::read(&*$0)"
                                    let v1282 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1278 v1281 
                                    let v1283 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1284 : string = "$0.unwrap()"
                                    let v1285 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1282 v1284 
                                    let _v1283 = v1285 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1286 : string = "$0.unwrap()"
                                    let v1287 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1282 v1286 
                                    let _v1283 = v1287 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1288 : string = "$0.unwrap()"
                                    let v1289 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1282 v1288 
                                    let _v1283 = v1289 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1290 : Vec<uint8> = match v1282 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1283 = v1290 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1291 : Vec<uint8> = match v1282 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1283 = v1291 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1292 : Vec<uint8> = match v1282 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1283 = v1292 
                                    #endif
#else
                                    let v1293 : Vec<uint8> = match v1282 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1283 = v1293 
                                    #endif
                                    let v1294 : Vec<uint8> = _v1283 
                                    let _v1280 = v1294 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1297 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1280 = v1297 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1300 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1280 = v1300 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1303 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1280 = v1303 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1306 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1280 = v1306 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1309 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1280 = v1309 
                                    #endif
#else
                                    let v1312 : (uint8 []) = v1278 |> System.IO.File.ReadAllBytes
                                    let v1313 : string = "$0.to_vec()"
                                    let v1314 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1312 v1313 
                                    let _v1280 = v1314 
                                    #endif
                                    let v1315 : Vec<uint8> = _v1280 
                                    let v1320 : Vec<uint8> = method27(v1315)
                                    let v1321 : string = "std::string::String::from_utf8($0)"
                                    let v1322 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1320 v1321 
                                    let v1323 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1324 : string = "$0.unwrap()"
                                    let v1325 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1322 v1324 
                                    let _v1323 = v1325 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1326 : string = "$0.unwrap()"
                                    let v1327 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1322 v1326 
                                    let _v1323 = v1327 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1328 : string = "$0.unwrap()"
                                    let v1329 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1322 v1328 
                                    let _v1323 = v1329 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1330 : std_string_String = match v1322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1323 = v1330 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1331 : std_string_String = match v1322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1323 = v1331 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1332 : std_string_String = match v1322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1323 = v1332 
                                    #endif
#else
                                    let v1333 : std_string_String = match v1322 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1323 = v1333 
                                    #endif
                                    let v1334 : std_string_String = _v1323 
                                    let v1337 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1338 : string = Fable.Core.RustInterop.emitRustExpr v1334 v1337 
                                    let _v1279 = v1338 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1339 : string = null |> unbox<string>
                                    let _v1279 = v1339 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1342 : string = null |> unbox<string>
                                    let _v1279 = v1342 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1345 : string = null |> unbox<string>
                                    let _v1279 = v1345 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1348 : string = null |> unbox<string>
                                    let _v1279 = v1348 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1351 : string = null |> unbox<string>
                                    let _v1279 = v1351 
                                    #endif
#else
                                    let v1354 : string = v1278 |> System.IO.File.ReadAllText
                                    let _v1279 = v1354 
                                    #endif
                                    let v1355 : string = _v1279 
                                    let v1360 : string = v1355.Replace (v1271, v1272)
                                    let v1361 : string = "\\r\\n"
                                    let v1362 : string = "\\n"
                                    let v1363 : string = v1360.Replace (v1361, v1362)
                                    let v1364 : string = $"{v997}.ipynb"
                                    let v1365 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1366 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1364, v1363) v1366 
                                    let _v1365 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v1365 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v1365 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v1365 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v1365 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v1365 = () 
                                    #endif
#else
                                    let v1367 : string = method67(v1363)
                                    System.IO.File.WriteAllText (v1364, v1367)
                                    let _v1365 = () 
                                    #endif
                                    _v1365 
                                    let v1368 : string = $"repl_result: {v1074}

jupyter_result: {v1086}

pwsh_replace_html_result: {v1145}"
                                    struct (v1144, v1368)
                        let v1373 : unit = ()
                        let v1374 : (unit -> unit) = closure80(v1372, v1371)
                        let v1375 : unit = (fun () -> v1374 (); v1373) ()
                        let v1416 : bool = v1371 <> 0 
                        if v1416 then
                            let v1419 : string = $"spiral_builder.run / dib / exit_code: {v1371} / result: {v1372}"
                            failwith<unit> v1419
                        let v1420 : string = "stdio"
                        [|struct (v1420, v1372)|]
                    else
                        let v1422 : string = "fable_library_rust::String_::fromString($0)"
                        let v1423 : string = Fable.Core.RustInterop.emitRustExpr v25 v1422 
                        let v1424 : bool = v1423 = "rust"
                        let struct (v4754 : US5, v4755 : US5, v4756 : US5, v4757 : US5) =
                            if v1424 then
                                let v1425 : string = method140()
                                let v1426 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1427 : string = "&*$0"
                                let v1428 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1425 v1427 
                                let _v1426 = v1428 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1429 : string = "&*$0"
                                let v1430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1425 v1429 
                                let _v1426 = v1430 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1431 : string = "&*$0"
                                let v1432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1425 v1431 
                                let _v1426 = v1432 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1433 : Ref<Str> = v1425 |> unbox<Ref<Str>>
                                let _v1426 = v1433 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1436 : Ref<Str> = v1425 |> unbox<Ref<Str>>
                                let _v1426 = v1436 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1439 : Ref<Str> = v1425 |> unbox<Ref<Str>>
                                let _v1426 = v1439 
                                #endif
#else
                                let v1442 : Ref<Str> = v1425 |> unbox<Ref<Str>>
                                let _v1426 = v1442 
                                #endif
                                let v1445 : Ref<Str> = _v1426 
                                let v1450 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1451 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1445) v1450 
                                let v1452 : (std_string_String -> US7) = method23()
                                let v1453 : US7 option = v1451 |> Option.map v1452 
                                let v1464 : US7 = US7_1
                                let v1465 : US7 = v1453 |> Option.defaultValue v1464 
                                let v1472 : std_string_String =
                                    match v1465 with
                                    | US7_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US7_0(v1469) -> (* Some *)
                                        v1469
                                let v1473 : string = "fable_library_rust::String_::fromString($0)"
                                let v1474 : string = Fable.Core.RustInterop.emitRustExpr v1472 v1473 
                                let v1475 : string = method25()
                                let v1476 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1477 : string = "&*$0"
                                let v1478 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1475 v1477 
                                let _v1476 = v1478 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1479 : string = "&*$0"
                                let v1480 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1475 v1479 
                                let _v1476 = v1480 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1481 : string = "&*$0"
                                let v1482 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1475 v1481 
                                let _v1476 = v1482 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1483 : Ref<Str> = v1475 |> unbox<Ref<Str>>
                                let _v1476 = v1483 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1486 : Ref<Str> = v1475 |> unbox<Ref<Str>>
                                let _v1476 = v1486 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1489 : Ref<Str> = v1475 |> unbox<Ref<Str>>
                                let _v1476 = v1489 
                                #endif
#else
                                let v1492 : Ref<Str> = v1475 |> unbox<Ref<Str>>
                                let _v1476 = v1492 
                                #endif
                                let v1495 : Ref<Str> = _v1476 
                                let v1500 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                let v1501 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1495) v1500 
                                let v1502 : (Vec<std_string_String> -> US11) = method26()
                                let v1503 : US11 option = v1501 |> Option.map v1502 
                                let v1514 : US11 = US11_1
                                let v1515 : US11 = v1503 |> Option.defaultValue v1514 
                                let v1519 : (std_string_String []) = [||]
                                let v1520 : string = "$0.to_vec()"
                                let v1521 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1519 v1520 
                                let v1524 : Vec<std_string_String> =
                                    match v1515 with
                                    | US11_1 -> (* None *)
                                        v1521
                                    | US11_0(v1522) -> (* Some *)
                                        v1522
                                let v1525 : string = method179()
                                let v1526 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1527 : string = "&*$0"
                                let v1528 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1527 
                                let _v1526 = v1528 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1529 : string = "&*$0"
                                let v1530 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1529 
                                let _v1526 = v1530 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1531 : string = "&*$0"
                                let v1532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1525 v1531 
                                let _v1526 = v1532 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1533 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                                let _v1526 = v1533 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1536 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                                let _v1526 = v1536 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1539 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                                let _v1526 = v1539 
                                #endif
#else
                                let v1542 : Ref<Str> = v1525 |> unbox<Ref<Str>>
                                let _v1526 = v1542 
                                #endif
                                let v1545 : Ref<Str> = _v1526 
                                let v1550 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                let v1551 : bool = Fable.Core.RustInterop.emitRustExpr struct (v26, v1545) v1550 
                                let v1552 : string = method180()
                                let v1553 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1554 : string = "&*$0"
                                let v1555 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1552 v1554 
                                let _v1553 = v1555 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1556 : string = "&*$0"
                                let v1557 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1552 v1556 
                                let _v1553 = v1557 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1558 : string = "&*$0"
                                let v1559 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1552 v1558 
                                let _v1553 = v1559 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1560 : Ref<Str> = v1552 |> unbox<Ref<Str>>
                                let _v1553 = v1560 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1563 : Ref<Str> = v1552 |> unbox<Ref<Str>>
                                let _v1553 = v1563 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1566 : Ref<Str> = v1552 |> unbox<Ref<Str>>
                                let _v1553 = v1566 
                                #endif
#else
                                let v1569 : Ref<Str> = v1552 |> unbox<Ref<Str>>
                                let _v1553 = v1569 
                                #endif
                                let v1572 : Ref<Str> = _v1553 
                                let v1577 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1578 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1572) v1577 
                                let v1579 : (std_string_String -> US7) = method23()
                                let v1580 : US7 option = v1578 |> Option.map v1579 
                                let v1591 : US7 = US7_1
                                let v1592 : US7 = v1580 |> Option.defaultValue v1591 
                                let v1602 : US5 =
                                    match v1592 with
                                    | US7_1 -> (* None *)
                                        US5_1
                                    | US7_0(v1596) -> (* Some *)
                                        let v1597 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1598 : string = Fable.Core.RustInterop.emitRustExpr v1596 v1597 
                                        US5_0(v1598)
                                let v1603 : string = method181()
                                let v1604 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1605 : string = "&*$0"
                                let v1606 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1603 v1605 
                                let _v1604 = v1606 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1607 : string = "&*$0"
                                let v1608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1603 v1607 
                                let _v1604 = v1608 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1609 : string = "&*$0"
                                let v1610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1603 v1609 
                                let _v1604 = v1610 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1611 : Ref<Str> = v1603 |> unbox<Ref<Str>>
                                let _v1604 = v1611 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1614 : Ref<Str> = v1603 |> unbox<Ref<Str>>
                                let _v1604 = v1614 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1617 : Ref<Str> = v1603 |> unbox<Ref<Str>>
                                let _v1604 = v1617 
                                #endif
#else
                                let v1620 : Ref<Str> = v1603 |> unbox<Ref<Str>>
                                let _v1604 = v1620 
                                #endif
                                let v1623 : Ref<Str> = _v1604 
                                let v1628 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1629 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1623) v1628 
                                let v1630 : (std_string_String -> US7) = method23()
                                let v1631 : US7 option = v1629 |> Option.map v1630 
                                let v1642 : US7 = US7_1
                                let v1643 : US7 = v1631 |> Option.defaultValue v1642 
                                let v1653 : US5 =
                                    match v1643 with
                                    | US7_1 -> (* None *)
                                        US5_1
                                    | US7_0(v1647) -> (* Some *)
                                        let v1648 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1649 : string = Fable.Core.RustInterop.emitRustExpr v1647 v1648 
                                        US5_0(v1649)
                                let v1662 : US35 =
                                    match v1602 with
                                    | US5_0(v1654) -> (* Some *)
                                        let v1655 : US36 = US36_0(v1654)
                                        US35_0(v1655)
                                    | _ ->
                                        match v1653 with
                                        | US5_0(v1657) -> (* Some *)
                                            let v1658 : US36 = US36_1(v1657)
                                            US35_0(v1658)
                                        | _ ->
                                            US35_1
                                let v1663 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1664 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1665 : string = "std::fs::read(&*$0)"
                                let v1666 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1474 v1665 
                                let v1667 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1668 : string = "$0.unwrap()"
                                let v1669 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1666 v1668 
                                let _v1667 = v1669 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1670 : string = "$0.unwrap()"
                                let v1671 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1666 v1670 
                                let _v1667 = v1671 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1672 : string = "$0.unwrap()"
                                let v1673 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1666 v1672 
                                let _v1667 = v1673 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1674 : Vec<uint8> = match v1666 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1667 = v1674 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1675 : Vec<uint8> = match v1666 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1667 = v1675 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1676 : Vec<uint8> = match v1666 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1667 = v1676 
                                #endif
#else
                                let v1677 : Vec<uint8> = match v1666 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1667 = v1677 
                                #endif
                                let v1678 : Vec<uint8> = _v1667 
                                let _v1664 = v1678 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1681 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1664 = v1681 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1684 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1664 = v1684 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1687 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1664 = v1687 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1690 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1664 = v1690 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1693 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1664 = v1693 
                                #endif
#else
                                let v1696 : (uint8 []) = v1474 |> System.IO.File.ReadAllBytes
                                let v1697 : string = "$0.to_vec()"
                                let v1698 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1696 v1697 
                                let _v1664 = v1698 
                                #endif
                                let v1699 : Vec<uint8> = _v1664 
                                let v1704 : Vec<uint8> = method27(v1699)
                                let v1705 : string = "std::string::String::from_utf8($0)"
                                let v1706 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1704 v1705 
                                let v1707 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1708 : string = "$0.unwrap()"
                                let v1709 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1706 v1708 
                                let _v1707 = v1709 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1710 : string = "$0.unwrap()"
                                let v1711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1706 v1710 
                                let _v1707 = v1711 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1712 : string = "$0.unwrap()"
                                let v1713 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1706 v1712 
                                let _v1707 = v1713 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1714 : std_string_String = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1707 = v1714 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1715 : std_string_String = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1707 = v1715 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1716 : std_string_String = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1707 = v1716 
                                #endif
#else
                                let v1717 : std_string_String = match v1706 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1707 = v1717 
                                #endif
                                let v1718 : std_string_String = _v1707 
                                let v1721 : string = "fable_library_rust::String_::fromString($0)"
                                let v1722 : string = Fable.Core.RustInterop.emitRustExpr v1718 v1721 
                                let _v1663 = v1722 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1723 : string = null |> unbox<string>
                                let _v1663 = v1723 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1726 : string = null |> unbox<string>
                                let _v1663 = v1726 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1729 : string = null |> unbox<string>
                                let _v1663 = v1729 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1732 : string = null |> unbox<string>
                                let _v1663 = v1732 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1735 : string = null |> unbox<string>
                                let _v1663 = v1735 
                                #endif
#else
                                let v1738 : string = v1474 |> System.IO.File.ReadAllText
                                let _v1663 = v1738 
                                #endif
                                let v1739 : string = _v1663 
                                let v1744 : string = "rs"
                                let v1745 : string = method182(v1744, v1739, v1662)
                                let v1746 : string = method183(v1745)
                                let v1747 : string = __SOURCE_DIRECTORY__
                                let v1748 : string = "polyglot"
                                let v1749 : string = ".devcontainer"
                                let v1750 : string = method28(v1748, v1749)
                                let v1751 : US12 = method31(v1750, v1747)
                                let v1799 : US5 =
                                    match v1751 with
                                    | US12_1(v1754) -> (* Error *)
                                        let v1755 : unit = ()
                                        let v1756 : (unit -> unit) = closure16(v1754)
                                        let v1757 : unit = (fun () -> v1756 (); v1755) ()
                                        US5_1
                                    | US12_0(v1752) -> (* Ok *)
                                        US5_0(v1752)
                                let v1854 : US5 =
                                    match v1799 with
                                    | US5_1 -> (* None *)
                                        let v1802 : string = method39()
                                        let v1803 : string = method28(v1748, v1749)
                                        let v1804 : US12 = method31(v1803, v1802)
                                        match v1804 with
                                        | US12_1(v1807) -> (* Error *)
                                            let v1808 : unit = ()
                                            let v1809 : (unit -> unit) = closure16(v1807)
                                            let v1810 : unit = (fun () -> v1809 (); v1808) ()
                                            US5_1
                                        | US12_0(v1805) -> (* Ok *)
                                            US5_0(v1805)
                                    | US5_0(v1800) -> (* Some *)
                                        US5_0(v1800)
                                let v1858 : string =
                                    match v1854 with
                                    | US5_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US5_0(v1855) -> (* Some *)
                                        v1855
                                let v1859 : string = method28(v1858, v1748)
                                let v1860 : string = method39()
                                let v1861 : (unit -> string) = v1860.ToLower
                                let v1862 : string = v1861 ()
                                let v1865 : (unit -> string) = v1859.ToLower
                                let v1866 : string = v1865 ()
                                let v1869 : bool = v1862.StartsWith (v1866, false, null)
                                let v1874 : US12 =
                                    if v1869 then
                                        US12_1(v1866)
                                    else
                                        US12_0(v1866)
                                let v1880 : Result<string, string> =
                                    match v1874 with
                                    | US12_1(v1877) -> (* Error *)
                                        let v1878 : Result<string, string> = Error v1877 
                                        v1878
                                    | US12_0(v1875) -> (* Ok *)
                                        let v1876 : Result<string, string> = Ok v1875 
                                        v1876
                                let v1881 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                let v1882 : bool = Fable.Core.RustInterop.emitRustExpr v1880 v1881 
                                let v1883 : string = "x"
                                let v1884 : string = Fable.Core.RustInterop.emitRustExpr () v1883 
                                let v1885 : string = "true; $0 })"
                                let v1886 : bool = Fable.Core.RustInterop.emitRustExpr v1884 v1885 
                                let v1887 : string = "_result_unwrap_or_else"
                                let v1888 : string = Fable.Core.RustInterop.emitRustExpr () v1887 
                                let v1889 : string = "spiral_builder"
                                let v1890 : US37 = US37_0
                                let v1891 : US38 = US38_0(v1890)
                                let v1892 : US5 = US5_0(v1746)
                                let v1893 : string = method186(v1892, v1889, v1891, v1888)
                                let v1894 : string = "Fable.Core"
                                let v1895 : UH2 = UH2_0
                                let v1896 : UH2 = UH2_1(v1894, v1895)
                                let v1897 : UH2 = UH2_0
                                let v1898 : string = method187(v1739, v1889, v1897, v1896, v1893, v1888)
                                let v1899 : string = "../../.."
                                let v1900 : string = method28(v1893, v1899)
                                let v1901 : string = "Cargo.toml"
                                let v1902 : string = method28(v1900, v1901)
                                let v1903 : bool = method43(v1902)
                                let v1904 : bool = v1903 = false
                                if v1904 then
                                    let v1905 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1906 : System.DateTime = System.DateTime.Now
                                    let _v1905 = v1906 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1907 : System.DateTime = System.DateTime.Now
                                    let _v1905 = v1907 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1908 : System.DateTime = null |> unbox<System.DateTime>
                                    let _v1905 = v1908 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1911 : System.DateTime = System.DateTime.Now
                                    let _v1905 = v1911 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1912 : System.DateTime = System.DateTime.Now
                                    let _v1905 = v1912 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1913 : System.DateTime = System.DateTime.Now
                                    let _v1905 = v1913 
                                    #endif
#else
                                    let v1914 : System.DateTime = System.DateTime.Now
                                    let _v1905 = v1914 
                                    #endif
                                    let v1915 : System.DateTime = _v1905 
                                    let v1920 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1921 : System.Guid = v1920 ()
                                    let v1924 : System.Guid = method190(v1921, v1915)
                                    let v1925 : (System.Guid -> string) = _.ToString()
                                    let v1926 : string = v1925 v1924
                                    let v1929 : string = $"[package]"
                                    let v1930 : string = $"name = \"spiral_builder_{v1926}\""
                                    let v1931 : string = "\n"
                                    let v1932 : string = v1929 + v1931 
                                    let v1933 : string = v1932 + v1930 
                                    let v1934 : string = $"version = \"0.0.1\""
                                    let v1935 : string = v1933 + v1931 
                                    let v1936 : string = v1935 + v1934 
                                    let v1937 : string = $"edition = \"2021\""
                                    let v1938 : string = v1936 + v1931 
                                    let v1939 : string = v1938 + v1937 
                                    let v1940 : string = $""
                                    let v1941 : string = v1939 + v1931 
                                    let v1942 : string = v1941 + v1940 
                                    let v1943 : string = $"[[bin]]"
                                    let v1944 : string = v1942 + v1931 
                                    let v1945 : string = v1944 + v1943 
                                    let v1946 : string = $"name = \"spiral_builder_{v1926}\""
                                    let v1947 : string = v1945 + v1931 
                                    let v1948 : string = v1947 + v1946 
                                    let v1949 : string = $"path = \"spiral_builder.rs\""
                                    let v1950 : string = v1948 + v1931 
                                    let v1951 : string = v1950 + v1949 
                                    let v1952 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1953 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1902, v1951) v1953 
                                    let _v1952 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v1952 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v1952 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v1952 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v1952 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v1952 = () 
                                    #endif
#else
                                    let v1954 : string = method67(v1951)
                                    System.IO.File.WriteAllText (v1902, v1954)
                                    let _v1952 = () 
                                    #endif
                                    _v1952 
                                    ()
                                let v1955 : string = method28(v1893, v1901)
                                let v1956 : bool = method43(v1955)
                                let v1957 : bool = v1956 = false
                                if v1957 then
                                    let v1958 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1959 : System.DateTime = System.DateTime.Now
                                    let _v1958 = v1959 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1960 : System.DateTime = System.DateTime.Now
                                    let _v1958 = v1960 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1961 : System.DateTime = null |> unbox<System.DateTime>
                                    let _v1958 = v1961 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1964 : System.DateTime = System.DateTime.Now
                                    let _v1958 = v1964 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1965 : System.DateTime = System.DateTime.Now
                                    let _v1958 = v1965 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1966 : System.DateTime = System.DateTime.Now
                                    let _v1958 = v1966 
                                    #endif
#else
                                    let v1967 : System.DateTime = System.DateTime.Now
                                    let _v1958 = v1967 
                                    #endif
                                    let v1968 : System.DateTime = _v1958 
                                    let v1973 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1974 : System.Guid = v1973 ()
                                    let v1977 : System.Guid = method190(v1974, v1968)
                                    let v1978 : (System.Guid -> string) = _.ToString()
                                    let v1979 : string = v1978 v1977
                                    let v1982 : string = $"[package]"
                                    let v1983 : string = $"name = \"spiral_builder_{v1979}\""
                                    let v1984 : string = "\n"
                                    let v1985 : string = v1982 + v1984 
                                    let v1986 : string = v1985 + v1983 
                                    let v1987 : string = $"version = \"0.0.1\""
                                    let v1988 : string = v1986 + v1984 
                                    let v1989 : string = v1988 + v1987 
                                    let v1990 : string = $"edition = \"2021\""
                                    let v1991 : string = v1989 + v1984 
                                    let v1992 : string = v1991 + v1990 
                                    let v1993 : string = $""
                                    let v1994 : string = v1992 + v1984 
                                    let v1995 : string = v1994 + v1993 
                                    let v1996 : string = $"[[bin]]"
                                    let v1997 : string = v1995 + v1984 
                                    let v1998 : string = v1997 + v1996 
                                    let v1999 : string = $"name = \"spiral_builder_{v1979}\""
                                    let v2000 : string = v1998 + v1984 
                                    let v2001 : string = v2000 + v1999 
                                    let v2002 : string = $"path = \"spiral_builder.rs\""
                                    let v2003 : string = v2001 + v1984 
                                    let v2004 : string = v2003 + v2002 
                                    let v2005 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2006 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1955, v2004) v2006 
                                    let _v2005 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v2005 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v2005 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v2005 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v2005 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v2005 = () 
                                    #endif
#else
                                    let v2007 : string = method67(v2004)
                                    System.IO.File.WriteAllText (v1955, v2007)
                                    let _v2005 = () 
                                    #endif
                                    _v2005 
                                    ()
                                let v2008 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v2009 : string = method28(v1888, v2008)
                                let v2010 : string = "fable_modules/fable-library-rust"
                                let v2011 : string = method28(v1893, v2010)
                                method195(v2009, v2011)
                                let struct (v2012 : int32, v2013 : string) = method196(v1662, v1893, v1744, v1898, v1874)
                                let v2014 : bool = v2012 <> 0 
                                let struct (v3130 : US5, v3131 : US5, v3132 : US5, v3133 : US5) =
                                    if v2014 then
                                        let v2017 : unit = ()
                                        let v2018 : (unit -> unit) = closure83(v2013, v2012)
                                        let v2019 : unit = (fun () -> v2018 (); v2017) ()
                                        let v2059 : US5 = US5_0(v1744)
                                        let v2060 : US5 = US5_1
                                        let v2061 : US5 = US5_1
                                        let v2062 : US5 = US5_0(v2013)
                                        struct (v2059, v2060, v2061, v2062)
                                    else
                                        let v2063 : bool =
                                            match v1662 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2139 : Vec<std_string_String> =
                                            if v2063 then
                                                v1524
                                            else
                                                let v2064 : (std_string_String -> bool) = method206()
                                                let v2065 : Vec<std_string_String> = method207(v1524)
                                                let v2066 : string = "v2065.into_iter().filter(|x| v2064(x.clone().clone())).collect::<Vec<_>>()"
                                                let v2067 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2066 
                                                let v2068 : string = "$0.len()"
                                                let v2069 : unativeint = Fable.Core.RustInterop.emitRustExpr v2067 v2068 
                                                let v2070 : int32 = v2069 |> int32 
                                                let v2077 : bool = v2070 > 0
                                                if v2077 then
                                                    v1524
                                                else
                                                    let v2078 : string = "near-sdk"
                                                    let v2079 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v2080 : string = "&*$0"
                                                    let v2081 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2078 v2080 
                                                    let _v2079 = v2081 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v2082 : string = "&*$0"
                                                    let v2083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2078 v2082 
                                                    let _v2079 = v2083 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v2084 : string = "&*$0"
                                                    let v2085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2078 v2084 
                                                    let _v2079 = v2085 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v2086 : Ref<Str> = v2078 |> unbox<Ref<Str>>
                                                    let _v2079 = v2086 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v2089 : Ref<Str> = v2078 |> unbox<Ref<Str>>
                                                    let _v2079 = v2089 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v2092 : Ref<Str> = v2078 |> unbox<Ref<Str>>
                                                    let _v2079 = v2092 
                                                    #endif
#else
                                                    let v2095 : Ref<Str> = v2078 |> unbox<Ref<Str>>
                                                    let _v2079 = v2095 
                                                    #endif
                                                    let v2098 : Ref<Str> = _v2079 
                                                    let v2103 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v2104 : string = "String::from($0)"
                                                    let v2105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2098 v2104 
                                                    let _v2103 = v2105 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v2106 : string = "String::from($0)"
                                                    let v2107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2098 v2106 
                                                    let _v2103 = v2107 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v2108 : string = "String::from($0)"
                                                    let v2109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2098 v2108 
                                                    let _v2103 = v2109 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v2110 : std_string_String = v2098 |> unbox<std_string_String>
                                                    let _v2103 = v2110 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v2113 : std_string_String = v2098 |> unbox<std_string_String>
                                                    let _v2103 = v2113 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v2116 : std_string_String = v2098 |> unbox<std_string_String>
                                                    let _v2103 = v2116 
                                                    #endif
#else
                                                    let v2119 : std_string_String = v2098 |> unbox<std_string_String>
                                                    let _v2103 = v2119 
                                                    #endif
                                                    let v2122 : std_string_String = _v2103 
                                                    let v2127 : (std_string_String []) = [|v2122|]
                                                    let v2128 : string = "$0.to_vec()"
                                                    let v2129 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2127 v2128 
                                                    let v2130 : Vec<std_string_String> = method208(v2129)
                                                    let v2131 : Vec<std_string_String> = method209(v1524)
                                                    let v2132 : string = "true; let mut v2131 = v2131"
                                                    let v2133 : bool = Fable.Core.RustInterop.emitRustExpr () v2132 
                                                    let v2134 : string = "true; v2131.extend(v2130)"
                                                    let v2135 : bool = Fable.Core.RustInterop.emitRustExpr () v2134 
                                                    let v2136 : string = "v2131"
                                                    let v2137 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2136 
                                                    v2137
                                        let v2140 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                        let v2141 : bool = Fable.Core.RustInterop.emitRustExpr v2139 v2140 
                                        let v2142 : string = "x"
                                        let v2143 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2142 
                                        let v2144 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2145 : string = Fable.Core.RustInterop.emitRustExpr v2143 v2144 
                                        let v2146 : string = "="
                                        let v2147 : bool = v2145.Contains v2146 
                                        let v2160 : string =
                                            if v2147 then
                                                v2145
                                            else
                                                let v2150 : string = "]"
                                                let v2151 : bool = v2145.EndsWith (v2150, false, null)
                                                if v2151 then
                                                    let v2154 : string = $"={{version='*',features=["
                                                    let v2155 : string = "["
                                                    let v2156 : string = v2145.Replace (v2155, v2154)
                                                    let v2157 : string = $"{v2156}}}"
                                                    v2157
                                                else
                                                    let v2158 : string = $"{v2145}='*'"
                                                    v2158
                                        let v2161 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v2162 : bool = Fable.Core.RustInterop.emitRustExpr v2160 v2161 
                                        let v2163 : string = "_vec_map"
                                        let v2164 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2163 
                                        let v2165 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v2166 : (string []) = Fable.Core.RustInterop.emitRustExpr v2164 v2165 
                                        let v2167 : unit = ()
                                        let _v2167 =
                                            seq {
                                                for i = 0 to v2166.Length - 1 do yield v2166.[i]
                                                (*
                                                ()
                                            *)
                                            }
                                            (*
                                            ()
                                        *)
                                        let v2168 : string seq = _v2167 
                                        let v2174 : string = method40()
                                        let v2175 : (string -> (string seq -> string)) = String.concat
                                        let v2176 : (string seq -> string) = v2175 v2174
                                        let v2177 : string = v2176 v2168
                                        let v2181 : string = $"{v1889}.{v1744}"
                                        let v2182 : string = method28(v1893, v2181)
                                        let v2183 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2184 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2185 : string = "std::fs::read(&*$0)"
                                        let v2186 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2182 v2185 
                                        let v2187 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2188 : string = "$0.unwrap()"
                                        let v2189 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2186 v2188 
                                        let _v2187 = v2189 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2190 : string = "$0.unwrap()"
                                        let v2191 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2186 v2190 
                                        let _v2187 = v2191 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2192 : string = "$0.unwrap()"
                                        let v2193 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2186 v2192 
                                        let _v2187 = v2193 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2194 : Vec<uint8> = match v2186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2187 = v2194 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2195 : Vec<uint8> = match v2186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2187 = v2195 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2196 : Vec<uint8> = match v2186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2187 = v2196 
                                        #endif
#else
                                        let v2197 : Vec<uint8> = match v2186 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2187 = v2197 
                                        #endif
                                        let v2198 : Vec<uint8> = _v2187 
                                        let _v2184 = v2198 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2201 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2184 = v2201 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2204 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2184 = v2204 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2207 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2184 = v2207 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2210 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2184 = v2210 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2213 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2184 = v2213 
                                        #endif
#else
                                        let v2216 : (uint8 []) = v2182 |> System.IO.File.ReadAllBytes
                                        let v2217 : string = "$0.to_vec()"
                                        let v2218 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2216 v2217 
                                        let _v2184 = v2218 
                                        #endif
                                        let v2219 : Vec<uint8> = _v2184 
                                        let v2224 : Vec<uint8> = method27(v2219)
                                        let v2225 : string = "std::string::String::from_utf8($0)"
                                        let v2226 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2224 v2225 
                                        let v2227 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2228 : string = "$0.unwrap()"
                                        let v2229 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2226 v2228 
                                        let _v2227 = v2229 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2230 : string = "$0.unwrap()"
                                        let v2231 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2226 v2230 
                                        let _v2227 = v2231 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2232 : string = "$0.unwrap()"
                                        let v2233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2226 v2232 
                                        let _v2227 = v2233 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2234 : std_string_String = match v2226 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2227 = v2234 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2235 : std_string_String = match v2226 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2227 = v2235 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2236 : std_string_String = match v2226 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2227 = v2236 
                                        #endif
#else
                                        let v2237 : std_string_String = match v2226 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2227 = v2237 
                                        #endif
                                        let v2238 : std_string_String = _v2227 
                                        let v2241 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2242 : string = Fable.Core.RustInterop.emitRustExpr v2238 v2241 
                                        let _v2183 = v2242 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2243 : string = null |> unbox<string>
                                        let _v2183 = v2243 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2246 : string = null |> unbox<string>
                                        let _v2183 = v2246 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2249 : string = null |> unbox<string>
                                        let _v2183 = v2249 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2252 : string = null |> unbox<string>
                                        let _v2183 = v2252 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2255 : string = null |> unbox<string>
                                        let _v2183 = v2255 
                                        #endif
#else
                                        let v2258 : string = v2182 |> System.IO.File.ReadAllText
                                        let _v2183 = v2258 
                                        #endif
                                        let v2259 : string = _v2183 
                                        let v2264 : string = method210()
                                        let v2265 : string = "on_startup!"
                                        let v2266 : string = v2265 + v2264 
                                        let v2267 : string = method211()
                                        let v2268 : string = " method0"
                                        let v2269 : string = v2268 + v2267 
                                        let v2270 : bool = v2259.Contains v2266 
                                        let v2277 : bool =
                                            if v2270 then
                                                let v2273 : bool = v2259.Contains v2269 
                                                let v2276 : bool = v2273 = false
                                                v2276
                                            else
                                                false
                                        let v2278 : string = $"[package]"
                                        let v2279 : string = $"name = \"spiral_builder_{v1746}\""
                                        let v2280 : string = "\n"
                                        let v2281 : string = v2278 + v2280 
                                        let v2282 : string = v2281 + v2279 
                                        let v2283 : string = $"version = \"0.0.1\""
                                        let v2284 : string = v2282 + v2280 
                                        let v2285 : string = v2284 + v2283 
                                        let v2286 : string = $"edition = \"2021\""
                                        let v2287 : string = v2285 + v2280 
                                        let v2288 : string = v2287 + v2286 
                                        let v2289 : string = $""
                                        let v2290 : string = v2288 + v2280 
                                        let v2291 : string = v2290 + v2289 
                                        let v2292 : string = $"[dependencies]"
                                        let v2293 : string = v2291 + v2280 
                                        let v2294 : string = v2293 + v2292 
                                        let v2295 : US35 = US35_1
                                        let v2296 : bool = v1662 <> v2295 
                                        let v2314 : string =
                                            if v2296 then
                                                let v2300 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v2300
                                            else
                                                let v2301 : string = $"fable_library_rust = {{"
                                                let v2302 : string = $" workspace = true,"
                                                let v2303 : string = v2301 + v2302 
                                                let v2304 : string = $" features = ["
                                                let v2305 : string = v2303 + v2304 
                                                let v2308 : string =
                                                    if v2277 then
                                                        let v2306 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                        v2306
                                                    else
                                                        let v2307 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                        v2307
                                                let v2309 : string = v2305 + v2308 
                                                let v2310 : string = $"]"
                                                let v2311 : string = v2309 + v2310 
                                                let v2312 : string = $"}}"
                                                let v2313 : string = v2311 + v2312 
                                                v2313
                                        let v2315 : string = v2294 + v2280 
                                        let v2316 : string = v2315 + v2314 
                                        let v2317 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v2318 : string = v2316 + v2280 
                                        let v2319 : string = v2318 + v2317 
                                        let v2320 : string = $"{v2177}"
                                        let v2321 : string = v2319 + v2280 
                                        let v2322 : string = v2321 + v2320 
                                        let v2323 : string = $""
                                        let v2324 : string = v2322 + v2280 
                                        let v2325 : string = v2324 + v2323 
                                        let v2326 : bool =
                                            match v1662 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2335 : string =
                                            if v2326 then
                                                let v2327 : string = $"[[bin]]"
                                                let v2328 : string = $"name = \"spiral_builder_{v1746}\""
                                                let v2329 : string = v2327 + v2280 
                                                let v2330 : string = v2329 + v2328 
                                                v2330
                                            else
                                                let v2331 : string = $"[lib]"
                                                let v2332 : string = $"crate-type = [\"cdylib\"]"
                                                let v2333 : string = v2331 + v2280 
                                                let v2334 : string = v2333 + v2332 
                                                v2334
                                        let v2336 : string = v2325 + v2280 
                                        let v2337 : string = v2336 + v2335 
                                        let v2338 : string = $"path = \"spiral_builder.rs\""
                                        let v2339 : string = v2337 + v2280 
                                        let v2340 : string = v2339 + v2338 
                                        let v2341 : string = method147(v1888)
                                        let v2342 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v2343 : string = $""
                                        let v2344 : string = v2342 + v2280 
                                        let v2345 : string = v2344 + v2343 
                                        let v2346 : string = $"[workspace]"
                                        let v2347 : string = v2345 + v2280 
                                        let v2348 : string = v2347 + v2346 
                                        let v2349 : string = $"resolver = \"2\""
                                        let v2350 : string = v2348 + v2280 
                                        let v2351 : string = v2350 + v2349 
                                        let v2352 : string = $"members = [\"packages/Rust/*\"]"
                                        let v2353 : string = v2351 + v2280 
                                        let v2354 : string = v2353 + v2352 
                                        let v2355 : string = $""
                                        let v2356 : string = v2354 + v2280 
                                        let v2357 : string = v2356 + v2355 
                                        let v2358 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v2359 : string = v2357 + v2280 
                                        let v2360 : string = v2359 + v2358 
                                        let v2361 : string = $"path = \"{v2341}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v2362 : string = v2360 + v2280 
                                        let v2363 : string = v2362 + v2361 
                                        let v2364 : string = $"default-features = false"
                                        let v2365 : string = v2363 + v2280 
                                        let v2366 : string = v2365 + v2364 
                                        let v2367 : string = $"features = []"
                                        let v2368 : string = v2366 + v2280 
                                        let v2369 : string = v2368 + v2367 
                                        let v2370 : string = $""
                                        let v2371 : string = v2369 + v2280 
                                        let v2372 : string = v2371 + v2370 
                                        let v2373 : string = $"[workspace.dependencies]"
                                        let v2374 : string = v2372 + v2280 
                                        let v2375 : string = v2374 + v2373 
                                        let v2376 : string = $"inline_colorization = \"~0.1\""
                                        let v2377 : string = v2375 + v2280 
                                        let v2378 : string = v2377 + v2376 
                                        let v2379 : string = $""
                                        let v2380 : string = v2378 + v2280 
                                        let v2381 : string = v2380 + v2379 
                                        let v2382 : string = $"[profile.release]"
                                        let v2383 : string = v2381 + v2280 
                                        let v2384 : string = v2383 + v2382 
                                        let v2385 : string = $"codegen-units = 1"
                                        let v2386 : string = v2384 + v2280 
                                        let v2387 : string = v2386 + v2385 
                                        let v2388 : string = $"opt-level = \"z\""
                                        let v2389 : string = v2387 + v2280 
                                        let v2390 : string = v2389 + v2388 
                                        let v2391 : string = $"lto = true"
                                        let v2392 : string = v2390 + v2280 
                                        let v2393 : string = v2392 + v2391 
                                        let v2394 : string = $"debug = false"
                                        let v2395 : string = v2393 + v2280 
                                        let v2396 : string = v2395 + v2394 
                                        let v2397 : string = $"panic = \"abort\""
                                        let v2398 : string = v2396 + v2280 
                                        let v2399 : string = v2398 + v2397 
                                        let v2400 : string = $"overflow-checks = true"
                                        let v2401 : string = v2399 + v2280 
                                        let v2402 : string = v2401 + v2400 
                                        let v2403 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v2404 : string = v2402 + v2280 
                                        let v2405 : string = v2404 + v2403 
                                        method41(v1955, v2340)
                                        method41(v1902, v2405)
                                        let v2406 : string = "src/Range.rs"
                                        let v2407 : string = method28(v2011, v2406)
                                        let v2408 : bool = method43(v2407)
                                        if v2408 then
                                            let v2409 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2410 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2411 : string = "std::fs::read(&*$0)"
                                            let v2412 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2407 v2411 
                                            let v2413 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2414 : string = "$0.unwrap()"
                                            let v2415 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2412 v2414 
                                            let _v2413 = v2415 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2416 : string = "$0.unwrap()"
                                            let v2417 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2412 v2416 
                                            let _v2413 = v2417 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2418 : string = "$0.unwrap()"
                                            let v2419 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2412 v2418 
                                            let _v2413 = v2419 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2420 : Vec<uint8> = match v2412 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2413 = v2420 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2421 : Vec<uint8> = match v2412 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2413 = v2421 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2422 : Vec<uint8> = match v2412 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2413 = v2422 
                                            #endif
#else
                                            let v2423 : Vec<uint8> = match v2412 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2413 = v2423 
                                            #endif
                                            let v2424 : Vec<uint8> = _v2413 
                                            let _v2410 = v2424 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2427 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2410 = v2427 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2430 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2410 = v2430 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2433 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2410 = v2433 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2436 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2410 = v2436 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2439 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2410 = v2439 
                                            #endif
#else
                                            let v2442 : (uint8 []) = v2407 |> System.IO.File.ReadAllBytes
                                            let v2443 : string = "$0.to_vec()"
                                            let v2444 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2442 v2443 
                                            let _v2410 = v2444 
                                            #endif
                                            let v2445 : Vec<uint8> = _v2410 
                                            let v2450 : Vec<uint8> = method27(v2445)
                                            let v2451 : string = "std::string::String::from_utf8($0)"
                                            let v2452 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2450 v2451 
                                            let v2453 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2454 : string = "$0.unwrap()"
                                            let v2455 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2452 v2454 
                                            let _v2453 = v2455 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2456 : string = "$0.unwrap()"
                                            let v2457 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2452 v2456 
                                            let _v2453 = v2457 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2458 : string = "$0.unwrap()"
                                            let v2459 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2452 v2458 
                                            let _v2453 = v2459 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2460 : std_string_String = match v2452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2453 = v2460 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2461 : std_string_String = match v2452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2453 = v2461 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2462 : std_string_String = match v2452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2453 = v2462 
                                            #endif
#else
                                            let v2463 : std_string_String = match v2452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2453 = v2463 
                                            #endif
                                            let v2464 : std_string_String = _v2453 
                                            let v2467 : string = "fable_library_rust::String_::fromString($0)"
                                            let v2468 : string = Fable.Core.RustInterop.emitRustExpr v2464 v2467 
                                            let _v2409 = v2468 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2469 : string = null |> unbox<string>
                                            let _v2409 = v2469 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2472 : string = null |> unbox<string>
                                            let _v2409 = v2472 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2475 : string = null |> unbox<string>
                                            let _v2409 = v2475 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2478 : string = null |> unbox<string>
                                            let _v2409 = v2478 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2481 : string = null |> unbox<string>
                                            let _v2409 = v2481 
                                            #endif
#else
                                            let v2484 : string = v2407 |> System.IO.File.ReadAllText
                                            let _v2409 = v2484 
                                            #endif
                                            let v2485 : string = _v2409 
                                            let v2490 : string = "use crate::String_::fromCharCode;"
                                            let v2491 : string = "use crate::String_::fromChar;"
                                            let v2492 : string = v2485.Replace (v2490, v2491)
                                            let v2493 : string = "fromCharCode(c)"
                                            let v2494 : string = "std::char::from_u32(c).unwrap()"
                                            let v2495 : string = v2492.Replace (v2493, v2494)
                                            method41(v2407, v2495)
                                        let v2496 : uint8 = 1uy
                                        let struct (v2497 : int32, v2498 : string) = method212(v1874, v1955, v2496)
                                        let v2499 : bool = v2497 <> 0 
                                        if v2499 then
                                            let v2502 : unit = ()
                                            let v2503 : (unit -> unit) = closure87(v2498, v2497)
                                            let v2504 : unit = (fun () -> v2503 (); v2502) ()
                                            ()
                                        let v2544 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2545 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2546 : string = "std::fs::read(&*$0)"
                                        let v2547 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2182 v2546 
                                        let v2548 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2549 : string = "$0.unwrap()"
                                        let v2550 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2547 v2549 
                                        let _v2548 = v2550 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2551 : string = "$0.unwrap()"
                                        let v2552 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2547 v2551 
                                        let _v2548 = v2552 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2553 : string = "$0.unwrap()"
                                        let v2554 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2547 v2553 
                                        let _v2548 = v2554 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2555 : Vec<uint8> = match v2547 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2548 = v2555 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2556 : Vec<uint8> = match v2547 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2548 = v2556 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2557 : Vec<uint8> = match v2547 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2548 = v2557 
                                        #endif
#else
                                        let v2558 : Vec<uint8> = match v2547 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2548 = v2558 
                                        #endif
                                        let v2559 : Vec<uint8> = _v2548 
                                        let _v2545 = v2559 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2562 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2545 = v2562 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2565 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2545 = v2565 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2568 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2545 = v2568 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2571 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2545 = v2571 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2574 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2545 = v2574 
                                        #endif
#else
                                        let v2577 : (uint8 []) = v2182 |> System.IO.File.ReadAllBytes
                                        let v2578 : string = "$0.to_vec()"
                                        let v2579 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2577 v2578 
                                        let _v2545 = v2579 
                                        #endif
                                        let v2580 : Vec<uint8> = _v2545 
                                        let v2585 : Vec<uint8> = method27(v2580)
                                        let v2586 : string = "std::string::String::from_utf8($0)"
                                        let v2587 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2585 v2586 
                                        let v2588 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2589 : string = "$0.unwrap()"
                                        let v2590 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2587 v2589 
                                        let _v2588 = v2590 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2591 : string = "$0.unwrap()"
                                        let v2592 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2587 v2591 
                                        let _v2588 = v2592 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2593 : string = "$0.unwrap()"
                                        let v2594 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2587 v2593 
                                        let _v2588 = v2594 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2595 : std_string_String = match v2587 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2588 = v2595 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2596 : std_string_String = match v2587 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2588 = v2596 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2597 : std_string_String = match v2587 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2588 = v2597 
                                        #endif
#else
                                        let v2598 : std_string_String = match v2587 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2588 = v2598 
                                        #endif
                                        let v2599 : std_string_String = _v2588 
                                        let v2602 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2603 : string = Fable.Core.RustInterop.emitRustExpr v2599 v2602 
                                        let _v2544 = v2603 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2604 : string = null |> unbox<string>
                                        let _v2544 = v2604 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2607 : string = null |> unbox<string>
                                        let _v2544 = v2607 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2610 : string = null |> unbox<string>
                                        let _v2544 = v2610 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2613 : string = null |> unbox<string>
                                        let _v2544 = v2613 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2616 : string = null |> unbox<string>
                                        let _v2544 = v2616 
                                        #endif
#else
                                        let v2619 : string = v2182 |> System.IO.File.ReadAllText
                                        let _v2544 = v2619 
                                        #endif
                                        let v2620 : string = _v2544 
                                        let v2625 : string = method218()
                                        let v2626 : string = "pub fn main() -> Result<(), String> "
                                        let v2627 : string = v2626 + v2625 
                                        let v2628 : bool =
                                            match v1662 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2661 : string =
                                            if v2628 then
                                                let v2629 : string = ""
                                                v2629
                                            else
                                                let v2630 : string = $"#[near_sdk::near_bindgen]"
                                                let v2631 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v2632 : string = v2630 + v2280 
                                                let v2633 : string = v2632 + v2631 
                                                let v2634 : string = $"pub struct MainState {{"
                                                let v2635 : string = v2633 + v2280 
                                                let v2636 : string = v2635 + v2634 
                                                let v2637 : string = $"}}"
                                                let v2638 : string = v2636 + v2280 
                                                let v2639 : string = v2638 + v2637 
                                                let v2640 : string = $""
                                                let v2641 : string = v2639 + v2280 
                                                let v2642 : string = v2641 + v2640 
                                                let v2643 : string = $"#[near_sdk::near_bindgen]"
                                                let v2644 : string = v2642 + v2280 
                                                let v2645 : string = v2644 + v2643 
                                                let v2646 : string = $"impl MainState {{"
                                                let v2647 : string = v2645 + v2280 
                                                let v2648 : string = v2647 + v2646 
                                                let v2649 : string = $"    pub fn state_main() {{"
                                                let v2650 : string = v2648 + v2280 
                                                let v2651 : string = v2650 + v2649 
                                                let v2652 : string = $"        Spiral_builder::method0();"
                                                let v2653 : string = v2651 + v2280 
                                                let v2654 : string = v2653 + v2652 
                                                let v2655 : string = $"    }}"
                                                let v2656 : string = v2654 + v2280 
                                                let v2657 : string = v2656 + v2655 
                                                let v2658 : string = $"}}"
                                                let v2659 : string = v2657 + v2280 
                                                let v2660 : string = v2659 + v2658 
                                                v2660
                                        let v2662 : bool =
                                            match v1662 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2668 : bool =
                                            if v2662 then
                                                let v2663 : string = "Spiral_builder::method0()"
                                                let v2664 : string = v2266 + v2663 
                                                let v2665 : bool = v2620.Contains v2664 
                                                v2665
                                            else
                                                false
                                        let v2671 : string =
                                            if v2668 then
                                                let v2669 : string = $"{v2627} Ok(Spiral_builder::method0()) }}"
                                                v2669
                                            else
                                                let v2670 : string = $"{v2627} Ok(()) }}"
                                                v2670
                                        let v2672 : string = v2661 + v2280 
                                        let v2673 : string = v2672 + v2671 
                                        let v2674 : bool = v2620.Contains v2627 
                                        let v2677 : string = $"{v2620}\n\n{v2673}\n"
                                        let v2764 : string =
                                            if v2674 then
                                                v2620
                                            else
                                                let v2681 : bool =
                                                    match v1662 with
                                                    | US35_0(v2678) -> (* Some *)
                                                        match v2678 with
                                                        | US36_1(v2679) -> (* Contract *)
                                                            true
                                                        | _ ->
                                                            false
                                                    | _ ->
                                                        false
                                                let v2682 : string = "\";\".into()"
                                                let v2683 : string = Fable.Core.RustInterop.emitRustExpr () v2682 
                                                let v2684 : string = "),)"
                                                let v2685 : string = v2684 + v2683 
                                                let v2686 : string = "));"
                                                let v2687 : string = v2677.Replace (v2685, v2686)
                                                let v2688 : string = "\";\".into()"
                                                let v2689 : string = Fable.Core.RustInterop.emitRustExpr () v2688 
                                                let v2690 : string = "},)"
                                                let v2691 : string = v2690 + v2689 
                                                let v2692 : string = "});"
                                                let v2693 : string = v2687.Replace (v2691, v2692)
                                                let v2694 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v2695 : string = " defaultOf::<()>();"
                                                let v2696 : string = method163(v2694, v2695, v2693)
                                                let v2697 : string = "::Slice'_"
                                                let v2698 : string = "::Slice__"
                                                let v2699 : string = v2696.Replace (v2697, v2698)
                                                let v2700 : string = " Slice'_"
                                                let v2701 : string = " Slice__"
                                                let v2702 : string = v2699.Replace (v2700, v2701)
                                                let v2703 : string = "\",\".into()"
                                                let v2704 : string = Fable.Core.RustInterop.emitRustExpr () v2703 
                                                let v2705 : string = "defaultOf()"
                                                let v2706 : string = v2705 + v2704 
                                                let v2707 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v2708 : string = v2702.Replace (v2706, v2707)
                                                let v2709 : string = "\"__.\".into()"
                                                let v2710 : string = Fable.Core.RustInterop.emitRustExpr () v2709 
                                                let v2711 : string = "__self"
                                                let v2712 : string = v2711 + v2710 
                                                let v2713 : string = "self."
                                                let v2714 : string = v2708.Replace (v2712, v2713)
                                                let v2715 : string = "\"_.\".into()"
                                                let v2716 : string = Fable.Core.RustInterop.emitRustExpr () v2715 
                                                let v2717 : string = "_self"
                                                let v2718 : string = v2717 + v2716 
                                                let v2719 : string = v2714.Replace (v2718, v2713)
                                                let v2720 : string = "\"h\".into()"
                                                let v2721 : string = Fable.Core.RustInterop.emitRustExpr () v2720 
                                                let v2722 : string = "get_or_insert_wit"
                                                let v2723 : string = v2722 + v2721 
                                                let v2724 : string = "get_or_init"
                                                let v2725 : string = v2719.Replace (v2723, v2724)
                                                let v2726 : string = "\";\".into()"
                                                let v2727 : string = Fable.Core.RustInterop.emitRustExpr () v2726 
                                                let v2728 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v2729 : string = v2728 + v2727 
                                                let v2730 : string = "type ConcurrentStack_1<T> = T;"
                                                let v2731 : string = v2725.Replace (v2729, v2730)
                                                let v2732 : string = "\";\".into()"
                                                let v2733 : string = Fable.Core.RustInterop.emitRustExpr () v2732 
                                                let v2734 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v2735 : string = v2734 + v2733 
                                                let v2736 : string = "type CancellationToken = ();"
                                                let v2737 : string = v2731.Replace (v2735, v2736)
                                                let v2738 : string = "\";\".into()"
                                                let v2739 : string = Fable.Core.RustInterop.emitRustExpr () v2738 
                                                let v2740 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v2741 : string = v2740 + v2739 
                                                let v2742 : string = "type TimeZoneInfo = i64;"
                                                let v2743 : string = v2737.Replace (v2741, v2742)
                                                let v2744 : string = "\";\".into()"
                                                let v2745 : string = Fable.Core.RustInterop.emitRustExpr () v2744 
                                                let v2746 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v2747 : string = v2746 + v2745 
                                                let v2748 : string = "type TaskCanceledException = ();"
                                                let v2749 : string = v2743.Replace (v2747, v2748)
                                                let v2754 : (string -> string) =
                                                    if v2277 then
                                                        closure88()
                                                    else
                                                        let v2751 : string = "// "
                                                        let v2752 : string = v2751 + v2266 
                                                        closure89(v2266, v2752)
                                                let v2755 : string = v2754 v2749
                                                let v2756 : bool = v2681 = false
                                                let v2762 : (string -> string) =
                                                    if v2756 then
                                                        closure88()
                                                    else
                                                        let v2758 : string = "use fable_library_rust::DateTime_::DateTime"
                                                        let v2759 : string = ";"
                                                        let v2760 : string = v2758 + v2759 
                                                        closure90(v2760)
                                                v2762 v2755
                                        let v2765 : bool = v2674 = false
                                        if v2765 then
                                            method41(v2182, v2764)
                                        let v2766 : bool =
                                            match v1662 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2767 : bool = v2766 <> true
                                        let v2770 : string =
                                            if v2767 then
                                                let v2768 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v1955}\""
                                                v2768
                                            else
                                                let v2769 : string = $"cargo run --manifest-path \"{v1955}\""
                                                v2769
                                        let v2771 : bool =
                                            match v1662 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2772 : bool = v2771 <> true
                                        let v2783 : (struct (string * string) []) =
                                            if v2772 then
                                                [||]
                                            else
                                                let v2774 : string = "TRACE_LEVEL"
                                                let v2775 : string = "Verbose"
                                                let v2776 : string = "RUSTC_WRAPPER"
                                                let v2777 : string = "sccache"
                                                let v2778 : string = "RUST_BACKTRACE"
                                                let v2779 : string = "full"
                                                let v2780 : string = "RUSTFLAGS"
                                                let v2781 : string = "-C prefer-dynamic"
                                                [|struct (v2774, v2775); struct (v2776, v2777); struct (v2778, v2779); struct (v2780, v2781)|]
                                        let v2784 : System.Threading.CancellationToken option = None
                                        let v2785 : (struct (string * string) []) = [||]
                                        let v2786 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2787 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2788 : string option = None
                                        let v2794 : Result<string, string> =
                                            match v1874 with
                                            | US12_1(v2791) -> (* Error *)
                                                let v2792 : Result<string, string> = Error v2791 
                                                v2792
                                            | US12_0(v2789) -> (* Ok *)
                                                let v2790 : Result<string, string> = Ok v2789 
                                                v2790
                                        let v2795 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2796 : string = "$0.ok()"
                                        let v2797 : string option = Fable.Core.RustInterop.emitRustExpr v2794 v2796 
                                        let _v2795 = v2797 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2798 : string = "$0.ok()"
                                        let v2799 : string option = Fable.Core.RustInterop.emitRustExpr v2794 v2798 
                                        let _v2795 = v2799 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2800 : string = "$0.ok()"
                                        let v2801 : string option = Fable.Core.RustInterop.emitRustExpr v2794 v2800 
                                        let _v2795 = v2801 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2802 : string option = match v2794 with Ok x -> Some x | Error _ -> None
                                        let _v2795 = v2802 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2803 : string option = match v2794 with Ok x -> Some x | Error _ -> None
                                        let _v2795 = v2803 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2804 : string option = match v2794 with Ok x -> Some x | Error _ -> None
                                        let _v2795 = v2804 
                                        #endif
#else
                                        let v2805 : string option = match v2794 with Ok x -> Some x | Error _ -> None
                                        let _v2795 = v2805 
                                        #endif
                                        let v2806 : string option = _v2795 
                                        let v2809 : bool = true
                                        let struct (v2810 : int32, v2811 : string) = method68(v2770, v2784, v2783, v2786, v2787, v2809, v2806)
                                        let v2812 : bool =
                                            match v1662 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v3047 : US5, v3048 : US5, v3049 : US5, v3050 : US5) =
                                            if v2812 then
                                                let v2813 : int32 = v2783.Length
                                                let v2814 : (string []) = Array.zeroCreate<string> (v2813)
                                                let v2815 : Mut5 = {l0 = 0} : Mut5
                                                while method72(v2813, v2815) do
                                                    let v2817 : int32 = v2815.l0
                                                    let struct (v2818 : string, v2819 : string) = v2783.[int v2817]
                                                    let v2820 : string = $"$env:{v2818}=''{v2819}''"
                                                    v2814.[int v2817] <- v2820
                                                    let v2821 : int32 = v2817 + 1
                                                    v2815.l0 <- v2821
                                                    ()
                                                let v2822 : string seq = v2814 |> Seq.ofArray
                                                let v2825 : (string -> (string seq -> string)) = String.concat
                                                let v2826 : string = ";"
                                                let v2827 : (string seq -> string) = v2825 v2826
                                                let v2828 : string = v2827 v2822
                                                let v2831 : (string []) = [|v2828; v2770|]
                                                let v2832 : string seq = v2831 |> Seq.ofArray
                                                let v2835 : (string -> (string seq -> string)) = String.concat
                                                let v2836 : (string seq -> string) = v2835 v2826
                                                let v2837 : string = v2836 v2832
                                                let v2840 : string = $"pwsh -c '{v2837}'"
                                                let v2841 : bool = v2810 <> 0 
                                                let struct (v2911 : US5, v2912 : US5, v2913 : US5, v2914 : US5) =
                                                    if v2841 then
                                                        let v2844 : unit = ()
                                                        let v2845 : (unit -> unit) = closure91(v1551, v2182, v2811, v2810, v2840)
                                                        let v2846 : unit = (fun () -> v2845 (); v2844) ()
                                                        let v2886 : US5 = US5_0(v1744)
                                                        let v2887 : US5 = US5_1
                                                        let v2888 : US5 = US5_1
                                                        let v2889 : US5 = US5_1
                                                        struct (v2886, v2887, v2888, v2889)
                                                    else
                                                        let v2890 : (string -> US5) = closure62()
                                                        let v2891 : (unit -> string) = closure92(v2811)
                                                        let v2892 : (exn -> US5) = closure94(v2182, v2811, v2840)
                                                        let v2893 : US5 = US5_1
                                                        let result = ref v2893
                                                        try
                                                            result.Value <- v2891 () |> v2890 
                                                        with ex ->
                                                            result.Value <- v2892 ex 
                                                        let v2894 : US5 = result.Value
                                                        let v2904 : string option =
                                                            match v2894 with
                                                            | US5_1 -> (* None *)
                                                                let v2902 : string option = None
                                                                v2902
                                                            | US5_0(v2898) -> (* Some *)
                                                                let v2899 : string option = Some v2898 
                                                                v2899
                                                        let v2905 : string = "$0.unwrap()"
                                                        let v2906 : string = Fable.Core.RustInterop.emitRustExpr v2904 v2905 
                                                        let v2907 : US5 = US5_0(v1744)
                                                        let v2908 : US5 = US5_0(v2764)
                                                        let v2909 : US5 = US5_0(v2182)
                                                        let v2910 : US5 = US5_0(v2906)
                                                        struct (v2907, v2908, v2909, v2910)
                                                struct (v2911, v2912, v2913, v2914)
                                            else
                                                let v2915 : string = $"target/spiral_builder/{v1889}/target/wasm32-unknown-unknown/release/spiral_builder_{v1746}.wasm"
                                                let v2922 : string =
                                                    match v1662 with
                                                    | US35_0(v2916) -> (* Some *)
                                                        match v2916 with
                                                        | US36_1(v2918) -> (* Contract *)
                                                            v2918
                                                        | US36_0(v2917) -> (* Wasm *)
                                                            v2917
                                                    | _ ->
                                                        let v2921 : string = ""
                                                        v2921
                                                let v2923 : string = $"'workspace/target/release/spiral_wasm -w {v2915} -t Debug {v2922}'"
                                                let v2924 : string = "AUTOMATION"
                                                let v2925 : string = method3(v2924)
                                                let v2926 : string = "scripts/invoke-block.ps1"
                                                let v2927 : string = $"pwsh -c \"pwsh {v2926} {v2923} -Linux -EnvironmentVariables AUTOMATION={v2925}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                let v2928 : bool = v2810 = 0
                                                let struct (v3043 : US5, v3044 : US5, v3045 : US5, v3046 : US5) =
                                                    if v2928 then
                                                        let v2929 : System.Threading.CancellationToken option = None
                                                        let v2930 : (struct (string * string) []) = [||]
                                                        let v2931 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v2932 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v2933 : string option = None
                                                        let v2934 : string option = Some v1888 
                                                        let v2937 : bool = true
                                                        let struct (v2938 : int32, v2939 : string) = method68(v2927, v2929, v2930, v2931, v2932, v2937, v2934)
                                                        let v2940 : bool = v2938 = 0
                                                        let struct (v2992 : US5, v2993 : US5, v2994 : US5, v2995 : US5) =
                                                            if v2940 then
                                                                let v2941 : US5 = US5_0(v1744)
                                                                let v2942 : US5 = US5_0(v2764)
                                                                let v2943 : US5 = US5_0(v2182)
                                                                let v2944 : US5 = US5_0(v2939)
                                                                struct (v2941, v2942, v2943, v2944)
                                                            else
                                                                let v2945 : unit = ()
                                                                let v2946 : (unit -> unit) = closure96(v1551, v2182, v2811, v2939, v2938)
                                                                let v2947 : unit = (fun () -> v2946 (); v2945) ()
                                                                let v2988 : US5 = US5_0(v1744)
                                                                let v2989 : US5 = US5_1
                                                                let v2990 : US5 = US5_1
                                                                let v2991 : US5 = US5_1
                                                                struct (v2988, v2989, v2990, v2991)
                                                        struct (v2992, v2993, v2994, v2995)
                                                    else
                                                        let v2996 : unit = ()
                                                        let v2997 : (unit -> unit) = closure97(v1551, v2182, v2811, v2810, v2915, v2927)
                                                        let v2998 : unit = (fun () -> v2997 (); v2996) ()
                                                        let v3039 : US5 = US5_0(v1744)
                                                        let v3040 : US5 = US5_1
                                                        let v3041 : US5 = US5_1
                                                        let v3042 : US5 = US5_1
                                                        struct (v3039, v3040, v3041, v3042)
                                                struct (v3043, v3044, v3045, v3046)
                                        if v1551 then
                                            let v3051 : bool =
                                                match v1662 with
                                                | US35_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3052 : bool = v3051 <> true
                                            let v3055 : string =
                                                if v3052 then
                                                    let v3053 : string = "wasm32-unknown-unknown/release"
                                                    v3053
                                                else
                                                    let v3054 : string = "debug"
                                                    v3054
                                            let v3056 : string = ""
                                            let v3057 : string = $"target/{v3055}/spiral_builder_{v1746}{v3056}"
                                            let v3058 : string = method28(v1900, v3057)
                                            let v3059 : string = ".wasm"
                                            let v3060 : string = $"target/{v3055}/spiral_builder_{v1746}{v3059}"
                                            let v3061 : string = method28(v1900, v3060)
                                            let v3062 : string = ".pdb"
                                            let v3063 : string = $"target/{v3055}/spiral_builder_{v1746}{v3062}"
                                            let v3064 : string = method28(v1900, v3063)
                                            let v3065 : string = ".exe"
                                            let v3066 : string = $"target/{v3055}/spiral_builder_{v1746}{v3065}"
                                            let v3067 : string = method28(v1900, v3066)
                                            let v3068 : string = ".d"
                                            let v3069 : string = $"target/{v3055}/spiral_builder_{v1746}{v3068}"
                                            let v3070 : string = method28(v1900, v3069)
                                            let v3071 : bool = method43(v3058)
                                            let v3072 : bool = method43(v3061)
                                            let v3073 : bool = method43(v3064)
                                            let v3074 : bool = method43(v3067)
                                            let v3075 : bool = method43(v3070)
                                            let v3076 : unit = ()
                                            let v3077 : (unit -> unit) = closure98(v2182, v3070, v3075, v3067, v3074, v3064, v3073, v3061, v3072, v3058, v3071)
                                            let v3078 : unit = (fun () -> v3077 (); v3076) ()
                                            let v3121 : UH4 =
                                                if v3071 then
                                                    let v3118 : UH4 = UH4_0
                                                    UH4_1(v3058, v3071, v3118)
                                                else
                                                    UH4_0
                                            let v3123 : UH4 =
                                                if v3072 then
                                                    UH4_1(v3061, v3072, v3121)
                                                else
                                                    v3121
                                            let v3125 : UH4 =
                                                if v3073 then
                                                    UH4_1(v3064, v3073, v3123)
                                                else
                                                    v3123
                                            let v3127 : UH4 =
                                                if v3074 then
                                                    UH4_1(v3067, v3074, v3125)
                                                else
                                                    v3125
                                            let v3129 : UH4 =
                                                if v3075 then
                                                    UH4_1(v3070, v3075, v3127)
                                                else
                                                    v3127
                                            method229(v3129)
                                        struct (v3047, v3048, v3049, v3050)
                                struct (v3130, v3131, v3132, v3133)
                            else
                                let v3134 : string = "fable_library_rust::String_::fromString($0)"
                                let v3135 : string = Fable.Core.RustInterop.emitRustExpr v25 v3134 
                                let v3136 : bool = v3135 = "typescript"
                                let struct (v4750 : US5, v4751 : US5, v4752 : US5, v4753 : US5) =
                                    if v3136 then
                                        let v3137 : string = method140()
                                        let v3138 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3139 : string = "&*$0"
                                        let v3140 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3137 v3139 
                                        let _v3138 = v3140 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3141 : string = "&*$0"
                                        let v3142 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3137 v3141 
                                        let _v3138 = v3142 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3143 : string = "&*$0"
                                        let v3144 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3137 v3143 
                                        let _v3138 = v3144 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3145 : Ref<Str> = v3137 |> unbox<Ref<Str>>
                                        let _v3138 = v3145 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3148 : Ref<Str> = v3137 |> unbox<Ref<Str>>
                                        let _v3138 = v3148 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3151 : Ref<Str> = v3137 |> unbox<Ref<Str>>
                                        let _v3138 = v3151 
                                        #endif
#else
                                        let v3154 : Ref<Str> = v3137 |> unbox<Ref<Str>>
                                        let _v3138 = v3154 
                                        #endif
                                        let v3157 : Ref<Str> = _v3138 
                                        let v3162 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                        let v3163 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v3157) v3162 
                                        let v3164 : (std_string_String -> US7) = method23()
                                        let v3165 : US7 option = v3163 |> Option.map v3164 
                                        let v3176 : US7 = US7_1
                                        let v3177 : US7 = v3165 |> Option.defaultValue v3176 
                                        let v3184 : std_string_String =
                                            match v3177 with
                                            | US7_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US7_0(v3181) -> (* Some *)
                                                v3181
                                        let v3185 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3186 : string = Fable.Core.RustInterop.emitRustExpr v3184 v3185 
                                        let v3187 : string = method25()
                                        let v3188 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3189 : string = "&*$0"
                                        let v3190 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3187 v3189 
                                        let _v3188 = v3190 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3191 : string = "&*$0"
                                        let v3192 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3187 v3191 
                                        let _v3188 = v3192 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3193 : string = "&*$0"
                                        let v3194 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3187 v3193 
                                        let _v3188 = v3194 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3195 : Ref<Str> = v3187 |> unbox<Ref<Str>>
                                        let _v3188 = v3195 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3198 : Ref<Str> = v3187 |> unbox<Ref<Str>>
                                        let _v3188 = v3198 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3201 : Ref<Str> = v3187 |> unbox<Ref<Str>>
                                        let _v3188 = v3201 
                                        #endif
#else
                                        let v3204 : Ref<Str> = v3187 |> unbox<Ref<Str>>
                                        let _v3188 = v3204 
                                        #endif
                                        let v3207 : Ref<Str> = _v3188 
                                        let v3212 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                        let v3213 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v3207) v3212 
                                        let v3214 : (Vec<std_string_String> -> US11) = method26()
                                        let v3215 : US11 option = v3213 |> Option.map v3214 
                                        let v3226 : US11 = US11_1
                                        let v3227 : US11 = v3215 |> Option.defaultValue v3226 
                                        let v3231 : (std_string_String []) = [||]
                                        let v3232 : string = "$0.to_vec()"
                                        let v3233 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3231 v3232 
                                        let v3236 : Vec<std_string_String> =
                                            match v3227 with
                                            | US11_1 -> (* None *)
                                                v3233
                                            | US11_0(v3234) -> (* Some *)
                                                v3234
                                        let v3237 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3238 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3239 : string = "std::fs::read(&*$0)"
                                        let v3240 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3186 v3239 
                                        let v3241 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3242 : string = "$0.unwrap()"
                                        let v3243 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3240 v3242 
                                        let _v3241 = v3243 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3244 : string = "$0.unwrap()"
                                        let v3245 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3240 v3244 
                                        let _v3241 = v3245 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3246 : string = "$0.unwrap()"
                                        let v3247 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3240 v3246 
                                        let _v3241 = v3247 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3248 : Vec<uint8> = match v3240 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3241 = v3248 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3249 : Vec<uint8> = match v3240 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3241 = v3249 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3250 : Vec<uint8> = match v3240 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3241 = v3250 
                                        #endif
#else
                                        let v3251 : Vec<uint8> = match v3240 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3241 = v3251 
                                        #endif
                                        let v3252 : Vec<uint8> = _v3241 
                                        let _v3238 = v3252 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3255 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3238 = v3255 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3258 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3238 = v3258 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3261 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3238 = v3261 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3264 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3238 = v3264 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3267 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3238 = v3267 
                                        #endif
#else
                                        let v3270 : (uint8 []) = v3186 |> System.IO.File.ReadAllBytes
                                        let v3271 : string = "$0.to_vec()"
                                        let v3272 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3270 v3271 
                                        let _v3238 = v3272 
                                        #endif
                                        let v3273 : Vec<uint8> = _v3238 
                                        let v3278 : Vec<uint8> = method27(v3273)
                                        let v3279 : string = "std::string::String::from_utf8($0)"
                                        let v3280 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3278 v3279 
                                        let v3281 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3282 : string = "$0.unwrap()"
                                        let v3283 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3280 v3282 
                                        let _v3281 = v3283 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3284 : string = "$0.unwrap()"
                                        let v3285 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3280 v3284 
                                        let _v3281 = v3285 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3286 : string = "$0.unwrap()"
                                        let v3287 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3280 v3286 
                                        let _v3281 = v3287 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3288 : std_string_String = match v3280 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3281 = v3288 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3289 : std_string_String = match v3280 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3281 = v3289 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3290 : std_string_String = match v3280 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3281 = v3290 
                                        #endif
#else
                                        let v3291 : std_string_String = match v3280 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3281 = v3291 
                                        #endif
                                        let v3292 : std_string_String = _v3281 
                                        let v3295 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3296 : string = Fable.Core.RustInterop.emitRustExpr v3292 v3295 
                                        let _v3237 = v3296 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3297 : string = null |> unbox<string>
                                        let _v3237 = v3297 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3300 : string = null |> unbox<string>
                                        let _v3237 = v3300 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3303 : string = null |> unbox<string>
                                        let _v3237 = v3303 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3306 : string = null |> unbox<string>
                                        let _v3237 = v3306 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3309 : string = null |> unbox<string>
                                        let _v3237 = v3309 
                                        #endif
#else
                                        let v3312 : string = v3186 |> System.IO.File.ReadAllText
                                        let _v3237 = v3312 
                                        #endif
                                        let v3313 : string = _v3237 
                                        let v3318 : string = "ts"
                                        let v3319 : string = $"%A{struct (v3318, v3313)}"
                                        let v3322 : string = method183(v3319)
                                        let v3323 : string = __SOURCE_DIRECTORY__
                                        let v3324 : string = "polyglot"
                                        let v3325 : string = ".devcontainer"
                                        let v3326 : string = method28(v3324, v3325)
                                        let v3327 : US12 = method31(v3326, v3323)
                                        let v3375 : US5 =
                                            match v3327 with
                                            | US12_1(v3330) -> (* Error *)
                                                let v3331 : unit = ()
                                                let v3332 : (unit -> unit) = closure16(v3330)
                                                let v3333 : unit = (fun () -> v3332 (); v3331) ()
                                                US5_1
                                            | US12_0(v3328) -> (* Ok *)
                                                US5_0(v3328)
                                        let v3430 : US5 =
                                            match v3375 with
                                            | US5_1 -> (* None *)
                                                let v3378 : string = method39()
                                                let v3379 : string = method28(v3324, v3325)
                                                let v3380 : US12 = method31(v3379, v3378)
                                                match v3380 with
                                                | US12_1(v3383) -> (* Error *)
                                                    let v3384 : unit = ()
                                                    let v3385 : (unit -> unit) = closure16(v3383)
                                                    let v3386 : unit = (fun () -> v3385 (); v3384) ()
                                                    US5_1
                                                | US12_0(v3381) -> (* Ok *)
                                                    US5_0(v3381)
                                            | US5_0(v3376) -> (* Some *)
                                                US5_0(v3376)
                                        let v3434 : string =
                                            match v3430 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v3431) -> (* Some *)
                                                v3431
                                        let v3435 : string = method28(v3434, v3324)
                                        let v3436 : string = method39()
                                        let v3437 : (unit -> string) = v3436.ToLower
                                        let v3438 : string = v3437 ()
                                        let v3441 : (unit -> string) = v3435.ToLower
                                        let v3442 : string = v3441 ()
                                        let v3445 : bool = v3438.StartsWith (v3442, false, null)
                                        let v3450 : US12 =
                                            if v3445 then
                                                US12_1(v3442)
                                            else
                                                US12_0(v3442)
                                        let v3456 : Result<string, string> =
                                            match v3450 with
                                            | US12_1(v3453) -> (* Error *)
                                                let v3454 : Result<string, string> = Error v3453 
                                                v3454
                                            | US12_0(v3451) -> (* Ok *)
                                                let v3452 : Result<string, string> = Ok v3451 
                                                v3452
                                        let v3457 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                        let v3458 : bool = Fable.Core.RustInterop.emitRustExpr v3456 v3457 
                                        let v3459 : string = "x"
                                        let v3460 : string = Fable.Core.RustInterop.emitRustExpr () v3459 
                                        let v3461 : string = "true; $0 })"
                                        let v3462 : bool = Fable.Core.RustInterop.emitRustExpr v3460 v3461 
                                        let v3463 : string = "_result_unwrap_or_else"
                                        let v3464 : string = Fable.Core.RustInterop.emitRustExpr () v3463 
                                        let v3465 : string = "spiral_builder"
                                        let v3466 : US37 = US37_1
                                        let v3467 : US38 = US38_0(v3466)
                                        let v3468 : US5 = US5_0(v3322)
                                        let v3469 : string = method186(v3468, v3465, v3467, v3464)
                                        let v3470 : string = "Fable.Core"
                                        let v3471 : UH2 = UH2_0
                                        let v3472 : UH2 = UH2_1(v3470, v3471)
                                        let v3473 : UH2 = UH2_0
                                        let v3474 : string = method187(v3313, v3465, v3473, v3472, v3469, v3464)
                                        let v3475 : string = "lib/typescript/fable/fable_modules"
                                        let v3476 : string = method28(v3464, v3475)
                                        let v3477 : string = $"fable-library-{v3318}"
                                        let v3478 : string = method230(v3477)
                                        let v3479 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v3480 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v3476 v3479 
                                        let v3481 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                        let v3482 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure99(v3477)
                                        let v3483 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v3480, v3482) v3481 
                                        let v3484 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method238(v3478)
                                        let v3485 : string = "futures::stream::StreamExt::filter_map(v3483, |x| async { v3484(x) })"
                                        let v3486 : _ = Fable.Core.RustInterop.emitRustExpr () v3485 
                                        let v3487 : string = "Box::pin(futures::stream::StreamExt::collect(v3486))"
                                        let v3488 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v3487 
                                        let v3489 : string = "v3488.await"
                                        let v3490 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v3489 
                                        let v3491 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                        let v3492 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3490 v3491 
                                        let v3493 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v3494 : (struct (string * string) -> struct (string * string)) = closure107()
                                        let v3495 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v3492, v3494) v3493 
                                        let v3496 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v3497 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3495 v3496 
                                        let v3498 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v3499 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v3497 v3498 
                                        let v3500 : struct (string * string) option = v3499 |> Array.tryItem 0 
                                        let v3501 : (struct (string * string) -> US46) = method243()
                                        let v3502 : US46 option = v3500 |> Option.map v3501 
                                        let v3514 : US46 = US46_1
                                        let v3515 : US46 = v3502 |> Option.defaultValue v3514 
                                        let v3519 : unit = ()
                                        let v3520 : (unit -> unit) = closure109(v3515)
                                        let v3521 : unit = (fun () -> v3520 (); v3519) ()
                                        method246(v3469, v3476, v3515)
                                        let v3561 : US35 = US35_1
                                        let struct (v3562 : int32, v3563 : string) = method196(v3561, v3469, v3318, v3474, v3450)
                                        method246(v3469, v3476, v3515)
                                        let v3564 : bool = v3562 <> 0 
                                        let struct (v3977 : US5, v3978 : US5, v3979 : US5, v3980 : US5) =
                                            if v3564 then
                                                let v3567 : unit = ()
                                                let v3568 : (unit -> unit) = closure110(v3563, v3562)
                                                let v3569 : unit = (fun () -> v3568 (); v3567) ()
                                                let v3609 : US5 = US5_0(v3318)
                                                let v3610 : US5 = US5_1
                                                let v3611 : US5 = US5_1
                                                let v3612 : US5 = US5_0(v3563)
                                                struct (v3609, v3610, v3611, v3612)
                                            else
                                                let v3613 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                let v3614 : bool = Fable.Core.RustInterop.emitRustExpr v3236 v3613 
                                                let v3615 : string = "x"
                                                let v3616 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3615 
                                                let v3617 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3618 : string = Fable.Core.RustInterop.emitRustExpr v3616 v3617 
                                                let v3619 : string = "="
                                                let v3620 : bool = v3618.Contains v3619 
                                                let v3624 : string =
                                                    if v3620 then
                                                        v3618
                                                    else
                                                        let v3623 : string = $"\"{v3618}\":\"*\""
                                                        v3623
                                                let v3625 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v3626 : bool = Fable.Core.RustInterop.emitRustExpr v3624 v3625 
                                                let v3627 : string = "_vec_map"
                                                let v3628 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3627 
                                                let v3629 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v3630 : (string []) = Fable.Core.RustInterop.emitRustExpr v3628 v3629 
                                                let v3631 : unit = ()
                                                let _v3631 =
                                                    seq {
                                                        for i = 0 to v3630.Length - 1 do yield v3630.[i]
                                                        (*
                                                        ()
                                                    *)
                                                    }
                                                    (*
                                                    ()
                                                *)
                                                let v3632 : string seq = _v3631 
                                                let v3638 : (string -> (string seq -> string)) = String.concat
                                                let v3639 : string = ",\n"
                                                let v3640 : (string seq -> string) = v3638 v3639
                                                let v3641 : string = v3640 v3632
                                                let v3644 : string = $"{{"
                                                let v3645 : string = $"  \"name\": \"spiral_builder_{v3322}\","
                                                let v3646 : string = v3644 + v3645 
                                                let v3647 : string = $"  \"dependencies\": {{"
                                                let v3648 : string = v3646 + v3647 
                                                let v3649 : string = v3648 + v3641 
                                                let v3650 : string = $"  }},"
                                                let v3651 : string = v3649 + v3650 
                                                let v3652 : string = $"    \"devDependencies\": {{"
                                                let v3653 : string = v3651 + v3652 
                                                let v3654 : string = $"  }},"
                                                let v3655 : string = v3653 + v3654 
                                                let v3656 : string = $"}}"
                                                let v3657 : string = v3655 + v3656 
                                                let v3658 : string = "package.json"
                                                let v3659 : string = method28(v3469, v3658)
                                                let v3660 : string = "../.."
                                                let v3661 : string = method28(v3469, v3660)
                                                let v3662 : string = method28(v3661, v3658)
                                                method41(v3659, v3657)
                                                let v3663 : string = ""
                                                method41(v3662, v3663)
                                                let v3664 : string = $"{v3465}.{v3318}"
                                                let v3665 : string = method28(v3469, v3664)
                                                let v3666 : unit = ()
                                                let v3667 : (unit -> unit) = closure111(v3665)
                                                let v3668 : unit = (fun () -> v3667 (); v3666) ()
                                                let v3708 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3709 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3710 : string = "std::fs::read(&*$0)"
                                                let v3711 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3665 v3710 
                                                let v3712 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3713 : string = "$0.unwrap()"
                                                let v3714 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3711 v3713 
                                                let _v3712 = v3714 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3715 : string = "$0.unwrap()"
                                                let v3716 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3711 v3715 
                                                let _v3712 = v3716 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3717 : string = "$0.unwrap()"
                                                let v3718 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3711 v3717 
                                                let _v3712 = v3718 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3719 : Vec<uint8> = match v3711 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3712 = v3719 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3720 : Vec<uint8> = match v3711 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3712 = v3720 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3721 : Vec<uint8> = match v3711 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3712 = v3721 
                                                #endif
#else
                                                let v3722 : Vec<uint8> = match v3711 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3712 = v3722 
                                                #endif
                                                let v3723 : Vec<uint8> = _v3712 
                                                let _v3709 = v3723 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3726 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3709 = v3726 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3729 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3709 = v3729 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3732 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3709 = v3732 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3735 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3709 = v3735 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3738 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3709 = v3738 
                                                #endif
#else
                                                let v3741 : (uint8 []) = v3665 |> System.IO.File.ReadAllBytes
                                                let v3742 : string = "$0.to_vec()"
                                                let v3743 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3741 v3742 
                                                let _v3709 = v3743 
                                                #endif
                                                let v3744 : Vec<uint8> = _v3709 
                                                let v3749 : Vec<uint8> = method27(v3744)
                                                let v3750 : string = "std::string::String::from_utf8($0)"
                                                let v3751 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3749 v3750 
                                                let v3752 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3753 : string = "$0.unwrap()"
                                                let v3754 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3751 v3753 
                                                let _v3752 = v3754 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3755 : string = "$0.unwrap()"
                                                let v3756 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3751 v3755 
                                                let _v3752 = v3756 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3757 : string = "$0.unwrap()"
                                                let v3758 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3751 v3757 
                                                let _v3752 = v3758 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3759 : std_string_String = match v3751 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3752 = v3759 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3760 : std_string_String = match v3751 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3752 = v3760 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3761 : std_string_String = match v3751 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3752 = v3761 
                                                #endif
#else
                                                let v3762 : std_string_String = match v3751 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3752 = v3762 
                                                #endif
                                                let v3763 : std_string_String = _v3752 
                                                let v3766 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3767 : string = Fable.Core.RustInterop.emitRustExpr v3763 v3766 
                                                let _v3708 = v3767 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3768 : string = null |> unbox<string>
                                                let _v3708 = v3768 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3771 : string = null |> unbox<string>
                                                let _v3708 = v3771 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3774 : string = null |> unbox<string>
                                                let _v3708 = v3774 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3777 : string = null |> unbox<string>
                                                let _v3708 = v3777 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3780 : string = null |> unbox<string>
                                                let _v3708 = v3780 
                                                #endif
#else
                                                let v3783 : string = v3665 |> System.IO.File.ReadAllText
                                                let _v3708 = v3783 
                                                #endif
                                                let v3784 : string = _v3708 
                                                let v3789 : string = "// spiral_builder.process_typescript"
                                                let v3790 : bool = v3784.Contains v3789 
                                                let v3799 : string =
                                                    if v3790 then
                                                        v3784
                                                    else
                                                        let v3793 : string = $"\"./fable_modules/fable-library-ts.{v3515}/"
                                                        let v3794 : string = $"\"{v3464}/lib/typescript/fable/fable_modules/fable-library-ts.{v3515}/"
                                                        let v3795 : string = v3784.Replace (v3793, v3794)
                                                        let v3796 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v3797 : string = " defaultOf::<()>();"
                                                        method163(v3796, v3797, v3795)
                                                let v3800 : bool = v3790 = false
                                                if v3800 then
                                                    let v3801 : string = $"{v3799}\n\n{v3789}\n"
                                                    method41(v3665, v3801)
                                                let v3802 : string = $"bun run \"{v3665}\""
                                                let v3803 : string = "PATH"
                                                let v3804 : string = method3(v3803)
                                                let v3805 : bool = v3804 = ""
                                                let v3840 : US5 =
                                                    if v3805 then
                                                        US5_1
                                                    else
                                                        let v3807 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3808 : string = "cfg!(windows)"
                                                        let v3809 : bool = Fable.Core.RustInterop.emitRustExpr () v3808 
                                                        let _v3807 = v3809 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3810 : string = "cfg!(windows)"
                                                        let v3811 : bool = Fable.Core.RustInterop.emitRustExpr () v3810 
                                                        let _v3807 = v3811 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3812 : string = "cfg!(windows)"
                                                        let v3813 : bool = Fable.Core.RustInterop.emitRustExpr () v3812 
                                                        let _v3807 = v3813 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3814 : US3 = US3_0
                                                        let v3815 : US4 = US4_3(v3814)
                                                        let v3816 : string = $"platform.is_windows / target: {v3815}"
                                                        let v3817 : bool = failwith<bool> v3816
                                                        let _v3807 = v3817 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3818 : US3 = US3_0
                                                        let v3819 : US4 = US4_4(v3818)
                                                        let v3820 : string = $"platform.is_windows / target: {v3819}"
                                                        let v3821 : bool = failwith<bool> v3820
                                                        let _v3807 = v3821 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3822 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3823 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3824 : bool = v3823 v3822
                                                        let _v3807 = v3824 
                                                        #endif
#else
                                                        let v3825 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3826 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3827 : bool = v3826 v3825
                                                        let _v3807 = v3827 
                                                        #endif
                                                        let v3828 : bool = _v3807 
                                                        let v3836 : string =
                                                            if v3828 then
                                                                let v3834 : string = ";"
                                                                v3834
                                                            else
                                                                let v3835 : string = ":"
                                                                v3835
                                                        let v3837 : string = "~/.bun/bin"
                                                        let v3838 : string = $"{v3837}{v3836}{v3804}"
                                                        US5_0(v3838)
                                                let v3846 : UH5 =
                                                    match v3840 with
                                                    | US5_1 -> (* None *)
                                                        UH5_0
                                                    | US5_0(v3841) -> (* Some *)
                                                        let v3842 : UH5 = UH5_0
                                                        UH5_1(v3803, v3841, v3842)
                                                let v3847 : string = "TRACE_LEVEL"
                                                let v3848 : string = "Verbose"
                                                let v3849 : UH5 = UH5_0
                                                let v3850 : UH5 = UH5_1(v3847, v3848, v3849)
                                                let v3851 : UH5 = method250(v3846, v3850)
                                                let v3852 : struct (string * string) list = []
                                                let v3853 : struct (string * string) list = method251(v3851, v3852)
                                                let v3854 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v3855 : (struct (string * string) []) = v3854 v3853
                                                let v3858 : System.Threading.CancellationToken option = None
                                                let v3859 : (struct (string * string) []) = [||]
                                                let v3860 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v3861 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v3862 : string option = None
                                                let v3868 : Result<string, string> =
                                                    match v3450 with
                                                    | US12_1(v3865) -> (* Error *)
                                                        let v3866 : Result<string, string> = Error v3865 
                                                        v3866
                                                    | US12_0(v3863) -> (* Ok *)
                                                        let v3864 : Result<string, string> = Ok v3863 
                                                        v3864
                                                let v3869 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3870 : string = "$0.ok()"
                                                let v3871 : string option = Fable.Core.RustInterop.emitRustExpr v3868 v3870 
                                                let _v3869 = v3871 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3872 : string = "$0.ok()"
                                                let v3873 : string option = Fable.Core.RustInterop.emitRustExpr v3868 v3872 
                                                let _v3869 = v3873 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3874 : string = "$0.ok()"
                                                let v3875 : string option = Fable.Core.RustInterop.emitRustExpr v3868 v3874 
                                                let _v3869 = v3875 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3876 : string option = match v3868 with Ok x -> Some x | Error _ -> None
                                                let _v3869 = v3876 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3877 : string option = match v3868 with Ok x -> Some x | Error _ -> None
                                                let _v3869 = v3877 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3878 : string option = match v3868 with Ok x -> Some x | Error _ -> None
                                                let _v3869 = v3878 
                                                #endif
#else
                                                let v3879 : string option = match v3868 with Ok x -> Some x | Error _ -> None
                                                let _v3869 = v3879 
                                                #endif
                                                let v3880 : string option = _v3869 
                                                let v3883 : bool = true
                                                let struct (v3884 : int32, v3885 : string) = method68(v3802, v3858, v3855, v3860, v3861, v3883, v3880)
                                                let v3886 : int32 = v3855.Length
                                                let v3887 : (string []) = Array.zeroCreate<string> (v3886)
                                                let v3888 : Mut5 = {l0 = 0} : Mut5
                                                while method72(v3886, v3888) do
                                                    let v3890 : int32 = v3888.l0
                                                    let struct (v3891 : string, v3892 : string) = v3855.[int v3890]
                                                    let v3893 : string = $"$env:{v3891}=''{v3892}''"
                                                    v3887.[int v3890] <- v3893
                                                    let v3894 : int32 = v3890 + 1
                                                    v3888.l0 <- v3894
                                                    ()
                                                let v3895 : string seq = v3887 |> Seq.ofArray
                                                let v3898 : (string -> (string seq -> string)) = String.concat
                                                let v3899 : string = ";"
                                                let v3900 : (string seq -> string) = v3898 v3899
                                                let v3901 : string = v3900 v3895
                                                let v3904 : string = $"pwsh -c '{v3901}; {v3802}'"
                                                let v3905 : bool = v3884 = 0
                                                let struct (v3973 : US5, v3974 : US5, v3975 : US5, v3976 : US5) =
                                                    if v3905 then
                                                        let v3906 : (string -> US5) = closure62()
                                                        let v3907 : (unit -> string) = closure112(v3885)
                                                        let v3908 : (exn -> US5) = closure113(v3665, v3885, v3904)
                                                        let v3909 : US5 = US5_1
                                                        let result = ref v3909
                                                        try
                                                            result.Value <- v3907 () |> v3906 
                                                        with ex ->
                                                            result.Value <- v3908 ex 
                                                        let v3910 : US5 = result.Value
                                                        let v3920 : string option =
                                                            match v3910 with
                                                            | US5_1 -> (* None *)
                                                                let v3918 : string option = None
                                                                v3918
                                                            | US5_0(v3914) -> (* Some *)
                                                                let v3915 : string option = Some v3914 
                                                                v3915
                                                        let v3921 : string = "$0.unwrap()"
                                                        let v3922 : string = Fable.Core.RustInterop.emitRustExpr v3920 v3921 
                                                        let v3923 : US5 = US5_0(v3318)
                                                        let v3924 : US5 = US5_0(v3799)
                                                        let v3925 : US5 = US5_0(v3665)
                                                        let v3926 : US5 = US5_0(v3922)
                                                        struct (v3923, v3924, v3925, v3926)
                                                    else
                                                        let v3927 : unit = ()
                                                        let v3928 : (unit -> unit) = closure115(v3665, v3885, v3884, v3904)
                                                        let v3929 : unit = (fun () -> v3928 (); v3927) ()
                                                        let v3969 : US5 = US5_0(v3318)
                                                        let v3970 : US5 = US5_1
                                                        let v3971 : US5 = US5_1
                                                        let v3972 : US5 = US5_1
                                                        struct (v3969, v3970, v3971, v3972)
                                                struct (v3973, v3974, v3975, v3976)
                                        struct (v3977, v3978, v3979, v3980)
                                    else
                                        let v3981 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3982 : string = Fable.Core.RustInterop.emitRustExpr v25 v3981 
                                        let v3983 : bool = v3982 = "python"
                                        let struct (v4746 : US5, v4747 : US5, v4748 : US5, v4749 : US5) =
                                            if v3983 then
                                                let v3984 : string = method140()
                                                let v3985 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3986 : string = "&*$0"
                                                let v3987 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3984 v3986 
                                                let _v3985 = v3987 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3988 : string = "&*$0"
                                                let v3989 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3984 v3988 
                                                let _v3985 = v3989 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3990 : string = "&*$0"
                                                let v3991 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3984 v3990 
                                                let _v3985 = v3991 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3992 : Ref<Str> = v3984 |> unbox<Ref<Str>>
                                                let _v3985 = v3992 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3995 : Ref<Str> = v3984 |> unbox<Ref<Str>>
                                                let _v3985 = v3995 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3998 : Ref<Str> = v3984 |> unbox<Ref<Str>>
                                                let _v3985 = v3998 
                                                #endif
#else
                                                let v4001 : Ref<Str> = v3984 |> unbox<Ref<Str>>
                                                let _v3985 = v4001 
                                                #endif
                                                let v4004 : Ref<Str> = _v3985 
                                                let v4009 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                let v4010 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v4004) v4009 
                                                let v4011 : (std_string_String -> US7) = method23()
                                                let v4012 : US7 option = v4010 |> Option.map v4011 
                                                let v4023 : US7 = US7_1
                                                let v4024 : US7 = v4012 |> Option.defaultValue v4023 
                                                let v4031 : std_string_String =
                                                    match v4024 with
                                                    | US7_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US7_0(v4028) -> (* Some *)
                                                        v4028
                                                let v4032 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4033 : string = Fable.Core.RustInterop.emitRustExpr v4031 v4032 
                                                let v4034 : string = method25()
                                                let v4035 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4036 : string = "&*$0"
                                                let v4037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4034 v4036 
                                                let _v4035 = v4037 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4038 : string = "&*$0"
                                                let v4039 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4034 v4038 
                                                let _v4035 = v4039 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4040 : string = "&*$0"
                                                let v4041 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4034 v4040 
                                                let _v4035 = v4041 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4042 : Ref<Str> = v4034 |> unbox<Ref<Str>>
                                                let _v4035 = v4042 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4045 : Ref<Str> = v4034 |> unbox<Ref<Str>>
                                                let _v4035 = v4045 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4048 : Ref<Str> = v4034 |> unbox<Ref<Str>>
                                                let _v4035 = v4048 
                                                #endif
#else
                                                let v4051 : Ref<Str> = v4034 |> unbox<Ref<Str>>
                                                let _v4035 = v4051 
                                                #endif
                                                let v4054 : Ref<Str> = _v4035 
                                                let v4059 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                let v4060 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v4054) v4059 
                                                let v4061 : (Vec<std_string_String> -> US11) = method26()
                                                let v4062 : US11 option = v4060 |> Option.map v4061 
                                                let v4073 : US11 = US11_1
                                                let v4074 : US11 = v4062 |> Option.defaultValue v4073 
                                                let v4078 : (std_string_String []) = [||]
                                                let v4079 : string = "$0.to_vec()"
                                                let v4080 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4078 v4079 
                                                let v4083 : Vec<std_string_String> =
                                                    match v4074 with
                                                    | US11_1 -> (* None *)
                                                        v4080
                                                    | US11_0(v4081) -> (* Some *)
                                                        v4081
                                                let v4084 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v4085 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4086 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4087 : string = "std::fs::read(&*$0)"
                                                let v4088 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4033 v4087 
                                                let v4089 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4090 : string = "$0.unwrap()"
                                                let v4091 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4088 v4090 
                                                let _v4089 = v4091 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4092 : string = "$0.unwrap()"
                                                let v4093 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4088 v4092 
                                                let _v4089 = v4093 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4094 : string = "$0.unwrap()"
                                                let v4095 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4088 v4094 
                                                let _v4089 = v4095 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4096 : Vec<uint8> = match v4088 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4089 = v4096 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4097 : Vec<uint8> = match v4088 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4089 = v4097 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4098 : Vec<uint8> = match v4088 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4089 = v4098 
                                                #endif
#else
                                                let v4099 : Vec<uint8> = match v4088 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4089 = v4099 
                                                #endif
                                                let v4100 : Vec<uint8> = _v4089 
                                                let _v4086 = v4100 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4103 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4086 = v4103 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4106 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4086 = v4106 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4109 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4086 = v4109 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4112 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4086 = v4112 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4115 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4086 = v4115 
                                                #endif
#else
                                                let v4118 : (uint8 []) = v4033 |> System.IO.File.ReadAllBytes
                                                let v4119 : string = "$0.to_vec()"
                                                let v4120 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4118 v4119 
                                                let _v4086 = v4120 
                                                #endif
                                                let v4121 : Vec<uint8> = _v4086 
                                                let v4126 : Vec<uint8> = method27(v4121)
                                                let v4127 : string = "std::string::String::from_utf8($0)"
                                                let v4128 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4126 v4127 
                                                let v4129 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4130 : string = "$0.unwrap()"
                                                let v4131 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4128 v4130 
                                                let _v4129 = v4131 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4132 : string = "$0.unwrap()"
                                                let v4133 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4128 v4132 
                                                let _v4129 = v4133 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4134 : string = "$0.unwrap()"
                                                let v4135 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4128 v4134 
                                                let _v4129 = v4135 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4136 : std_string_String = match v4128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4129 = v4136 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4137 : std_string_String = match v4128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4129 = v4137 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4138 : std_string_String = match v4128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4129 = v4138 
                                                #endif
#else
                                                let v4139 : std_string_String = match v4128 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4129 = v4139 
                                                #endif
                                                let v4140 : std_string_String = _v4129 
                                                let v4143 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4144 : string = Fable.Core.RustInterop.emitRustExpr v4140 v4143 
                                                let _v4085 = v4144 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4145 : string = null |> unbox<string>
                                                let _v4085 = v4145 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4148 : string = null |> unbox<string>
                                                let _v4085 = v4148 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4151 : string = null |> unbox<string>
                                                let _v4085 = v4151 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4154 : string = null |> unbox<string>
                                                let _v4085 = v4154 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4157 : string = null |> unbox<string>
                                                let _v4085 = v4157 
                                                #endif
#else
                                                let v4160 : string = v4033 |> System.IO.File.ReadAllText
                                                let _v4085 = v4160 
                                                #endif
                                                let v4161 : string = _v4085 
                                                let v4166 : string = "py"
                                                let v4167 : string = $"%A{struct (v4166, v4161)}"
                                                let v4170 : string = method183(v4167)
                                                let v4171 : string = __SOURCE_DIRECTORY__
                                                let v4172 : string = "polyglot"
                                                let v4173 : string = ".devcontainer"
                                                let v4174 : string = method28(v4172, v4173)
                                                let v4175 : US12 = method31(v4174, v4171)
                                                let v4223 : US5 =
                                                    match v4175 with
                                                    | US12_1(v4178) -> (* Error *)
                                                        let v4179 : unit = ()
                                                        let v4180 : (unit -> unit) = closure16(v4178)
                                                        let v4181 : unit = (fun () -> v4180 (); v4179) ()
                                                        US5_1
                                                    | US12_0(v4176) -> (* Ok *)
                                                        US5_0(v4176)
                                                let v4278 : US5 =
                                                    match v4223 with
                                                    | US5_1 -> (* None *)
                                                        let v4226 : string = method39()
                                                        let v4227 : string = method28(v4172, v4173)
                                                        let v4228 : US12 = method31(v4227, v4226)
                                                        match v4228 with
                                                        | US12_1(v4231) -> (* Error *)
                                                            let v4232 : unit = ()
                                                            let v4233 : (unit -> unit) = closure16(v4231)
                                                            let v4234 : unit = (fun () -> v4233 (); v4232) ()
                                                            US5_1
                                                        | US12_0(v4229) -> (* Ok *)
                                                            US5_0(v4229)
                                                    | US5_0(v4224) -> (* Some *)
                                                        US5_0(v4224)
                                                let v4282 : string =
                                                    match v4278 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v4279) -> (* Some *)
                                                        v4279
                                                let v4283 : string = method28(v4282, v4172)
                                                let v4284 : string = method39()
                                                let v4285 : (unit -> string) = v4284.ToLower
                                                let v4286 : string = v4285 ()
                                                let v4289 : (unit -> string) = v4283.ToLower
                                                let v4290 : string = v4289 ()
                                                let v4293 : bool = v4286.StartsWith (v4290, false, null)
                                                let v4298 : US12 =
                                                    if v4293 then
                                                        US12_1(v4290)
                                                    else
                                                        US12_0(v4290)
                                                let v4304 : Result<string, string> =
                                                    match v4298 with
                                                    | US12_1(v4301) -> (* Error *)
                                                        let v4302 : Result<string, string> = Error v4301 
                                                        v4302
                                                    | US12_0(v4299) -> (* Ok *)
                                                        let v4300 : Result<string, string> = Ok v4299 
                                                        v4300
                                                let v4305 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                let v4306 : bool = Fable.Core.RustInterop.emitRustExpr v4304 v4305 
                                                let v4307 : string = "x"
                                                let v4308 : string = Fable.Core.RustInterop.emitRustExpr () v4307 
                                                let v4309 : string = "true; $0 })"
                                                let v4310 : bool = Fable.Core.RustInterop.emitRustExpr v4308 v4309 
                                                let v4311 : string = "_result_unwrap_or_else"
                                                let v4312 : string = Fable.Core.RustInterop.emitRustExpr () v4311 
                                                let v4313 : string = "spiral_builder"
                                                let v4314 : US37 = US37_2
                                                let v4315 : US38 = US38_0(v4314)
                                                let v4316 : US5 = US5_0(v4170)
                                                let v4317 : string = method186(v4316, v4313, v4315, v4312)
                                                let v4318 : string = "Fable.Core"
                                                let v4319 : UH2 = UH2_0
                                                let v4320 : UH2 = UH2_1(v4318, v4319)
                                                let v4321 : UH2 = UH2_0
                                                let v4322 : string = method187(v4161, v4313, v4321, v4320, v4317, v4312)
                                                let v4323 : string = "lib/python/fable/fable_modules"
                                                let v4324 : string = method28(v4312, v4323)
                                                let v4325 : string = $"fable_library"
                                                let v4326 : string = method28(v4324, v4325)
                                                let v4327 : string = $"fable_modules/fable_library"
                                                let v4328 : string = method28(v4317, v4327)
                                                method195(v4326, v4328)
                                                let v4329 : US35 = US35_1
                                                let struct (v4330 : int32, v4331 : string) = method196(v4329, v4317, v4166, v4322, v4298)
                                                let v4332 : bool = v4330 <> 0 
                                                let struct (v4696 : US5, v4697 : US5, v4698 : US5, v4699 : US5) =
                                                    if v4332 then
                                                        let v4335 : unit = ()
                                                        let v4336 : (unit -> unit) = closure116(v4331, v4330)
                                                        let v4337 : unit = (fun () -> v4336 (); v4335) ()
                                                        let v4377 : US5 = US5_0(v4166)
                                                        let v4378 : US5 = US5_1
                                                        let v4379 : US5 = US5_1
                                                        let v4380 : US5 = US5_0(v4331)
                                                        struct (v4377, v4378, v4379, v4380)
                                                    else
                                                        let v4381 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                        let v4382 : bool = Fable.Core.RustInterop.emitRustExpr v4083 v4381 
                                                        let v4383 : string = "x"
                                                        let v4384 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4383 
                                                        let v4385 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4386 : string = Fable.Core.RustInterop.emitRustExpr v4384 v4385 
                                                        let v4387 : string = "="
                                                        let v4388 : bool = v4386.Contains v4387 
                                                        let v4392 : string =
                                                            if v4388 then
                                                                v4386
                                                            else
                                                                let v4391 : string = $"\"{v4386}\":\"*\""
                                                                v4391
                                                        let v4393 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v4394 : bool = Fable.Core.RustInterop.emitRustExpr v4392 v4393 
                                                        let v4395 : string = "_vec_map"
                                                        let v4396 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4395 
                                                        let v4397 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v4398 : (string []) = Fable.Core.RustInterop.emitRustExpr v4396 v4397 
                                                        let v4399 : unit = ()
                                                        let _v4399 =
                                                            seq {
                                                                for i = 0 to v4398.Length - 1 do yield v4398.[i]
                                                                (*
                                                                ()
                                                            *)
                                                            }
                                                            (*
                                                            ()
                                                        *)
                                                        let v4400 : string seq = _v4399 
                                                        let v4406 : (string -> (string seq -> string)) = String.concat
                                                        let v4407 : string = ",\n"
                                                        let v4408 : (string seq -> string) = v4406 v4407
                                                        let v4409 : string = v4408 v4400
                                                        let v4412 : string = $"{{"
                                                        let v4413 : string = $"  \"name\": \"spiral_builder_{v4170}\","
                                                        let v4414 : string = v4412 + v4413 
                                                        let v4415 : string = $"  \"dependencies\": {{"
                                                        let v4416 : string = v4414 + v4415 
                                                        let v4417 : string = v4416 + v4409 
                                                        let v4418 : string = $"  }},"
                                                        let v4419 : string = v4417 + v4418 
                                                        let v4420 : string = $"    \"devDependencies\": {{"
                                                        let v4421 : string = v4419 + v4420 
                                                        let v4422 : string = $"  }},"
                                                        let v4423 : string = v4421 + v4422 
                                                        let v4424 : string = $"}}"
                                                        let v4425 : string = v4423 + v4424 
                                                        let v4426 : string = "package.json"
                                                        let v4427 : string = method28(v4317, v4426)
                                                        let v4428 : string = "../.."
                                                        let v4429 : string = method28(v4317, v4428)
                                                        let v4430 : string = method28(v4429, v4426)
                                                        method41(v4427, v4425)
                                                        let v4431 : string = ""
                                                        method41(v4430, v4431)
                                                        let v4432 : string = $"{v4313}.{v4166}"
                                                        let v4433 : string = method28(v4317, v4432)
                                                        let v4434 : unit = ()
                                                        let v4435 : (unit -> unit) = closure117(v4433)
                                                        let v4436 : unit = (fun () -> v4435 (); v4434) ()
                                                        let v4476 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4477 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4478 : string = "std::fs::read(&*$0)"
                                                        let v4479 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4433 v4478 
                                                        let v4480 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4481 : string = "$0.unwrap()"
                                                        let v4482 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4479 v4481 
                                                        let _v4480 = v4482 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4483 : string = "$0.unwrap()"
                                                        let v4484 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4479 v4483 
                                                        let _v4480 = v4484 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4485 : string = "$0.unwrap()"
                                                        let v4486 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4479 v4485 
                                                        let _v4480 = v4486 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4487 : Vec<uint8> = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4480 = v4487 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4488 : Vec<uint8> = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4480 = v4488 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4489 : Vec<uint8> = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4480 = v4489 
                                                        #endif
#else
                                                        let v4490 : Vec<uint8> = match v4479 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4480 = v4490 
                                                        #endif
                                                        let v4491 : Vec<uint8> = _v4480 
                                                        let _v4477 = v4491 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4494 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4477 = v4494 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4497 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4477 = v4497 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4500 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4477 = v4500 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4503 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4477 = v4503 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4506 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4477 = v4506 
                                                        #endif
#else
                                                        let v4509 : (uint8 []) = v4433 |> System.IO.File.ReadAllBytes
                                                        let v4510 : string = "$0.to_vec()"
                                                        let v4511 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4509 v4510 
                                                        let _v4477 = v4511 
                                                        #endif
                                                        let v4512 : Vec<uint8> = _v4477 
                                                        let v4517 : Vec<uint8> = method27(v4512)
                                                        let v4518 : string = "std::string::String::from_utf8($0)"
                                                        let v4519 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4517 v4518 
                                                        let v4520 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4521 : string = "$0.unwrap()"
                                                        let v4522 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4519 v4521 
                                                        let _v4520 = v4522 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4523 : string = "$0.unwrap()"
                                                        let v4524 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4519 v4523 
                                                        let _v4520 = v4524 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4525 : string = "$0.unwrap()"
                                                        let v4526 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4519 v4525 
                                                        let _v4520 = v4526 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4527 : std_string_String = match v4519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4520 = v4527 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4528 : std_string_String = match v4519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4520 = v4528 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4529 : std_string_String = match v4519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4520 = v4529 
                                                        #endif
#else
                                                        let v4530 : std_string_String = match v4519 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4520 = v4530 
                                                        #endif
                                                        let v4531 : std_string_String = _v4520 
                                                        let v4534 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4535 : string = Fable.Core.RustInterop.emitRustExpr v4531 v4534 
                                                        let _v4476 = v4535 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4536 : string = null |> unbox<string>
                                                        let _v4476 = v4536 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4539 : string = null |> unbox<string>
                                                        let _v4476 = v4539 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4542 : string = null |> unbox<string>
                                                        let _v4476 = v4542 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4545 : string = null |> unbox<string>
                                                        let _v4476 = v4545 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4548 : string = null |> unbox<string>
                                                        let _v4476 = v4548 
                                                        #endif
#else
                                                        let v4551 : string = v4433 |> System.IO.File.ReadAllText
                                                        let _v4476 = v4551 
                                                        #endif
                                                        let v4552 : string = _v4476 
                                                        let v4557 : string = "# spiral_builder.process_python"
                                                        let v4558 : bool = v4552.Contains v4557 
                                                        let v4570 : string =
                                                            if v4558 then
                                                                v4552
                                                            else
                                                                let v4561 : string = "\";\".into()"
                                                                let v4562 : string = Fable.Core.RustInterop.emitRustExpr () v4561 
                                                                let v4563 : string = "),)"
                                                                let v4564 : string = v4563 + v4562 
                                                                let v4565 : string = "));"
                                                                let v4566 : string = v4552.Replace (v4564, v4565)
                                                                let v4567 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v4568 : string = " defaultOf::<()>();"
                                                                method163(v4567, v4568, v4566)
                                                        let v4571 : bool = v4558 = false
                                                        if v4571 then
                                                            let v4572 : string = $"{v4570}\n\n{v4557}\n"
                                                            method41(v4433, v4572)
                                                        let v4573 : string = $"python \"{v4433}\""
                                                        let v4574 : string = "TRACE_LEVEL"
                                                        let v4575 : string = "Verbose"
                                                        let v4576 : (struct (string * string) []) = [|struct (v4574, v4575)|]
                                                        let v4577 : System.Threading.CancellationToken option = None
                                                        let v4578 : (struct (string * string) []) = [||]
                                                        let v4579 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v4580 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v4581 : string option = None
                                                        let v4587 : Result<string, string> =
                                                            match v4298 with
                                                            | US12_1(v4584) -> (* Error *)
                                                                let v4585 : Result<string, string> = Error v4584 
                                                                v4585
                                                            | US12_0(v4582) -> (* Ok *)
                                                                let v4583 : Result<string, string> = Ok v4582 
                                                                v4583
                                                        let v4588 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4589 : string = "$0.ok()"
                                                        let v4590 : string option = Fable.Core.RustInterop.emitRustExpr v4587 v4589 
                                                        let _v4588 = v4590 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4591 : string = "$0.ok()"
                                                        let v4592 : string option = Fable.Core.RustInterop.emitRustExpr v4587 v4591 
                                                        let _v4588 = v4592 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4593 : string = "$0.ok()"
                                                        let v4594 : string option = Fable.Core.RustInterop.emitRustExpr v4587 v4593 
                                                        let _v4588 = v4594 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4595 : string option = match v4587 with Ok x -> Some x | Error _ -> None
                                                        let _v4588 = v4595 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4596 : string option = match v4587 with Ok x -> Some x | Error _ -> None
                                                        let _v4588 = v4596 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4597 : string option = match v4587 with Ok x -> Some x | Error _ -> None
                                                        let _v4588 = v4597 
                                                        #endif
#else
                                                        let v4598 : string option = match v4587 with Ok x -> Some x | Error _ -> None
                                                        let _v4588 = v4598 
                                                        #endif
                                                        let v4599 : string option = _v4588 
                                                        let v4602 : bool = true
                                                        let struct (v4603 : int32, v4604 : string) = method68(v4573, v4577, v4576, v4579, v4580, v4602, v4599)
                                                        let v4605 : int32 = v4576.Length
                                                        let v4606 : (string []) = Array.zeroCreate<string> (v4605)
                                                        let v4607 : Mut5 = {l0 = 0} : Mut5
                                                        while method72(v4605, v4607) do
                                                            let v4609 : int32 = v4607.l0
                                                            let struct (v4610 : string, v4611 : string) = v4576.[int v4609]
                                                            let v4612 : string = $"$env:{v4610}=''{v4611}''"
                                                            v4606.[int v4609] <- v4612
                                                            let v4613 : int32 = v4609 + 1
                                                            v4607.l0 <- v4613
                                                            ()
                                                        let v4614 : string seq = v4606 |> Seq.ofArray
                                                        let v4617 : (string -> (string seq -> string)) = String.concat
                                                        let v4618 : string = ";"
                                                        let v4619 : (string seq -> string) = v4617 v4618
                                                        let v4620 : string = v4619 v4614
                                                        let v4623 : string = $"pwsh -c '{v4620}; {v4573}'"
                                                        let v4624 : bool = v4603 = 0
                                                        let struct (v4692 : US5, v4693 : US5, v4694 : US5, v4695 : US5) =
                                                            if v4624 then
                                                                let v4625 : (string -> US5) = closure62()
                                                                let v4626 : (unit -> string) = closure118(v4604)
                                                                let v4627 : (exn -> US5) = closure119(v4433, v4604, v4623)
                                                                let v4628 : US5 = US5_1
                                                                let result = ref v4628
                                                                try
                                                                    result.Value <- v4626 () |> v4625 
                                                                with ex ->
                                                                    result.Value <- v4627 ex 
                                                                let v4629 : US5 = result.Value
                                                                let v4639 : string option =
                                                                    match v4629 with
                                                                    | US5_1 -> (* None *)
                                                                        let v4637 : string option = None
                                                                        v4637
                                                                    | US5_0(v4633) -> (* Some *)
                                                                        let v4634 : string option = Some v4633 
                                                                        v4634
                                                                let v4640 : string = "$0.unwrap()"
                                                                let v4641 : string = Fable.Core.RustInterop.emitRustExpr v4639 v4640 
                                                                let v4642 : US5 = US5_0(v4166)
                                                                let v4643 : US5 = US5_0(v4570)
                                                                let v4644 : US5 = US5_0(v4433)
                                                                let v4645 : US5 = US5_0(v4641)
                                                                struct (v4642, v4643, v4644, v4645)
                                                            else
                                                                let v4646 : unit = ()
                                                                let v4647 : (unit -> unit) = closure121(v4433, v4604, v4603, v4623)
                                                                let v4648 : unit = (fun () -> v4647 (); v4646) ()
                                                                let v4688 : US5 = US5_0(v4166)
                                                                let v4689 : US5 = US5_1
                                                                let v4690 : US5 = US5_1
                                                                let v4691 : US5 = US5_1
                                                                struct (v4688, v4689, v4690, v4691)
                                                        struct (v4692, v4693, v4694, v4695)
                                                struct (v4696, v4697, v4698, v4699)
                                            else
                                                let v4700 : unit = ()
                                                let v4701 : (unit -> unit) = closure122(v26, v25)
                                                let v4702 : unit = (fun () -> v4701 (); v4700) ()
                                                let v4742 : US5 = US5_1
                                                let v4743 : US5 = US5_1
                                                let v4744 : US5 = US5_1
                                                let v4745 : US5 = US5_1
                                                struct (v4742, v4743, v4744, v4745)
                                        struct (v4746, v4747, v4748, v4749)
                                struct (v4750, v4751, v4752, v4753)
                        let v4761 : string =
                            match v4754 with
                            | US5_1 -> (* None *)
                                let v4759 : string = ""
                                v4759
                            | US5_0(v4758) -> (* Some *)
                                v4758
                        let v4762 : string = "extension"
                        let v4766 : string =
                            match v4755 with
                            | US5_1 -> (* None *)
                                let v4764 : string = ""
                                v4764
                            | US5_0(v4763) -> (* Some *)
                                v4763
                        let v4767 : string = "code"
                        let v4771 : string =
                            match v4756 with
                            | US5_1 -> (* None *)
                                let v4769 : string = ""
                                v4769
                            | US5_0(v4768) -> (* Some *)
                                v4768
                        let v4772 : string = "code_path"
                        let v4776 : string =
                            match v4757 with
                            | US5_1 -> (* None *)
                                let v4774 : string = ""
                                v4774
                            | US5_0(v4773) -> (* Some *)
                                v4773
                        let v4777 : string = "output"
                        [|struct (v4762, v4761); struct (v4767, v4766); struct (v4772, v4771); struct (v4777, v4776)|]
        | _ ->
            let v4782 : string = "extension"
            let v4783 : string = ""
            let v4784 : string = "code"
            let v4785 : string = "code_path"
            let v4786 : string = "output"
            [|struct (v4782, v4783); struct (v4784, v4783); struct (v4785, v4783); struct (v4786, v4783)|]
    let v4789 : string = "$0.to_vec()"
    let v4790 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4788 v4789 
    let v4791 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4792 : (struct (string * string) -> (std_string_String * std_string_String)) = closure123()
    let v4793 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4790, v4792) v4791 
    let v4794 : string = "std::collections::BTreeMap::from_iter(v4793.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v4795 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4794 
    let v4796 : string = "serde_json::to_string(&v4795)"
    let v4797 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4796 
    let v4798 : (serde_json_Error -> string) = method261()
    let v4799 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4800 : string = "$0.map_err(|x| $1(x))"
    let v4801 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4797, v4798) v4800 
    let _v4799 = v4801 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4802 : string = "$0.map_err(|x| $1(x))"
    let v4803 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4797, v4798) v4802 
    let _v4799 = v4803 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4804 : string = "$0.map_err(|x| $1(x))"
    let v4805 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4797, v4798) v4804 
    let _v4799 = v4805 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4806 : Result<std_string_String, string> = match v4797 with Ok x -> Ok x | Error x -> Error (v4798 x)
    let _v4799 = v4806 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4807 : Result<std_string_String, string> = match v4797 with Ok x -> Ok x | Error x -> Error (v4798 x)
    let _v4799 = v4807 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4808 : Result<std_string_String, string> = match v4797 with Ok x -> Ok x | Error x -> Error (v4798 x)
    let _v4799 = v4808 
    #endif
#else
    let v4809 : Result<std_string_String, string> = match v4797 with Ok x -> Ok x | Error x -> Error (v4798 x)
    let _v4799 = v4809 
    #endif
    let v4810 : Result<std_string_String, string> = _v4799 
    let v4813 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v4814 : bool = Fable.Core.RustInterop.emitRustExpr v4810 v4813 
    let v4815 : string = "x"
    let v4816 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4815 
    let v4817 : string = "fable_library_rust::String_::fromString($0)"
    let v4818 : string = Fable.Core.RustInterop.emitRustExpr v4816 v4817 
    let v4819 : string = "true; $0 })"
    let v4820 : bool = Fable.Core.RustInterop.emitRustExpr v4818 v4819 
    let v4821 : string = "_result_map_"
    let v4822 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v4821 
    let v4823 : Result<string, string> = method262(v4822)
    let v4824 : string = ""
    let v4825 : string = "}"
    let v4826 : string = v4824 + v4825 
    let v4827 : _ = v4823 
    let v4828 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4829 : string = $"true; let v4827 = $0"
    let v4830 : bool = Fable.Core.RustInterop.emitRustExpr v4827 v4829 
    let _v4828 = v4830 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4831 : string = $"true; let v4827 = $0"
    let v4832 : bool = Fable.Core.RustInterop.emitRustExpr v4827 v4831 
    let _v4828 = v4832 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4833 : string = $"true; let v4827 = $0"
    let v4834 : bool = Fable.Core.RustInterop.emitRustExpr v4827 v4833 
    let _v4828 = v4834 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4835 : bool = true
    let _v4828 = v4835 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4836 : bool = true
    let _v4828 = v4836 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4837 : bool = true
    let _v4828 = v4837 
    #endif
#else
    let v4838 : bool = true
    let _v4828 = v4838 
    #endif
    let v4839 : bool = _v4828 
    let v4842 : string = $"true; v4827 " + v4826 + "); " + v4824 + " // rust.fix_closure'"
    let v4843 : bool = Fable.Core.RustInterop.emitRustExpr () v4842 
    let v4844 : string = "__future_init"
    let v4845 : _ = Fable.Core.RustInterop.emitRustExpr () v4844 
    let v4846 : string = "v4845"
    let v4847 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v4846 
    v4847
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure5(v0)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v76 : clap_Command = method0()
    let v77 : string = "clap::Command::get_matches($0)"
    let v78 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : US0 = v21.l0
    let v80 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v79, v78)
    let v81 : string = "futures::executor::block_on($0)"
    let v82 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "$0.unwrap()"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v82 v84 
    let _v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "$0.unwrap()"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v82 v86 
    let _v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "$0.unwrap()"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v92 
    #endif
#else
    let v93 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v93 
    #endif
    let v94 : string = _v83 
    let v97 : US0 = v21.l0
    let v98 : bool =
        match v97 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v98 then
        let v99 : unit = ()
        let v100 : (unit -> unit) = closure10(v94)
        let v101 : unit = (fun () -> v100 (); v99) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
