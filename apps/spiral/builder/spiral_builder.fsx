#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("&$0")>]
type Ref<'T> = class end
#else
type Ref<'T> = 'T
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Command")>]
#endif
type clap_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::Arg")>]
#endif
type clap_Arg = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Vec<$0>")>]
#endif
type Vec<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::String")>]
type std_string_String = class end
#else
type std_string_String = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Box<$0>")>]
#endif
type Box<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::PossibleValue")>]
#endif
type clap_builder_PossibleValue = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueParser")>]
#endif
type clap_builder_ValueParser = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::builder::ValueRange")>]
#endif
type clap_builder_ValueRange = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgAction")>]
#endif
type clap_ArgAction = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("mut $0")>]
#endif
type Mut<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("clap::ArgMatches")>]
#endif
type clap_ArgMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::PathBuf")>]
type std_path_PathBuf = class end
#else
type std_path_PathBuf = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::path::Display")>]
type std_path_Display = class end
#else
type std_path_Display = string
#endif

#if FABLE_COMPILER
type System_IO_DirectoryInfo = unit
#else
type System_IO_DirectoryInfo = System.IO.DirectoryInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Error")>]
type std_io_Error = class end
#else
type std_io_Error = string
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsString")>]
#endif
type std_ffi_OsString = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Command")>]
#endif
type std_process_Command = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Stdio")>]
#endif
type std_process_Stdio = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Child")>]
#endif
type std_process_Child = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Mutex<$0>")>]
#endif
type std_sync_Mutex<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::Arc<$0>")>]
#endif
type std_sync_Arc<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::MutexGuard<$0>")>]
#endif
type std_sync_MutexGuard<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdout")>]
#endif
type std_process_ChildStdout = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStderr")>]
#endif
type std_process_ChildStderr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ChildStdin")>]
#endif
type std_process_ChildStdin = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Sender<$0>")>]
#endif
type std_sync_mpsc_Sender<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs_io::DecodeReaderBytes<$0, $1>")>]
#endif
type encoding_rs_io_DecodeReaderBytes<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::BufReader<$0>")>]
#endif
type std_io_BufReader<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Lines<$0>")>]
#endif
type std_io_Lines<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::borrow::Cow<$0>")>]
#endif
type std_borrow_Cow<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::SendError<$0>")>]
#endif
type std_sync_mpsc_SendError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type core_ops_Try<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::thread::JoinHandle<$0>")>]
#endif
type std_thread_JoinHandle<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::Output")>]
#endif
type std_process_Output = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::process::ExitStatus")>]
#endif
type std_process_ExitStatus = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::BTreeMap<$0, $1>")>]
#endif
type std_collections_BTreeMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::pin::Pin<$0>")>]
#endif
type std_pin_Pin<'T> = class end
#if FABLE_COMPILER
type System_IO_FileInfo = unit
#else
type System_IO_FileInfo = System.IO.FileInfo
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Regex")>]
#endif
type regex_Regex = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::io::Cursor<$0>")>]
#endif
type std_io_Cursor<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("sha2::Sha256")>]
#endif
type sha2_Sha256 = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("_")>]
#endif
type Slice'<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::DateTime<$0>")>]
#endif
type chrono_DateTime<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::NaiveDateTime")>]
#endif
type chrono_NaiveDateTime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureMatches")>]
#endif
type regex_CaptureMatches = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Captures<$0>")>]
#endif
type regex_Captures<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::CaptureNames")>]
#endif
type regex_CaptureNames = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::collections::HashMap<$0, $1>")>]
#endif
type std_collections_HashMap<'K, 'V> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::WalkDir")>]
#endif
type async_walkdir_WalkDir = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::DirEntry")>]
#endif
type async_walkdir_DirEntry = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::fs::FileType")>]
#endif
type std_fs_FileType = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Filtering")>]
#endif
type async_walkdir_Filtering = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("async_walkdir::Error")>]
#endif
type async_walkdir_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::vec::IntoIter<$0>")>]
#endif
type rayon_vec_IntoIter<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("rayon::iter::Map<$0, _>")>]
#endif
type rayon_iter_Map<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("serde_json::Error")>]
#endif
type serde_json_Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 $1")>]
#endif
type Lifetime<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("'static")>]
#endif
type StaticLifetime = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("str")>]
type Str = class end
#else
type Str = string
#endif

module TraceState = let mutable trace_state = None
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::env::VarError")>]
#endif
type std_env_VarError = class end
type IOsEnviron = abstract environ: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("dyn $0")>]
#endif
type Dyn<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::future::Future<Output = $0>")>]
#endif
type std_future_Future<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::string::FromUtf8Error")>]
#endif
type std_string_FromUtf8Error = class end
type IPathJoin = abstract join: [<System.ParamArray>] paths: string[] -> string
type IFsExistsSync = abstract existsSync: path: string -> bool
type IPathDirname = abstract dirname: path: string -> string
type Disposable (f : unit -> unit) = interface System.IDisposable with member _.Dispose () = f ()
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::ffi::OsStr")>]
#endif
type std_ffi_OsStr = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::mpsc::Receiver<$0>")>]
#endif
type std_sync_mpsc_Receiver<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::sync::PoisonError<$0>")>]
#endif
type std_sync_PoisonError<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("encoding_rs::Encoding")>]
#endif
type encoding_rs_Encoding = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("[$0]")>]
#endif
type Slice<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("std::str::Utf8Error")>]
#endif
type std_str_Utf8Error = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0")>]
#endif
type LifetimeRef<'T> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("$0 + $1")>]
#endif
type LifetimeJoin<'T, 'U> = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("core::any::Any")>]
type core_any_Any = class end
#else
type core_any_Any = obj
#endif

#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("Send")>]
#endif
type Send<'T> = class end
#if FABLE_COMPILER
[<CompilationRepresentation (CompilationRepresentationFlags.ModuleSuffix)>]
module System =
 module Diagnostics =
  type Process = unit
  type DataReceivedEventArgs = unit
#endif
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("regex::Error")>]
#endif
type regex_Error = class end
type ICryptoCreateHash = abstract createHash: x: string -> obj
type IHashlibSha256 = abstract sha256: x: unit -> obj
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Utc")>]
#endif
type chrono_Utc = class end
#if FABLE_COMPILER
[<Fable.Core.Erase; Fable.Core.Emit("chrono::Local")>]
#endif
type chrono_Local = class end
type [<Struct>] US0 =
    | US0_0
    | US0_1
    | US0_2
    | US0_3
    | US0_4
and Mut0 = {mutable l0 : int64}
and Mut1 = {mutable l0 : (string -> unit)}
and Mut2 = {mutable l0 : bool}
and Mut3 = {mutable l0 : string}
and Mut4 = {mutable l0 : US0}
and [<Struct>] US1 =
    | US1_0 of f0_0 : US0
    | US1_1
and [<Struct>] US2 =
    | US2_0 of f0_0 : int64
    | US2_1
and [<Struct>] US3 =
    | US3_0
    | US3_1
    | US3_2
and [<Struct>] US4 =
    | US4_0 of f0_0 : US3
    | US4_1 of f1_0 : US3
    | US4_2 of f2_0 : US3
    | US4_3 of f3_0 : US3
    | US4_4 of f4_0 : US3
and [<Struct>] US5 =
    | US5_0 of f0_0 : string
    | US5_1
and [<Struct>] US6 =
    | US6_0 of f0_0 : std_string_String * f0_1 : clap_ArgMatches
    | US6_1
and [<Struct>] US7 =
    | US7_0 of f0_0 : std_string_String
    | US7_1
and [<Struct>] US10 =
    | US10_0
    | US10_1
and [<Struct>] US9 =
    | US9_0 of f0_0 : US10
    | US9_1
and [<Struct>] US8 =
    | US8_0 of f0_0 : US9
    | US8_1
and [<Struct>] US11 =
    | US11_0 of f0_0 : Vec<std_string_String>
    | US11_1
and [<Struct>] US12 =
    | US12_0 of f0_0 : string
    | US12_1 of f1_0 : string
and [<Struct>] US13 =
    | US13_0
    | US13_1 of f1_0 : std_string_String
and [<Struct>] US14 =
    | US14_0 of f0_0 : string * f0_1 : US5
    | US14_1 of f1_0 : string
and [<Struct>] US15 =
    | US15_0 of f0_0 : char * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US15_1 of f1_0 : string
and Mut5 = {mutable l0 : int32}
and UH0 =
    | UH0_0
    | UH0_1 of char * UH0
and UH1 =
    | UH1_0
    | UH1_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) * UH1
and [<Struct>] US16 =
    | US16_0 of f0_0 : string * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US16_1 of f1_0 : string
and [<Struct>] US17 =
    | US17_0 of f0_0 : char
    | US17_1
and [<Struct>] US18 =
    | US18_0 of f0_0 : string * f0_1 : System.Text.StringBuilder * f0_2 : int32 * f0_3 : int32
    | US18_1 of f1_0 : string
and [<Struct>] US19 =
    | US19_0 of f0_0 : string * f0_1 : US5 * f0_2 : string * f0_3 : System.Text.StringBuilder * f0_4 : int32 * f0_5 : int32
    | US19_1 of f1_0 : string
and [<Struct>] US20 =
    | US20_0 of f0_0 : US17 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US20_1 of f1_0 : string
and [<Struct>] US21 =
    | US21_0 of f0_0 : US5 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US21_1 of f1_0 : string
and [<Struct>] US22 =
    | US22_0 of f0_0 : (string [])
    | US22_1 of f1_0 : string
and UH2 =
    | UH2_0
    | UH2_1 of string * UH2
and [<Struct>] US23 =
    | US23_0 of f0_0 : UH2 * f0_1 : string * f0_2 : System.Text.StringBuilder * f0_3 : int32 * f0_4 : int32
    | US23_1 of f1_0 : string
and UH3 =
    | UH3_0
    | UH3_1 of (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) * UH3
and [<Struct>] US24 =
    | US24_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>
    | US24_1 of f1_0 : std_string_String
and [<Struct>] US25 =
    | US25_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>
    | US25_1
and [<Struct>] US26 =
    | US26_0 of f0_0 : std_string_String
    | US26_1 of f1_0 : std_string_String
and [<Struct>] US27 =
    | US27_0 of f0_0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)
    | US27_1
and [<Struct>] US28 =
    | US28_0 of f0_0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>
    | US28_1
and [<Struct>] US29 =
    | US29_0 of f0_0 : std_process_Output
    | US29_1 of f1_0 : std_string_String
and [<Struct>] US30 =
    | US30_0 of f0_0 : int32
    | US30_1
and [<Struct>] US31 =
    | US31_0 of f0_0 : (struct (int32 * string * bool) -> Async<unit>)
    | US31_1
and [<Struct>] US32 =
    | US32_0 of f0_0 : System.Threading.CancellationToken
    | US32_1
and [<Struct>] US33 =
    | US33_0 of f0_0 : std_path_PathBuf
    | US33_1 of f1_0 : string
and [<Struct>] US34 =
    | US34_0 of f0_0 : std_path_PathBuf
    | US34_1
and Mut6 = {mutable l0 : int32; mutable l1 : int32; mutable l2 : (string [])}
and [<Struct>] US36 =
    | US36_0 of f0_0 : string
    | US36_1 of f1_0 : string
and [<Struct>] US35 =
    | US35_0 of f0_0 : US36
    | US35_1
and [<Struct>] US37 =
    | US37_0
    | US37_1
    | US37_2
and [<Struct>] US38 =
    | US38_0 of f0_0 : US37
    | US38_1
and [<Struct>] US39 =
    | US39_0 of f0_0 : chrono_DateTime<chrono_Utc>
    | US39_1
and [<Struct>] US40 =
    | US40_0 of f0_0 : int32 * f0_1 : string
    | US40_1 of f1_0 : int32 * f1_1 : string
and [<Struct>] US41 =
    | US41_0 of f0_0 : std_collections_HashMap<string, string>
    | US41_1
and [<Struct>] US42 =
    | US42_0 of f0_0 : US5
    | US42_1
and UH4 =
    | UH4_0
    | UH4_1 of string * bool * UH4
and [<Struct>] US43 =
    | US43_0 of f0_0 : std_fs_FileType
    | US43_1 of f1_0 : std_string_String
and [<Struct>] US44 =
    | US44_0
    | US44_1
    | US44_2
and [<Struct>] US45 =
    | US45_0 of f0_0 : async_walkdir_DirEntry
    | US45_1 of f1_0 : std_string_String
and [<Struct>] US46 =
    | US46_0 of f0_0 : string * f0_1 : string
    | US46_1
and UH5 =
    | UH5_0
    | UH5_1 of string * string * UH5
let rec method0 () : clap_Command =
    let v0 : string = "command"
    let v1 : string = "r#\"" + v0 + "\"#"
    let v2 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : string = "clap::Command::new($0)"
    let v4 : clap_Command = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "clap::Command::subcommand_required($0, true)"
    let v6 : clap_Command = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "fsharp"
    let v8 : string = "r#\"" + v7 + "\"#"
    let v9 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "clap::Command::new($0)"
    let v11 : clap_Command = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "spi-path"
    let v13 : string = "r#\"" + v12 + "\"#"
    let v14 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = "clap::Arg::new($0)"
    let v16 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v14 v15 
    let v17 : string = "$0.short($1)"
    let v18 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v16, 's') v17 
    let v19 : string = "r#\"" + v12 + "\"#"
    let v20 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v19 
    let v21 : string = "$0.long($1)"
    let v22 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v18, v20) v21 
    let v23 : string = "$0.required($1)"
    let v24 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v22, true) v23 
    let v25 : string = "clap::Command::arg($0, $1)"
    let v26 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v11, v24) v25 
    let v27 : string = "clap::Command::subcommand($0, v26)"
    let v28 : clap_Command = Fable.Core.RustInterop.emitRustExpr v6 v27 
    let v29 : string = "cuda"
    let v30 : string = "r#\"" + v29 + "\"#"
    let v31 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v30 
    let v32 : string = "clap::Command::new($0)"
    let v33 : clap_Command = Fable.Core.RustInterop.emitRustExpr v31 v32 
    let v34 : string = "py-path"
    let v35 : string = "r#\"" + v34 + "\"#"
    let v36 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v35 
    let v37 : string = "clap::Arg::new($0)"
    let v38 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "$0.short($1)"
    let v40 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v38, 'p') v39 
    let v41 : string = "r#\"" + v34 + "\"#"
    let v42 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v41 
    let v43 : string = "$0.long($1)"
    let v44 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v40, v42) v43 
    let v45 : string = "$0.required($1)"
    let v46 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v44, true) v45 
    let v47 : string = "clap::Command::arg($0, $1)"
    let v48 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v33, v46) v47 
    let v49 : string = "env"
    let v50 : string = "r#\"" + v49 + "\"#"
    let v51 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "clap::Arg::new($0)"
    let v53 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v51 v52 
    let v54 : string = "$0.short($1)"
    let v55 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v53, 'e') v54 
    let v56 : string = "r#\"" + v49 + "\"#"
    let v57 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v56 
    let v58 : string = "$0.long($1)"
    let v59 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v55, v57) v58 
    
    
    let v60 : string list = []
    let v61 : string = "Poetry"
    let v62 : string list = v61 :: v60 
    let v65 : string = "Pip"
    let v66 : string list = v65 :: v62 
    let v69 : (string list -> (string [])) = List.toArray
    let v70 : (string []) = v69 v66
    let v73 : string = "$0.to_vec()"
    let v74 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v70 v73 
    let v75 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v76 : bool = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let v77 : string = "x"
    let v78 : string = Fable.Core.RustInterop.emitRustExpr () v77 
    let v79 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : string = "&*$0"
    let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v80 
    let _v79 = v81 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v82 : string = "&*$0"
    let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v82 
    let _v79 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "&*$0"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v78 v84 
    let _v79 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v86 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v86 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v92 
    #endif
#else
    let v95 : Ref<Str> = v78 |> unbox<Ref<Str>>
    let _v79 = v95 
    #endif
    let v98 : Ref<Str> = _v79 
    let v103 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v104 : string = "String::from($0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v104 
    let _v103 = v105 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v106 : string = "String::from($0)"
    let v107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v106 
    let _v103 = v107 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v108 : string = "String::from($0)"
    let v109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v98 v108 
    let _v103 = v109 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v110 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v110 
    #endif
#if FABLE_COMPILER_PYTHON
    let v113 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v113 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v116 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v116 
    #endif
#else
    let v119 : std_string_String = v98 |> unbox<std_string_String>
    let _v103 = v119 
    #endif
    let v122 : std_string_String = _v103 
    let v127 : string = "Box::new($0)"
    let v128 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v122 v127 
    let v129 : string = "Box::leak($0)"
    let v130 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v128 v129 
    let v131 : string = "clap::builder::PossibleValue::new(&**$0)"
    let v132 : clap_builder_PossibleValue = Fable.Core.RustInterop.emitRustExpr v130 v131 
    let v133 : string = "true; $0 }).collect::<Vec<_>>()"
    let v134 : bool = Fable.Core.RustInterop.emitRustExpr v132 v133 
    let v135 : string = "_vec_map"
    let v136 : Vec<clap_builder_PossibleValue> = Fable.Core.RustInterop.emitRustExpr () v135 
    let v137 : string = "Into::<clap::builder::ValueParser>::into(clap::builder::PossibleValuesParser::new($0))"
    let v138 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr v136 v137 
    let v139 : string = "$0.value_parser($1)"
    let v140 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v59, v138) v139 
    let v141 : string = "clap::Command::arg($0, $1)"
    let v142 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v48, v140) v141 
    let v143 : string = "NAME"
    let v144 : string = "r#\"" + v143 + "\"#"
    let v145 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v144 
    let v146 : string = "VERSION"
    let v147 : string = "r#\"" + v146 + "\"#"
    let v148 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v145; v148|]
    let v150 : unativeint = 1 |> unativeint 
    let v153 : unativeint = 0 |> unativeint 
    let v156 : unativeint = 0 |> unativeint 
    let v159 : bool = v153 = v156 
    let v167 : clap_builder_ValueRange =
        if v159 then
            let v162 : string = "clap::builder::ValueRange::new($0..)"
            let v163 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v150 v162 
            v163
        else
            let v164 : string = ""
            let v165 : string = "clap::builder::ValueRange::new($0.." + v164 + "$1)"
            let v166 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v150, v153) v165 
            v166
    let v168 : string = "deps"
    let v169 : string = "r#\"" + v168 + "\"#"
    let v170 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v169 
    let v171 : string = "clap::Arg::new($0)"
    let v172 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v170 v171 
    let v173 : string = "$0.short($1)"
    let v174 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v172, 'd') v173 
    let v175 : string = "r#\"" + v168 + "\"#"
    let v176 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v175 
    let v177 : string = "$0.long($1)"
    let v178 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v174, v176) v177 
    let v179 : string = "$0.to_vec()"
    let v180 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v149 v179 
    let v181 : string = "$0.value_names($1)"
    let v182 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v178, v180) v181 
    let v183 : string = "$0.num_args($1)"
    let v184 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v182, v167) v183 
    let v185 : string = "clap::ArgAction::Append"
    let v186 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v185 
    let v187 : string = "$0.action($1)"
    let v188 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v184, v186) v187 
    let v189 : string = "clap::Command::arg($0, $1)"
    let v190 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v142, v188) v189 
    let v191 : string = "clap::Command::subcommand($0, v190)"
    let v192 : clap_Command = Fable.Core.RustInterop.emitRustExpr v28 v191 
    let v193 : string = "fable"
    let v194 : string = "r#\"" + v193 + "\"#"
    let v195 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v194 
    let v196 : string = "clap::Command::new($0)"
    let v197 : clap_Command = Fable.Core.RustInterop.emitRustExpr v195 v196 
    let v198 : string = "fs-path"
    let v199 : string = "r#\"" + v198 + "\"#"
    let v200 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v199 
    let v201 : string = "clap::Arg::new($0)"
    let v202 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v200 v201 
    let v203 : string = "$0.short($1)"
    let v204 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v202, 'f') v203 
    let v205 : string = "r#\"" + v198 + "\"#"
    let v206 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v205 
    let v207 : string = "$0.long($1)"
    let v208 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v204, v206) v207 
    let v209 : string = "$0.required($1)"
    let v210 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v208, true) v209 
    let v211 : string = "clap::Command::arg($0, $1)"
    let v212 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v197, v210) v211 
    let v213 : string = "r#\"" + v0 + "\"#"
    let v214 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v213 
    let v215 : string = "clap::Arg::new($0)"
    let v216 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v214 v215 
    let v217 : string = "$0.short($1)"
    let v218 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v216, 'c') v217 
    let v219 : string = "r#\"" + v0 + "\"#"
    let v220 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v219 
    let v221 : string = "$0.long($1)"
    let v222 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v218, v220) v221 
    let v223 : string = "clap::Command::arg($0, $1)"
    let v224 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v212, v222) v223 
    let v225 : string = "clap::Command::subcommand($0, v224)"
    let v226 : clap_Command = Fable.Core.RustInterop.emitRustExpr v192 v225 
    let v227 : string = "rust"
    let v228 : string = "r#\"" + v227 + "\"#"
    let v229 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v228 
    let v230 : string = "clap::Command::new($0)"
    let v231 : clap_Command = Fable.Core.RustInterop.emitRustExpr v229 v230 
    let v232 : string = "r#\"" + v198 + "\"#"
    let v233 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v232 
    let v234 : string = "clap::Arg::new($0)"
    let v235 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v233 v234 
    let v236 : string = "$0.short($1)"
    let v237 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v235, 'f') v236 
    let v238 : string = "r#\"" + v198 + "\"#"
    let v239 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v238 
    let v240 : string = "$0.long($1)"
    let v241 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v237, v239) v240 
    let v242 : string = "$0.required($1)"
    let v243 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v241, true) v242 
    let v244 : string = "clap::Command::arg($0, $1)"
    let v245 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v231, v243) v244 
    let v246 : string = "r#\"" + v143 + "\"#"
    let v247 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v246 
    let v248 : string = "r#\"" + v146 + "\"#"
    let v249 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v248 
    let v250 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v247; v249|]
    let v251 : unativeint = 1 |> unativeint 
    let v254 : unativeint = 0 |> unativeint 
    let v257 : unativeint = 0 |> unativeint 
    let v260 : bool = v254 = v257 
    let v268 : clap_builder_ValueRange =
        if v260 then
            let v263 : string = "clap::builder::ValueRange::new($0..)"
            let v264 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v251 v263 
            v264
        else
            let v265 : string = ""
            let v266 : string = "clap::builder::ValueRange::new($0.." + v265 + "$1)"
            let v267 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v251, v254) v266 
            v267
    let v269 : string = "r#\"" + v168 + "\"#"
    let v270 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v269 
    let v271 : string = "clap::Arg::new($0)"
    let v272 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v270 v271 
    let v273 : string = "$0.short($1)"
    let v274 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v272, 'd') v273 
    let v275 : string = "r#\"" + v168 + "\"#"
    let v276 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v275 
    let v277 : string = "$0.long($1)"
    let v278 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v274, v276) v277 
    let v279 : string = "$0.to_vec()"
    let v280 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v250 v279 
    let v281 : string = "$0.value_names($1)"
    let v282 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v278, v280) v281 
    let v283 : string = "$0.num_args($1)"
    let v284 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v282, v268) v283 
    let v285 : string = "clap::ArgAction::Append"
    let v286 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v285 
    let v287 : string = "$0.action($1)"
    let v288 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v284, v286) v287 
    let v289 : string = "clap::Command::arg($0, $1)"
    let v290 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v245, v288) v289 
    let v291 : unativeint = 0 |> unativeint 
    let v294 : unativeint = 1 |> unativeint 
    let v297 : unativeint = 0 |> unativeint 
    let v300 : bool = v294 = v297 
    let v308 : clap_builder_ValueRange =
        if v300 then
            let v303 : string = "clap::builder::ValueRange::new($0..)"
            let v304 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v291 v303 
            v304
        else
            let v305 : string = "="
            let v306 : string = "clap::builder::ValueRange::new($0.." + v305 + "$1)"
            let v307 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v291, v294) v306 
            v307
    let v309 : string = "wasm"
    let v310 : string = "r#\"" + v309 + "\"#"
    let v311 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v310 
    let v312 : string = "clap::Arg::new($0)"
    let v313 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v311 v312 
    let v314 : string = "$0.short($1)"
    let v315 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v313, 'w') v314 
    let v316 : string = "r#\"" + v309 + "\"#"
    let v317 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v316 
    let v318 : string = "$0.long($1)"
    let v319 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v315, v317) v318 
    let v320 : string = "$0.num_args($1)"
    let v321 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v319, v308) v320 
    let v322 : string = "$0.require_equals($1)"
    let v323 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v321, true) v322 
    let v324 : string = ""
    let v325 : string = "r#\"" + v324 + "\"#"
    let v326 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v325 
    let v327 : string = "$0.default_missing_value($1)"
    let v328 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v323, v326) v327 
    let v329 : string = "clap::Command::arg($0, $1)"
    let v330 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v290, v328) v329 
    let v331 : unativeint = 0 |> unativeint 
    let v334 : unativeint = 1 |> unativeint 
    let v337 : unativeint = 0 |> unativeint 
    let v340 : bool = v334 = v337 
    let v348 : clap_builder_ValueRange =
        if v340 then
            let v343 : string = "clap::builder::ValueRange::new($0..)"
            let v344 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v331 v343 
            v344
        else
            let v345 : string = "="
            let v346 : string = "clap::builder::ValueRange::new($0.." + v345 + "$1)"
            let v347 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v331, v334) v346 
            v347
    let v349 : string = "contract"
    let v350 : string = "r#\"" + v349 + "\"#"
    let v351 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v350 
    let v352 : string = "clap::Arg::new($0)"
    let v353 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v351 v352 
    let v354 : string = "$0.short($1)"
    let v355 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v353, 'c') v354 
    let v356 : string = "r#\"" + v349 + "\"#"
    let v357 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v356 
    let v358 : string = "$0.long($1)"
    let v359 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v355, v357) v358 
    let v360 : string = "$0.num_args($1)"
    let v361 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v359, v348) v360 
    let v362 : string = "$0.require_equals($1)"
    let v363 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v361, true) v362 
    let v364 : string = "r#\"" + v324 + "\"#"
    let v365 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v364 
    let v366 : string = "$0.default_missing_value($1)"
    let v367 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v363, v365) v366 
    let v368 : string = "clap::Command::arg($0, $1)"
    let v369 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v330, v367) v368 
    let v370 : string = "cleanup"
    let v371 : string = "r#\"" + v370 + "\"#"
    let v372 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v371 
    let v373 : string = "clap::Arg::new($0)"
    let v374 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v372 v373 
    let v375 : string = "$0.short($1)"
    let v376 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v374, 'l') v375 
    let v377 : string = "r#\"" + v370 + "\"#"
    let v378 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v377 
    let v379 : string = "$0.long($1)"
    let v380 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v376, v378) v379 
    let v381 : string = "true"
    let v382 : string = "r#\"" + v381 + "\"#"
    let v383 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v382 
    let v384 : string = "$0.default_value($1)"
    let v385 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v380, v383) v384 
    let v386 : string = "clap::ArgAction::SetFalse"
    let v387 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v386 
    let v388 : string = "$0.action($1)"
    let v389 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v385, v387) v388 
    let v390 : string = "clap::Command::arg($0, $1)"
    let v391 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v369, v389) v390 
    let v392 : string = "clap::Command::subcommand($0, v391)"
    let v393 : clap_Command = Fable.Core.RustInterop.emitRustExpr v226 v392 
    let v394 : string = "typescript"
    let v395 : string = "r#\"" + v394 + "\"#"
    let v396 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v395 
    let v397 : string = "clap::Command::new($0)"
    let v398 : clap_Command = Fable.Core.RustInterop.emitRustExpr v396 v397 
    let v399 : string = "r#\"" + v198 + "\"#"
    let v400 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v399 
    let v401 : string = "clap::Arg::new($0)"
    let v402 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v400 v401 
    let v403 : string = "$0.short($1)"
    let v404 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v402, 'f') v403 
    let v405 : string = "r#\"" + v198 + "\"#"
    let v406 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v405 
    let v407 : string = "$0.long($1)"
    let v408 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v404, v406) v407 
    let v409 : string = "$0.required($1)"
    let v410 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v408, true) v409 
    let v411 : string = "clap::Command::arg($0, $1)"
    let v412 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v398, v410) v411 
    let v413 : string = "r#\"" + v143 + "\"#"
    let v414 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v413 
    let v415 : string = "r#\"" + v146 + "\"#"
    let v416 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v415 
    let v417 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v414; v416|]
    let v418 : unativeint = 1 |> unativeint 
    let v421 : unativeint = 0 |> unativeint 
    let v424 : unativeint = 0 |> unativeint 
    let v427 : bool = v421 = v424 
    let v434 : clap_builder_ValueRange =
        if v427 then
            let v430 : string = "clap::builder::ValueRange::new($0..)"
            let v431 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v418 v430 
            v431
        else
            let v432 : string = "clap::builder::ValueRange::new($0.." + v324 + "$1)"
            let v433 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v418, v421) v432 
            v433
    let v435 : string = "r#\"" + v168 + "\"#"
    let v436 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v435 
    let v437 : string = "clap::Arg::new($0)"
    let v438 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v436 v437 
    let v439 : string = "$0.short($1)"
    let v440 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v438, 'd') v439 
    let v441 : string = "r#\"" + v168 + "\"#"
    let v442 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v441 
    let v443 : string = "$0.long($1)"
    let v444 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v440, v442) v443 
    let v445 : string = "$0.to_vec()"
    let v446 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v417 v445 
    let v447 : string = "$0.value_names($1)"
    let v448 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v444, v446) v447 
    let v449 : string = "$0.num_args($1)"
    let v450 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v448, v434) v449 
    let v451 : string = "clap::ArgAction::Append"
    let v452 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v451 
    let v453 : string = "$0.action($1)"
    let v454 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v450, v452) v453 
    let v455 : string = "clap::Command::arg($0, $1)"
    let v456 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v412, v454) v455 
    let v457 : string = "clap::Command::subcommand($0, v456)"
    let v458 : clap_Command = Fable.Core.RustInterop.emitRustExpr v393 v457 
    let v459 : string = "python"
    let v460 : string = "r#\"" + v459 + "\"#"
    let v461 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v460 
    let v462 : string = "clap::Command::new($0)"
    let v463 : clap_Command = Fable.Core.RustInterop.emitRustExpr v461 v462 
    let v464 : string = "r#\"" + v198 + "\"#"
    let v465 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v464 
    let v466 : string = "clap::Arg::new($0)"
    let v467 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v465 v466 
    let v468 : string = "$0.short($1)"
    let v469 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v467, 'f') v468 
    let v470 : string = "r#\"" + v198 + "\"#"
    let v471 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v470 
    let v472 : string = "$0.long($1)"
    let v473 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v469, v471) v472 
    let v474 : string = "$0.required($1)"
    let v475 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v473, true) v474 
    let v476 : string = "clap::Command::arg($0, $1)"
    let v477 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v463, v475) v476 
    let v478 : string = "r#\"" + v143 + "\"#"
    let v479 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v478 
    let v480 : string = "r#\"" + v146 + "\"#"
    let v481 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v480 
    let v482 : (Ref<Lifetime<StaticLifetime, Str>> []) = [|v479; v481|]
    let v483 : unativeint = 1 |> unativeint 
    let v486 : unativeint = 0 |> unativeint 
    let v489 : unativeint = 0 |> unativeint 
    let v492 : bool = v486 = v489 
    let v499 : clap_builder_ValueRange =
        if v492 then
            let v495 : string = "clap::builder::ValueRange::new($0..)"
            let v496 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr v483 v495 
            v496
        else
            let v497 : string = "clap::builder::ValueRange::new($0.." + v324 + "$1)"
            let v498 : clap_builder_ValueRange = Fable.Core.RustInterop.emitRustExpr struct (v483, v486) v497 
            v498
    let v500 : string = "r#\"" + v168 + "\"#"
    let v501 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v500 
    let v502 : string = "clap::Arg::new($0)"
    let v503 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v501 v502 
    let v504 : string = "$0.short($1)"
    let v505 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v503, 'd') v504 
    let v506 : string = "r#\"" + v168 + "\"#"
    let v507 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v506 
    let v508 : string = "$0.long($1)"
    let v509 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v505, v507) v508 
    let v510 : string = "$0.to_vec()"
    let v511 : Vec<Ref<Lifetime<StaticLifetime, Str>>> = Fable.Core.RustInterop.emitRustExpr v482 v510 
    let v512 : string = "$0.value_names($1)"
    let v513 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v509, v511) v512 
    let v514 : string = "$0.num_args($1)"
    let v515 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v513, v499) v514 
    let v516 : string = "clap::ArgAction::Append"
    let v517 : clap_ArgAction = Fable.Core.RustInterop.emitRustExpr () v516 
    let v518 : string = "$0.action($1)"
    let v519 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v515, v517) v518 
    let v520 : string = "clap::Command::arg($0, $1)"
    let v521 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v477, v519) v520 
    let v522 : string = "clap::Command::subcommand($0, v521)"
    let v523 : clap_Command = Fable.Core.RustInterop.emitRustExpr v458 v522 
    let v524 : string = "dib"
    let v525 : string = "r#\"" + v524 + "\"#"
    let v526 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v525 
    let v527 : string = "clap::Command::new($0)"
    let v528 : clap_Command = Fable.Core.RustInterop.emitRustExpr v526 v527 
    let v529 : string = "path"
    let v530 : string = "r#\"" + v529 + "\"#"
    let v531 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v530 
    let v532 : string = "clap::Arg::new($0)"
    let v533 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v531 v532 
    let v534 : string = "$0.short($1)"
    let v535 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v533, 'p') v534 
    let v536 : string = "r#\"" + v529 + "\"#"
    let v537 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v536 
    let v538 : string = "$0.long($1)"
    let v539 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v535, v537) v538 
    let v540 : string = "$0.required($1)"
    let v541 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v539, true) v540 
    let v542 : string = "clap::Command::arg($0, $1)"
    let v543 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v528, v541) v542 
    let v544 : string = "u8"
    let v545 : string = "clap::value_parser!(" + v544 + ").into()"
    let v546 : clap_builder_ValueParser = Fable.Core.RustInterop.emitRustExpr () v545 
    let v547 : string = "retries"
    let v548 : string = "r#\"" + v547 + "\"#"
    let v549 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v548 
    let v550 : string = "clap::Arg::new($0)"
    let v551 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v549 v550 
    let v552 : string = "$0.short($1)"
    let v553 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v551, 'r') v552 
    let v554 : string = "r#\"" + v547 + "\"#"
    let v555 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v554 
    let v556 : string = "$0.long($1)"
    let v557 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v553, v555) v556 
    let v558 : string = "$0.value_parser($1)"
    let v559 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v557, v546) v558 
    let v560 : string = "clap::Command::arg($0, $1)"
    let v561 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v543, v559) v560 
    let v562 : string = "working-directory"
    let v563 : string = "r#\"" + v562 + "\"#"
    let v564 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v563 
    let v565 : string = "clap::Arg::new($0)"
    let v566 : clap_Arg = Fable.Core.RustInterop.emitRustExpr v564 v565 
    let v567 : string = "$0.short($1)"
    let v568 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v566, 'w') v567 
    let v569 : string = "r#\"" + v562 + "\"#"
    let v570 : Ref<Lifetime<StaticLifetime, Str>> = Fable.Core.RustInterop.emitRustExpr () v569 
    let v571 : string = "$0.long($1)"
    let v572 : clap_Arg = Fable.Core.RustInterop.emitRustExpr struct (v568, v570) v571 
    let v573 : string = "clap::Command::arg($0, $1)"
    let v574 : clap_Command = Fable.Core.RustInterop.emitRustExpr struct (v561, v572) v573 
    let v575 : string = "clap::Command::subcommand($0, v574)"
    let v576 : clap_Command = Fable.Core.RustInterop.emitRustExpr v523 v575 
    v576
and closure0 () () : unit =
    let v0 : string = "true; () //"
    let v1 : bool = Fable.Core.RustInterop.emitRustExpr () v0 
    let v2 : string = "} /* /*"
    Fable.Core.RustInterop.emitRustExpr () v2 
    let v3 : string = "verify_app"
    let v4 : string = $"*/ #[test] fn " + v3 + "() { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : clap_Command = method0()
    let v7 : string = "clap::Command::debug_assert($0)"
    Fable.Core.RustInterop.emitRustExpr v6 v7 
    let v8 : string = "{ //"
    Fable.Core.RustInterop.emitRustExpr () v8 
    ()
and method4 (v0 : string) : string =
    v0
and method5 () : string =
    let v0 : string = ""
    v0
and closure3 () (v0 : string) : US5 =
    US5_0(v0)
and method6 () : (string -> US5) =
    closure3()
and method3 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method4(v0)
    let v3 : string = "std::env::var(&*$0)"
    let v4 : Result<std_string_String, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v6 : bool = Fable.Core.RustInterop.emitRustExpr v4 v5 
    let v7 : string = "x"
    let v8 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "fable_library_rust::String_::fromString($0)"
    let v10 : string = Fable.Core.RustInterop.emitRustExpr v8 v9 
    let v11 : string = "true; $0 })"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr v10 v11 
    let v13 : string = "_result_map_"
    let v14 : Result<string, std_env_VarError> = Fable.Core.RustInterop.emitRustExpr () v13 
    let v15 : string = method5()
    let v16 : string = "$0.unwrap_or($1)"
    let v17 : string = Fable.Core.RustInterop.emitRustExpr struct (v14, v15) v16 
    let _v1 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v18 : US3 = US3_1
    let v19 : US4 = US4_2(v18)
    let v20 : string = $"env.get_environment_variable / target: {v19} / var: {v0}"
    let v21 : string = failwith<string> v20
    let _v1 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : US3 = US3_2
    let v23 : US4 = US4_2(v22)
    let v24 : string = $"env.get_environment_variable / target: {v23} / var: {v0}"
    let v25 : string = failwith<string> v24
    let _v1 = v25 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : string = "process.env[$0] ?? \"\""
    let v27 : string = Fable.Core.JsInterop.emitJsExpr v0 v26 
    let _v1 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v28 : string = "os"
    let v29 : IOsEnviron = Fable.Core.PyInterop.importAll v28 
    let v30 : string = "v29.environ"
    let v31 : obj = Fable.Core.PyInterop.emitPyExpr () v30 
    let v34 : string = "v31.get($0)"
    let v35 : string = Fable.Core.PyInterop.emitPyExpr v0 v34 
    let mutable _v35 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v38 : (string -> string option) = Option.ofObj
    let v39 : string option = v38 v35
    v39 
    #else
    Some v35 
    #endif
    |> fun x -> _v35 <- Some x
    let v40 : string option = match _v35 with Some x -> x | None -> failwith "optionm'.of_obj / _v35=None"
    let v43 : (string -> US5) = method6()
    let v44 : US5 option = v40 |> Option.map v43 
    let v55 : US5 = US5_1
    let v56 : US5 = v44 |> Option.defaultValue v55 
    let v63 : string =
        match v56 with
        | US5_1 -> (* None *)
            let v61 : string = ""
            v61
        | US5_0(v60) -> (* Some *)
            v60
    let _v1 = v63 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : US3 = US3_1
    let v65 : US4 = US4_0(v64)
    let v66 : string = $"env.get_environment_variable / target: {v65} / var: {v0}"
    let v67 : string = failwith<string> v66
    let _v1 = v67 
    #endif
#else
    let v68 : (string -> string) = System.Environment.GetEnvironmentVariable
    let v69 : string = v68 v0
    let mutable _v69 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v70 : (string -> string option) = Option.ofObj
    let v71 : string option = v70 v69
    v71 
    #else
    Some v69 
    #endif
    |> fun x -> _v69 <- Some x
    let v72 : string option = match _v69 with Some x -> x | None -> failwith "optionm'.of_obj / _v69=None"
    let v75 : (string -> US5) = method6()
    let v76 : US5 option = v72 |> Option.map v75 
    let v87 : US5 = US5_1
    let v88 : US5 = v76 |> Option.defaultValue v87 
    let v95 : string =
        match v88 with
        | US5_1 -> (* None *)
            let v93 : string = ""
            v93
        | US5_0(v92) -> (* Some *)
            v92
    let _v1 = v95 
    #endif
    let v96 : string = _v1 
    v96
and method2 () : struct (US1 * US2) =
    let v0 : string = "TRACE_LEVEL"
    let v1 : string = method3(v0)
    
    
    
    
    
    let v2 : bool = "Verbose" = v1
    let v6 : US1 =
        if v2 then
            let v3 : US0 = US0_0
            US1_0(v3)
        else
            US1_1
    let v47 : US1 =
        match v6 with
        | US1_1 -> (* None *)
            let v9 : bool = "Debug" = v1
            let v13 : US1 =
                if v9 then
                    let v10 : US0 = US0_1
                    US1_0(v10)
                else
                    US1_1
            match v13 with
            | US1_1 -> (* None *)
                let v16 : bool = "Info" = v1
                let v20 : US1 =
                    if v16 then
                        let v17 : US0 = US0_2
                        US1_0(v17)
                    else
                        US1_1
                match v20 with
                | US1_1 -> (* None *)
                    let v23 : bool = "Warning" = v1
                    let v27 : US1 =
                        if v23 then
                            let v24 : US0 = US0_3
                            US1_0(v24)
                        else
                            US1_1
                    match v27 with
                    | US1_1 -> (* None *)
                        let v30 : bool = "Critical" = v1
                        let v34 : US1 =
                            if v30 then
                                let v31 : US0 = US0_4
                                US1_0(v31)
                            else
                                US1_1
                        match v34 with
                        | US1_1 -> (* None *)
                            US1_1
                        | US1_0(v35) -> (* Some *)
                            US1_0(v35)
                    | US1_0(v28) -> (* Some *)
                        US1_0(v28)
                | US1_0(v21) -> (* Some *)
                    US1_0(v21)
            | US1_0(v14) -> (* Some *)
                US1_0(v14)
        | US1_0(v7) -> (* Some *)
            US1_0(v7)
    let v48 : string = "AUTOMATION"
    let v49 : string = method3(v48)
    let v50 : string = "True"
    let v51 : bool = v49 <> v50 
    let v107 : US2 =
        if v51 then
            US2_1
        else
            let v55 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v56 : System.DateTime = System.DateTime.Now
            let _v55 = v56 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v57 : System.DateTime = System.DateTime.Now
            let _v55 = v57 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v58 : System.DateTime = null |> unbox<System.DateTime>
            let _v55 = v58 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v61 : System.DateTime = System.DateTime.Now
            let _v55 = v61 
            #endif
#if FABLE_COMPILER_PYTHON
            let v62 : System.DateTime = System.DateTime.Now
            let _v55 = v62 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v63 : System.DateTime = System.DateTime.Now
            let _v55 = v63 
            #endif
#else
            let v64 : System.DateTime = System.DateTime.Now
            let _v55 = v64 
            #endif
            let v65 : System.DateTime = _v55 
            let v70 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v71 : (System.DateTime -> int64) = _.Ticks
            let v72 : int64 = v71 v65
            let _v70 = v72 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v73 : (System.DateTime -> int64) = _.Ticks
            let v74 : int64 = v73 v65
            let _v70 = v74 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v75 : int64 = null |> unbox<int64>
            let _v70 = v75 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v78 : (System.DateTime -> int64) = _.Ticks
            let v79 : int64 = v78 v65
            let _v70 = v79 
            #endif
#if FABLE_COMPILER_PYTHON
            let v80 : (System.DateTime -> int64) = _.Ticks
            let v81 : int64 = v80 v65
            let _v70 = v81 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v82 : (System.DateTime -> int64) = _.Ticks
            let v83 : int64 = v82 v65
            let _v70 = v83 
            #endif
#else
            let v84 : (System.DateTime -> int64) = _.Ticks
            let v85 : int64 = v84 v65
            let _v70 = v85 
            #endif
            let v86 : int64 = _v70 
            let v103 : int64 = v86 |> int64 
            US2_0(v103)
    struct (v47, v107)
and closure4 () (v0 : string) : unit =
    ()
and method1 (v0 : US0) : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v2 : US1, v3 : US2) = method2()
    let _v1 = struct (v2, v3) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : US1 = US1_1
    let v5 : US2 = US2_1
    let _v1 = struct (v4, v5) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "AUTOMATION"
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "String::from($0)"
    let v12 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "String::from($0)"
    let v14 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "String::from($0)"
    let v16 : std_string_String = Fable.Core.RustInterop.emitRustExpr v9 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v23 
    #endif
#else
    let v26 : std_string_String = v9 |> unbox<std_string_String>
    let _v10 = v26 
    #endif
    let v29 : std_string_String = _v10 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v29 v34 
    let _v7 = v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v36 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v36 
    let v38 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v39 : string = "String::from($0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v39 
    let _v38 = v40 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v41 : string = "String::from($0)"
    let v42 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v41 
    let _v38 = v42 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v43 : string = "String::from($0)"
    let v44 : std_string_String = Fable.Core.RustInterop.emitRustExpr v37 v43 
    let _v38 = v44 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v45 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v45 
    #endif
#if FABLE_COMPILER_PYTHON
    let v48 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v48 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v51 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v51 
    #endif
#else
    let v54 : std_string_String = v37 |> unbox<std_string_String>
    let _v38 = v54 
    #endif
    let v57 : std_string_String = _v38 
    let v62 : string = "fable_library_rust::String_::fromString($0)"
    let v63 : string = Fable.Core.RustInterop.emitRustExpr v57 v62 
    let _v7 = v63 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v64 : string = "option_env!(\"" + v6 + "\").unwrap_or(\"\")"
    let v65 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v64 
    let v66 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v67 : string = "String::from($0)"
    let v68 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v67 
    let _v66 = v68 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v69 : string = "String::from($0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v69 
    let _v66 = v70 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v71 : string = "String::from($0)"
    let v72 : std_string_String = Fable.Core.RustInterop.emitRustExpr v65 v71 
    let _v66 = v72 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v79 
    #endif
#else
    let v82 : std_string_String = v65 |> unbox<std_string_String>
    let _v66 = v82 
    #endif
    let v85 : std_string_String = _v66 
    let v90 : string = "fable_library_rust::String_::fromString($0)"
    let v91 : string = Fable.Core.RustInterop.emitRustExpr v85 v90 
    let _v7 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v92 : string = null |> unbox<string>
    let _v7 = v92 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : string = null |> unbox<string>
    let _v7 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v98 : string = null |> unbox<string>
    let _v7 = v98 
    #endif
#else
    let v101 : string = null |> unbox<string>
    let _v7 = v101 
    #endif
    let v104 : string = _v7 
    let v109 : string = "True"
    let v110 : bool = v104 <> v109 
    let v121 : US2 =
        if v110 then
            US2_1
        else
            let v114 : string = $"near_sdk::env::block_timestamp()"
            let v115 : uint64 = Fable.Core.RustInterop.emitRustExpr () v114 
            let v116 : (uint64 -> int64) = int64
            let v117 : int64 = v116 v115
            US2_0(v117)
    let v122 : US1 = US1_1
    let _v1 = struct (v122, v121) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v123 : US1, v124 : US2) = method2()
    let _v1 = struct (v123, v124) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v125 : US1, v126 : US2) = method2()
    let _v1 = struct (v125, v126) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v127 : US1, v128 : US2) = method2()
    let _v1 = struct (v127, v128) 
    #endif
#else
    let struct (v129 : US1, v130 : US2) = method2()
    let _v1 = struct (v129, v130) 
    #endif
    let struct (v131 : US1, v132 : US2) = _v1 
    let v137 : Mut0 = {l0 = 1L} : Mut0
    let v138 : (string -> unit) = closure4()
    let v139 : Mut1 = {l0 = v138} : Mut1
    let v140 : Mut2 = {l0 = true} : Mut2
    let v141 : string = ""
    let v142 : Mut3 = {l0 = v141} : Mut3
    let v145 : US0 =
        match v131 with
        | US1_1 -> (* None *)
            v0
        | US1_0(v143) -> (* Some *)
            v143
    let v146 : Mut4 = {l0 = v145} : Mut4
    let v153 : int64 option =
        match v132 with
        | US2_1 -> (* None *)
            let v151 : int64 option = None
            v151
        | US2_0(v147) -> (* Some *)
            let v148 : int64 option = Some v147 
            v148
    struct (v137, v139, v140, v142, v146, v153)
and closure2 () () : unit =
    let v0 : bool = TraceState.trace_state.IsNone
    if v0 then
        let v1 : US0 = US0_0
        let struct (v2 : Mut0, v3 : Mut1, v4 : Mut2, v5 : Mut3, v6 : Mut4, v7 : int64 option) = method1(v1)
        let v8 : struct (Mut0 * Mut1 * Mut2 * Mut3 * Mut4 * int64 option) option = Some struct (v2, v3, v4, v5, v6, v7) 
        TraceState.trace_state <- v8 
        ()
and method7 (v0 : US0) : bool =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : US0 = v21.l0
    let v36 : bool = v19.l0
    let v37 : bool = v36 = false
    if v37 then
        false
    else
        let v38 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v0
        let v39 : int32 = [ US0_0, 0; US0_1, 1; US0_2, 2; US0_3, 3; US0_4, 4 ] |> Map |> Map.find v35
        let v40 : bool = v38 >= v39
        v40
and closure6 () (v0 : int64) : US2 =
    US2_0(v0)
and method9 () : (int64 -> US2) =
    closure6()
and method10 () : string =
    let v0 : string = "hh:mm:ss"
    v0
and method11 () : string =
    let v0 : string = "HH:mm:ss"
    v0
and method8 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option) : string =
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : (int64 -> US2) = method9()
    let v8 : US2 option = v5 |> Option.map v7 
    let v19 : US2 = US2_1
    let v20 : US2 = v8 |> Option.defaultValue v19 
    let v117 : System.DateTime =
        match v20 with
        | US2_1 -> (* None *)
            let v101 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v102 : System.DateTime = System.DateTime.Now
            let _v101 = v102 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v103 : System.DateTime = System.DateTime.Now
            let _v101 = v103 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v104 : System.DateTime = null |> unbox<System.DateTime>
            let _v101 = v104 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v107 : System.DateTime = System.DateTime.Now
            let _v101 = v107 
            #endif
#if FABLE_COMPILER_PYTHON
            let v108 : System.DateTime = System.DateTime.Now
            let _v101 = v108 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v109 : System.DateTime = System.DateTime.Now
            let _v101 = v109 
            #endif
#else
            let v110 : System.DateTime = System.DateTime.Now
            let _v101 = v110 
            #endif
            let v111 : System.DateTime = _v101 
            v111
        | US2_0(v24) -> (* Some *)
            let v25 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v26 : System.DateTime = System.DateTime.Now
            let _v25 = v26 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : System.DateTime = System.DateTime.Now
            let _v25 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : System.DateTime = null |> unbox<System.DateTime>
            let _v25 = v28 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : System.DateTime = System.DateTime.Now
            let _v25 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : System.DateTime = System.DateTime.Now
            let _v25 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v33 : System.DateTime = System.DateTime.Now
            let _v25 = v33 
            #endif
#else
            let v34 : System.DateTime = System.DateTime.Now
            let _v25 = v34 
            #endif
            let v35 : System.DateTime = _v25 
            let v40 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v41 : (System.DateTime -> int64) = _.Ticks
            let v42 : int64 = v41 v35
            let _v40 = v42 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v43 : (System.DateTime -> int64) = _.Ticks
            let v44 : int64 = v43 v35
            let _v40 = v44 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v45 : int64 = null |> unbox<int64>
            let _v40 = v45 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v48 : (System.DateTime -> int64) = _.Ticks
            let v49 : int64 = v48 v35
            let _v40 = v49 
            #endif
#if FABLE_COMPILER_PYTHON
            let v50 : (System.DateTime -> int64) = _.Ticks
            let v51 : int64 = v50 v35
            let _v40 = v51 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v52 : (System.DateTime -> int64) = _.Ticks
            let v53 : int64 = v52 v35
            let _v40 = v53 
            #endif
#else
            let v54 : (System.DateTime -> int64) = _.Ticks
            let v55 : int64 = v54 v35
            let _v40 = v55 
            #endif
            let v56 : int64 = _v40 
            let v73 : int64 = v56 |> int64 
            let v76 : int64 = v73 - v24
            let v77 : System.TimeSpan = v76 |> System.TimeSpan 
            let v82 : (System.TimeSpan -> int32) = _.Hours
            let v83 : int32 = v82 v77
            let v86 : (System.TimeSpan -> int32) = _.Minutes
            let v87 : int32 = v86 v77
            let v90 : (System.TimeSpan -> int32) = _.Seconds
            let v91 : int32 = v90 v77
            let v94 : (System.TimeSpan -> int32) = _.Milliseconds
            let v95 : int32 = v94 v77
            let v98 : System.DateTime = System.DateTime (1, 1, 1, v83, v87, v91, v95)
            v98
    let v118 : string = method10()
    let v121 : bool = v118 = ""
    let v123 : string =
        if v121 then
            let v122 : string = "M-d-y hh:mm:ss tt"
            v122
        else
            v118
    let v124 : (string -> string) = v117.ToString
    let v125 : string = v124 v123
    let _v6 = v125 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v139 : (int64 -> US2) = method9()
    let v140 : US2 option = v5 |> Option.map v139 
    let v151 : US2 = US2_1
    let v152 : US2 = v140 |> Option.defaultValue v151 
    let v249 : System.DateTime =
        match v152 with
        | US2_1 -> (* None *)
            let v233 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v234 : System.DateTime = System.DateTime.Now
            let _v233 = v234 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v235 : System.DateTime = System.DateTime.Now
            let _v233 = v235 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v236 : System.DateTime = null |> unbox<System.DateTime>
            let _v233 = v236 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v239 : System.DateTime = System.DateTime.Now
            let _v233 = v239 
            #endif
#if FABLE_COMPILER_PYTHON
            let v240 : System.DateTime = System.DateTime.Now
            let _v233 = v240 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v241 : System.DateTime = System.DateTime.Now
            let _v233 = v241 
            #endif
#else
            let v242 : System.DateTime = System.DateTime.Now
            let _v233 = v242 
            #endif
            let v243 : System.DateTime = _v233 
            v243
        | US2_0(v156) -> (* Some *)
            let v157 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v158 : System.DateTime = System.DateTime.Now
            let _v157 = v158 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v159 : System.DateTime = System.DateTime.Now
            let _v157 = v159 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v160 : System.DateTime = null |> unbox<System.DateTime>
            let _v157 = v160 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v163 : System.DateTime = System.DateTime.Now
            let _v157 = v163 
            #endif
#if FABLE_COMPILER_PYTHON
            let v164 : System.DateTime = System.DateTime.Now
            let _v157 = v164 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v165 : System.DateTime = System.DateTime.Now
            let _v157 = v165 
            #endif
#else
            let v166 : System.DateTime = System.DateTime.Now
            let _v157 = v166 
            #endif
            let v167 : System.DateTime = _v157 
            let v172 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v173 : (System.DateTime -> int64) = _.Ticks
            let v174 : int64 = v173 v167
            let _v172 = v174 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v175 : (System.DateTime -> int64) = _.Ticks
            let v176 : int64 = v175 v167
            let _v172 = v176 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v177 : int64 = null |> unbox<int64>
            let _v172 = v177 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v180 : (System.DateTime -> int64) = _.Ticks
            let v181 : int64 = v180 v167
            let _v172 = v181 
            #endif
#if FABLE_COMPILER_PYTHON
            let v182 : (System.DateTime -> int64) = _.Ticks
            let v183 : int64 = v182 v167
            let _v172 = v183 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v184 : (System.DateTime -> int64) = _.Ticks
            let v185 : int64 = v184 v167
            let _v172 = v185 
            #endif
#else
            let v186 : (System.DateTime -> int64) = _.Ticks
            let v187 : int64 = v186 v167
            let _v172 = v187 
            #endif
            let v188 : int64 = _v172 
            let v205 : int64 = v188 |> int64 
            let v208 : int64 = v205 - v156
            let v209 : System.TimeSpan = v208 |> System.TimeSpan 
            let v214 : (System.TimeSpan -> int32) = _.Hours
            let v215 : int32 = v214 v209
            let v218 : (System.TimeSpan -> int32) = _.Minutes
            let v219 : int32 = v218 v209
            let v222 : (System.TimeSpan -> int32) = _.Seconds
            let v223 : int32 = v222 v209
            let v226 : (System.TimeSpan -> int32) = _.Milliseconds
            let v227 : int32 = v226 v209
            let v230 : System.DateTime = System.DateTime (1, 1, 1, v215, v219, v223, v227)
            v230
    let v250 : string = method10()
    let v253 : bool = v250 = ""
    let v255 : string =
        if v253 then
            let v254 : string = "M-d-y hh:mm:ss tt"
            v254
        else
            v250
    let v256 : (string -> string) = v249.ToString
    let v257 : string = v256 v255
    let _v6 = v257 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v271 : string = $"near_sdk::env::block_timestamp()"
    let v272 : uint64 = Fable.Core.RustInterop.emitRustExpr () v271 
    let v273 : (int64 -> US2) = method9()
    let v274 : US2 option = v5 |> Option.map v273 
    let v285 : US2 = US2_1
    let v286 : US2 = v274 |> Option.defaultValue v285 
    let v297 : uint64 =
        match v286 with
        | US2_1 -> (* None *)
            v272
        | US2_0(v290) -> (* Some *)
            let v291 : (int64 -> uint64) = uint64
            let v292 : uint64 = v291 v290
            let v295 : uint64 = v272 - v292
            v295
    let v298 : uint64 = v297 / 1000000000UL
    let v299 : uint64 = v298 % 60UL
    let v300 : uint64 = v298 / 60UL
    let v301 : uint64 = v300 % 60UL
    let v302 : uint64 = v298 / 3600UL
    let v303 : uint64 = v302 % 24UL
    let v304 : string = $"format!(\"{{:02}}:{{:02}}:{{:02}}\", $0, $1, $2)"
    let v305 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v303, v301, v299) v304 
    let v306 : string = "fable_library_rust::String_::fromString($0)"
    let v307 : string = Fable.Core.RustInterop.emitRustExpr v305 v306 
    let _v6 = v307 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v308 : (int64 -> US2) = method9()
    let v309 : US2 option = v5 |> Option.map v308 
    let v320 : US2 = US2_1
    let v321 : US2 = v309 |> Option.defaultValue v320 
    let v418 : System.DateTime =
        match v321 with
        | US2_1 -> (* None *)
            let v402 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v403 : System.DateTime = System.DateTime.Now
            let _v402 = v403 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v404 : System.DateTime = System.DateTime.Now
            let _v402 = v404 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v405 : System.DateTime = null |> unbox<System.DateTime>
            let _v402 = v405 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v408 : System.DateTime = System.DateTime.Now
            let _v402 = v408 
            #endif
#if FABLE_COMPILER_PYTHON
            let v409 : System.DateTime = System.DateTime.Now
            let _v402 = v409 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v410 : System.DateTime = System.DateTime.Now
            let _v402 = v410 
            #endif
#else
            let v411 : System.DateTime = System.DateTime.Now
            let _v402 = v411 
            #endif
            let v412 : System.DateTime = _v402 
            v412
        | US2_0(v325) -> (* Some *)
            let v326 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v327 : System.DateTime = System.DateTime.Now
            let _v326 = v327 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v328 : System.DateTime = System.DateTime.Now
            let _v326 = v328 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v329 : System.DateTime = null |> unbox<System.DateTime>
            let _v326 = v329 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v332 : System.DateTime = System.DateTime.Now
            let _v326 = v332 
            #endif
#if FABLE_COMPILER_PYTHON
            let v333 : System.DateTime = System.DateTime.Now
            let _v326 = v333 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v334 : System.DateTime = System.DateTime.Now
            let _v326 = v334 
            #endif
#else
            let v335 : System.DateTime = System.DateTime.Now
            let _v326 = v335 
            #endif
            let v336 : System.DateTime = _v326 
            let v341 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v342 : (System.DateTime -> int64) = _.Ticks
            let v343 : int64 = v342 v336
            let _v341 = v343 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v344 : (System.DateTime -> int64) = _.Ticks
            let v345 : int64 = v344 v336
            let _v341 = v345 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v346 : int64 = null |> unbox<int64>
            let _v341 = v346 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v349 : (System.DateTime -> int64) = _.Ticks
            let v350 : int64 = v349 v336
            let _v341 = v350 
            #endif
#if FABLE_COMPILER_PYTHON
            let v351 : (System.DateTime -> int64) = _.Ticks
            let v352 : int64 = v351 v336
            let _v341 = v352 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v353 : (System.DateTime -> int64) = _.Ticks
            let v354 : int64 = v353 v336
            let _v341 = v354 
            #endif
#else
            let v355 : (System.DateTime -> int64) = _.Ticks
            let v356 : int64 = v355 v336
            let _v341 = v356 
            #endif
            let v357 : int64 = _v341 
            let v374 : int64 = v357 |> int64 
            let v377 : int64 = v374 - v325
            let v378 : System.TimeSpan = v377 |> System.TimeSpan 
            let v383 : (System.TimeSpan -> int32) = _.Hours
            let v384 : int32 = v383 v378
            let v387 : (System.TimeSpan -> int32) = _.Minutes
            let v388 : int32 = v387 v378
            let v391 : (System.TimeSpan -> int32) = _.Seconds
            let v392 : int32 = v391 v378
            let v395 : (System.TimeSpan -> int32) = _.Milliseconds
            let v396 : int32 = v395 v378
            let v399 : System.DateTime = System.DateTime (1, 1, 1, v384, v388, v392, v396)
            v399
    let v419 : string = method11()
    let v422 : bool = v419 = ""
    let v424 : string =
        if v422 then
            let v423 : string = "M-d-y hh:mm:ss tt"
            v423
        else
            v419
    let v425 : (string -> string) = v418.ToString
    let v426 : string = v425 v424
    let _v6 = v426 
    #endif
#if FABLE_COMPILER_PYTHON
    let v440 : (int64 -> US2) = method9()
    let v441 : US2 option = v5 |> Option.map v440 
    let v452 : US2 = US2_1
    let v453 : US2 = v441 |> Option.defaultValue v452 
    let v550 : System.DateTime =
        match v453 with
        | US2_1 -> (* None *)
            let v534 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v535 : System.DateTime = System.DateTime.Now
            let _v534 = v535 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v536 : System.DateTime = System.DateTime.Now
            let _v534 = v536 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v537 : System.DateTime = null |> unbox<System.DateTime>
            let _v534 = v537 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v540 : System.DateTime = System.DateTime.Now
            let _v534 = v540 
            #endif
#if FABLE_COMPILER_PYTHON
            let v541 : System.DateTime = System.DateTime.Now
            let _v534 = v541 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v542 : System.DateTime = System.DateTime.Now
            let _v534 = v542 
            #endif
#else
            let v543 : System.DateTime = System.DateTime.Now
            let _v534 = v543 
            #endif
            let v544 : System.DateTime = _v534 
            v544
        | US2_0(v457) -> (* Some *)
            let v458 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v459 : System.DateTime = System.DateTime.Now
            let _v458 = v459 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v460 : System.DateTime = System.DateTime.Now
            let _v458 = v460 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v461 : System.DateTime = null |> unbox<System.DateTime>
            let _v458 = v461 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v464 : System.DateTime = System.DateTime.Now
            let _v458 = v464 
            #endif
#if FABLE_COMPILER_PYTHON
            let v465 : System.DateTime = System.DateTime.Now
            let _v458 = v465 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v466 : System.DateTime = System.DateTime.Now
            let _v458 = v466 
            #endif
#else
            let v467 : System.DateTime = System.DateTime.Now
            let _v458 = v467 
            #endif
            let v468 : System.DateTime = _v458 
            let v473 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v474 : (System.DateTime -> int64) = _.Ticks
            let v475 : int64 = v474 v468
            let _v473 = v475 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v476 : (System.DateTime -> int64) = _.Ticks
            let v477 : int64 = v476 v468
            let _v473 = v477 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v478 : int64 = null |> unbox<int64>
            let _v473 = v478 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v481 : (System.DateTime -> int64) = _.Ticks
            let v482 : int64 = v481 v468
            let _v473 = v482 
            #endif
#if FABLE_COMPILER_PYTHON
            let v483 : (System.DateTime -> int64) = _.Ticks
            let v484 : int64 = v483 v468
            let _v473 = v484 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v485 : (System.DateTime -> int64) = _.Ticks
            let v486 : int64 = v485 v468
            let _v473 = v486 
            #endif
#else
            let v487 : (System.DateTime -> int64) = _.Ticks
            let v488 : int64 = v487 v468
            let _v473 = v488 
            #endif
            let v489 : int64 = _v473 
            let v506 : int64 = v489 |> int64 
            let v509 : int64 = v506 - v457
            let v510 : System.TimeSpan = v509 |> System.TimeSpan 
            let v515 : (System.TimeSpan -> int32) = _.Hours
            let v516 : int32 = v515 v510
            let v519 : (System.TimeSpan -> int32) = _.Minutes
            let v520 : int32 = v519 v510
            let v523 : (System.TimeSpan -> int32) = _.Seconds
            let v524 : int32 = v523 v510
            let v527 : (System.TimeSpan -> int32) = _.Milliseconds
            let v528 : int32 = v527 v510
            let v531 : System.DateTime = System.DateTime (1, 1, 1, v516, v520, v524, v528)
            v531
    let v551 : string = method11()
    let v554 : bool = v551 = ""
    let v556 : string =
        if v554 then
            let v555 : string = "M-d-y hh:mm:ss tt"
            v555
        else
            v551
    let v557 : (string -> string) = v550.ToString
    let v558 : string = v557 v556
    let _v6 = v558 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v572 : (int64 -> US2) = method9()
    let v573 : US2 option = v5 |> Option.map v572 
    let v584 : US2 = US2_1
    let v585 : US2 = v573 |> Option.defaultValue v584 
    let v682 : System.DateTime =
        match v585 with
        | US2_1 -> (* None *)
            let v666 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v667 : System.DateTime = System.DateTime.Now
            let _v666 = v667 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v668 : System.DateTime = System.DateTime.Now
            let _v666 = v668 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v669 : System.DateTime = null |> unbox<System.DateTime>
            let _v666 = v669 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v672 : System.DateTime = System.DateTime.Now
            let _v666 = v672 
            #endif
#if FABLE_COMPILER_PYTHON
            let v673 : System.DateTime = System.DateTime.Now
            let _v666 = v673 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v674 : System.DateTime = System.DateTime.Now
            let _v666 = v674 
            #endif
#else
            let v675 : System.DateTime = System.DateTime.Now
            let _v666 = v675 
            #endif
            let v676 : System.DateTime = _v666 
            v676
        | US2_0(v589) -> (* Some *)
            let v590 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v591 : System.DateTime = System.DateTime.Now
            let _v590 = v591 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v592 : System.DateTime = System.DateTime.Now
            let _v590 = v592 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v593 : System.DateTime = null |> unbox<System.DateTime>
            let _v590 = v593 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v596 : System.DateTime = System.DateTime.Now
            let _v590 = v596 
            #endif
#if FABLE_COMPILER_PYTHON
            let v597 : System.DateTime = System.DateTime.Now
            let _v590 = v597 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v598 : System.DateTime = System.DateTime.Now
            let _v590 = v598 
            #endif
#else
            let v599 : System.DateTime = System.DateTime.Now
            let _v590 = v599 
            #endif
            let v600 : System.DateTime = _v590 
            let v605 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v606 : (System.DateTime -> int64) = _.Ticks
            let v607 : int64 = v606 v600
            let _v605 = v607 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v608 : (System.DateTime -> int64) = _.Ticks
            let v609 : int64 = v608 v600
            let _v605 = v609 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v610 : int64 = null |> unbox<int64>
            let _v605 = v610 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v613 : (System.DateTime -> int64) = _.Ticks
            let v614 : int64 = v613 v600
            let _v605 = v614 
            #endif
#if FABLE_COMPILER_PYTHON
            let v615 : (System.DateTime -> int64) = _.Ticks
            let v616 : int64 = v615 v600
            let _v605 = v616 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v617 : (System.DateTime -> int64) = _.Ticks
            let v618 : int64 = v617 v600
            let _v605 = v618 
            #endif
#else
            let v619 : (System.DateTime -> int64) = _.Ticks
            let v620 : int64 = v619 v600
            let _v605 = v620 
            #endif
            let v621 : int64 = _v605 
            let v638 : int64 = v621 |> int64 
            let v641 : int64 = v638 - v589
            let v642 : System.TimeSpan = v641 |> System.TimeSpan 
            let v647 : (System.TimeSpan -> int32) = _.Hours
            let v648 : int32 = v647 v642
            let v651 : (System.TimeSpan -> int32) = _.Minutes
            let v652 : int32 = v651 v642
            let v655 : (System.TimeSpan -> int32) = _.Seconds
            let v656 : int32 = v655 v642
            let v659 : (System.TimeSpan -> int32) = _.Milliseconds
            let v660 : int32 = v659 v642
            let v663 : System.DateTime = System.DateTime (1, 1, 1, v648, v652, v656, v660)
            v663
    let v683 : string = method11()
    let v686 : bool = v683 = ""
    let v688 : string =
        if v686 then
            let v687 : string = "M-d-y hh:mm:ss tt"
            v687
        else
            v683
    let v689 : (string -> string) = v682.ToString
    let v690 : string = v689 v688
    let _v6 = v690 
    #endif
#else
    let v704 : (int64 -> US2) = method9()
    let v705 : US2 option = v5 |> Option.map v704 
    let v716 : US2 = US2_1
    let v717 : US2 = v705 |> Option.defaultValue v716 
    let v814 : System.DateTime =
        match v717 with
        | US2_1 -> (* None *)
            let v798 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v799 : System.DateTime = System.DateTime.Now
            let _v798 = v799 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v800 : System.DateTime = System.DateTime.Now
            let _v798 = v800 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v801 : System.DateTime = null |> unbox<System.DateTime>
            let _v798 = v801 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v804 : System.DateTime = System.DateTime.Now
            let _v798 = v804 
            #endif
#if FABLE_COMPILER_PYTHON
            let v805 : System.DateTime = System.DateTime.Now
            let _v798 = v805 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v806 : System.DateTime = System.DateTime.Now
            let _v798 = v806 
            #endif
#else
            let v807 : System.DateTime = System.DateTime.Now
            let _v798 = v807 
            #endif
            let v808 : System.DateTime = _v798 
            v808
        | US2_0(v721) -> (* Some *)
            let v722 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v723 : System.DateTime = System.DateTime.Now
            let _v722 = v723 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v724 : System.DateTime = System.DateTime.Now
            let _v722 = v724 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v725 : System.DateTime = null |> unbox<System.DateTime>
            let _v722 = v725 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v728 : System.DateTime = System.DateTime.Now
            let _v722 = v728 
            #endif
#if FABLE_COMPILER_PYTHON
            let v729 : System.DateTime = System.DateTime.Now
            let _v722 = v729 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v730 : System.DateTime = System.DateTime.Now
            let _v722 = v730 
            #endif
#else
            let v731 : System.DateTime = System.DateTime.Now
            let _v722 = v731 
            #endif
            let v732 : System.DateTime = _v722 
            let v737 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v738 : (System.DateTime -> int64) = _.Ticks
            let v739 : int64 = v738 v732
            let _v737 = v739 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v740 : (System.DateTime -> int64) = _.Ticks
            let v741 : int64 = v740 v732
            let _v737 = v741 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v742 : int64 = null |> unbox<int64>
            let _v737 = v742 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v745 : (System.DateTime -> int64) = _.Ticks
            let v746 : int64 = v745 v732
            let _v737 = v746 
            #endif
#if FABLE_COMPILER_PYTHON
            let v747 : (System.DateTime -> int64) = _.Ticks
            let v748 : int64 = v747 v732
            let _v737 = v748 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v749 : (System.DateTime -> int64) = _.Ticks
            let v750 : int64 = v749 v732
            let _v737 = v750 
            #endif
#else
            let v751 : (System.DateTime -> int64) = _.Ticks
            let v752 : int64 = v751 v732
            let _v737 = v752 
            #endif
            let v753 : int64 = _v737 
            let v770 : int64 = v753 |> int64 
            let v773 : int64 = v770 - v721
            let v774 : System.TimeSpan = v773 |> System.TimeSpan 
            let v779 : (System.TimeSpan -> int32) = _.Hours
            let v780 : int32 = v779 v774
            let v783 : (System.TimeSpan -> int32) = _.Minutes
            let v784 : int32 = v783 v774
            let v787 : (System.TimeSpan -> int32) = _.Seconds
            let v788 : int32 = v787 v774
            let v791 : (System.TimeSpan -> int32) = _.Milliseconds
            let v792 : int32 = v791 v774
            let v795 : System.DateTime = System.DateTime (1, 1, 1, v780, v784, v788, v792)
            v795
    let v815 : string = method11()
    let v818 : bool = v815 = ""
    let v820 : string =
        if v818 then
            let v819 : string = "M-d-y hh:mm:ss tt"
            v819
        else
            v815
    let v821 : (string -> string) = v814.ToString
    let v822 : string = v821 v820
    let _v6 = v822 
    #endif
    let v836 : string = _v6 
    v836
and method14 () : string =
    let v0 : string = ""
    v0
and closure7 (v0 : Mut3, v1 : string) () : unit =
    let v2 : string = v0.l0
    let v3 : string = v2 + v1 
    v0.l0 <- v3
    ()
and method13 (v0 : char) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"{v0}"
    let v6 : unit = ()
    let v7 : (unit -> unit) = closure7(v2, v3)
    let v8 : unit = (fun () -> v7 (); v6) ()
    let v11 : string = v2.l0
    v11
and method15 () : string =
    let v0 : string = "\u001b[0m"
    v0
and method12 () : string =
    
    
    
    
    
    let v0 : string = "Debug"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_blue"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_blue"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_blue"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[94m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[94m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[94m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[94m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method17 (v0 : (string [])) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "args"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"%A{v0}"
    let v33 : string = $"{v30}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = " }"
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v2, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = v2.l0
    v50
and method18 (v0 : string) : string =
    let v1 : char list = []
    let v2 : (char list -> (char [])) = List.toArray
    let v3 : (char []) = v2 v1
    let v6 : string = v0.TrimStart v3 
    let v30 : char list = []
    let v31 : char list = '/' :: v30 
    let v34 : char list = ' ' :: v31 
    let v37 : (char list -> (char [])) = List.toArray
    let v38 : (char []) = v37 v34
    let v41 : string = v6.TrimEnd v38 
    v41
and method16 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : (string [])) : string =
    let v9 : string = method17(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.main"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure8 (v0 : Mut0) () : unit =
    let v1 : int64 = v0.l0
    let v2 : int64 = v1 + 1L
    v0.l0 <- v2
    ()
and closure10 (v0 : string) () : unit =
    let v1 : (string -> unit) = System.Console.WriteLine
    v1 v0
and closure9 () (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure10(v0)
    let v3 : unit = (fun () -> v2 (); v1) ()
    ()
and method19 (v0 : string) : unit =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure8(v17)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : (string -> unit) = closure9()
    let v41 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v42 
    let _v41 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = @"println!(""{}"", $0)"
    Fable.Core.RustInterop.emitRustExpr v0 v43 
    let _v41 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v44 : string = v20.l0
    let v45 : bool = v44 = ""
    let v53 : string =
        if v45 then
            v0
        else
            let v46 : bool = v0 = ""
            if v46 then
                let v47 : string = v20.l0
                v47
            else
                let v48 : string = v20.l0
                let v49 : string = "\n"
                let v50 : string = v48 + v49 
                let v51 : string = v50 + v0 
                v51
    let v54 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v55 
    let _v54 = v56 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : string = "&*$0"
    let v58 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v57 
    let _v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v59 : string = "&*$0"
    let v60 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v53 v59 
    let _v54 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v61 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v61 
    #endif
#if FABLE_COMPILER_PYTHON
    let v64 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v64 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v67 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v67 
    #endif
#else
    let v70 : Ref<Str> = v53 |> unbox<Ref<Str>>
    let _v54 = v70 
    #endif
    let v73 : Ref<Str> = _v54 
    let v78 : string = $"$0.chars()"
    let v79 : Mut<_> = Fable.Core.RustInterop.emitRustExpr v73 v78 
    let v80 : string = "$0"
    let v81 : _ = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.collect::<Vec<_>>()"
    let v83 : Vec<char> = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.chunks(15000).map(|x| x.into_iter().map(|x| x.clone()).collect::<Vec<_>>()).collect::<Vec<_>>()"
    let v85 : Vec<Vec<char>> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v87 : bool = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "x"
    let v89 : Vec<char> = Fable.Core.RustInterop.emitRustExpr () v88 
    let v90 : string = "String::from_iter($0)"
    let v91 : std_string_String = Fable.Core.RustInterop.emitRustExpr v89 v90 
    let v92 : string = "true; $0 }).collect::<Vec<_>>()"
    let v93 : bool = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : string = "_vec_map"
    let v95 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v94 
    let v96 : string = "$0.len()"
    let v97 : unativeint = Fable.Core.RustInterop.emitRustExpr v95 v96 
    let v98 : int32 = v97 |> int32 
    let v105 : string = ""
    let v106 : bool = v0 <> v105 
    let v110 : bool =
        if v106 then
            let v109 : bool = v98 <= 1
            v109
        else
            false
    if v110 then
        v20.l0 <- v53
        ()
    else
        v20.l0 <- v105
        let v111 : string = "true; $0.into_iter().for_each(|x| { //"
        let v112 : bool = Fable.Core.RustInterop.emitRustExpr v95 v111 
        let v113 : string = "x"
        let v114 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v113 
        let v115 : string = $"true; near_sdk::log!(\"{{}}\", $0)"
        let v116 : bool = Fable.Core.RustInterop.emitRustExpr v114 v115 
        let v117 : string = $"true"
        let v118 : bool = Fable.Core.RustInterop.emitRustExpr () v117 
        let v119 : string = "true; }); //"
        let v120 : bool = Fable.Core.RustInterop.emitRustExpr () v119 
        ()
    let _v41 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    v40 v0
    let _v41 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    v40 v0
    let _v41 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    v40 v0
    let _v41 = () 
    #endif
#else
    v40 v0
    let _v41 = () 
    #endif
    _v41 
    let v121 : (string -> unit) = v18.l0
    v121 v0
and closure5 (v0 : (string [])) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method16(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure11 () (v0 : Ref<Str>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "String::from($0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "String::from($0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "String::from($0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = v0 |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and closure12 () struct (v0 : std_string_String, v1 : clap_ArgMatches) : US6 =
    US6_0(v0, v1)
and method21 () : (struct (std_string_String * clap_ArgMatches) -> US6) =
    closure12()
and method22 () : string =
    let v0 : string = "py-path"
    v0
and closure13 () (v0 : std_string_String) : US7 =
    US7_0(v0)
and method23 () : (std_string_String -> US7) =
    closure13()
and method24 () : string =
    let v0 : string = "env"
    v0
and method25 () : string =
    let v0 : string = "deps"
    v0
and closure14 () (v0 : Vec<std_string_String>) : US11 =
    US11_0(v0)
and method26 () : (Vec<std_string_String> -> US11) =
    closure14()
and method27 (v0 : Vec<uint8>) : Vec<uint8> =
    v0
and method30 (v0 : string) : string =
    v0
and method29 (v0 : string, v1 : string) : struct (string * string) =
    let v2 : string = method30(v0)
    struct (v1, v2)
and method28 (v0 : string, v1 : string) : string =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "&*$0"
    let v5 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "&*$0"
    let v7 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "&*$0"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v13 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v13 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v16 
    #endif
#else
    let v19 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v3 = v19 
    #endif
    let v22 : Ref<Str> = _v3 
    let v27 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : string = "String::from($0)"
    let v29 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v28 
    let _v27 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : string = "String::from($0)"
    let v31 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v30 
    let _v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v32 : string = "String::from($0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v32 
    let _v27 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v34 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v34 
    #endif
#if FABLE_COMPILER_PYTHON
    let v37 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v37 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v40 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v40 
    #endif
#else
    let v43 : std_string_String = v22 |> unbox<std_string_String>
    let _v27 = v43 
    #endif
    let v46 : std_string_String = _v27 
    let v51 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v52 : string = "std::path::PathBuf::from($0)"
    let v53 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v52 
    let _v51 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : string = "std::path::PathBuf::from($0)"
    let v55 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v54 
    let _v51 = v55 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v56 : string = "std::path::PathBuf::from($0)"
    let v57 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v46 v56 
    let _v51 = v57 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v58 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v58 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v61 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v64 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v64 
    #endif
#else
    let v67 : std_path_PathBuf = v46 |> unbox<std_path_PathBuf>
    let _v51 = v67 
    #endif
    let v70 : std_path_PathBuf = _v51 
    let v75 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v76 : string = "&*$0"
    let v77 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v76 
    let _v75 = v77 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v78 : string = "&*$0"
    let v79 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v78 
    let _v75 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v80 : string = "&*$0"
    let v81 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v80 
    let _v75 = v81 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v82 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v82 
    #endif
#if FABLE_COMPILER_PYTHON
    let v85 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v85 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v88 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v88 
    #endif
#else
    let v91 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v75 = v91 
    #endif
    let v94 : Ref<Str> = _v75 
    let v99 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v100 : string = "String::from($0)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v100 
    let _v99 = v101 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v102 : string = "String::from($0)"
    let v103 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v102 
    let _v99 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "String::from($0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v94 v104 
    let _v99 = v105 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v106 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v106 
    #endif
#if FABLE_COMPILER_PYTHON
    let v109 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v109 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v112 
    #endif
#else
    let v115 : std_string_String = v94 |> unbox<std_string_String>
    let _v99 = v115 
    #endif
    let v118 : std_string_String = _v99 
    let v123 : string = "$0.join($1)"
    let v124 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr struct (v70, v118) v123 
    let v125 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v126 : string = "$0.display()"
    let v127 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v126 
    let _v125 = v127 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v128 : string = "$0.display()"
    let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v128 
    let _v125 = v129 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = "$0.display()"
    let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v130 
    let _v125 = v131 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v132 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v132 
    #endif
#if FABLE_COMPILER_PYTHON
    let v135 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v135 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v138 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v138 
    #endif
#else
    let v141 : std_path_Display = v124 |> unbox<std_path_Display>
    let _v125 = v141 
    #endif
    let v144 : std_path_Display = _v125 
    let v149 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v150 : string = "format!(\"{}\", $0)"
    let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v150 
    let _v149 = v151 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v152 : string = "format!(\"{}\", $0)"
    let v153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v152 
    let _v149 = v153 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v154 : string = "format!(\"{}\", $0)"
    let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v154 
    let _v149 = v155 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v156 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v156 
    #endif
#if FABLE_COMPILER_PYTHON
    let v159 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v159 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v162 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v162 
    #endif
#else
    let v165 : std_string_String = null |> unbox<std_string_String>
    let _v149 = v165 
    #endif
    let v168 : std_string_String = _v149 
    let v173 : string = "fable_library_rust::String_::fromString($0)"
    let v174 : string = Fable.Core.RustInterop.emitRustExpr v168 v173 
    let _v2 = v174 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v175 : US3 = US3_1
    let v176 : US4 = US4_2(v175)
    let v177 : string = $"file_system.(</>) / target: {v176} / a: {v0} / b: {v1}"
    let v178 : string = failwith<string> v177
    let _v2 = v178 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v179 : string = null |> unbox<string>
    let _v2 = v179 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v182 : string = "path"
    let v183 : IPathJoin = Fable.Core.JsInterop.importAll v182 
    let struct (v184 : string, v185 : string) = method29(v1, v0)
    let v186 : string = "v183.join($0, $1)"
    let v187 : string = Fable.Core.JsInterop.emitJsExpr struct (v184, v185) v186 
    let _v2 = v187 
    #endif
#if FABLE_COMPILER_PYTHON
    let v188 : US3 = US3_0
    let v189 : US4 = US4_4(v188)
    let v190 : string = $"file_system.(</>) / target: {v189} / a: {v0} / b: {v1}"
    let v191 : string = failwith<string> v190
    let _v2 = v191 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v192 : US3 = US3_1
    let v193 : US4 = US4_0(v192)
    let v194 : string = $"file_system.(</>) / target: {v193} / a: {v0} / b: {v1}"
    let v195 : string = failwith<string> v194
    let _v2 = v195 
    #endif
#else
    let v196 : string = System.IO.Path.Combine (v0, v1)
    let _v2 = v196 
    #endif
    let v197 : string = _v2 
    v197
and method32 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v78 : bool =
        if v75 then
            let v76 : string = "$0.is_dir()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v69 v76 
            v77
        else
            false
    let _v1 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : bool = null |> unbox<bool>
    let _v1 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : bool = null |> unbox<bool>
    let _v1 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "fs"
    let v86 : IFsExistsSync = Fable.Core.JsInterop.importAll v85 
    let v87 : string = "$0.existsSync($1)"
    let v88 : bool = Fable.Core.JsInterop.emitJsExpr struct (v86, v0) v87 
    let _v1 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : bool = null |> unbox<bool>
    let _v1 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _v1 = v92 
    #endif
#else
    let v95 : (string -> bool) = System.IO.Directory.Exists
    let v96 : bool = v95 v0
    let _v1 = v96 
    #endif
    let v97 : bool = _v1 
    v97
and method34 (v0 : string) : string option =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.parent().map(std::path::PathBuf::from)"
    let v75 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v81 : string = "$0.display()"
    let v82 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v81 
    let _v80 = v82 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : string = "$0.display()"
    let v84 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v83 
    let _v80 = v84 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : string = "$0.display()"
    let v86 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v79 v85 
    let _v80 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v87 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v87 
    #endif
#if FABLE_COMPILER_PYTHON
    let v90 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v90 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v93 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v93 
    #endif
#else
    let v96 : std_path_Display = v79 |> unbox<std_path_Display>
    let _v80 = v96 
    #endif
    let v99 : std_path_Display = _v80 
    let v104 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v105 : string = "format!(\"{}\", $0)"
    let v106 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v105 
    let _v104 = v106 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v107 : string = "format!(\"{}\", $0)"
    let v108 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v107 
    let _v104 = v108 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v109 : string = "format!(\"{}\", $0)"
    let v110 : std_string_String = Fable.Core.RustInterop.emitRustExpr v99 v109 
    let _v104 = v110 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v111 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v111 
    #endif
#if FABLE_COMPILER_PYTHON
    let v114 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v114 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v117 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v117 
    #endif
#else
    let v120 : std_string_String = null |> unbox<std_string_String>
    let _v104 = v120 
    #endif
    let v123 : std_string_String = _v104 
    let v128 : string = "fable_library_rust::String_::fromString($0)"
    let v129 : string = Fable.Core.RustInterop.emitRustExpr v123 v128 
    let v130 : string = "true; $0 })"
    let v131 : bool = Fable.Core.RustInterop.emitRustExpr v129 v130 
    let v132 : string = "_optionm_map_"
    let v133 : string option = Fable.Core.RustInterop.emitRustExpr () v132 
    let _v1 = v133 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v134 : string option = null |> unbox<string option>
    let _v1 = v134 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v137 : string option = null |> unbox<string option>
    let _v1 = v137 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v140 : string = "path"
    let v141 : IPathDirname = Fable.Core.JsInterop.importAll v140 
    let v142 : string = "v141.dirname($0)"
    let v143 : string = Fable.Core.JsInterop.emitJsExpr v0 v142 
    let v144 : string option = Some v143 
    let _v1 = v144 
    #endif
#if FABLE_COMPILER_PYTHON
    let v147 : string option = null |> unbox<string option>
    let _v1 = v147 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v150 : string option = null |> unbox<string option>
    let _v1 = v150 
    #endif
#else
    let v153 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.GetParent
    let v154 : System_IO_DirectoryInfo = v153 v0
    let v155 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let v158 : bool = v154 = v155 
    let v188 : US5 =
        if v158 then
            US5_1
        else
            let v162 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v163 : string = null |> unbox<string>
            let _v162 = v163 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v166 : string = null |> unbox<string>
            let _v162 = v166 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v169 : string = null |> unbox<string>
            let _v162 = v169 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v172 : string = null |> unbox<string>
            let _v162 = v172 
            #endif
#if FABLE_COMPILER_PYTHON
            let v175 : string = null |> unbox<string>
            let _v162 = v175 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : string = null |> unbox<string>
            let _v162 = v178 
            #endif
#else
            let v181 : string = v154.FullName
            let _v162 = v181 
            #endif
            let v182 : string = _v162 
            US5_0(v182)
    let v195 : string option =
        match v188 with
        | US5_1 -> (* None *)
            let v193 : string option = None
            v193
        | US5_0(v189) -> (* Some *)
            let v190 : string option = Some v189 
            v190
    let _v1 = v195 
    #endif
    let v196 : string option = _v1 
    v196
and closure15 () (v0 : string) : string option =
    method34(v0)
and method33 () : (string -> string option) =
    closure15()
and method35 (v0 : string, v1 : string, v2 : string) : US12 =
    let v3 : string = method28(v2, v0)
    let v4 : bool = method32(v3)
    if v4 then
        US12_0(v2)
    else
        let v6 : (string -> string option) = method33()
        let v7 : string option = v6 v2
        let v8 : (string -> US5) = method6()
        let v9 : US5 option = v7 |> Option.map v8 
        let v20 : US5 = US5_1
        let v21 : US5 = v9 |> Option.defaultValue v20 
        match v21 with
        | US5_1 -> (* None *)
            let v27 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v2}')"""
            US12_1(v27)
        | US5_0(v25) -> (* Some *)
            method35(v0, v1, v25)
and method31 (v0 : string, v1 : string) : US12 =
    let v2 : string = method28(v1, v0)
    let v3 : bool = method32(v2)
    if v3 then
        US12_0(v1)
    else
        let v5 : (string -> string option) = method33()
        let v6 : string option = v5 v1
        let v7 : (string -> US5) = method6()
        let v8 : US5 option = v6 |> Option.map v7 
        let v19 : US5 = US5_1
        let v20 : US5 = v8 |> Option.defaultValue v19 
        match v20 with
        | US5_1 -> (* None *)
            let v26 : string = $"""No parent for {if false then "file" else "dir"} '{v0}' at '{v1}' (until '{v1}')"""
            US12_1(v26)
        | US5_0(v24) -> (* Some *)
            method35(v0, v1, v24)
and method36 () : string =
    
    
    
    
    
    let v0 : string = "Warning"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_yellow"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_yellow"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_yellow"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[93m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[93m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[93m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[93m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method38 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "error"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method37 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method38(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "file_system.get_workspace_root"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure16 (v0 : string) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method36()
        let v39 : string = method37(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method39 () : string =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::env::current_dir()"
    let v2 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v1 
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "$0.unwrap()"
    let v5 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "$0.unwrap()"
    let v7 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "$0.unwrap()"
    let v9 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v2 v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v12 
    #endif
#else
    let v13 : std_path_PathBuf = match v2 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v3 = v13 
    #endif
    let v14 : std_path_PathBuf = _v3 
    let v17 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v18 : string = "$0.display()"
    let v19 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v18 
    let _v17 = v19 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v20 : string = "$0.display()"
    let v21 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v20 
    let _v17 = v21 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v22 : string = "$0.display()"
    let v23 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v14 v22 
    let _v17 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v24 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v24 
    #endif
#if FABLE_COMPILER_PYTHON
    let v27 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v27 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v30 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v30 
    #endif
#else
    let v33 : std_path_Display = v14 |> unbox<std_path_Display>
    let _v17 = v33 
    #endif
    let v36 : std_path_Display = _v17 
    let v41 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "format!(\"{}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v42 
    let _v41 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "format!(\"{}\", $0)"
    let v45 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v44 
    let _v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "format!(\"{}\", $0)"
    let v47 : std_string_String = Fable.Core.RustInterop.emitRustExpr v36 v46 
    let _v41 = v47 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v54 
    #endif
#else
    let v57 : std_string_String = null |> unbox<std_string_String>
    let _v41 = v57 
    #endif
    let v60 : std_string_String = _v41 
    let v65 : string = "fable_library_rust::String_::fromString($0)"
    let v66 : string = Fable.Core.RustInterop.emitRustExpr v60 v65 
    let _v0 = v66 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v67 : string = null |> unbox<string>
    let _v0 = v67 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = null |> unbox<string>
    let _v0 = v70 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v73 : string = null |> unbox<string>
    let _v0 = v73 
    #endif
#if FABLE_COMPILER_PYTHON
    let v76 : string = null |> unbox<string>
    let _v0 = v76 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v79 : string = null |> unbox<string>
    let _v0 = v79 
    #endif
#else
    let v82 : (unit -> string) = System.IO.Directory.GetCurrentDirectory
    let v83 : string = v82 ()
    let _v0 = v83 
    #endif
    let v84 : string = _v0 
    v84
and method40 () : string =
    let v0 : string = "\n"
    v0
and method43 (v0 : string) : bool =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v78 : bool =
        if v75 then
            let v76 : string = "$0.is_file()"
            let v77 : bool = Fable.Core.RustInterop.emitRustExpr v69 v76 
            v77
        else
            false
    let _v1 = v78 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v79 : bool = null |> unbox<bool>
    let _v1 = v79 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v82 : bool = null |> unbox<bool>
    let _v1 = v82 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v85 : string = "fs"
    let v86 : IFsExistsSync = Fable.Core.JsInterop.importAll v85 
    let v87 : string = "$0.existsSync($1)"
    let v88 : bool = Fable.Core.JsInterop.emitJsExpr struct (v86, v0) v87 
    let _v1 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v89 : bool = null |> unbox<bool>
    let _v1 = v89 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _v1 = v92 
    #endif
#else
    let v95 : (string -> bool) = System.IO.File.Exists
    let v96 : bool = v95 v0
    let _v1 = v96 
    #endif
    let v97 : bool = _v1 
    v97
and method42 (v0 : string, v1 : string) : bool =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : bool = method43(v0)
    let v4 : bool = v3 = false
    let v87 : bool =
        if v4 then
            false
        else
            let v5 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v6 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v7 : string = "std::fs::read(&*$0)"
            let v8 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v7 
            let v9 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v10 : string = "$0.unwrap()"
            let v11 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v10 
            let _v9 = v11 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v12 : string = "$0.unwrap()"
            let v13 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v12 
            let _v9 = v13 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v14 : string = "$0.unwrap()"
            let v15 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v8 v14 
            let _v9 = v15 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v16 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v16 
            #endif
#if FABLE_COMPILER_PYTHON
            let v17 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v17 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v18 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v18 
            #endif
#else
            let v19 : Vec<uint8> = match v8 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v9 = v19 
            #endif
            let v20 : Vec<uint8> = _v9 
            let _v6 = v20 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v23 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v23 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v26 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v26 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v29 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v29 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v35 : Vec<uint8> = null |> unbox<Vec<uint8>>
            let _v6 = v35 
            #endif
#else
            let v38 : (uint8 []) = v0 |> System.IO.File.ReadAllBytes
            let v39 : string = "$0.to_vec()"
            let v40 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v38 v39 
            let _v6 = v40 
            #endif
            let v41 : Vec<uint8> = _v6 
            let v46 : Vec<uint8> = method27(v41)
            let v47 : string = "std::string::String::from_utf8($0)"
            let v48 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v46 v47 
            let v49 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v50 : string = "$0.unwrap()"
            let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v50 
            let _v49 = v51 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v52 : string = "$0.unwrap()"
            let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v52 
            let _v49 = v53 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v54 : string = "$0.unwrap()"
            let v55 : std_string_String = Fable.Core.RustInterop.emitRustExpr v48 v54 
            let _v49 = v55 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v56 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v56 
            #endif
#if FABLE_COMPILER_PYTHON
            let v57 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v57 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v58 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v58 
            #endif
#else
            let v59 : std_string_String = match v48 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v49 = v59 
            #endif
            let v60 : std_string_String = _v49 
            let v63 : string = "fable_library_rust::String_::fromString($0)"
            let v64 : string = Fable.Core.RustInterop.emitRustExpr v60 v63 
            let _v5 = v64 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v65 : string = null |> unbox<string>
            let _v5 = v65 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v68 : string = null |> unbox<string>
            let _v5 = v68 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : string = null |> unbox<string>
            let _v5 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v74 : string = null |> unbox<string>
            let _v5 = v74 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v77 : string = null |> unbox<string>
            let _v5 = v77 
            #endif
#else
            let v80 : string = v0 |> System.IO.File.ReadAllText
            let _v5 = v80 
            #endif
            let v81 : string = _v5 
            let v86 : bool = v1 = v81
            v86
    let _v2 = v87 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v88 : bool = null |> unbox<bool>
    let _v2 = v88 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : bool = null |> unbox<bool>
    let _v2 = v91 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v94 : bool = null |> unbox<bool>
    let _v2 = v94 
    #endif
#if FABLE_COMPILER_PYTHON
    let v97 : bool = null |> unbox<bool>
    let _v2 = v97 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v100 : bool = null |> unbox<bool>
    let _v2 = v100 
    #endif
#else
    let v103 : bool = null |> unbox<bool>
    let _v2 = v103 
    #endif
    let v106 : bool = _v2 
    v106
and method45 (v0 : string) : string =
    v0
and closure17 () (v0 : std_io_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method46 () : (std_io_Error -> std_string_String) =
    closure17()
and closure18 () () : US13 =
    US13_0
and method47 () : (unit -> US13) =
    closure18()
and closure19 () (v0 : std_string_String) : US13 =
    US13_1(v0)
and method48 () : (std_string_String -> US13) =
    closure19()
and method49 () : string =
    
    
    
    
    
    let v0 : string = "Critical"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_red"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_red"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_red"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[91m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[91m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[91m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[91m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method51 (v0 : string, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "dir"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "error"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "format!(\"{:#?}\", $0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v66 
    let v68 : string = "fable_library_rust::String_::fromString($0)"
    let v69 : string = Fable.Core.RustInterop.emitRustExpr v67 v68 
    let _v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v70 : string = "format!(\"{:#?}\", $0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v70 
    let v72 : string = "fable_library_rust::String_::fromString($0)"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr v71 v72 
    let _v65 = v73 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v74 : string = "format!(\"{:#?}\", $0)"
    let v75 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v74 
    let v76 : string = "fable_library_rust::String_::fromString($0)"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let _v65 = v77 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v78 : string = $"%A{v1}"
    let _v65 = v78 
    #endif
#if FABLE_COMPILER_PYTHON
    let v81 : string = $"%A{v1}"
    let _v65 = v81 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{v1}"
    let _v65 = v84 
    #endif
#else
    let v87 : string = $"%A{v1}"
    let _v65 = v87 
    #endif
    let v90 : string = _v65 
    let v95 : string = $"{v90}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v3, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = " }"
    let v104 : string = $"{v103}"
    let v107 : unit = ()
    let v108 : (unit -> unit) = closure7(v3, v104)
    let v109 : unit = (fun () -> v108 (); v107) ()
    let v112 : string = v3.l0
    v112
and method50 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : std_string_String) : string =
    let v10 : string = method51(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure20 (v0 : string, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method50(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method52 () : string =
    
    
    
    
    
    let v0 : string = "Verbose"
    let v1 : (unit -> string) = v0.ToLower
    let v2 : string = v1 ()
    let v5 : char = v2.[int 0]
    let v6 : string = method13(v5)
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "inline_colorization::color_bright_black"
    let v9 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "&*$0"
    let v12 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "&*$0"
    let v14 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "&*$0"
    let v16 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v23 
    #endif
#else
    let v26 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v10 = v26 
    #endif
    let v29 : Ref<Str> = _v10 
    let v34 : string = "inline_colorization::color_reset"
    let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v34 
    let v36 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v9, v29, v35) v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v7 = v39 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v40 : string = "inline_colorization::color_bright_black"
    let v41 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v40 
    let v42 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v43 : string = "&*$0"
    let v44 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v43 
    let _v42 = v44 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v45 : string = "&*$0"
    let v46 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v45 
    let _v42 = v46 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v47 : string = "&*$0"
    let v48 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v47 
    let _v42 = v48 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v49 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v49 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v52 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v55 
    #endif
#else
    let v58 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v42 = v58 
    #endif
    let v61 : Ref<Str> = _v42 
    let v66 : string = "inline_colorization::color_reset"
    let v67 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v41, v61, v67) v68 
    let v70 : string = "fable_library_rust::String_::fromString($0)"
    let v71 : string = Fable.Core.RustInterop.emitRustExpr v69 v70 
    let _v7 = v71 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v72 : string = "inline_colorization::color_bright_black"
    let v73 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "&*$0"
    let v76 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "&*$0"
    let v78 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "&*$0"
    let v80 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v6 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v87 
    #endif
#else
    let v90 : Ref<Str> = v6 |> unbox<Ref<Str>>
    let _v74 = v90 
    #endif
    let v93 : Ref<Str> = _v74 
    let v98 : string = "inline_colorization::color_reset"
    let v99 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v98 
    let v100 : string = $"format!(\"{{}}{{}}{{}}\", $0, $1, $2)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v73, v93, v99) v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v7 = v103 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v104 : string = "\u001b[90m"
    let v105 : string = method15()
    let v106 : string = v104 + v6 
    let v107 : string = v106 + v105 
    let _v7 = v107 
    #endif
#if FABLE_COMPILER_PYTHON
    let v108 : string = "\u001b[90m"
    let v109 : string = method15()
    let v110 : string = v108 + v6 
    let v111 : string = v110 + v109 
    let _v7 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v112 : string = "\u001b[90m"
    let v113 : string = method15()
    let v114 : string = v112 + v6 
    let v115 : string = v114 + v113 
    let _v7 = v115 
    #endif
#else
    let v116 : string = "\u001b[90m"
    let v117 : string = method15()
    let v118 : string = v116 + v6 
    let v119 : string = v118 + v117 
    let _v7 = v119 
    #endif
    let v120 : string = _v7 
    v120
and method54 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "dir"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method53 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method54(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "file_system.create_dir"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure21 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method52()
        let v39 : string = method53(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method57 (v0 : string) : string =
    v0
and method56 (v0 : bool, v1 : string) : unit =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = method57(v1)
    let v4 : bool = method32(v3)
    if v4 then
        if v0 then
            let v5 : string = "std::fs::remove_dir_all(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v5 
            ()
        else
            let v6 : string = "std::fs::remove_dir(&*$0).unwrap()"
            Fable.Core.RustInterop.emitRustExpr v3 v6 
            ()
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let _v2 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let _v2 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let _v2 = () 
    #endif
#else
    System.IO.Directory.Delete (v1, v0)
    let _v2 = () 
    #endif
    _v2 
    ()
and closure22 (v0 : string) () : unit =
    let v1 : bool = true
    method56(v1, v0)
and method55 (v0 : string) : (unit -> unit) =
    closure22(v0)
and method58 (v0 : string) : (unit -> unit) =
    closure22(v0)
and method60 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "dir"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method59 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method60(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.create_dir"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure23 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method59(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method63 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.file_name()"
    let v75 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "$0.to_os_string()"
    let v81 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.to_str()"
    let v83 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.unwrap()"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "String::from($0)"
    let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v87 
    let _v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v89 
    let _v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v96 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v99 
    #endif
#else
    let v102 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v102 
    #endif
    let v105 : std_string_String = _v86 
    let v110 : string = "fable_library_rust::String_::fromString($0)"
    let v111 : string = Fable.Core.RustInterop.emitRustExpr v105 v110 
    let v112 : string = "true; $0 })"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "_optionm_map_"
    let v115 : string option = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : (string -> US5) = method6()
    let v117 : US5 option = v115 |> Option.map v116 
    let v128 : US5 = US5_1
    let v129 : US5 = v117 |> Option.defaultValue v128 
    let v136 : string =
        match v129 with
        | US5_1 -> (* None *)
            let v134 : string = ""
            v134
        | US5_0(v133) -> (* Some *)
            v133
    let _v1 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : US3 = US3_1
    let v138 : US4 = US4_2(v137)
    let v139 : string = $"file_system.get_file_name / target: {v138} / path: {v0}"
    let v140 : string = failwith<string> v139
    let _v1 = v140 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v141 : string = null |> unbox<string>
    let _v1 = v141 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v144 : US3 = US3_0
    let v145 : US4 = US4_3(v144)
    let v146 : string = $"file_system.get_file_name / target: {v145} / path: {v0}"
    let v147 : string = failwith<string> v146
    let _v1 = v147 
    #endif
#if FABLE_COMPILER_PYTHON
    let v148 : US3 = US3_0
    let v149 : US4 = US4_4(v148)
    let v150 : string = $"file_system.get_file_name / target: {v149} / path: {v0}"
    let v151 : string = failwith<string> v150
    let _v1 = v151 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v152 : US3 = US3_1
    let v153 : US4 = US4_0(v152)
    let v154 : string = $"file_system.get_file_name / target: {v153} / path: {v0}"
    let v155 : string = failwith<string> v154
    let _v1 = v155 
    #endif
#else
    let v156 : (string -> string) = System.IO.Path.GetFileName
    let v157 : string = v156 v0
    let _v1 = v157 
    #endif
    let v158 : string = _v1 
    v158
and method65 (v0 : string, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "ex"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "path"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method64 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string) : string =
    let v10 : string = method65(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "file_system.delete_directory_async"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure25 (v0 : string, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method63(v0)
        let v41 : string = method64(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method62 (v0 : string, v1 : int64) : Async<int64> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : Async<int64> = null |> unbox<Async<int64>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : unit = ()
    let _v12 =
        async {
            try
            let v15 : bool = true
            method56(v15, v0)
            return v1 
            with ex ->
                let v16 : exn = ex
                let v17 : int64 = v1 % 100L
                let v18 : bool = v17 = 0L
                if v18 then
                    let v19 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v20 : string = $"%A{v16}"
                    let _v19 = v20 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v23 : string = $"%A{v16}"
                    let _v19 = v23 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v26 : string = $"%A{v16}"
                    let _v19 = v26 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v29 : string = $"%A{v16}"
                    let _v19 = v29 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v32 : string = $"%A{v16}"
                    let _v19 = v32 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v35 : string = $"%A{v16}"
                    let _v19 = v35 
                    #endif
#else
                    let v38 : string = $"{v16.GetType ()}: {v16.Message}"
                    let _v19 = v38 
                    #endif
                    let v39 : string = _v19 
                    let v44 : unit = ()
                    let v45 : (unit -> unit) = closure25(v0, v39)
                    let v46 : unit = (fun () -> v45 (); v44) ()
                    ()
                let v87 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v88 : (int32 -> Async<unit>) = Async.Sleep
                let v89 : Async<unit> = v88 10
                let _v87 = v89 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v90 : (int32 -> Async<unit>) = Async.Sleep
                let v91 : Async<unit> = v90 10
                let _v87 = v91 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v92 : (int32 -> Async<unit>) = Async.Sleep
                let v93 : Async<unit> = v92 10
                let _v87 = v93 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v94 : (int32 -> Async<unit>) = Async.Sleep
                let v95 : Async<unit> = v94 10
                let _v87 = v95 
                #endif
#if FABLE_COMPILER_PYTHON
                let v96 : (int32 -> Async<unit>) = Async.Sleep
                let v97 : Async<unit> = v96 10
                let _v87 = v97 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v98 : (int32 -> Async<unit>) = Async.Sleep
                let v99 : Async<unit> = v98 10
                let _v87 = v99 
                #endif
#else
                let v100 : (int32 -> Async<unit>) = Async.Sleep
                let v101 : Async<unit> = v100 10
                let _v87 = v101 
                #endif
                let v102 : Async<unit> = _v87 
                do! v102 
                let v107 : int64 = v1 + 1L
                let v108 : Async<int64> = method62(v0, v107)
                return! v108 
                (*
                ()
            *)
            (*
            let v202 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v1519 : Async<int64> = _v12 
    let _v2 = v1519 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1520 : unit = ()
    let _v1520 =
        async {
            try
            let v1523 : bool = true
            method56(v1523, v0)
            return v1 
            with ex ->
                let v1524 : exn = ex
                let v1525 : int64 = v1 % 100L
                let v1526 : bool = v1525 = 0L
                if v1526 then
                    let v1527 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1528 : string = $"%A{v1524}"
                    let _v1527 = v1528 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1531 : string = $"%A{v1524}"
                    let _v1527 = v1531 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1534 : string = $"%A{v1524}"
                    let _v1527 = v1534 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1537 : string = $"%A{v1524}"
                    let _v1527 = v1537 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1540 : string = $"%A{v1524}"
                    let _v1527 = v1540 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1543 : string = $"%A{v1524}"
                    let _v1527 = v1543 
                    #endif
#else
                    let v1546 : string = $"{v1524.GetType ()}: {v1524.Message}"
                    let _v1527 = v1546 
                    #endif
                    let v1547 : string = _v1527 
                    let v1552 : unit = ()
                    let v1553 : (unit -> unit) = closure25(v0, v1547)
                    let v1554 : unit = (fun () -> v1553 (); v1552) ()
                    ()
                let v1595 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1596 : (int32 -> Async<unit>) = Async.Sleep
                let v1597 : Async<unit> = v1596 10
                let _v1595 = v1597 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1598 : (int32 -> Async<unit>) = Async.Sleep
                let v1599 : Async<unit> = v1598 10
                let _v1595 = v1599 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1600 : (int32 -> Async<unit>) = Async.Sleep
                let v1601 : Async<unit> = v1600 10
                let _v1595 = v1601 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1602 : (int32 -> Async<unit>) = Async.Sleep
                let v1603 : Async<unit> = v1602 10
                let _v1595 = v1603 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1604 : (int32 -> Async<unit>) = Async.Sleep
                let v1605 : Async<unit> = v1604 10
                let _v1595 = v1605 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1606 : (int32 -> Async<unit>) = Async.Sleep
                let v1607 : Async<unit> = v1606 10
                let _v1595 = v1607 
                #endif
#else
                let v1608 : (int32 -> Async<unit>) = Async.Sleep
                let v1609 : Async<unit> = v1608 10
                let _v1595 = v1609 
                #endif
                let v1610 : Async<unit> = _v1595 
                do! v1610 
                let v1615 : int64 = v1 + 1L
                let v1616 : Async<int64> = method62(v0, v1615)
                return! v1616 
                (*
                ()
            *)
            (*
            let v1710 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v3027 : Async<int64> = _v1520 
    let _v2 = v3027 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v3028 : unit = ()
    let _v3028 =
        async {
            try
            let v3031 : bool = true
            method56(v3031, v0)
            return v1 
            with ex ->
                let v3032 : exn = ex
                let v3033 : int64 = v1 % 100L
                let v3034 : bool = v3033 = 0L
                if v3034 then
                    let v3035 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3036 : string = $"%A{v3032}"
                    let _v3035 = v3036 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3039 : string = $"%A{v3032}"
                    let _v3035 = v3039 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3042 : string = $"%A{v3032}"
                    let _v3035 = v3042 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3045 : string = $"%A{v3032}"
                    let _v3035 = v3045 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3048 : string = $"%A{v3032}"
                    let _v3035 = v3048 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3051 : string = $"%A{v3032}"
                    let _v3035 = v3051 
                    #endif
#else
                    let v3054 : string = $"{v3032.GetType ()}: {v3032.Message}"
                    let _v3035 = v3054 
                    #endif
                    let v3055 : string = _v3035 
                    let v3060 : unit = ()
                    let v3061 : (unit -> unit) = closure25(v0, v3055)
                    let v3062 : unit = (fun () -> v3061 (); v3060) ()
                    ()
                let v3103 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v3104 : (int32 -> Async<unit>) = Async.Sleep
                let v3105 : Async<unit> = v3104 10
                let _v3103 = v3105 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v3106 : (int32 -> Async<unit>) = Async.Sleep
                let v3107 : Async<unit> = v3106 10
                let _v3103 = v3107 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v3108 : (int32 -> Async<unit>) = Async.Sleep
                let v3109 : Async<unit> = v3108 10
                let _v3103 = v3109 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v3110 : (int32 -> Async<unit>) = Async.Sleep
                let v3111 : Async<unit> = v3110 10
                let _v3103 = v3111 
                #endif
#if FABLE_COMPILER_PYTHON
                let v3112 : (int32 -> Async<unit>) = Async.Sleep
                let v3113 : Async<unit> = v3112 10
                let _v3103 = v3113 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v3114 : (int32 -> Async<unit>) = Async.Sleep
                let v3115 : Async<unit> = v3114 10
                let _v3103 = v3115 
                #endif
#else
                let v3116 : (int32 -> Async<unit>) = Async.Sleep
                let v3117 : Async<unit> = v3116 10
                let _v3103 = v3117 
                #endif
                let v3118 : Async<unit> = _v3103 
                do! v3118 
                let v3123 : int64 = v1 + 1L
                let v3124 : Async<int64> = method62(v0, v3123)
                return! v3124 
                (*
                ()
            *)
            (*
            let v3218 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v4535 : Async<int64> = _v3028 
    let _v2 = v4535 
    #endif
#else
    let v4536 : unit = ()
    let _v4536 =
        async {
            try
            let v4539 : bool = true
            method56(v4539, v0)
            return v1 
            with ex ->
                let v4540 : exn = ex
                let v4541 : int64 = v1 % 100L
                let v4542 : bool = v4541 = 0L
                if v4542 then
                    let v4543 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4544 : string = $"%A{v4540}"
                    let _v4543 = v4544 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4547 : string = $"%A{v4540}"
                    let _v4543 = v4547 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4550 : string = $"%A{v4540}"
                    let _v4543 = v4550 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4553 : string = $"%A{v4540}"
                    let _v4543 = v4553 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4556 : string = $"%A{v4540}"
                    let _v4543 = v4556 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4559 : string = $"%A{v4540}"
                    let _v4543 = v4559 
                    #endif
#else
                    let v4562 : string = $"{v4540.GetType ()}: {v4540.Message}"
                    let _v4543 = v4562 
                    #endif
                    let v4563 : string = _v4543 
                    let v4568 : unit = ()
                    let v4569 : (unit -> unit) = closure25(v0, v4563)
                    let v4570 : unit = (fun () -> v4569 (); v4568) ()
                    ()
                let v4611 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v4612 : (int32 -> Async<unit>) = Async.Sleep
                let v4613 : Async<unit> = v4612 10
                let _v4611 = v4613 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v4614 : (int32 -> Async<unit>) = Async.Sleep
                let v4615 : Async<unit> = v4614 10
                let _v4611 = v4615 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v4616 : (int32 -> Async<unit>) = Async.Sleep
                let v4617 : Async<unit> = v4616 10
                let _v4611 = v4617 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v4618 : (int32 -> Async<unit>) = Async.Sleep
                let v4619 : Async<unit> = v4618 10
                let _v4611 = v4619 
                #endif
#if FABLE_COMPILER_PYTHON
                let v4620 : (int32 -> Async<unit>) = Async.Sleep
                let v4621 : Async<unit> = v4620 10
                let _v4611 = v4621 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v4622 : (int32 -> Async<unit>) = Async.Sleep
                let v4623 : Async<unit> = v4622 10
                let _v4611 = v4623 
                #endif
#else
                let v4624 : (int32 -> Async<unit>) = Async.Sleep
                let v4625 : Async<unit> = v4624 10
                let _v4611 = v4625 
                #endif
                let v4626 : Async<unit> = _v4611 
                do! v4626 
                let v4631 : int64 = v1 + 1L
                let v4632 : Async<int64> = method62(v0, v4631)
                return! v4632 
                (*
                ()
            *)
            (*
            let v4726 : int64 = *)
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v6043 : Async<int64> = _v4536 
    let _v2 = v6043 
    #endif
    let v6044 : Async<int64> = _v2 
    v6044
and closure24 (v0 : string) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : Async<int64> = null |> unbox<Async<int64>>
    let _v1 = v17 
    #endif
#else
    let v20 : int64 = 0L
    let v21 : Async<int64> = method62(v0, v20)
    let _v1 = v21 
    #endif
    let v22 : Async<int64> = _v1 
    let v27 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v28 : Async<unit> = null |> unbox<Async<unit>>
    let _v27 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v31 : Async<unit> = null |> unbox<Async<unit>>
    let _v27 = v31 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v34 : Async<unit> = null |> unbox<Async<unit>>
    let _v27 = v34 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v38 : Async<unit> = v37 v22
    let _v27 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v39 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v40 : Async<unit> = v39 v22
    let _v27 = v40 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v41 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v42 : Async<unit> = v41 v22
    let _v27 = v42 
    #endif
#else
    let v43 : (Async<int64> -> Async<unit>) = Async.Ignore
    let v44 : Async<unit> = v43 v22
    let _v27 = v44 
    #endif
    let v45 : Async<unit> = _v27 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    null |> unbox<unit>
    let _v50 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : (Async<unit> -> unit) = Async.RunSynchronously
    v51 v45
    let _v50 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : (Async<unit> -> unit) = Async.RunSynchronously
    v52 v45
    let _v50 = () 
    #endif
#else
    let v53 : (Async<unit> -> unit) = Async.RunSynchronously
    v53 v45
    let _v50 = () 
    #endif
    _v50 
    ()
and method61 (v0 : string) : (unit -> unit) =
    closure24(v0)
and method66 (v0 : string) : (unit -> unit) =
    closure24(v0)
and method44 (v0 : string) : System.IDisposable =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = method45(v0)
    let v3 : string = "std::fs::create_dir_all(&*$0)"
    let v4 : Result<unit, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v3 
    let v5 : (std_io_Error -> std_string_String) = method46()
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v15 
    #endif
#else
    let v16 : Result<unit, std_string_String> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v16 
    #endif
    let v17 : Result<unit, std_string_String> = _v6 
    let v20 : (unit -> US13) = method47()
    let v21 : (std_string_String -> US13) = method48()
    let v22 : US13 = match v17 with Ok () -> v20 () | Error x -> v21 x
    match v22 with
    | US13_1(v65) -> (* Error *)
        let v66 : unit = ()
        let v67 : (unit -> unit) = closure20(v2, v65)
        let v68 : unit = (fun () -> v67 (); v66) ()
        ()
    | US13_0 -> (* Ok *)
        let v23 : unit = ()
        let v24 : (unit -> unit) = closure21(v2)
        let v25 : unit = (fun () -> v24 (); v23) ()
        ()
    let v108 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v109 : (unit -> unit) = method55(v2)
    let v110 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v109 "$0()" )
    let _v108 = v110 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v111 : (unit -> unit) = method55(v2)
    let v112 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v111 "$0()" )
    let _v108 = v112 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v113 : (unit -> unit) = method55(v2)
    let v114 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v113 "$0()" )
    let _v108 = v114 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v115 : (unit -> unit) = method58(v2)
    let v116 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v115 () }
    let _v108 = v116 
    #endif
#if FABLE_COMPILER_PYTHON
    let v117 : (unit -> unit) = method58(v2)
    let v118 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v117 () }
    let _v108 = v118 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v119 : (unit -> unit) = method58(v2)
    let v120 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v119 () }
    let _v108 = v120 
    #endif
#else
    let v121 : (unit -> unit) = method58(v2)
    let v122 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v121 () }
    let _v108 = v122 
    #endif
    let v123 : System.IDisposable = _v108 
    let _v1 = v123 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v127 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : System.IDisposable = null |> unbox<System.IDisposable>
    let _v1 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v134 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v149 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v133 = v149 
    #endif
#else
    let v152 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v153 : System_IO_DirectoryInfo = v152 v0
    let _v133 = v153 
    #endif
    let v154 : System_IO_DirectoryInfo = _v133 
    let v159 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v160 : bool = null |> unbox<bool>
    let _v159 = v160 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v163 : bool = null |> unbox<bool>
    let _v159 = v163 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v166 : bool = null |> unbox<bool>
    let _v159 = v166 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v169 : bool = null |> unbox<bool>
    let _v159 = v169 
    #endif
#if FABLE_COMPILER_PYTHON
    let v172 : bool = null |> unbox<bool>
    let _v159 = v172 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v175 : bool = null |> unbox<bool>
    let _v159 = v175 
    #endif
#else
    let v178 : bool = v154.Exists
    let _v159 = v178 
    #endif
    let v179 : bool = _v159 
    let v184 : bool = v179 = false
    if v184 then
        let v185 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v186 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v186 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v189 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v189 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v192 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v192 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v195 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v195 
        #endif
#if FABLE_COMPILER_PYTHON
        let v198 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v198 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v201 : System.DateTime = null |> unbox<System.DateTime>
        let _v185 = v201 
        #endif
#else
        let v204 : System.DateTime = v154.CreationTime
        let _v185 = v204 
        #endif
        let v205 : System.DateTime = _v185 
        let v210 : _ = {| Exists = v179; CreationTime = v205 |}
        let v211 : string = $"%A{v210}"
        let v214 : unit = ()
        let v215 : (unit -> unit) = closure23(v0, v211)
        let v216 : unit = (fun () -> v215 (); v214) ()
        ()
    let v256 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v257 : (unit -> unit) = method61(v0)
    let v258 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v257 "$0()" )
    let _v256 = v258 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v259 : (unit -> unit) = method61(v0)
    let v260 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v259 "$0()" )
    let _v256 = v260 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v261 : (unit -> unit) = method61(v0)
    let v262 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v261 "$0()" )
    let _v256 = v262 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v263 : (unit -> unit) = method66(v0)
    let v264 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v263 () }
    let _v256 = v264 
    #endif
#if FABLE_COMPILER_PYTHON
    let v265 : (unit -> unit) = method66(v0)
    let v266 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v265 () }
    let _v256 = v266 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v267 : (unit -> unit) = method66(v0)
    let v268 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v267 () }
    let _v256 = v268 
    #endif
#else
    let v269 : (unit -> unit) = method66(v0)
    let v270 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v269 () }
    let _v256 = v270 
    #endif
    let v271 : System.IDisposable = _v256 
    let _v1 = v271 
    #endif
#if FABLE_COMPILER_PYTHON
    let v275 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v276 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v276 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v279 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v279 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v282 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v282 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v285 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v285 
    #endif
#if FABLE_COMPILER_PYTHON
    let v288 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v288 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v291 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v275 = v291 
    #endif
#else
    let v294 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v295 : System_IO_DirectoryInfo = v294 v0
    let _v275 = v295 
    #endif
    let v296 : System_IO_DirectoryInfo = _v275 
    let v301 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v302 : bool = null |> unbox<bool>
    let _v301 = v302 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v305 : bool = null |> unbox<bool>
    let _v301 = v305 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v308 : bool = null |> unbox<bool>
    let _v301 = v308 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v311 : bool = null |> unbox<bool>
    let _v301 = v311 
    #endif
#if FABLE_COMPILER_PYTHON
    let v314 : bool = null |> unbox<bool>
    let _v301 = v314 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v317 : bool = null |> unbox<bool>
    let _v301 = v317 
    #endif
#else
    let v320 : bool = v296.Exists
    let _v301 = v320 
    #endif
    let v321 : bool = _v301 
    let v326 : bool = v321 = false
    if v326 then
        let v327 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v328 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v328 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v331 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v331 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v334 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v334 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v337 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v337 
        #endif
#if FABLE_COMPILER_PYTHON
        let v340 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v340 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v343 : System.DateTime = null |> unbox<System.DateTime>
        let _v327 = v343 
        #endif
#else
        let v346 : System.DateTime = v296.CreationTime
        let _v327 = v346 
        #endif
        let v347 : System.DateTime = _v327 
        let v352 : _ = {| Exists = v321; CreationTime = v347 |}
        let v353 : string = $"%A{v352}"
        let v356 : unit = ()
        let v357 : (unit -> unit) = closure23(v0, v353)
        let v358 : unit = (fun () -> v357 (); v356) ()
        ()
    let v398 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v399 : (unit -> unit) = method61(v0)
    let v400 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v399 "$0()" )
    let _v398 = v400 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v401 : (unit -> unit) = method61(v0)
    let v402 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v401 "$0()" )
    let _v398 = v402 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v403 : (unit -> unit) = method61(v0)
    let v404 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v403 "$0()" )
    let _v398 = v404 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v405 : (unit -> unit) = method66(v0)
    let v406 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v405 () }
    let _v398 = v406 
    #endif
#if FABLE_COMPILER_PYTHON
    let v407 : (unit -> unit) = method66(v0)
    let v408 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v407 () }
    let _v398 = v408 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v409 : (unit -> unit) = method66(v0)
    let v410 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v409 () }
    let _v398 = v410 
    #endif
#else
    let v411 : (unit -> unit) = method66(v0)
    let v412 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v411 () }
    let _v398 = v412 
    #endif
    let v413 : System.IDisposable = _v398 
    let _v1 = v413 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v417 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v418 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v418 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v421 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v421 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v424 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v424 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v427 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v427 
    #endif
#if FABLE_COMPILER_PYTHON
    let v430 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v430 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v433 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v417 = v433 
    #endif
#else
    let v436 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v437 : System_IO_DirectoryInfo = v436 v0
    let _v417 = v437 
    #endif
    let v438 : System_IO_DirectoryInfo = _v417 
    let v443 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v444 : bool = null |> unbox<bool>
    let _v443 = v444 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v447 : bool = null |> unbox<bool>
    let _v443 = v447 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v450 : bool = null |> unbox<bool>
    let _v443 = v450 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v453 : bool = null |> unbox<bool>
    let _v443 = v453 
    #endif
#if FABLE_COMPILER_PYTHON
    let v456 : bool = null |> unbox<bool>
    let _v443 = v456 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v459 : bool = null |> unbox<bool>
    let _v443 = v459 
    #endif
#else
    let v462 : bool = v438.Exists
    let _v443 = v462 
    #endif
    let v463 : bool = _v443 
    let v468 : bool = v463 = false
    if v468 then
        let v469 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v470 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v470 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v473 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v473 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v476 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v476 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v479 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v479 
        #endif
#if FABLE_COMPILER_PYTHON
        let v482 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v482 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v485 : System.DateTime = null |> unbox<System.DateTime>
        let _v469 = v485 
        #endif
#else
        let v488 : System.DateTime = v438.CreationTime
        let _v469 = v488 
        #endif
        let v489 : System.DateTime = _v469 
        let v494 : _ = {| Exists = v463; CreationTime = v489 |}
        let v495 : string = $"%A{v494}"
        let v498 : unit = ()
        let v499 : (unit -> unit) = closure23(v0, v495)
        let v500 : unit = (fun () -> v499 (); v498) ()
        ()
    let v540 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v541 : (unit -> unit) = method61(v0)
    let v542 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v541 "$0()" )
    let _v540 = v542 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v543 : (unit -> unit) = method61(v0)
    let v544 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v543 "$0()" )
    let _v540 = v544 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v545 : (unit -> unit) = method61(v0)
    let v546 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v545 "$0()" )
    let _v540 = v546 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v547 : (unit -> unit) = method66(v0)
    let v548 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v547 () }
    let _v540 = v548 
    #endif
#if FABLE_COMPILER_PYTHON
    let v549 : (unit -> unit) = method66(v0)
    let v550 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v549 () }
    let _v540 = v550 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v551 : (unit -> unit) = method66(v0)
    let v552 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v551 () }
    let _v540 = v552 
    #endif
#else
    let v553 : (unit -> unit) = method66(v0)
    let v554 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v553 () }
    let _v540 = v554 
    #endif
    let v555 : System.IDisposable = _v540 
    let _v1 = v555 
    #endif
#else
    let v559 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v560 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v560 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v563 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v563 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v566 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v566 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v569 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v569 
    #endif
#if FABLE_COMPILER_PYTHON
    let v572 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v572 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v575 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v559 = v575 
    #endif
#else
    let v578 : (string -> System_IO_DirectoryInfo) = System.IO.Directory.CreateDirectory
    let v579 : System_IO_DirectoryInfo = v578 v0
    let _v559 = v579 
    #endif
    let v580 : System_IO_DirectoryInfo = _v559 
    let v585 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v586 : bool = null |> unbox<bool>
    let _v585 = v586 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v589 : bool = null |> unbox<bool>
    let _v585 = v589 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v592 : bool = null |> unbox<bool>
    let _v585 = v592 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v595 : bool = null |> unbox<bool>
    let _v585 = v595 
    #endif
#if FABLE_COMPILER_PYTHON
    let v598 : bool = null |> unbox<bool>
    let _v585 = v598 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v601 : bool = null |> unbox<bool>
    let _v585 = v601 
    #endif
#else
    let v604 : bool = v580.Exists
    let _v585 = v604 
    #endif
    let v605 : bool = _v585 
    let v610 : bool = v605 = false
    if v610 then
        let v611 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v612 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v612 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v615 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v615 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v618 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v618 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v621 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v621 
        #endif
#if FABLE_COMPILER_PYTHON
        let v624 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v624 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v627 : System.DateTime = null |> unbox<System.DateTime>
        let _v611 = v627 
        #endif
#else
        let v630 : System.DateTime = v580.CreationTime
        let _v611 = v630 
        #endif
        let v631 : System.DateTime = _v611 
        let v636 : _ = {| Exists = v605; CreationTime = v631 |}
        let v637 : string = $"%A{v636}"
        let v640 : unit = ()
        let v641 : (unit -> unit) = closure23(v0, v637)
        let v642 : unit = (fun () -> v641 (); v640) ()
        ()
    let v682 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v683 : (unit -> unit) = method61(v0)
    let v684 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v683 "$0()" )
    let _v682 = v684 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v685 : (unit -> unit) = method61(v0)
    let v686 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v685 "$0()" )
    let _v682 = v686 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v687 : (unit -> unit) = method61(v0)
    let v688 : System.IDisposable = new Disposable (fun () -> Fable.Core.RustInterop.emitRustExpr v687 "$0()" )
    let _v682 = v688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v689 : (unit -> unit) = method66(v0)
    let v690 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v689 () }
    let _v682 = v690 
    #endif
#if FABLE_COMPILER_PYTHON
    let v691 : (unit -> unit) = method66(v0)
    let v692 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v691 () }
    let _v682 = v692 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v693 : (unit -> unit) = method66(v0)
    let v694 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v693 () }
    let _v682 = v694 
    #endif
#else
    let v695 : (unit -> unit) = method66(v0)
    let v696 : System.IDisposable = { new System.IDisposable with member _.Dispose () = v695 () }
    let _v682 = v696 
    #endif
    let v697 : System.IDisposable = _v682 
    let _v1 = v697 
    #endif
    let v701 : System.IDisposable = _v1 
    v701
and method67 (v0 : string) : string =
    v0
and method41 (v0 : string, v1 : string) : unit =
    let v2 : bool = method42(v0, v1)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : string option = method34(v0)
        let v5 : string = ""
        let v6 : string = v4 |> Option.defaultValue v5 
        let v9 : bool = method32(v6)
        let v10 : bool = v9 = false
        if v10 then
            let v11 : System.IDisposable = method44(v6)
            ()
        let v12 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v13 : string = "std::fs::write(&*$0, &*$1).unwrap()"
        Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v13 
        let _v12 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v12 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v12 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v12 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v12 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v12 = () 
        #endif
#else
        let v14 : string = method67(v1)
        System.IO.File.WriteAllText (v0, v14)
        let _v12 = () 
        #endif
        _v12 
        ()
and method69 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : string =
    v0
and method71 () : string =
    let v0 : string = ""
    v0
and method72 (v0 : int32, v1 : Mut5) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and closure28 (v0 : char) (v1 : UH0) : UH0 =
    UH0_1(v0, v1)
and closure27 () (v0 : char) : (UH0 -> UH0) =
    closure28(v0)
and method73 () : (char -> (UH0 -> UH0)) =
    closure27()
and method74 (v0 : UH0, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : struct (System.Text.StringBuilder * int32 * int32) =
    match v0 with
    | UH0_1(v4, v5) -> (* Cons *)
        let v6 : bool = '\n' = v4
        let struct (v9 : int32, v10 : int32) =
            if v6 then
                let v7 : int32 = v2 + 1
                struct (v7, 1)
            else
                let v8 : int32 = v3 + 1
                struct (v2, v8)
        let v24 : System.Text.StringBuilder =
            if v6 then
                let v11 : (unit -> System.Text.StringBuilder) = v1.Clear
                let v12 : System.Text.StringBuilder = v11 ()
                v1
            else
                let v16 : (char -> string) = _.ToString()
                let v17 : string = v16 v4
                let v20 : (string -> System.Text.StringBuilder) = v1.Append
                let v21 : System.Text.StringBuilder = v20 v17
                v1
        method74(v5, v24, v9, v10)
    | UH0_0 -> (* Nil *)
        struct (v1, v2, v3)
and closure26 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v9 : char = v0.[int 0]
        let v10 : bool = v9 = '"'
        if v10 then
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v0
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v0.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v9
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method72(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method73()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
            US15_0(v9, v30, v75, v76, v77)
        else
            let v79 : string = "\n"
            let v80 : int32 = v0.IndexOf v79 
            let v83 : int32 = v80 - 1
            let v84 : bool = -2 = v83
            let v91 : int32 =
                if v84 then
                    let v85 : (string -> int32) = String.length
                    let v86 : int32 = v85 v0
                    let v89 : int32 = v86 + 1
                    v89
                else
                    let v90 : int32 = v83 + 1
                    v90
            let v92 : int32 = 0 |> int32 
            let v99 : int32 = v91 |> int32 
            let v106 : int32 = v99 - 1
            let v107 : string = v0.[int v92..int v106]
            let v111 : string = $"parsing.p_char / expected: '{'"'}' / line: {v2} / col: {v3}
{v1}{v107}"
            let v114 : int32 = v3 - 1
            let v115 : (int32 -> (string -> string)) = String.replicate
            let v116 : (string -> string) = v115 v114
            let v117 : string = " "
            let v118 : string = v116 v117
            let v121 : string = "^"
            let v122 : string = v118 + v121 
            let v123 : string = $"{v111}
{v122}
"
            US15_1(v123)
and closure29 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US15 =
    let v4 : bool = "" = v0
    if v4 then
        let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'''}' / s: %A{struct (v1, v2, v3)}"
        US15_1(v5)
    else
        let v9 : char = v0.[int 0]
        let v10 : bool = v9 = '''
        if v10 then
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v0
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v0.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v9
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method72(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method73()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
            US15_0(v9, v30, v75, v76, v77)
        else
            let v79 : string = "\n"
            let v80 : int32 = v0.IndexOf v79 
            let v83 : int32 = v80 - 1
            let v84 : bool = -2 = v83
            let v91 : int32 =
                if v84 then
                    let v85 : (string -> int32) = String.length
                    let v86 : int32 = v85 v0
                    let v89 : int32 = v86 + 1
                    v89
                else
                    let v90 : int32 = v83 + 1
                    v90
            let v92 : int32 = 0 |> int32 
            let v99 : int32 = v91 |> int32 
            let v106 : int32 = v99 - 1
            let v107 : string = v0.[int v92..int v106]
            let v111 : string = $"parsing.p_char / expected: '{'''}' / line: {v2} / col: {v3}
{v1}{v107}"
            let v114 : int32 = v3 - 1
            let v115 : (int32 -> (string -> string)) = String.replicate
            let v116 : (string -> string) = v115 v114
            let v117 : string = " "
            let v118 : string = v116 v117
            let v121 : string = "^"
            let v122 : string = v118 + v121 
            let v123 : string = $"{v111}
{v122}
"
            US15_1(v123)
and method75 (v0 : string, v1 : System.Text.StringBuilder, v2 : UH1) : US15 =
    match v2 with
    | UH1_1(v5, v6) -> (* Cons *)
        let v7 : US15 = v5 struct (v0, v1, 1, 1)
        match v7 with
        | US15_1(v13) -> (* Error *)
            method75(v0, v1, v6)
        | US15_0(v8, v9, v10, v11, v12) -> (* Ok *)
            v7
    | UH1_0 -> (* Nil *)
        let v3 : string = "parsing.choice / no parsers succeeded"
        US15_1(v3)
and method76 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 2L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v11 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    US17_1
        let v15 : char =
            match v11 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v12) -> (* Some *)
                v12
        let v16 : bool = v0 = v15
        if v16 then
            true
        else
            let v17 : int64 = v1 + 1L
            method76(v0, v17)
and method77 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v109 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ''' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : (char list -> (char [])) = List.toArray
            let v14 : (char []) = v13 v10
            let v17 : string = $"parsing.none_of / unexpected end of input / chars: %A{v14} / s: %A{struct (v2, v3, v4)}"
            US15_1(v17)
        else
            let v21 : char = v1.[int 0]
            let v22 : int64 = 0L
            let v23 : bool = method76(v21, v22)
            let v24 : bool = v23 = false
            if v24 then
                let v25 : (string -> int32) = String.length
                let v26 : int32 = v25 v1
                let v29 : int32 = 1 |> int32 
                let v36 : int32 = v26 |> int32 
                let v43 : int32 = v36 - 1
                let v44 : string = v1.[int v29..int v43]
                let v48 : (char -> string) = _.ToString()
                let v49 : string = v48 v21
                let v52 : int32 = v49.Length
                let v53 : (char []) = Array.zeroCreate<char> (v52)
                let v54 : Mut5 = {l0 = 0} : Mut5
                while method72(v52, v54) do
                    let v56 : int32 = v54.l0
                    let v57 : char = v49.[int v56]
                    v53.[int v56] <- v57
                    let v58 : int32 = v56 + 1
                    v54.l0 <- v58
                    ()
                let v59 : char list = v53 |> Array.toList
                let v62 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v63 : (char -> (UH0 -> UH0)) = method73()
                let v64 : (char list -> (UH0 -> UH0)) = v62 v63
                let v65 : (UH0 -> UH0) = v64 v59
                let v66 : UH0 = UH0_0
                let v67 : UH0 = v65 v66
                let struct (v89 : System.Text.StringBuilder, v90 : int32, v91 : int32) = method74(v67, v2, v3, v4)
                US15_0(v21, v44, v89, v90, v91)
            else
                let v93 : char list = []
                let v94 : char list = ''' :: v93 
                let v97 : char list = '"' :: v94 
                let v100 : (char list -> (char [])) = List.toArray
                let v101 : (char []) = v100 v97
                let v104 : string = $"parsing.none_of / unexpected char: '{v21}' / chars: %A{v101} / s: %A{struct (v2, v3, v4)}"
                US15_1(v104)
    let v121 : US15 =
        match v109 with
        | US15_1(v118) -> (* Error *)
            US15_1(v118)
        | US15_0(v110, v111, v112, v113, v114) -> (* Ok *)
            let v115 : bool = '\\' = v110
            let v116 : char =
                if v115 then
                    '/'
                else
                    v110
            US15_0(v116, v111, v112, v113, v114)
    match v121 with
    | US15_1(v137) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : (char -> string) = _.ToString()
        let v128 : string = v127 v122
        let v131 : string = v0 + v128 
        method77(v131, v123, v124, v125, v126)
and method78 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH1) : US15 =
    match v4 with
    | UH1_1(v7, v8) -> (* Cons *)
        let v9 : US15 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US15_1(v15) -> (* Error *)
            method78(v0, v1, v2, v3, v8)
        | US15_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH1_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US15_1(v5)
and method79 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('"')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0(''')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0(' ')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method79(v0, v21)
and method80 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v115 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = ''' :: v7 
            let v13 : char list = '"' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method79(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method72(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method73()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method74(v70, v2, v3, v4)
                US15_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = ' ' :: v96 
                let v100 : char list = ''' :: v97 
                let v103 : char list = '"' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US15_1(v110)
    let v127 : US15 =
        match v115 with
        | US15_1(v124) -> (* Error *)
            US15_1(v124)
        | US15_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : bool = '\\' = v116
            let v122 : char =
                if v121 then
                    '/'
                else
                    v116
            US15_0(v122, v117, v118, v119, v120)
    match v127 with
    | US15_1(v143) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v128, v129, v130, v131, v132) -> (* Ok *)
        let v133 : (char -> string) = _.ToString()
        let v134 : string = v133 v128
        let v137 : string = v0 + v134 
        method80(v137, v129, v130, v131, v132)
and method81 (v0 : string, v1 : int32) : int32 =
    let v2 : int32 = v0.Length
    let v3 : bool = v1 >= v2
    if v3 then
        v1
    else
        let v4 : char = v0.[int v1]
        let v5 : bool = ' ' = v4
        if v5 then
            let v6 : int32 = v1 + 1
            method81(v0, v6)
        else
            v1
and method82 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v79 : US15 =
        if v5 then
            let v6 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v2, v3, v4)}"
            US15_1(v6)
        else
            let v10 : char = v1.[int 0]
            let v11 : (string -> int32) = String.length
            let v12 : int32 = v11 v1
            let v15 : int32 = 1 |> int32 
            let v22 : int32 = v12 |> int32 
            let v29 : int32 = v22 - 1
            let v30 : string = v1.[int v15..int v29]
            let v34 : (char -> string) = _.ToString()
            let v35 : string = v34 v10
            let v38 : int32 = v35.Length
            let v39 : (char []) = Array.zeroCreate<char> (v38)
            let v40 : Mut5 = {l0 = 0} : Mut5
            while method72(v38, v40) do
                let v42 : int32 = v40.l0
                let v43 : char = v35.[int v42]
                v39.[int v42] <- v43
                let v44 : int32 = v42 + 1
                v40.l0 <- v44
                ()
            let v45 : char list = v39 |> Array.toList
            let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
            let v49 : (char -> (UH0 -> UH0)) = method73()
            let v50 : (char list -> (UH0 -> UH0)) = v48 v49
            let v51 : (UH0 -> UH0) = v50 v45
            let v52 : UH0 = UH0_0
            let v53 : UH0 = v51 v52
            let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v2, v3, v4)
            US15_0(v10, v30, v75, v76, v77)
    match v79 with
    | US15_1(v95) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v80, v81, v82, v83, v84) -> (* Ok *)
        let v85 : (char -> string) = _.ToString()
        let v86 : string = v85 v80
        let v89 : string = v0 + v86 
        method82(v89, v81, v82, v83, v84)
and method70 (v0 : string) : US14 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : string = method71()
    let v11 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v12 : System.Text.StringBuilder = v11 v10
    let v15 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure26()
    let v16 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US15) = closure29()
    let v17 : UH1 = UH1_0
    let v18 : UH1 = UH1_1(v16, v17)
    let v19 : UH1 = UH1_1(v15, v18)
    let v20 : US15 = method75(v7, v12, v19)
    let v202 : US16 =
        match v20 with
        | US15_1(v199) -> (* Error *)
            US16_1(v199)
        | US15_0(v21, v22, v23, v24, v25) -> (* Ok *)
            let v26 : bool = "" = v22
            let v130 : US15 =
                if v26 then
                    let v27 : char list = []
                    let v28 : char list = ''' :: v27 
                    let v31 : char list = '"' :: v28 
                    let v34 : (char list -> (char [])) = List.toArray
                    let v35 : (char []) = v34 v31
                    let v38 : string = $"parsing.none_of / unexpected end of input / chars: %A{v35} / s: %A{struct (v23, v24, v25)}"
                    US15_1(v38)
                else
                    let v42 : char = v22.[int 0]
                    let v43 : int64 = 0L
                    let v44 : bool = method76(v42, v43)
                    let v45 : bool = v44 = false
                    if v45 then
                        let v46 : (string -> int32) = String.length
                        let v47 : int32 = v46 v22
                        let v50 : int32 = 1 |> int32 
                        let v57 : int32 = v47 |> int32 
                        let v64 : int32 = v57 - 1
                        let v65 : string = v22.[int v50..int v64]
                        let v69 : (char -> string) = _.ToString()
                        let v70 : string = v69 v42
                        let v73 : int32 = v70.Length
                        let v74 : (char []) = Array.zeroCreate<char> (v73)
                        let v75 : Mut5 = {l0 = 0} : Mut5
                        while method72(v73, v75) do
                            let v77 : int32 = v75.l0
                            let v78 : char = v70.[int v77]
                            v74.[int v77] <- v78
                            let v79 : int32 = v77 + 1
                            v75.l0 <- v79
                            ()
                        let v80 : char list = v74 |> Array.toList
                        let v83 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v84 : (char -> (UH0 -> UH0)) = method73()
                        let v85 : (char list -> (UH0 -> UH0)) = v83 v84
                        let v86 : (UH0 -> UH0) = v85 v80
                        let v87 : UH0 = UH0_0
                        let v88 : UH0 = v86 v87
                        let struct (v110 : System.Text.StringBuilder, v111 : int32, v112 : int32) = method74(v88, v23, v24, v25)
                        US15_0(v42, v65, v110, v111, v112)
                    else
                        let v114 : char list = []
                        let v115 : char list = ''' :: v114 
                        let v118 : char list = '"' :: v115 
                        let v121 : (char list -> (char [])) = List.toArray
                        let v122 : (char []) = v121 v118
                        let v125 : string = $"parsing.none_of / unexpected char: '{v42}' / chars: %A{v122} / s: %A{struct (v23, v24, v25)}"
                        US15_1(v125)
            let v142 : US15 =
                match v130 with
                | US15_1(v139) -> (* Error *)
                    US15_1(v139)
                | US15_0(v131, v132, v133, v134, v135) -> (* Ok *)
                    let v136 : bool = '\\' = v131
                    let v137 : char =
                        if v136 then
                            '/'
                        else
                            v131
                    US15_0(v137, v132, v133, v134, v135)
            let v161 : US16 =
                match v142 with
                | US15_1(v158) -> (* Error *)
                    US16_1(v158)
                | US15_0(v143, v144, v145, v146, v147) -> (* Ok *)
                    let v148 : (char -> string) = _.ToString()
                    let v149 : string = v148 v143
                    let struct (v152 : string, v153 : string, v154 : System.Text.StringBuilder, v155 : int32, v156 : int32) = method77(v149, v144, v145, v146, v147)
                    US16_0(v152, v153, v154, v155, v156)
            let v171 : US16 =
                match v161 with
                | US16_1(v168) -> (* Error *)
                    US16_0(v6, v22, v23, v24, v25)
                | US16_0(v162, v163, v164, v165, v166) -> (* Ok *)
                    US16_0(v162, v163, v164, v165, v166)
            match v171 with
            | US16_1(v194) -> (* Error *)
                let v195 : string = "parsing.between / expected content"
                US16_1(v195)
            | US16_0(v172, v173, v174, v175, v176) -> (* Ok *)
                let v177 : UH1 = UH1_0
                let v178 : UH1 = UH1_1(v16, v177)
                let v179 : UH1 = UH1_1(v15, v178)
                let v180 : US15 = method78(v173, v174, v175, v176, v179)
                match v180 with
                | US15_1(v187) -> (* Error *)
                    let v188 : string = $"parsing.between / expected closing delimiter / e: %A{v187} / input: %A{struct (v7, v12, 1, 1)} / rest1: %A{struct (v22, v23, v24, v25)} / rest2: %A{struct (v173, v174, v175, v176)}"
                    US16_1(v188)
                | US15_0(v181, v182, v183, v184, v185) -> (* Ok *)
                    US16_0(v172, v182, v183, v184, v185)
    let v414 : US16 =
        match v202 with
        | US16_1(v208) -> (* Error *)
            let v209 : bool = "" = v7
            let v321 : US15 =
                if v209 then
                    let v210 : char list = []
                    let v211 : char list = ' ' :: v210 
                    let v214 : char list = ''' :: v211 
                    let v217 : char list = '"' :: v214 
                    let v220 : (char list -> (char [])) = List.toArray
                    let v221 : (char []) = v220 v217
                    let v224 : string = $"parsing.none_of / unexpected end of input / chars: %A{v221} / s: %A{struct (v12, 1, 1)}"
                    US15_1(v224)
                else
                    let v228 : char = v7.[int 0]
                    let v229 : int64 = 0L
                    let v230 : bool = method79(v228, v229)
                    let v231 : bool = v230 = false
                    if v231 then
                        let v232 : (string -> int32) = String.length
                        let v233 : int32 = v232 v7
                        let v236 : int32 = 1 |> int32 
                        let v243 : int32 = v233 |> int32 
                        let v250 : int32 = v243 - 1
                        let v251 : string = v7.[int v236..int v250]
                        let v255 : (char -> string) = _.ToString()
                        let v256 : string = v255 v228
                        let v259 : int32 = v256.Length
                        let v260 : (char []) = Array.zeroCreate<char> (v259)
                        let v261 : Mut5 = {l0 = 0} : Mut5
                        while method72(v259, v261) do
                            let v263 : int32 = v261.l0
                            let v264 : char = v256.[int v263]
                            v260.[int v263] <- v264
                            let v265 : int32 = v263 + 1
                            v261.l0 <- v265
                            ()
                        let v266 : char list = v260 |> Array.toList
                        let v269 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v270 : (char -> (UH0 -> UH0)) = method73()
                        let v271 : (char list -> (UH0 -> UH0)) = v269 v270
                        let v272 : (UH0 -> UH0) = v271 v266
                        let v273 : UH0 = UH0_0
                        let v274 : UH0 = v272 v273
                        let v296 : int32 = 1
                        let v297 : int32 = 1
                        let struct (v298 : System.Text.StringBuilder, v299 : int32, v300 : int32) = method74(v274, v12, v296, v297)
                        US15_0(v228, v251, v298, v299, v300)
                    else
                        let v302 : char list = []
                        let v303 : char list = ' ' :: v302 
                        let v306 : char list = ''' :: v303 
                        let v309 : char list = '"' :: v306 
                        let v312 : (char list -> (char [])) = List.toArray
                        let v313 : (char []) = v312 v309
                        let v316 : string = $"parsing.none_of / unexpected char: '{v228}' / chars: %A{v313} / s: %A{struct (v12, 1, 1)}"
                        US15_1(v316)
            let v333 : US15 =
                match v321 with
                | US15_1(v330) -> (* Error *)
                    US15_1(v330)
                | US15_0(v322, v323, v324, v325, v326) -> (* Ok *)
                    let v327 : bool = '\\' = v322
                    let v328 : char =
                        if v327 then
                            '/'
                        else
                            v322
                    US15_0(v328, v323, v324, v325, v326)
            let v352 : US16 =
                match v333 with
                | US15_1(v349) -> (* Error *)
                    US16_1(v349)
                | US15_0(v334, v335, v336, v337, v338) -> (* Ok *)
                    let v339 : (char -> string) = _.ToString()
                    let v340 : string = v339 v334
                    let struct (v343 : string, v344 : string, v345 : System.Text.StringBuilder, v346 : int32, v347 : int32) = method80(v340, v335, v336, v337, v338)
                    US16_0(v343, v344, v345, v346, v347)
            match v352 with
            | US16_1(v358) -> (* Error *)
                let v359 : int32 = v7.Length
                let v360 : bool = v359 = 0
                let v366 : US18 =
                    if v360 then
                        US18_0(v7, v12, 1, 1)
                    else
                        let v362 : string = $"parsing.eof / expected end of input / input: %A{v7}"
                        US18_1(v362)
                let v375 : US16 =
                    match v366 with
                    | US18_1(v372) -> (* Error *)
                        US16_1(v372)
                    | US18_0(v367, v368, v369, v370) -> (* Ok *)
                        US16_0(v6, v367, v368, v369, v370)
                match v375 with
                | US16_1(v407) -> (* Error *)
                    US16_1(v407)
                | US16_0(v376, v377, v378, v379, v380) -> (* Ok *)
                    let v381 : int32 = 0
                    let v382 : int32 = method81(v377, v381)
                    let v383 : (string -> int32) = String.length
                    let v384 : int32 = v383 v377
                    let v387 : int32 = v382 |> int32 
                    let v394 : int32 = v384 |> int32 
                    let v401 : int32 = v394 - 1
                    let v402 : string = v377.[int v387..int v401]
                    US16_0(v376, v402, v378, v379, v380)
            | US16_0(v353, v354, v355, v356, v357) -> (* Ok *)
                v352
        | US16_0(v203, v204, v205, v206, v207) -> (* Ok *)
            v202
    let v685 : US19 =
        match v414 with
        | US16_1(v682) -> (* Error *)
            US19_1(v682)
        | US16_0(v415, v416, v417, v418, v419) -> (* Ok *)
            let v420 : bool = "" = v416
            let v544 : US15 =
                if v420 then
                    let v421 : string = $"parsing.p_char / unexpected end of input / c: '{' '}' / s: %A{struct (v417, v418, v419)}"
                    US15_1(v421)
                else
                    let v425 : char = v416.[int 0]
                    let v426 : bool = v425 = ' '
                    if v426 then
                        let v427 : (string -> int32) = String.length
                        let v428 : int32 = v427 v416
                        let v431 : int32 = 1 |> int32 
                        let v438 : int32 = v428 |> int32 
                        let v445 : int32 = v438 - 1
                        let v446 : string = v416.[int v431..int v445]
                        let v450 : (char -> string) = _.ToString()
                        let v451 : string = v450 v425
                        let v454 : int32 = v451.Length
                        let v455 : (char []) = Array.zeroCreate<char> (v454)
                        let v456 : Mut5 = {l0 = 0} : Mut5
                        while method72(v454, v456) do
                            let v458 : int32 = v456.l0
                            let v459 : char = v451.[int v458]
                            v455.[int v458] <- v459
                            let v460 : int32 = v458 + 1
                            v456.l0 <- v460
                            ()
                        let v461 : char list = v455 |> Array.toList
                        let v464 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v465 : (char -> (UH0 -> UH0)) = method73()
                        let v466 : (char list -> (UH0 -> UH0)) = v464 v465
                        let v467 : (UH0 -> UH0) = v466 v461
                        let v468 : UH0 = UH0_0
                        let v469 : UH0 = v467 v468
                        let struct (v491 : System.Text.StringBuilder, v492 : int32, v493 : int32) = method74(v469, v417, v418, v419)
                        US15_0(v425, v446, v491, v492, v493)
                    else
                        let v495 : string = "\n"
                        let v496 : int32 = v416.IndexOf v495 
                        let v499 : int32 = v496 - 1
                        let v500 : bool = -2 = v499
                        let v507 : int32 =
                            if v500 then
                                let v501 : (string -> int32) = String.length
                                let v502 : int32 = v501 v416
                                let v505 : int32 = v502 + 1
                                v505
                            else
                                let v506 : int32 = v499 + 1
                                v506
                        let v508 : int32 = 0 |> int32 
                        let v515 : int32 = v507 |> int32 
                        let v522 : int32 = v515 - 1
                        let v523 : string = v416.[int v508..int v522]
                        let v527 : string = $"parsing.p_char / expected: '{' '}' / line: {v418} / col: {v419}
{v417}{v523}"
                        let v530 : int32 = v419 - 1
                        let v531 : (int32 -> (string -> string)) = String.replicate
                        let v532 : (string -> string) = v531 v530
                        let v533 : string = " "
                        let v534 : string = v532 v533
                        let v537 : string = "^"
                        let v538 : string = v534 + v537 
                        let v539 : string = $"{v527}
{v538}
"
                        US15_1(v539)
            let v556 : US20 =
                match v544 with
                | US15_1(v552) -> (* Error *)
                    let v553 : US17 = US17_1
                    US20_0(v553, v416, v417, v418, v419)
                | US15_0(v545, v546, v547, v548, v549) -> (* Ok *)
                    let v550 : US17 = US17_0(v545)
                    US20_0(v550, v546, v547, v548, v549)
            let v659 : US16 =
                match v556 with
                | US20_1(v656) -> (* Error *)
                    US16_1(v656)
                | US20_0(v557, v558, v559, v560, v561) -> (* Ok *)
                    let v562 : bool = "" = v558
                    let v636 : US15 =
                        if v562 then
                            let v563 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v559, v560, v561)}"
                            US15_1(v563)
                        else
                            let v567 : char = v558.[int 0]
                            let v568 : (string -> int32) = String.length
                            let v569 : int32 = v568 v558
                            let v572 : int32 = 1 |> int32 
                            let v579 : int32 = v569 |> int32 
                            let v586 : int32 = v579 - 1
                            let v587 : string = v558.[int v572..int v586]
                            let v591 : (char -> string) = _.ToString()
                            let v592 : string = v591 v567
                            let v595 : int32 = v592.Length
                            let v596 : (char []) = Array.zeroCreate<char> (v595)
                            let v597 : Mut5 = {l0 = 0} : Mut5
                            while method72(v595, v597) do
                                let v599 : int32 = v597.l0
                                let v600 : char = v592.[int v599]
                                v596.[int v599] <- v600
                                let v601 : int32 = v599 + 1
                                v597.l0 <- v601
                                ()
                            let v602 : char list = v596 |> Array.toList
                            let v605 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                            let v606 : (char -> (UH0 -> UH0)) = method73()
                            let v607 : (char list -> (UH0 -> UH0)) = v605 v606
                            let v608 : (UH0 -> UH0) = v607 v602
                            let v609 : UH0 = UH0_0
                            let v610 : UH0 = v608 v609
                            let struct (v632 : System.Text.StringBuilder, v633 : int32, v634 : int32) = method74(v610, v559, v560, v561)
                            US15_0(v567, v587, v632, v633, v634)
                    match v636 with
                    | US15_1(v652) -> (* Error *)
                        US16_1(v652)
                    | US15_0(v637, v638, v639, v640, v641) -> (* Ok *)
                        let v642 : (char -> string) = _.ToString()
                        let v643 : string = v642 v637
                        let struct (v646 : string, v647 : string, v648 : System.Text.StringBuilder, v649 : int32, v650 : int32) = method82(v643, v638, v639, v640, v641)
                        US16_0(v646, v647, v648, v649, v650)
            let v671 : US21 =
                match v659 with
                | US16_1(v667) -> (* Error *)
                    let v668 : US5 = US5_1
                    US21_0(v668, v416, v417, v418, v419)
                | US16_0(v660, v661, v662, v663, v664) -> (* Ok *)
                    let v665 : US5 = US5_0(v660)
                    US21_0(v665, v661, v662, v663, v664)
            match v671 with
            | US21_1(v678) -> (* Error *)
                US19_1(v678)
            | US21_0(v672, v673, v674, v675, v676) -> (* Ok *)
                US19_0(v415, v672, v673, v674, v675, v676)
    match v685 with
    | US19_1(v693) -> (* Error *)
        US14_1(v693)
    | US19_0(v686, v687, v688, v689, v690, v691) -> (* Ok *)
        US14_0(v686, v687)
and method85 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 4L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v19 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        let v12 : bool = v11 = 0L
                        if v12 then
                            US17_0(' ')
                        else
                            let v14 : int64 = v11 - 1L
                            US17_1
        let v23 : char =
            match v19 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v20) -> (* Some *)
                v20
        let v24 : bool = v0 = v23
        if v24 then
            true
        else
            let v25 : int64 = v1 + 1L
            method85(v0, v25)
and method86 (v0 : string, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : struct (string * string * System.Text.StringBuilder * int32 * int32) =
    let v5 : bool = "" = v1
    let v121 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v27 : char = v1.[int 0]
            let v28 : int64 = 0L
            let v29 : bool = method85(v27, v28)
            let v30 : bool = v29 = false
            if v30 then
                let v31 : (string -> int32) = String.length
                let v32 : int32 = v31 v1
                let v35 : int32 = 1 |> int32 
                let v42 : int32 = v32 |> int32 
                let v49 : int32 = v42 - 1
                let v50 : string = v1.[int v35..int v49]
                let v54 : (char -> string) = _.ToString()
                let v55 : string = v54 v27
                let v58 : int32 = v55.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method72(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v55.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method73()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v95 : System.Text.StringBuilder, v96 : int32, v97 : int32) = method74(v73, v2, v3, v4)
                US15_0(v27, v50, v95, v96, v97)
            else
                let v99 : char list = []
                let v100 : char list = ' ' :: v99 
                let v103 : char list = '"' :: v100 
                let v106 : char list = '`' :: v103 
                let v109 : char list = '\\' :: v106 
                let v112 : (char list -> (char [])) = List.toArray
                let v113 : (char []) = v112 v109
                let v116 : string = $"parsing.none_of / unexpected char: '{v27}' / chars: %A{v113} / s: %A{struct (v2, v3, v4)}"
                US15_1(v116)
    match v121 with
    | US15_1(v137) -> (* Error *)
        struct (v0, v1, v2, v3, v4)
    | US15_0(v122, v123, v124, v125, v126) -> (* Ok *)
        let v127 : (char -> string) = _.ToString()
        let v128 : string = v127 v122
        let v131 : string = v0 + v128 
        method86(v131, v123, v124, v125, v126)
and method88 (v0 : char, v1 : int64) : bool =
    let v2 : bool = v1 >= 3L
    if v2 then
        false
    else
        let v3 : bool = v1 = 0L
        let v15 : US17 =
            if v3 then
                US17_0('\\')
            else
                let v5 : int64 = v1 - 1L
                let v6 : bool = v5 = 0L
                if v6 then
                    US17_0('`')
                else
                    let v8 : int64 = v5 - 1L
                    let v9 : bool = v8 = 0L
                    if v9 then
                        US17_0('"')
                    else
                        let v11 : int64 = v8 - 1L
                        US17_1
        let v19 : char =
            match v15 with
            | US17_1 -> (* None *)
                failwith<char> "Option does not have a value."
            | US17_0(v16) -> (* Some *)
                v16
        let v20 : bool = v0 = v19
        if v20 then
            true
        else
            let v21 : int64 = v1 + 1L
            method88(v0, v21)
and closure30 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v128 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'\\'}' / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v9 : char = v0.[int 0]
            let v10 : bool = v9 = '\\'
            if v10 then
                let v11 : (string -> int32) = String.length
                let v12 : int32 = v11 v0
                let v15 : int32 = 1 |> int32 
                let v22 : int32 = v12 |> int32 
                let v29 : int32 = v22 - 1
                let v30 : string = v0.[int v15..int v29]
                let v34 : (char -> string) = _.ToString()
                let v35 : string = v34 v9
                let v38 : int32 = v35.Length
                let v39 : (char []) = Array.zeroCreate<char> (v38)
                let v40 : Mut5 = {l0 = 0} : Mut5
                while method72(v38, v40) do
                    let v42 : int32 = v40.l0
                    let v43 : char = v35.[int v42]
                    v39.[int v42] <- v43
                    let v44 : int32 = v42 + 1
                    v40.l0 <- v44
                    ()
                let v45 : char list = v39 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method73()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v45
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
                US15_0(v9, v30, v75, v76, v77)
            else
                let v79 : string = "\n"
                let v80 : int32 = v0.IndexOf v79 
                let v83 : int32 = v80 - 1
                let v84 : bool = -2 = v83
                let v91 : int32 =
                    if v84 then
                        let v85 : (string -> int32) = String.length
                        let v86 : int32 = v85 v0
                        let v89 : int32 = v86 + 1
                        v89
                    else
                        let v90 : int32 = v83 + 1
                        v90
                let v92 : int32 = 0 |> int32 
                let v99 : int32 = v91 |> int32 
                let v106 : int32 = v99 - 1
                let v107 : string = v0.[int v92..int v106]
                let v111 : string = $"parsing.p_char / expected: '{'\\'}' / line: {v2} / col: {v3}
{v1}{v107}"
                let v114 : int32 = v3 - 1
                let v115 : (int32 -> (string -> string)) = String.replicate
                let v116 : (string -> string) = v115 v114
                let v117 : string = " "
                let v118 : string = v116 v117
                let v121 : string = "^"
                let v122 : string = v118 + v121 
                let v123 : string = $"{v111}
{v122}
"
                US15_1(v123)
    let v212 : US15 =
        match v128 with
        | US15_1(v209) -> (* Error *)
            US15_1(v209)
        | US15_0(v129, v130, v131, v132, v133) -> (* Ok *)
            let v134 : bool = "" = v130
            if v134 then
                let v135 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v131, v132, v133)}"
                US15_1(v135)
            else
                let v139 : char = v130.[int 0]
                let v140 : (string -> int32) = String.length
                let v141 : int32 = v140 v130
                let v144 : int32 = 1 |> int32 
                let v151 : int32 = v141 |> int32 
                let v158 : int32 = v151 - 1
                let v159 : string = v130.[int v144..int v158]
                let v163 : (char -> string) = _.ToString()
                let v164 : string = v163 v139
                let v167 : int32 = v164.Length
                let v168 : (char []) = Array.zeroCreate<char> (v167)
                let v169 : Mut5 = {l0 = 0} : Mut5
                while method72(v167, v169) do
                    let v171 : int32 = v169.l0
                    let v172 : char = v164.[int v171]
                    v168.[int v171] <- v172
                    let v173 : int32 = v171 + 1
                    v169.l0 <- v173
                    ()
                let v174 : char list = v168 |> Array.toList
                let v177 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v178 : (char -> (UH0 -> UH0)) = method73()
                let v179 : (char list -> (UH0 -> UH0)) = v177 v178
                let v180 : (UH0 -> UH0) = v179 v174
                let v181 : UH0 = UH0_0
                let v182 : UH0 = v180 v181
                let struct (v204 : System.Text.StringBuilder, v205 : int32, v206 : int32) = method74(v182, v131, v132, v133)
                US15_0(v139, v159, v204, v205, v206)
    match v212 with
    | US15_1(v228) -> (* Error *)
        US16_1(v228)
    | US15_0(v213, v214, v215, v216, v217) -> (* Ok *)
        let v218 : (char -> string) = _.ToString()
        let v219 : string = v218 '\\'
        let v222 : (char -> string) = _.ToString()
        let v223 : string = v222 v213
        let v226 : string = v219 + v223 
        US16_0(v226, v214, v215, v216, v217)
and closure31 () struct (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32) : US16 =
    let v4 : bool = "" = v0
    let v128 : US15 =
        if v4 then
            let v5 : string = $"parsing.p_char / unexpected end of input / c: '{'`'}' / s: %A{struct (v1, v2, v3)}"
            US15_1(v5)
        else
            let v9 : char = v0.[int 0]
            let v10 : bool = v9 = '`'
            if v10 then
                let v11 : (string -> int32) = String.length
                let v12 : int32 = v11 v0
                let v15 : int32 = 1 |> int32 
                let v22 : int32 = v12 |> int32 
                let v29 : int32 = v22 - 1
                let v30 : string = v0.[int v15..int v29]
                let v34 : (char -> string) = _.ToString()
                let v35 : string = v34 v9
                let v38 : int32 = v35.Length
                let v39 : (char []) = Array.zeroCreate<char> (v38)
                let v40 : Mut5 = {l0 = 0} : Mut5
                while method72(v38, v40) do
                    let v42 : int32 = v40.l0
                    let v43 : char = v35.[int v42]
                    v39.[int v42] <- v43
                    let v44 : int32 = v42 + 1
                    v40.l0 <- v44
                    ()
                let v45 : char list = v39 |> Array.toList
                let v48 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v49 : (char -> (UH0 -> UH0)) = method73()
                let v50 : (char list -> (UH0 -> UH0)) = v48 v49
                let v51 : (UH0 -> UH0) = v50 v45
                let v52 : UH0 = UH0_0
                let v53 : UH0 = v51 v52
                let struct (v75 : System.Text.StringBuilder, v76 : int32, v77 : int32) = method74(v53, v1, v2, v3)
                US15_0(v9, v30, v75, v76, v77)
            else
                let v79 : string = "\n"
                let v80 : int32 = v0.IndexOf v79 
                let v83 : int32 = v80 - 1
                let v84 : bool = -2 = v83
                let v91 : int32 =
                    if v84 then
                        let v85 : (string -> int32) = String.length
                        let v86 : int32 = v85 v0
                        let v89 : int32 = v86 + 1
                        v89
                    else
                        let v90 : int32 = v83 + 1
                        v90
                let v92 : int32 = 0 |> int32 
                let v99 : int32 = v91 |> int32 
                let v106 : int32 = v99 - 1
                let v107 : string = v0.[int v92..int v106]
                let v111 : string = $"parsing.p_char / expected: '{'`'}' / line: {v2} / col: {v3}
{v1}{v107}"
                let v114 : int32 = v3 - 1
                let v115 : (int32 -> (string -> string)) = String.replicate
                let v116 : (string -> string) = v115 v114
                let v117 : string = " "
                let v118 : string = v116 v117
                let v121 : string = "^"
                let v122 : string = v118 + v121 
                let v123 : string = $"{v111}
{v122}
"
                US15_1(v123)
    let v212 : US15 =
        match v128 with
        | US15_1(v209) -> (* Error *)
            US15_1(v209)
        | US15_0(v129, v130, v131, v132, v133) -> (* Ok *)
            let v134 : bool = "" = v130
            if v134 then
                let v135 : string = $"parsing.any_char / unexpected end of input / s: %A{struct (v131, v132, v133)}"
                US15_1(v135)
            else
                let v139 : char = v130.[int 0]
                let v140 : (string -> int32) = String.length
                let v141 : int32 = v140 v130
                let v144 : int32 = 1 |> int32 
                let v151 : int32 = v141 |> int32 
                let v158 : int32 = v151 - 1
                let v159 : string = v130.[int v144..int v158]
                let v163 : (char -> string) = _.ToString()
                let v164 : string = v163 v139
                let v167 : int32 = v164.Length
                let v168 : (char []) = Array.zeroCreate<char> (v167)
                let v169 : Mut5 = {l0 = 0} : Mut5
                while method72(v167, v169) do
                    let v171 : int32 = v169.l0
                    let v172 : char = v164.[int v171]
                    v168.[int v171] <- v172
                    let v173 : int32 = v171 + 1
                    v169.l0 <- v173
                    ()
                let v174 : char list = v168 |> Array.toList
                let v177 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v178 : (char -> (UH0 -> UH0)) = method73()
                let v179 : (char list -> (UH0 -> UH0)) = v177 v178
                let v180 : (UH0 -> UH0) = v179 v174
                let v181 : UH0 = UH0_0
                let v182 : UH0 = v180 v181
                let struct (v204 : System.Text.StringBuilder, v205 : int32, v206 : int32) = method74(v182, v131, v132, v133)
                US15_0(v139, v159, v204, v205, v206)
    match v212 with
    | US15_1(v228) -> (* Error *)
        US16_1(v228)
    | US15_0(v213, v214, v215, v216, v217) -> (* Ok *)
        let v218 : (char -> string) = _.ToString()
        let v219 : string = v218 '`'
        let v222 : (char -> string) = _.ToString()
        let v223 : string = v222 v213
        let v226 : string = v219 + v223 
        US16_0(v226, v214, v215, v216, v217)
and method89 (v0 : string, v1 : System.Text.StringBuilder, v2 : int32, v3 : int32, v4 : UH3) : US16 =
    match v4 with
    | UH3_1(v7, v8) -> (* Cons *)
        let v9 : US16 = v7 struct (v0, v1, v2, v3)
        match v9 with
        | US16_1(v15) -> (* Error *)
            method89(v0, v1, v2, v3, v8)
        | US16_0(v10, v11, v12, v13, v14) -> (* Ok *)
            v9
    | UH3_0 -> (* Nil *)
        let v5 : string = "parsing.choice / no parsers succeeded"
        US16_1(v5)
and method90 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = UH2_1(v2, v1)
        method90(v3, v4)
    | UH2_0 -> (* Nil *)
        v1
and method87 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v115 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method88(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method72(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method73()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method74(v70, v2, v3, v4)
                US15_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = '"' :: v96 
                let v100 : char list = '`' :: v97 
                let v103 : char list = '\\' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US15_1(v110)
    let v129 : US16 =
        match v115 with
        | US15_1(v126) -> (* Error *)
            US16_1(v126)
        | US15_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v116
            US16_0(v122, v117, v118, v119, v120)
    let v143 : US16 =
        match v129 with
        | US16_1(v135) -> (* Error *)
            let v136 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure30()
            let v137 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure31()
            let v138 : UH3 = UH3_0
            let v139 : UH3 = UH3_1(v137, v138)
            let v140 : UH3 = UH3_1(v136, v139)
            method89(v1, v2, v3, v4, v140)
        | US16_0(v130, v131, v132, v133, v134) -> (* Ok *)
            v129
    match v143 with
    | US16_1(v151) -> (* Error *)
        let v152 : UH2 = UH2_0
        let v153 : UH2 = method90(v0, v152)
        US23_0(v153, v1, v2, v3, v4)
    | US16_0(v144, v145, v146, v147, v148) -> (* Ok *)
        let v149 : UH2 = UH2_1(v144, v0)
        method87(v149, v145, v146, v147, v148)
and method91 (v0 : UH2, v1 : string list) : string list =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : string list = method91(v3, v1)
        let v5 : string list = v2 :: v4 
        v5
    | UH2_0 -> (* Nil *)
        v1
and method92 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v115 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = '"' :: v6 
            let v10 : char list = '`' :: v7 
            let v13 : char list = '\\' :: v10 
            let v16 : (char list -> (char [])) = List.toArray
            let v17 : (char []) = v16 v13
            let v20 : string = $"parsing.none_of / unexpected end of input / chars: %A{v17} / s: %A{struct (v2, v3, v4)}"
            US15_1(v20)
        else
            let v24 : char = v1.[int 0]
            let v25 : int64 = 0L
            let v26 : bool = method88(v24, v25)
            let v27 : bool = v26 = false
            if v27 then
                let v28 : (string -> int32) = String.length
                let v29 : int32 = v28 v1
                let v32 : int32 = 1 |> int32 
                let v39 : int32 = v29 |> int32 
                let v46 : int32 = v39 - 1
                let v47 : string = v1.[int v32..int v46]
                let v51 : (char -> string) = _.ToString()
                let v52 : string = v51 v24
                let v55 : int32 = v52.Length
                let v56 : (char []) = Array.zeroCreate<char> (v55)
                let v57 : Mut5 = {l0 = 0} : Mut5
                while method72(v55, v57) do
                    let v59 : int32 = v57.l0
                    let v60 : char = v52.[int v59]
                    v56.[int v59] <- v60
                    let v61 : int32 = v59 + 1
                    v57.l0 <- v61
                    ()
                let v62 : char list = v56 |> Array.toList
                let v65 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v66 : (char -> (UH0 -> UH0)) = method73()
                let v67 : (char list -> (UH0 -> UH0)) = v65 v66
                let v68 : (UH0 -> UH0) = v67 v62
                let v69 : UH0 = UH0_0
                let v70 : UH0 = v68 v69
                let struct (v92 : System.Text.StringBuilder, v93 : int32, v94 : int32) = method74(v70, v2, v3, v4)
                US15_0(v24, v47, v92, v93, v94)
            else
                let v96 : char list = []
                let v97 : char list = '"' :: v96 
                let v100 : char list = '`' :: v97 
                let v103 : char list = '\\' :: v100 
                let v106 : (char list -> (char [])) = List.toArray
                let v107 : (char []) = v106 v103
                let v110 : string = $"parsing.none_of / unexpected char: '{v24}' / chars: %A{v107} / s: %A{struct (v2, v3, v4)}"
                US15_1(v110)
    let v129 : US16 =
        match v115 with
        | US15_1(v126) -> (* Error *)
            US16_1(v126)
        | US15_0(v116, v117, v118, v119, v120) -> (* Ok *)
            let v121 : (char -> string) = _.ToString()
            let v122 : string = v121 v116
            US16_0(v122, v117, v118, v119, v120)
    match v129 with
    | US16_1(v137) -> (* Error *)
        let v138 : UH2 = UH2_0
        let v139 : UH2 = method90(v0, v138)
        US23_0(v139, v1, v2, v3, v4)
    | US16_0(v130, v131, v132, v133, v134) -> (* Ok *)
        let v135 : UH2 = UH2_1(v130, v0)
        method92(v135, v131, v132, v133, v134)
and method84 (v0 : UH2, v1 : string, v2 : System.Text.StringBuilder, v3 : int32, v4 : int32) : US23 =
    let v5 : bool = "" = v1
    let v121 : US15 =
        if v5 then
            let v6 : char list = []
            let v7 : char list = ' ' :: v6 
            let v10 : char list = '"' :: v7 
            let v13 : char list = '`' :: v10 
            let v16 : char list = '\\' :: v13 
            let v19 : (char list -> (char [])) = List.toArray
            let v20 : (char []) = v19 v16
            let v23 : string = $"parsing.none_of / unexpected end of input / chars: %A{v20} / s: %A{struct (v2, v3, v4)}"
            US15_1(v23)
        else
            let v27 : char = v1.[int 0]
            let v28 : int64 = 0L
            let v29 : bool = method85(v27, v28)
            let v30 : bool = v29 = false
            if v30 then
                let v31 : (string -> int32) = String.length
                let v32 : int32 = v31 v1
                let v35 : int32 = 1 |> int32 
                let v42 : int32 = v32 |> int32 
                let v49 : int32 = v42 - 1
                let v50 : string = v1.[int v35..int v49]
                let v54 : (char -> string) = _.ToString()
                let v55 : string = v54 v27
                let v58 : int32 = v55.Length
                let v59 : (char []) = Array.zeroCreate<char> (v58)
                let v60 : Mut5 = {l0 = 0} : Mut5
                while method72(v58, v60) do
                    let v62 : int32 = v60.l0
                    let v63 : char = v55.[int v62]
                    v59.[int v62] <- v63
                    let v64 : int32 = v62 + 1
                    v60.l0 <- v64
                    ()
                let v65 : char list = v59 |> Array.toList
                let v68 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                let v69 : (char -> (UH0 -> UH0)) = method73()
                let v70 : (char list -> (UH0 -> UH0)) = v68 v69
                let v71 : (UH0 -> UH0) = v70 v65
                let v72 : UH0 = UH0_0
                let v73 : UH0 = v71 v72
                let struct (v95 : System.Text.StringBuilder, v96 : int32, v97 : int32) = method74(v73, v2, v3, v4)
                US15_0(v27, v50, v95, v96, v97)
            else
                let v99 : char list = []
                let v100 : char list = ' ' :: v99 
                let v103 : char list = '"' :: v100 
                let v106 : char list = '`' :: v103 
                let v109 : char list = '\\' :: v106 
                let v112 : (char list -> (char [])) = List.toArray
                let v113 : (char []) = v112 v109
                let v116 : string = $"parsing.none_of / unexpected char: '{v27}' / chars: %A{v113} / s: %A{struct (v2, v3, v4)}"
                US15_1(v116)
    let v140 : US16 =
        match v121 with
        | US15_1(v137) -> (* Error *)
            US16_1(v137)
        | US15_0(v122, v123, v124, v125, v126) -> (* Ok *)
            let v127 : (char -> string) = _.ToString()
            let v128 : string = v127 v122
            let struct (v131 : string, v132 : string, v133 : System.Text.StringBuilder, v134 : int32, v135 : int32) = method86(v128, v123, v124, v125, v126)
            US16_0(v131, v132, v133, v134, v135)
    let v521 : US16 =
        match v140 with
        | US16_1(v146) -> (* Error *)
            let v270 : US15 =
                if v5 then
                    let v147 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v2, v3, v4)}"
                    US15_1(v147)
                else
                    let v151 : char = v1.[int 0]
                    let v152 : bool = v151 = '"'
                    if v152 then
                        let v153 : (string -> int32) = String.length
                        let v154 : int32 = v153 v1
                        let v157 : int32 = 1 |> int32 
                        let v164 : int32 = v154 |> int32 
                        let v171 : int32 = v164 - 1
                        let v172 : string = v1.[int v157..int v171]
                        let v176 : (char -> string) = _.ToString()
                        let v177 : string = v176 v151
                        let v180 : int32 = v177.Length
                        let v181 : (char []) = Array.zeroCreate<char> (v180)
                        let v182 : Mut5 = {l0 = 0} : Mut5
                        while method72(v180, v182) do
                            let v184 : int32 = v182.l0
                            let v185 : char = v177.[int v184]
                            v181.[int v184] <- v185
                            let v186 : int32 = v184 + 1
                            v182.l0 <- v186
                            ()
                        let v187 : char list = v181 |> Array.toList
                        let v190 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                        let v191 : (char -> (UH0 -> UH0)) = method73()
                        let v192 : (char list -> (UH0 -> UH0)) = v190 v191
                        let v193 : (UH0 -> UH0) = v192 v187
                        let v194 : UH0 = UH0_0
                        let v195 : UH0 = v193 v194
                        let struct (v217 : System.Text.StringBuilder, v218 : int32, v219 : int32) = method74(v195, v2, v3, v4)
                        US15_0(v151, v172, v217, v218, v219)
                    else
                        let v221 : string = "\n"
                        let v222 : int32 = v1.IndexOf v221 
                        let v225 : int32 = v222 - 1
                        let v226 : bool = -2 = v225
                        let v233 : int32 =
                            if v226 then
                                let v227 : (string -> int32) = String.length
                                let v228 : int32 = v227 v1
                                let v231 : int32 = v228 + 1
                                v231
                            else
                                let v232 : int32 = v225 + 1
                                v232
                        let v234 : int32 = 0 |> int32 
                        let v241 : int32 = v233 |> int32 
                        let v248 : int32 = v241 - 1
                        let v249 : string = v1.[int v234..int v248]
                        let v253 : string = $"parsing.p_char / expected: '{'"'}' / line: {v3} / col: {v4}
{v2}{v249}"
                        let v256 : int32 = v4 - 1
                        let v257 : (int32 -> (string -> string)) = String.replicate
                        let v258 : (string -> string) = v257 v256
                        let v259 : string = " "
                        let v260 : string = v258 v259
                        let v263 : string = "^"
                        let v264 : string = v260 + v263 
                        let v265 : string = $"{v253}
{v264}
"
                        US15_1(v265)
            let v456 : US16 =
                match v270 with
                | US15_1(v453) -> (* Error *)
                    US16_1(v453)
                | US15_0(v271, v272, v273, v274, v275) -> (* Ok *)
                    let v276 : UH2 = UH2_0
                    let v277 : US23 = method87(v276, v272, v273, v274, v275)
                    let v304 : US16 =
                        match v277 with
                        | US23_1(v301) -> (* Error *)
                            US16_1(v301)
                        | US23_0(v278, v279, v280, v281, v282) -> (* Ok *)
                            let v283 : string list = []
                            let v284 : string list = method91(v278, v283)
                            let v285 : unit = ()
                            let _v285 =
                                seq {
                                    for i = 0 to v284.Length - 1 do yield v284.[i]
                                    (*
                                    ()
                                *)
                                }
                                (*
                                ()
                            *)
                            let v288 : string seq = _v285 
                            let v294 : (string -> (string seq -> string)) = String.concat
                            let v295 : string = ""
                            let v296 : (string seq -> string) = v294 v295
                            let v297 : string = v296 v288
                            US16_0(v297, v279, v280, v281, v282)
                    match v304 with
                    | US16_1(v448) -> (* Error *)
                        let v449 : string = "parsing.between / expected content"
                        US16_1(v449)
                    | US16_0(v305, v306, v307, v308, v309) -> (* Ok *)
                        let v310 : bool = "" = v306
                        let v434 : US15 =
                            if v310 then
                                let v311 : string = $"parsing.p_char / unexpected end of input / c: '{'"'}' / s: %A{struct (v307, v308, v309)}"
                                US15_1(v311)
                            else
                                let v315 : char = v306.[int 0]
                                let v316 : bool = v315 = '"'
                                if v316 then
                                    let v317 : (string -> int32) = String.length
                                    let v318 : int32 = v317 v306
                                    let v321 : int32 = 1 |> int32 
                                    let v328 : int32 = v318 |> int32 
                                    let v335 : int32 = v328 - 1
                                    let v336 : string = v306.[int v321..int v335]
                                    let v340 : (char -> string) = _.ToString()
                                    let v341 : string = v340 v315
                                    let v344 : int32 = v341.Length
                                    let v345 : (char []) = Array.zeroCreate<char> (v344)
                                    let v346 : Mut5 = {l0 = 0} : Mut5
                                    while method72(v344, v346) do
                                        let v348 : int32 = v346.l0
                                        let v349 : char = v341.[int v348]
                                        v345.[int v348] <- v349
                                        let v350 : int32 = v348 + 1
                                        v346.l0 <- v350
                                        ()
                                    let v351 : char list = v345 |> Array.toList
                                    let v354 : ((char -> (UH0 -> UH0)) -> (char list -> (UH0 -> UH0))) = List.foldBack
                                    let v355 : (char -> (UH0 -> UH0)) = method73()
                                    let v356 : (char list -> (UH0 -> UH0)) = v354 v355
                                    let v357 : (UH0 -> UH0) = v356 v351
                                    let v358 : UH0 = UH0_0
                                    let v359 : UH0 = v357 v358
                                    let struct (v381 : System.Text.StringBuilder, v382 : int32, v383 : int32) = method74(v359, v307, v308, v309)
                                    US15_0(v315, v336, v381, v382, v383)
                                else
                                    let v385 : string = "\n"
                                    let v386 : int32 = v306.IndexOf v385 
                                    let v389 : int32 = v386 - 1
                                    let v390 : bool = -2 = v389
                                    let v397 : int32 =
                                        if v390 then
                                            let v391 : (string -> int32) = String.length
                                            let v392 : int32 = v391 v306
                                            let v395 : int32 = v392 + 1
                                            v395
                                        else
                                            let v396 : int32 = v389 + 1
                                            v396
                                    let v398 : int32 = 0 |> int32 
                                    let v405 : int32 = v397 |> int32 
                                    let v412 : int32 = v405 - 1
                                    let v413 : string = v306.[int v398..int v412]
                                    let v417 : string = $"parsing.p_char / expected: '{'"'}' / line: {v308} / col: {v309}
{v307}{v413}"
                                    let v420 : int32 = v309 - 1
                                    let v421 : (int32 -> (string -> string)) = String.replicate
                                    let v422 : (string -> string) = v421 v420
                                    let v423 : string = " "
                                    let v424 : string = v422 v423
                                    let v427 : string = "^"
                                    let v428 : string = v424 + v427 
                                    let v429 : string = $"{v417}
{v428}
"
                                    US15_1(v429)
                        match v434 with
                        | US15_1(v441) -> (* Error *)
                            let v442 : string = $"parsing.between / expected closing delimiter / e: %A{v441} / input: %A{struct (v1, v2, v3, v4)} / rest1: %A{struct (v272, v273, v274, v275)} / rest2: %A{struct (v306, v307, v308, v309)}"
                            US16_1(v442)
                        | US15_0(v435, v436, v437, v438, v439) -> (* Ok *)
                            US16_0(v305, v436, v437, v438, v439)
            match v456 with
            | US16_1(v462) -> (* Error *)
                let v463 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure30()
                let v464 : (struct (string * System.Text.StringBuilder * int32 * int32) -> US16) = closure31()
                let v465 : UH3 = UH3_0
                let v466 : UH3 = UH3_1(v464, v465)
                let v467 : UH3 = UH3_1(v463, v466)
                let v468 : US16 = method89(v1, v2, v3, v4, v467)
                let v479 : US16 =
                    match v468 with
                    | US16_1(v476) -> (* Error *)
                        US16_1(v476)
                    | US16_0(v469, v470, v471, v472, v473) -> (* Ok *)
                        let v474 : string = ""
                        US16_0(v474, v470, v471, v472, v473)
                let v490 : US23 =
                    match v479 with
                    | US16_1(v487) -> (* Error *)
                        US23_1(v487)
                    | US16_0(v480, v481, v482, v483, v484) -> (* Ok *)
                        let v485 : UH2 = UH2_0
                        method92(v485, v481, v482, v483, v484)
                match v490 with
                | US23_1(v514) -> (* Error *)
                    US16_1(v514)
                | US23_0(v491, v492, v493, v494, v495) -> (* Ok *)
                    let v496 : string list = []
                    let v497 : string list = method91(v491, v496)
                    let v498 : unit = ()
                    let _v498 =
                        seq {
                            for i = 0 to v497.Length - 1 do yield v497.[i]
                            (*
                            ()
                        *)
                        }
                        (*
                        ()
                    *)
                    let v501 : string seq = _v498 
                    let v507 : (string -> (string seq -> string)) = String.concat
                    let v508 : string = ""
                    let v509 : (string seq -> string) = v507 v508
                    let v510 : string = v509 v501
                    US16_0(v510, v492, v493, v494, v495)
            | US16_0(v457, v458, v459, v460, v461) -> (* Ok *)
                v456
        | US16_0(v141, v142, v143, v144, v145) -> (* Ok *)
            v140
    match v521 with
    | US16_1(v570) -> (* Error *)
        let v571 : UH2 = UH2_0
        let v572 : UH2 = method90(v0, v571)
        US23_0(v572, v1, v2, v3, v4)
    | US16_0(v522, v523, v524, v525, v526) -> (* Ok *)
        let v527 : int32 = 0
        let v528 : int32 = method81(v523, v527)
        let v529 : bool = 0 = v528
        let v556 : US18 =
            if v529 then
                let v530 : string = "parsing.spaces1 / expected at least one space"
                US18_1(v530)
            else
                let v532 : (string -> int32) = String.length
                let v533 : int32 = v532 v523
                let v536 : int32 = v528 |> int32 
                let v543 : int32 = v533 |> int32 
                let v550 : int32 = v543 - 1
                let v551 : string = v523.[int v536..int v550]
                US18_0(v551, v524, v525, v526)
        match v556 with
        | US18_1(v563) -> (* Error *)
            let v564 : UH2 = UH2_0
            let v565 : UH2 = UH2_1(v522, v564)
            let v566 : UH2 = method90(v0, v565)
            US23_0(v566, v523, v524, v525, v526)
        | US18_0(v557, v558, v559, v560) -> (* Ok *)
            let v561 : UH2 = UH2_1(v522, v0)
            method84(v561, v557, v558, v559, v560)
and method83 (v0 : string) : US22 =
    let mutable _v0 = None
    #if !FABLE_COMPILER && !WASM && !CONTRACT
    let v1 : (string -> string option) = Option.ofObj
    let v2 : string option = v1 v0
    v2 
    #else
    Some v0 
    #endif
    |> fun x -> _v0 <- Some x
    let v3 : string option = match _v0 with Some x -> x | None -> failwith "optionm'.of_obj / _v0=None"
    let v6 : string = ""
    let v7 : string = v3 |> Option.defaultValue v6 
    let v10 : string = method71()
    let v11 : (string -> System.Text.StringBuilder) = System.Text.StringBuilder 
    let v12 : System.Text.StringBuilder = v11 v10
    let v15 : UH2 = UH2_0
    let v16 : int32 = 1
    let v17 : int32 = 1
    let v18 : US23 = method84(v15, v7, v12, v16, v17)
    match v18 with
    | US23_1(v31) -> (* Error *)
        US22_1(v31)
    | US23_0(v19, v20, v21, v22, v23) -> (* Ok *)
        let v24 : string list = []
        let v25 : string list = method91(v19, v24)
        let v26 : (string list -> (string [])) = List.toArray
        let v27 : (string []) = v26 v25
        US22_0(v27)
and method94 (v0 : string, v1 : string, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = "{ "
    let v12 : string = $"{v11}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v10, v12)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v20 : string = "file_name"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v10, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v10, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v10, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v55 : string = "arguments"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v64 : string = $"{v29}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v10, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : string = $"{v1}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v10, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = $"{v46}"
    let v83 : unit = ()
    let v84 : (unit -> unit) = closure7(v10, v80)
    let v85 : unit = (fun () -> v84 (); v83) ()
    let v88 : string = "options"
    let v89 : string = $"{v88}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v10, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v29}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v10, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v11}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v10, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v10, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v29}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v10, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v10, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v46}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v10, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "cancellation_token"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v10, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v29}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v10, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v164 : string = "format!(\"{:#?}\", $0)"
    let v165 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v164 
    let v166 : string = "fable_library_rust::String_::fromString($0)"
    let v167 : string = Fable.Core.RustInterop.emitRustExpr v165 v166 
    let _v163 = v167 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v168 : string = "format!(\"{:#?}\", $0)"
    let v169 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v168 
    let v170 : string = "fable_library_rust::String_::fromString($0)"
    let v171 : string = Fable.Core.RustInterop.emitRustExpr v169 v170 
    let _v163 = v171 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v172 : string = "format!(\"{:#?}\", $0)"
    let v173 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v172 
    let v174 : string = "fable_library_rust::String_::fromString($0)"
    let v175 : string = Fable.Core.RustInterop.emitRustExpr v173 v174 
    let _v163 = v175 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v176 : string = $"%A{v3}"
    let _v163 = v176 
    #endif
#if FABLE_COMPILER_PYTHON
    let v179 : string = $"%A{v3}"
    let _v163 = v179 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v182 : string = $"%A{v3}"
    let _v163 = v182 
    #endif
#else
    let v185 : string = $"%A{v3}"
    let _v163 = v185 
    #endif
    let v188 : string = _v163 
    let v193 : string = $"{v188}"
    let v196 : unit = ()
    let v197 : (unit -> unit) = closure7(v10, v193)
    let v198 : unit = (fun () -> v197 (); v196) ()
    let v201 : string = $"{v46}"
    let v204 : unit = ()
    let v205 : (unit -> unit) = closure7(v10, v201)
    let v206 : unit = (fun () -> v205 (); v204) ()
    let v209 : string = "environment_variables"
    let v210 : string = $"{v209}"
    let v213 : unit = ()
    let v214 : (unit -> unit) = closure7(v10, v210)
    let v215 : unit = (fun () -> v214 (); v213) ()
    let v218 : string = $"{v29}"
    let v221 : unit = ()
    let v222 : (unit -> unit) = closure7(v10, v218)
    let v223 : unit = (fun () -> v222 (); v221) ()
    let v226 : string = $"%A{v4}"
    let v229 : string = $"{v226}"
    let v232 : unit = ()
    let v233 : (unit -> unit) = closure7(v10, v229)
    let v234 : unit = (fun () -> v233 (); v232) ()
    let v237 : string = $"{v46}"
    let v240 : unit = ()
    let v241 : (unit -> unit) = closure7(v10, v237)
    let v242 : unit = (fun () -> v241 (); v240) ()
    let v245 : string = "on_line"
    let v246 : string = $"{v245}"
    let v249 : unit = ()
    let v250 : (unit -> unit) = closure7(v10, v246)
    let v251 : unit = (fun () -> v250 (); v249) ()
    let v254 : string = $"{v29}"
    let v257 : unit = ()
    let v258 : (unit -> unit) = closure7(v10, v254)
    let v259 : unit = (fun () -> v258 (); v257) ()
    let v262 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v263 : string = "format!(\"{:#?}\", $0)"
    let v264 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v263 
    let v265 : string = "fable_library_rust::String_::fromString($0)"
    let v266 : string = Fable.Core.RustInterop.emitRustExpr v264 v265 
    let _v262 = v266 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v267 : string = "format!(\"{:#?}\", $0)"
    let v268 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v267 
    let v269 : string = "fable_library_rust::String_::fromString($0)"
    let v270 : string = Fable.Core.RustInterop.emitRustExpr v268 v269 
    let _v262 = v270 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v271 : string = "format!(\"{:#?}\", $0)"
    let v272 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v271 
    let v273 : string = "fable_library_rust::String_::fromString($0)"
    let v274 : string = Fable.Core.RustInterop.emitRustExpr v272 v273 
    let _v262 = v274 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v275 : string = $"%A{v5}"
    let _v262 = v275 
    #endif
#if FABLE_COMPILER_PYTHON
    let v278 : string = $"%A{v5}"
    let _v262 = v278 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v281 : string = $"%A{v5}"
    let _v262 = v281 
    #endif
#else
    let v284 : string = $"%A{v5}"
    let _v262 = v284 
    #endif
    let v287 : string = _v262 
    let v292 : string = $"{v287}"
    let v295 : unit = ()
    let v296 : (unit -> unit) = closure7(v10, v292)
    let v297 : unit = (fun () -> v296 (); v295) ()
    let v300 : string = $"{v46}"
    let v303 : unit = ()
    let v304 : (unit -> unit) = closure7(v10, v300)
    let v305 : unit = (fun () -> v304 (); v303) ()
    let v308 : string = "stdin"
    let v309 : string = $"{v308}"
    let v312 : unit = ()
    let v313 : (unit -> unit) = closure7(v10, v309)
    let v314 : unit = (fun () -> v313 (); v312) ()
    let v317 : string = $"{v29}"
    let v320 : unit = ()
    let v321 : (unit -> unit) = closure7(v10, v317)
    let v322 : unit = (fun () -> v321 (); v320) ()
    let v325 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v326 : string = "format!(\"{:#?}\", $0)"
    let v327 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v326 
    let v328 : string = "fable_library_rust::String_::fromString($0)"
    let v329 : string = Fable.Core.RustInterop.emitRustExpr v327 v328 
    let _v325 = v329 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v330 : string = "format!(\"{:#?}\", $0)"
    let v331 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v330 
    let v332 : string = "fable_library_rust::String_::fromString($0)"
    let v333 : string = Fable.Core.RustInterop.emitRustExpr v331 v332 
    let _v325 = v333 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v334 : string = "format!(\"{:#?}\", $0)"
    let v335 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v334 
    let v336 : string = "fable_library_rust::String_::fromString($0)"
    let v337 : string = Fable.Core.RustInterop.emitRustExpr v335 v336 
    let _v325 = v337 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v338 : string = $"%A{v6}"
    let _v325 = v338 
    #endif
#if FABLE_COMPILER_PYTHON
    let v341 : string = $"%A{v6}"
    let _v325 = v341 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v344 : string = $"%A{v6}"
    let _v325 = v344 
    #endif
#else
    let v347 : string = $"%A{v6}"
    let _v325 = v347 
    #endif
    let v350 : string = _v325 
    let v355 : string = $"{v350}"
    let v358 : unit = ()
    let v359 : (unit -> unit) = closure7(v10, v355)
    let v360 : unit = (fun () -> v359 (); v358) ()
    let v363 : string = $"{v46}"
    let v366 : unit = ()
    let v367 : (unit -> unit) = closure7(v10, v363)
    let v368 : unit = (fun () -> v367 (); v366) ()
    let v371 : string = "trace"
    let v372 : string = $"{v371}"
    let v375 : unit = ()
    let v376 : (unit -> unit) = closure7(v10, v372)
    let v377 : unit = (fun () -> v376 (); v375) ()
    let v380 : string = $"{v29}"
    let v383 : unit = ()
    let v384 : (unit -> unit) = closure7(v10, v380)
    let v385 : unit = (fun () -> v384 (); v383) ()
    let v390 : string =
        if v7 then
            let v388 : string = "true"
            v388
        else
            let v389 : string = "false"
            v389
    let v391 : string = $"{v390}"
    let v394 : unit = ()
    let v395 : (unit -> unit) = closure7(v10, v391)
    let v396 : unit = (fun () -> v395 (); v394) ()
    let v399 : string = $"{v46}"
    let v402 : unit = ()
    let v403 : (unit -> unit) = closure7(v10, v399)
    let v404 : unit = (fun () -> v403 (); v402) ()
    let v407 : string = "working_directory"
    let v408 : string = $"{v407}"
    let v411 : unit = ()
    let v412 : (unit -> unit) = closure7(v10, v408)
    let v413 : unit = (fun () -> v412 (); v411) ()
    let v416 : string = $"{v29}"
    let v419 : unit = ()
    let v420 : (unit -> unit) = closure7(v10, v416)
    let v421 : unit = (fun () -> v420 (); v419) ()
    let v424 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v425 : string = "format!(\"{:#?}\", $0)"
    let v426 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v425 
    let v427 : string = "fable_library_rust::String_::fromString($0)"
    let v428 : string = Fable.Core.RustInterop.emitRustExpr v426 v427 
    let _v424 = v428 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v429 : string = "format!(\"{:#?}\", $0)"
    let v430 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v429 
    let v431 : string = "fable_library_rust::String_::fromString($0)"
    let v432 : string = Fable.Core.RustInterop.emitRustExpr v430 v431 
    let _v424 = v432 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v433 : string = "format!(\"{:#?}\", $0)"
    let v434 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v433 
    let v435 : string = "fable_library_rust::String_::fromString($0)"
    let v436 : string = Fable.Core.RustInterop.emitRustExpr v434 v435 
    let _v424 = v436 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v437 : string = $"%A{v8}"
    let _v424 = v437 
    #endif
#if FABLE_COMPILER_PYTHON
    let v440 : string = $"%A{v8}"
    let _v424 = v440 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v443 : string = $"%A{v8}"
    let _v424 = v443 
    #endif
#else
    let v446 : string = $"%A{v8}"
    let _v424 = v446 
    #endif
    let v449 : string = _v424 
    let v454 : string = $"{v449}"
    let v457 : unit = ()
    let v458 : (unit -> unit) = closure7(v10, v454)
    let v459 : unit = (fun () -> v458 (); v457) ()
    let v462 : string = " }"
    let v463 : string = $"{v462}"
    let v466 : unit = ()
    let v467 : (unit -> unit) = closure7(v10, v463)
    let v468 : unit = (fun () -> v467 (); v466) ()
    let v471 : string = $"{v462}"
    let v474 : unit = ()
    let v475 : (unit -> unit) = closure7(v10, v471)
    let v476 : unit = (fun () -> v475 (); v474) ()
    let v479 : string = v10.l0
    v479
and method93 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method94(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v19 : string = "runtime.execute_with_options"
    let v20 : string = $"{v6} {v7} #{v18} %s{v19} / {v17}"
    method18(v20)
and closure32 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : string, v8 : Vec<std_string_String>) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = $"%A{v8}"
        let v50 : string = method93(v27, v28, v29, v30, v31, v32, v45, v46, v7, v47, v0, v1, v2, v3, v4, v5, v6)
        method19(v50)
and closure33 () (v0 : std_process_Child option) : std_process_Child option =
    v0
and method95 () : (std_process_Child option -> std_process_Child option) =
    closure33()
and closure34 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_Child option>>) : US24 =
    US24_0(v0)
and method96 () : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) =
    closure34()
and closure35 () (v0 : std_string_String) : US24 =
    US24_1(v0)
and method97 () : (std_string_String -> US24) =
    closure35()
and method99 (v0 : std_string_String) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "error"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "format!(\"{:#?}\", $0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v31 
    let v33 : string = "fable_library_rust::String_::fromString($0)"
    let v34 : string = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "format!(\"{:#?}\", $0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v35 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let _v30 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _v30 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : string = $"%A{v0}"
    let _v30 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : string = $"%A{v0}"
    let _v30 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v30 = v49 
    #endif
#else
    let v52 : string = $"%A{v0}"
    let _v30 = v52 
    #endif
    let v55 : string = _v30 
    let v60 : string = $"{v55}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v2, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = " }"
    let v69 : string = $"{v68}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v2, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = v2.l0
    v77
and method98 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method99(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options / child error"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure36 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method49()
        let v39 : string = method98(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method100 (v0 : std_sync_MutexGuard<std_process_Child option>) : std_sync_MutexGuard<std_process_Child option> =
    v0
and closure37 () (v0 : std_process_ChildStdin option) : std_process_ChildStdin option =
    v0
and method101 () : (std_process_ChildStdin option -> std_process_ChildStdin option) =
    closure37()
and closure38 () (v0 : std_sync_mpsc_Sender<std_string_String>) : std_sync_mpsc_Sender<std_string_String> =
    v0
and method102 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure38()
and method103 () : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) =
    closure38()
and closure39 () (v0 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> =
    v0
and method104 () : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) =
    closure39()
and closure40 () (v0 : std_string_String) : US26 =
    US26_0(v0)
and method105 () : (std_string_String -> US26) =
    closure40()
and closure41 () (v0 : std_string_String) : US26 =
    US26_1(v0)
and method106 () : (std_string_String -> US26) =
    closure41()
and method108 (v0 : bool, v1 : std_string_String) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "trace'"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v33 : string =
        if v0 then
            let v31 : string = "true"
            v31
        else
            let v32 : string = "false"
            v32
    let v34 : string = $"{v33}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v3, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v3, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "e"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v3, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v22}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v3, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v69 : string = "format!(\"{:#?}\", $0)"
    let v70 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v69 
    let v71 : string = "fable_library_rust::String_::fromString($0)"
    let v72 : string = Fable.Core.RustInterop.emitRustExpr v70 v71 
    let _v68 = v72 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v73 : string = "format!(\"{:#?}\", $0)"
    let v74 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v73 
    let v75 : string = "fable_library_rust::String_::fromString($0)"
    let v76 : string = Fable.Core.RustInterop.emitRustExpr v74 v75 
    let _v68 = v76 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v77 : string = "format!(\"{:#?}\", $0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v77 
    let v79 : string = "fable_library_rust::String_::fromString($0)"
    let v80 : string = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let _v68 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : string = $"%A{v1}"
    let _v68 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : string = $"%A{v1}"
    let _v68 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : string = $"%A{v1}"
    let _v68 = v87 
    #endif
#else
    let v90 : string = $"%A{v1}"
    let _v68 = v90 
    #endif
    let v93 : string = _v68 
    let v98 : string = $"{v93}"
    let v101 : unit = ()
    let v102 : (unit -> unit) = closure7(v3, v98)
    let v103 : unit = (fun () -> v102 (); v101) ()
    let v106 : string = " }"
    let v107 : string = $"{v106}"
    let v110 : unit = ()
    let v111 : (unit -> unit) = closure7(v3, v107)
    let v112 : unit = (fun () -> v111 (); v110) ()
    let v115 : string = v3.l0
    v115
and method107 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : std_string_String) : string =
    let v10 : string = method108(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.stdio_line"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure42 (v0 : bool, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method107(v20, v21, v22, v23, v24, v25, v38, v39, v0, v1)
        method19(v40)
and method110 () : string =
    let v0 : string = method14()
    let v1 : Mut3 = {l0 = v0} : Mut3
    let v2 : string = v1.l0
    v2
and method109 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method110()
    let v10 : int64 = v0.l0
    let v11 : string = $"{v6} {v7} #{v10} %s{v8} / {v9}"
    method18(v11)
and closure43 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method52()
        let v39 : bool = v0 = ""
        let v42 : string =
            if v39 then
                let v40 : string = ""
                v40
            else
                method109(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v42)
and closure44 () (v0 : std_sync_mpsc_SendError<std_string_String>) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method111 () : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) =
    closure44()
and method112 (v0 : Result<unit, string>) : Result<unit, string> =
    v0
and closure45 () (v0 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit)) : US27 =
    US27_0(v0)
and method113 () : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US27) =
    closure45()
and method114 (v0 : std_sync_MutexGuard<std_process_ChildStdin option>) : std_sync_MutexGuard<std_process_ChildStdin option> =
    v0
and closure46 () (v0 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>>) : US28 =
    US28_0(v0)
and method115 () : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US28) =
    closure46()
and method116 (v0 : std_sync_MutexGuard<std_process_ChildStdin>) : std_sync_MutexGuard<std_process_ChildStdin> =
    v0
and method117 (v0 : std_thread_JoinHandle<Result<unit, string>>) : std_thread_JoinHandle<Result<unit, string>> =
    v0
and closure47 () (v0 : std_process_Output) : US29 =
    US29_0(v0)
and method118 () : (std_process_Output -> US29) =
    closure47()
and closure48 () (v0 : std_string_String) : US29 =
    US29_1(v0)
and method119 () : (std_string_String -> US29) =
    closure48()
and method120 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method99(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options / output error"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure49 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method49()
        let v39 : string = method120(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure50 () (v0 : int32) : US30 =
    US30_0(v0)
and method121 () : (int32 -> US30) =
    closure50()
and method123 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "std_trace_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method122 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method123(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options / result"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure51 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_0
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method52()
        let v40 : int32 = v1.Length
        let v41 : string = method122(v20, v21, v22, v23, v24, v25, v38, v39, v0, v40)
        method19(v41)
and method126 (v0 : string, v1 : US5, v2 : string, v3 : System.Threading.CancellationToken option, v4 : (struct (string * string) []), v5 : (struct (int32 * string * bool) -> Async<unit>) option, v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v7 : bool, v8 : string option) : string =
    let v9 : string = method14()
    let v10 : Mut3 = {l0 = v9} : Mut3
    let v11 : string = "{ "
    let v12 : string = $"{v11}"
    let v15 : unit = ()
    let v16 : (unit -> unit) = closure7(v10, v12)
    let v17 : unit = (fun () -> v16 (); v15) ()
    let v20 : string = "file_name"
    let v21 : string = $"{v20}"
    let v24 : unit = ()
    let v25 : (unit -> unit) = closure7(v10, v21)
    let v26 : unit = (fun () -> v25 (); v24) ()
    let v29 : string = " = "
    let v30 : string = $"{v29}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v10, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = $"{v0}"
    let v41 : unit = ()
    let v42 : (unit -> unit) = closure7(v10, v38)
    let v43 : unit = (fun () -> v42 (); v41) ()
    let v46 : string = "; "
    let v47 : string = $"{v46}"
    let v50 : unit = ()
    let v51 : (unit -> unit) = closure7(v10, v47)
    let v52 : unit = (fun () -> v51 (); v50) ()
    let v55 : string = "arguments"
    let v56 : string = $"{v55}"
    let v59 : unit = ()
    let v60 : (unit -> unit) = closure7(v10, v56)
    let v61 : unit = (fun () -> v60 (); v59) ()
    let v64 : string = $"{v29}"
    let v67 : unit = ()
    let v68 : (unit -> unit) = closure7(v10, v64)
    let v69 : unit = (fun () -> v68 (); v67) ()
    let v72 : string = $"%A{v1}"
    let v75 : string = $"{v72}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v10, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v83 : string = $"{v46}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v10, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = "options"
    let v92 : string = $"{v91}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v10, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v100 : string = $"{v29}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v10, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v108 : string = $"{v11}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v10, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = "command"
    let v117 : string = $"{v116}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v10, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v125 : string = $"{v29}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v10, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = $"{v2}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v10, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v141 : string = $"{v46}"
    let v144 : unit = ()
    let v145 : (unit -> unit) = closure7(v10, v141)
    let v146 : unit = (fun () -> v145 (); v144) ()
    let v149 : string = "cancellation_token"
    let v150 : string = $"{v149}"
    let v153 : unit = ()
    let v154 : (unit -> unit) = closure7(v10, v150)
    let v155 : unit = (fun () -> v154 (); v153) ()
    let v158 : string = $"{v29}"
    let v161 : unit = ()
    let v162 : (unit -> unit) = closure7(v10, v158)
    let v163 : unit = (fun () -> v162 (); v161) ()
    let v166 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v167 : string = "format!(\"{:#?}\", $0)"
    let v168 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v167 
    let v169 : string = "fable_library_rust::String_::fromString($0)"
    let v170 : string = Fable.Core.RustInterop.emitRustExpr v168 v169 
    let _v166 = v170 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v171 : string = "format!(\"{:#?}\", $0)"
    let v172 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v171 
    let v173 : string = "fable_library_rust::String_::fromString($0)"
    let v174 : string = Fable.Core.RustInterop.emitRustExpr v172 v173 
    let _v166 = v174 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v175 : string = "format!(\"{:#?}\", $0)"
    let v176 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3 v175 
    let v177 : string = "fable_library_rust::String_::fromString($0)"
    let v178 : string = Fable.Core.RustInterop.emitRustExpr v176 v177 
    let _v166 = v178 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v179 : string = $"%A{v3}"
    let _v166 = v179 
    #endif
#if FABLE_COMPILER_PYTHON
    let v182 : string = $"%A{v3}"
    let _v166 = v182 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v185 : string = $"%A{v3}"
    let _v166 = v185 
    #endif
#else
    let v188 : string = $"%A{v3}"
    let _v166 = v188 
    #endif
    let v191 : string = _v166 
    let v196 : string = $"{v191}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v10, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v204 : string = $"{v46}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v10, v204)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v212 : string = "environment_variables"
    let v213 : string = $"{v212}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v10, v213)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v221 : string = $"{v29}"
    let v224 : unit = ()
    let v225 : (unit -> unit) = closure7(v10, v221)
    let v226 : unit = (fun () -> v225 (); v224) ()
    let v229 : string = $"%A{v4}"
    let v232 : string = $"{v229}"
    let v235 : unit = ()
    let v236 : (unit -> unit) = closure7(v10, v232)
    let v237 : unit = (fun () -> v236 (); v235) ()
    let v240 : string = $"{v46}"
    let v243 : unit = ()
    let v244 : (unit -> unit) = closure7(v10, v240)
    let v245 : unit = (fun () -> v244 (); v243) ()
    let v248 : string = "on_line"
    let v249 : string = $"{v248}"
    let v252 : unit = ()
    let v253 : (unit -> unit) = closure7(v10, v249)
    let v254 : unit = (fun () -> v253 (); v252) ()
    let v257 : string = $"{v29}"
    let v260 : unit = ()
    let v261 : (unit -> unit) = closure7(v10, v257)
    let v262 : unit = (fun () -> v261 (); v260) ()
    let v265 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v266 : string = "format!(\"{:#?}\", $0)"
    let v267 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v266 
    let v268 : string = "fable_library_rust::String_::fromString($0)"
    let v269 : string = Fable.Core.RustInterop.emitRustExpr v267 v268 
    let _v265 = v269 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v270 : string = "format!(\"{:#?}\", $0)"
    let v271 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v270 
    let v272 : string = "fable_library_rust::String_::fromString($0)"
    let v273 : string = Fable.Core.RustInterop.emitRustExpr v271 v272 
    let _v265 = v273 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v274 : string = "format!(\"{:#?}\", $0)"
    let v275 : std_string_String = Fable.Core.RustInterop.emitRustExpr v5 v274 
    let v276 : string = "fable_library_rust::String_::fromString($0)"
    let v277 : string = Fable.Core.RustInterop.emitRustExpr v275 v276 
    let _v265 = v277 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v278 : string = $"%A{v5}"
    let _v265 = v278 
    #endif
#if FABLE_COMPILER_PYTHON
    let v281 : string = $"%A{v5}"
    let _v265 = v281 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v284 : string = $"%A{v5}"
    let _v265 = v284 
    #endif
#else
    let v287 : string = $"%A{v5}"
    let _v265 = v287 
    #endif
    let v290 : string = _v265 
    let v295 : string = $"{v290}"
    let v298 : unit = ()
    let v299 : (unit -> unit) = closure7(v10, v295)
    let v300 : unit = (fun () -> v299 (); v298) ()
    let v303 : string = $"{v46}"
    let v306 : unit = ()
    let v307 : (unit -> unit) = closure7(v10, v303)
    let v308 : unit = (fun () -> v307 (); v306) ()
    let v311 : string = "stdin"
    let v312 : string = $"{v311}"
    let v315 : unit = ()
    let v316 : (unit -> unit) = closure7(v10, v312)
    let v317 : unit = (fun () -> v316 (); v315) ()
    let v320 : string = $"{v29}"
    let v323 : unit = ()
    let v324 : (unit -> unit) = closure7(v10, v320)
    let v325 : unit = (fun () -> v324 (); v323) ()
    let v328 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v329 : string = "format!(\"{:#?}\", $0)"
    let v330 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v329 
    let v331 : string = "fable_library_rust::String_::fromString($0)"
    let v332 : string = Fable.Core.RustInterop.emitRustExpr v330 v331 
    let _v328 = v332 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v333 : string = "format!(\"{:#?}\", $0)"
    let v334 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v333 
    let v335 : string = "fable_library_rust::String_::fromString($0)"
    let v336 : string = Fable.Core.RustInterop.emitRustExpr v334 v335 
    let _v328 = v336 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v337 : string = "format!(\"{:#?}\", $0)"
    let v338 : std_string_String = Fable.Core.RustInterop.emitRustExpr v6 v337 
    let v339 : string = "fable_library_rust::String_::fromString($0)"
    let v340 : string = Fable.Core.RustInterop.emitRustExpr v338 v339 
    let _v328 = v340 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v341 : string = $"%A{v6}"
    let _v328 = v341 
    #endif
#if FABLE_COMPILER_PYTHON
    let v344 : string = $"%A{v6}"
    let _v328 = v344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v347 : string = $"%A{v6}"
    let _v328 = v347 
    #endif
#else
    let v350 : string = $"%A{v6}"
    let _v328 = v350 
    #endif
    let v353 : string = _v328 
    let v358 : string = $"{v353}"
    let v361 : unit = ()
    let v362 : (unit -> unit) = closure7(v10, v358)
    let v363 : unit = (fun () -> v362 (); v361) ()
    let v366 : string = $"{v46}"
    let v369 : unit = ()
    let v370 : (unit -> unit) = closure7(v10, v366)
    let v371 : unit = (fun () -> v370 (); v369) ()
    let v374 : string = "trace"
    let v375 : string = $"{v374}"
    let v378 : unit = ()
    let v379 : (unit -> unit) = closure7(v10, v375)
    let v380 : unit = (fun () -> v379 (); v378) ()
    let v383 : string = $"{v29}"
    let v386 : unit = ()
    let v387 : (unit -> unit) = closure7(v10, v383)
    let v388 : unit = (fun () -> v387 (); v386) ()
    let v393 : string =
        if v7 then
            let v391 : string = "true"
            v391
        else
            let v392 : string = "false"
            v392
    let v394 : string = $"{v393}"
    let v397 : unit = ()
    let v398 : (unit -> unit) = closure7(v10, v394)
    let v399 : unit = (fun () -> v398 (); v397) ()
    let v402 : string = $"{v46}"
    let v405 : unit = ()
    let v406 : (unit -> unit) = closure7(v10, v402)
    let v407 : unit = (fun () -> v406 (); v405) ()
    let v410 : string = "working_directory"
    let v411 : string = $"{v410}"
    let v414 : unit = ()
    let v415 : (unit -> unit) = closure7(v10, v411)
    let v416 : unit = (fun () -> v415 (); v414) ()
    let v419 : string = $"{v29}"
    let v422 : unit = ()
    let v423 : (unit -> unit) = closure7(v10, v419)
    let v424 : unit = (fun () -> v423 (); v422) ()
    let v427 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v428 : string = "format!(\"{:#?}\", $0)"
    let v429 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v428 
    let v430 : string = "fable_library_rust::String_::fromString($0)"
    let v431 : string = Fable.Core.RustInterop.emitRustExpr v429 v430 
    let _v427 = v431 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v432 : string = "format!(\"{:#?}\", $0)"
    let v433 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v432 
    let v434 : string = "fable_library_rust::String_::fromString($0)"
    let v435 : string = Fable.Core.RustInterop.emitRustExpr v433 v434 
    let _v427 = v435 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v436 : string = "format!(\"{:#?}\", $0)"
    let v437 : std_string_String = Fable.Core.RustInterop.emitRustExpr v8 v436 
    let v438 : string = "fable_library_rust::String_::fromString($0)"
    let v439 : string = Fable.Core.RustInterop.emitRustExpr v437 v438 
    let _v427 = v439 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v440 : string = $"%A{v8}"
    let _v427 = v440 
    #endif
#if FABLE_COMPILER_PYTHON
    let v443 : string = $"%A{v8}"
    let _v427 = v443 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v446 : string = $"%A{v8}"
    let _v427 = v446 
    #endif
#else
    let v449 : string = $"%A{v8}"
    let _v427 = v449 
    #endif
    let v452 : string = _v427 
    let v457 : string = $"{v452}"
    let v460 : unit = ()
    let v461 : (unit -> unit) = closure7(v10, v457)
    let v462 : unit = (fun () -> v461 (); v460) ()
    let v465 : string = " }"
    let v466 : string = $"{v465}"
    let v469 : unit = ()
    let v470 : (unit -> unit) = closure7(v10, v466)
    let v471 : unit = (fun () -> v470 (); v469) ()
    let v474 : string = $"{v465}"
    let v477 : unit = ()
    let v478 : (unit -> unit) = closure7(v10, v474)
    let v479 : unit = (fun () -> v478 (); v477) ()
    let v482 : string = v10.l0
    v482
and method125 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : US5, v10 : string, v11 : System.Threading.CancellationToken option, v12 : (struct (string * string) []), v13 : (struct (int32 * string * bool) -> Async<unit>) option, v14 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v15 : bool, v16 : string option) : string =
    let v17 : string = method126(v8, v9, v10, v11, v12, v13, v14, v15, v16)
    let v18 : int64 = v0.l0
    let v19 : string = "runtime.execute_with_options_async"
    let v20 : string = $"{v6} {v7} #{v18} %s{v19} / {v17}"
    method18(v20)
and closure52 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : US5, v8 : string) () : unit =
    let v9 : US0 = US0_1
    let v10 : bool = method7(v9)
    if v10 then
        let v11 : unit = ()
        let v12 : (unit -> unit) = closure2()
        let v13 : unit = (fun () -> v12 (); v11) ()
        let struct (v27 : Mut0, v28 : Mut1, v29 : Mut2, v30 : Mut3, v31 : Mut4, v32 : int64 option) = TraceState.trace_state.Value
        let v45 : string = method8(v27, v28, v29, v30, v31, v32)
        let v46 : string = method12()
        let v47 : string = method125(v27, v28, v29, v30, v31, v32, v45, v46, v8, v7, v0, v1, v2, v3, v4, v5, v6)
        method19(v47)
and method127 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : (struct (string * string) []) =
    v2
and closure54 () (v0 : (struct (int32 * string * bool) -> Async<unit>)) : US31 =
    US31_0(v0)
and method128 () : ((struct (int32 * string * bool) -> Async<unit>) -> US31) =
    closure54()
and closure55 (v0 : string) () : unit =
    let v1 : US0 = US0_0
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method52()
        let v39 : bool = v0 = ""
        let v42 : string =
            if v39 then
                let v40 : string = ""
                v40
            else
                method109(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v42)
and closure53 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _v20 =
        async {
            let v23 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v24 : string = null |> unbox<string>
            let _v23 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : string = null |> unbox<string>
            let _v23 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v30 : string = null |> unbox<string>
            let _v23 = v30 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v33 : string = null |> unbox<string>
            let _v23 = v33 
            #endif
#if FABLE_COMPILER_PYTHON
            let v36 : string = null |> unbox<string>
            let _v23 = v36 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v39 : string = null |> unbox<string>
            let _v23 = v39 
            #endif
#else
            let v42 : string = v9.Data
            let _v23 = v42 
            #endif
            let v43 : string = _v23 
            let v48 : string = null |> unbox<string>
            let v51 : bool = v43 = v48
            let v52 : bool = v51 <> true
            if v52 then
                let v53 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v54 : US31 option = v3 |> Option.map v53 
                let v65 : US31 = US31_1
                let v66 : US31 = v54 |> Option.defaultValue v65 
                match v66 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v70) -> (* Some *)
                    let v71 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v72 : int32 = null |> unbox<int32>
                    let _v71 = v72 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v75 : int32 = null |> unbox<int32>
                    let _v71 = v75 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v78 : int32 = null |> unbox<int32>
                    let _v71 = v78 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v81 : int32 = null |> unbox<int32>
                    let _v71 = v81 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v84 : int32 = null |> unbox<int32>
                    let _v71 = v84 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v87 : int32 = null |> unbox<int32>
                    let _v71 = v87 
                    #endif
#else
                    let v90 : int32 = v7.Id
                    let _v71 = v90 
                    #endif
                    let v91 : int32 = _v71 
                    let v96 : Async<unit> = v70 struct (v91, v43, false)
                    do! v96 
                    ()
                let v97 : string = $"> {v43}"
                if v5 then
                    let v98 : unit = ()
                    let v99 : (unit -> unit) = closure55(v97)
                    let v100 : unit = (fun () -> v99 (); v98) ()
                    ()
                else
                    let v143 : unit = ()
                    let v144 : (unit -> unit) = closure10(v97)
                    let v145 : unit = (fun () -> v144 (); v143) ()
                    ()
                let v147 : string = ""
                let v148 : string = $"{v147}{v43}{v147}"
                let v149 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v149 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v149 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v149 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v149 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v149 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v149 = () 
                #endif
#else
                let v150 : (string -> unit) = v8.Push
                v150 v148
                let _v149 = () 
                #endif
                _v149 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v1047 : Async<unit> = _v20 
    let _v10 = v1047 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1048 : unit = ()
    let _v1048 =
        async {
            let v1051 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1052 : string = null |> unbox<string>
            let _v1051 = v1052 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1055 : string = null |> unbox<string>
            let _v1051 = v1055 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1058 : string = null |> unbox<string>
            let _v1051 = v1058 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1061 : string = null |> unbox<string>
            let _v1051 = v1061 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1064 : string = null |> unbox<string>
            let _v1051 = v1064 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1067 : string = null |> unbox<string>
            let _v1051 = v1067 
            #endif
#else
            let v1070 : string = v9.Data
            let _v1051 = v1070 
            #endif
            let v1071 : string = _v1051 
            let v1076 : string = null |> unbox<string>
            let v1079 : bool = v1071 = v1076
            let v1080 : bool = v1079 <> true
            if v1080 then
                let v1081 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v1082 : US31 option = v3 |> Option.map v1081 
                let v1093 : US31 = US31_1
                let v1094 : US31 = v1082 |> Option.defaultValue v1093 
                match v1094 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1098) -> (* Some *)
                    let v1099 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1100 : int32 = null |> unbox<int32>
                    let _v1099 = v1100 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1103 : int32 = null |> unbox<int32>
                    let _v1099 = v1103 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1106 : int32 = null |> unbox<int32>
                    let _v1099 = v1106 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1109 : int32 = null |> unbox<int32>
                    let _v1099 = v1109 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1112 : int32 = null |> unbox<int32>
                    let _v1099 = v1112 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1115 : int32 = null |> unbox<int32>
                    let _v1099 = v1115 
                    #endif
#else
                    let v1118 : int32 = v7.Id
                    let _v1099 = v1118 
                    #endif
                    let v1119 : int32 = _v1099 
                    let v1124 : Async<unit> = v1098 struct (v1119, v1071, false)
                    do! v1124 
                    ()
                let v1125 : string = $"> {v1071}"
                if v5 then
                    let v1126 : unit = ()
                    let v1127 : (unit -> unit) = closure55(v1125)
                    let v1128 : unit = (fun () -> v1127 (); v1126) ()
                    ()
                else
                    let v1171 : unit = ()
                    let v1172 : (unit -> unit) = closure10(v1125)
                    let v1173 : unit = (fun () -> v1172 (); v1171) ()
                    ()
                let v1175 : string = ""
                let v1176 : string = $"{v1175}{v1071}{v1175}"
                let v1177 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v1177 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v1177 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v1177 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v1177 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v1177 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v1177 = () 
                #endif
#else
                let v1178 : (string -> unit) = v8.Push
                v1178 v1176
                let _v1177 = () 
                #endif
                _v1177 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v2075 : Async<unit> = _v1048 
    let _v10 = v2075 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2076 : unit = ()
    let _v2076 =
        async {
            let v2079 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2080 : string = null |> unbox<string>
            let _v2079 = v2080 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2083 : string = null |> unbox<string>
            let _v2079 = v2083 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2086 : string = null |> unbox<string>
            let _v2079 = v2086 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2089 : string = null |> unbox<string>
            let _v2079 = v2089 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2092 : string = null |> unbox<string>
            let _v2079 = v2092 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2095 : string = null |> unbox<string>
            let _v2079 = v2095 
            #endif
#else
            let v2098 : string = v9.Data
            let _v2079 = v2098 
            #endif
            let v2099 : string = _v2079 
            let v2104 : string = null |> unbox<string>
            let v2107 : bool = v2099 = v2104
            let v2108 : bool = v2107 <> true
            if v2108 then
                let v2109 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v2110 : US31 option = v3 |> Option.map v2109 
                let v2121 : US31 = US31_1
                let v2122 : US31 = v2110 |> Option.defaultValue v2121 
                match v2122 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v2126) -> (* Some *)
                    let v2127 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2128 : int32 = null |> unbox<int32>
                    let _v2127 = v2128 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2131 : int32 = null |> unbox<int32>
                    let _v2127 = v2131 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2134 : int32 = null |> unbox<int32>
                    let _v2127 = v2134 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2137 : int32 = null |> unbox<int32>
                    let _v2127 = v2137 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2140 : int32 = null |> unbox<int32>
                    let _v2127 = v2140 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2143 : int32 = null |> unbox<int32>
                    let _v2127 = v2143 
                    #endif
#else
                    let v2146 : int32 = v7.Id
                    let _v2127 = v2146 
                    #endif
                    let v2147 : int32 = _v2127 
                    let v2152 : Async<unit> = v2126 struct (v2147, v2099, false)
                    do! v2152 
                    ()
                let v2153 : string = $"> {v2099}"
                if v5 then
                    let v2154 : unit = ()
                    let v2155 : (unit -> unit) = closure55(v2153)
                    let v2156 : unit = (fun () -> v2155 (); v2154) ()
                    ()
                else
                    let v2199 : unit = ()
                    let v2200 : (unit -> unit) = closure10(v2153)
                    let v2201 : unit = (fun () -> v2200 (); v2199) ()
                    ()
                let v2203 : string = ""
                let v2204 : string = $"{v2203}{v2099}{v2203}"
                let v2205 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v2205 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v2205 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v2205 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v2205 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v2205 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v2205 = () 
                #endif
#else
                let v2206 : (string -> unit) = v8.Push
                v2206 v2204
                let _v2205 = () 
                #endif
                _v2205 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v3103 : Async<unit> = _v2076 
    let _v10 = v3103 
    #endif
#else
    let v3104 : unit = ()
    let _v3104 =
        async {
            let v3107 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3108 : string = null |> unbox<string>
            let _v3107 = v3108 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3111 : string = null |> unbox<string>
            let _v3107 = v3111 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3114 : string = null |> unbox<string>
            let _v3107 = v3114 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3117 : string = null |> unbox<string>
            let _v3107 = v3117 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3120 : string = null |> unbox<string>
            let _v3107 = v3120 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3123 : string = null |> unbox<string>
            let _v3107 = v3123 
            #endif
#else
            let v3126 : string = v9.Data
            let _v3107 = v3126 
            #endif
            let v3127 : string = _v3107 
            let v3132 : string = null |> unbox<string>
            let v3135 : bool = v3127 = v3132
            let v3136 : bool = v3135 <> true
            if v3136 then
                let v3137 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v3138 : US31 option = v3 |> Option.map v3137 
                let v3149 : US31 = US31_1
                let v3150 : US31 = v3138 |> Option.defaultValue v3149 
                match v3150 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v3154) -> (* Some *)
                    let v3155 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3156 : int32 = null |> unbox<int32>
                    let _v3155 = v3156 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3159 : int32 = null |> unbox<int32>
                    let _v3155 = v3159 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3162 : int32 = null |> unbox<int32>
                    let _v3155 = v3162 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3165 : int32 = null |> unbox<int32>
                    let _v3155 = v3165 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3168 : int32 = null |> unbox<int32>
                    let _v3155 = v3168 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3171 : int32 = null |> unbox<int32>
                    let _v3155 = v3171 
                    #endif
#else
                    let v3174 : int32 = v7.Id
                    let _v3155 = v3174 
                    #endif
                    let v3175 : int32 = _v3155 
                    let v3180 : Async<unit> = v3154 struct (v3175, v3127, false)
                    do! v3180 
                    ()
                let v3181 : string = $"> {v3127}"
                if v5 then
                    let v3182 : unit = ()
                    let v3183 : (unit -> unit) = closure55(v3181)
                    let v3184 : unit = (fun () -> v3183 (); v3182) ()
                    ()
                else
                    let v3227 : unit = ()
                    let v3228 : (unit -> unit) = closure10(v3181)
                    let v3229 : unit = (fun () -> v3228 (); v3227) ()
                    ()
                let v3231 : string = ""
                let v3232 : string = $"{v3231}{v3127}{v3231}"
                let v3233 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v3233 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v3233 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v3233 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v3233 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v3233 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v3233 = () 
                #endif
#else
                let v3234 : (string -> unit) = v8.Push
                v3234 v3232
                let _v3233 = () 
                #endif
                _v3233 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v4131 : Async<unit> = _v3104 
    let _v10 = v4131 
    #endif
    let v4132 : Async<unit> = _v10 
    let v4650 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v4650 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v4650 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v4650 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4651 : (Async<unit> -> unit) = Async.StartImmediate
    v4651 v4132
    let _v4650 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4652 : (Async<unit> -> unit) = Async.StartImmediate
    v4652 v4132
    let _v4650 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4653 : (Async<unit> -> unit) = Async.StartImmediate
    v4653 v4132
    let _v4650 = () 
    #endif
#else
    let v4654 : (Async<unit> -> unit) = Async.StartImmediate
    v4654 v4132
    let _v4650 = () 
    #endif
    _v4650 
    ()
and closure56 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option, v7 : System.Diagnostics.Process, v8 : System.Collections.Concurrent.ConcurrentStack<string>) (v9 : System.Diagnostics.DataReceivedEventArgs) : unit =
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v11 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v14 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : Async<unit> = null |> unbox<Async<unit>>
    let _v10 = v17 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : unit = ()
    let _v20 =
        async {
            let v23 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v24 : string = null |> unbox<string>
            let _v23 = v24 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : string = null |> unbox<string>
            let _v23 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v30 : string = null |> unbox<string>
            let _v23 = v30 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v33 : string = null |> unbox<string>
            let _v23 = v33 
            #endif
#if FABLE_COMPILER_PYTHON
            let v36 : string = null |> unbox<string>
            let _v23 = v36 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v39 : string = null |> unbox<string>
            let _v23 = v39 
            #endif
#else
            let v42 : string = v9.Data
            let _v23 = v42 
            #endif
            let v43 : string = _v23 
            let v48 : string = null |> unbox<string>
            let v51 : bool = v43 = v48
            let v52 : bool = v51 <> true
            if v52 then
                let v53 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v54 : US31 option = v3 |> Option.map v53 
                let v65 : US31 = US31_1
                let v66 : US31 = v54 |> Option.defaultValue v65 
                match v66 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v70) -> (* Some *)
                    let v71 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v72 : int32 = null |> unbox<int32>
                    let _v71 = v72 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v75 : int32 = null |> unbox<int32>
                    let _v71 = v75 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v78 : int32 = null |> unbox<int32>
                    let _v71 = v78 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v81 : int32 = null |> unbox<int32>
                    let _v71 = v81 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v84 : int32 = null |> unbox<int32>
                    let _v71 = v84 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v87 : int32 = null |> unbox<int32>
                    let _v71 = v87 
                    #endif
#else
                    let v90 : int32 = v7.Id
                    let _v71 = v90 
                    #endif
                    let v91 : int32 = _v71 
                    let v96 : Async<unit> = v70 struct (v91, v43, true)
                    do! v96 
                    ()
                let v97 : string = $"! {v43}"
                if v5 then
                    let v98 : unit = ()
                    let v99 : (unit -> unit) = closure55(v97)
                    let v100 : unit = (fun () -> v99 (); v98) ()
                    ()
                else
                    let v143 : unit = ()
                    let v144 : (unit -> unit) = closure10(v97)
                    let v145 : unit = (fun () -> v144 (); v143) ()
                    ()
                let v147 : string = "\u001b[7;4m"
                let v148 : string = "\u001b[0m"
                let v149 : string = $"{v147}{v43}{v148}"
                let v150 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v150 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v150 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v150 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v150 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v150 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v150 = () 
                #endif
#else
                let v151 : (string -> unit) = v8.Push
                v151 v149
                let _v150 = () 
                #endif
                _v150 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v1055 : Async<unit> = _v20 
    let _v10 = v1055 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1056 : unit = ()
    let _v1056 =
        async {
            let v1059 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1060 : string = null |> unbox<string>
            let _v1059 = v1060 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1063 : string = null |> unbox<string>
            let _v1059 = v1063 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1066 : string = null |> unbox<string>
            let _v1059 = v1066 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1069 : string = null |> unbox<string>
            let _v1059 = v1069 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1072 : string = null |> unbox<string>
            let _v1059 = v1072 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1075 : string = null |> unbox<string>
            let _v1059 = v1075 
            #endif
#else
            let v1078 : string = v9.Data
            let _v1059 = v1078 
            #endif
            let v1079 : string = _v1059 
            let v1084 : string = null |> unbox<string>
            let v1087 : bool = v1079 = v1084
            let v1088 : bool = v1087 <> true
            if v1088 then
                let v1089 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v1090 : US31 option = v3 |> Option.map v1089 
                let v1101 : US31 = US31_1
                let v1102 : US31 = v1090 |> Option.defaultValue v1101 
                match v1102 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v1106) -> (* Some *)
                    let v1107 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1108 : int32 = null |> unbox<int32>
                    let _v1107 = v1108 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1111 : int32 = null |> unbox<int32>
                    let _v1107 = v1111 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1114 : int32 = null |> unbox<int32>
                    let _v1107 = v1114 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1117 : int32 = null |> unbox<int32>
                    let _v1107 = v1117 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1120 : int32 = null |> unbox<int32>
                    let _v1107 = v1120 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1123 : int32 = null |> unbox<int32>
                    let _v1107 = v1123 
                    #endif
#else
                    let v1126 : int32 = v7.Id
                    let _v1107 = v1126 
                    #endif
                    let v1127 : int32 = _v1107 
                    let v1132 : Async<unit> = v1106 struct (v1127, v1079, true)
                    do! v1132 
                    ()
                let v1133 : string = $"! {v1079}"
                if v5 then
                    let v1134 : unit = ()
                    let v1135 : (unit -> unit) = closure55(v1133)
                    let v1136 : unit = (fun () -> v1135 (); v1134) ()
                    ()
                else
                    let v1179 : unit = ()
                    let v1180 : (unit -> unit) = closure10(v1133)
                    let v1181 : unit = (fun () -> v1180 (); v1179) ()
                    ()
                let v1183 : string = "\u001b[7;4m"
                let v1184 : string = "\u001b[0m"
                let v1185 : string = $"{v1183}{v1079}{v1184}"
                let v1186 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v1186 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v1186 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v1186 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v1186 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v1186 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v1186 = () 
                #endif
#else
                let v1187 : (string -> unit) = v8.Push
                v1187 v1185
                let _v1186 = () 
                #endif
                _v1186 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v2091 : Async<unit> = _v1056 
    let _v10 = v2091 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2092 : unit = ()
    let _v2092 =
        async {
            let v2095 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v2096 : string = null |> unbox<string>
            let _v2095 = v2096 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v2099 : string = null |> unbox<string>
            let _v2095 = v2099 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v2102 : string = null |> unbox<string>
            let _v2095 = v2102 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v2105 : string = null |> unbox<string>
            let _v2095 = v2105 
            #endif
#if FABLE_COMPILER_PYTHON
            let v2108 : string = null |> unbox<string>
            let _v2095 = v2108 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v2111 : string = null |> unbox<string>
            let _v2095 = v2111 
            #endif
#else
            let v2114 : string = v9.Data
            let _v2095 = v2114 
            #endif
            let v2115 : string = _v2095 
            let v2120 : string = null |> unbox<string>
            let v2123 : bool = v2115 = v2120
            let v2124 : bool = v2123 <> true
            if v2124 then
                let v2125 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v2126 : US31 option = v3 |> Option.map v2125 
                let v2137 : US31 = US31_1
                let v2138 : US31 = v2126 |> Option.defaultValue v2137 
                match v2138 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v2142) -> (* Some *)
                    let v2143 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v2144 : int32 = null |> unbox<int32>
                    let _v2143 = v2144 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v2147 : int32 = null |> unbox<int32>
                    let _v2143 = v2147 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v2150 : int32 = null |> unbox<int32>
                    let _v2143 = v2150 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v2153 : int32 = null |> unbox<int32>
                    let _v2143 = v2153 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v2156 : int32 = null |> unbox<int32>
                    let _v2143 = v2156 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v2159 : int32 = null |> unbox<int32>
                    let _v2143 = v2159 
                    #endif
#else
                    let v2162 : int32 = v7.Id
                    let _v2143 = v2162 
                    #endif
                    let v2163 : int32 = _v2143 
                    let v2168 : Async<unit> = v2142 struct (v2163, v2115, true)
                    do! v2168 
                    ()
                let v2169 : string = $"! {v2115}"
                if v5 then
                    let v2170 : unit = ()
                    let v2171 : (unit -> unit) = closure55(v2169)
                    let v2172 : unit = (fun () -> v2171 (); v2170) ()
                    ()
                else
                    let v2215 : unit = ()
                    let v2216 : (unit -> unit) = closure10(v2169)
                    let v2217 : unit = (fun () -> v2216 (); v2215) ()
                    ()
                let v2219 : string = "\u001b[7;4m"
                let v2220 : string = "\u001b[0m"
                let v2221 : string = $"{v2219}{v2115}{v2220}"
                let v2222 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v2222 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v2222 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v2222 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v2222 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v2222 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v2222 = () 
                #endif
#else
                let v2223 : (string -> unit) = v8.Push
                v2223 v2221
                let _v2222 = () 
                #endif
                _v2222 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v3127 : Async<unit> = _v2092 
    let _v10 = v3127 
    #endif
#else
    let v3128 : unit = ()
    let _v3128 =
        async {
            let v3131 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v3132 : string = null |> unbox<string>
            let _v3131 = v3132 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v3135 : string = null |> unbox<string>
            let _v3131 = v3135 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v3138 : string = null |> unbox<string>
            let _v3131 = v3138 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v3141 : string = null |> unbox<string>
            let _v3131 = v3141 
            #endif
#if FABLE_COMPILER_PYTHON
            let v3144 : string = null |> unbox<string>
            let _v3131 = v3144 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3147 : string = null |> unbox<string>
            let _v3131 = v3147 
            #endif
#else
            let v3150 : string = v9.Data
            let _v3131 = v3150 
            #endif
            let v3151 : string = _v3131 
            let v3156 : string = null |> unbox<string>
            let v3159 : bool = v3151 = v3156
            let v3160 : bool = v3159 <> true
            if v3160 then
                let v3161 : ((struct (int32 * string * bool) -> Async<unit>) -> US31) = method128()
                let v3162 : US31 option = v3 |> Option.map v3161 
                let v3173 : US31 = US31_1
                let v3174 : US31 = v3162 |> Option.defaultValue v3173 
                match v3174 with
                | US31_1 -> (* None *)
                    ()
                | US31_0(v3178) -> (* Some *)
                    let v3179 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3180 : int32 = null |> unbox<int32>
                    let _v3179 = v3180 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3183 : int32 = null |> unbox<int32>
                    let _v3179 = v3183 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3186 : int32 = null |> unbox<int32>
                    let _v3179 = v3186 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3189 : int32 = null |> unbox<int32>
                    let _v3179 = v3189 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3192 : int32 = null |> unbox<int32>
                    let _v3179 = v3192 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3195 : int32 = null |> unbox<int32>
                    let _v3179 = v3195 
                    #endif
#else
                    let v3198 : int32 = v7.Id
                    let _v3179 = v3198 
                    #endif
                    let v3199 : int32 = _v3179 
                    let v3204 : Async<unit> = v3178 struct (v3199, v3151, true)
                    do! v3204 
                    ()
                let v3205 : string = $"! {v3151}"
                if v5 then
                    let v3206 : unit = ()
                    let v3207 : (unit -> unit) = closure55(v3205)
                    let v3208 : unit = (fun () -> v3207 (); v3206) ()
                    ()
                else
                    let v3251 : unit = ()
                    let v3252 : (unit -> unit) = closure10(v3205)
                    let v3253 : unit = (fun () -> v3252 (); v3251) ()
                    ()
                let v3255 : string = "\u001b[7;4m"
                let v3256 : string = "\u001b[0m"
                let v3257 : string = $"{v3255}{v3151}{v3256}"
                let v3258 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let _v3258 = () 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let _v3258 = () 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let _v3258 = () 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let _v3258 = () 
                #endif
#if FABLE_COMPILER_PYTHON
                let _v3258 = () 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let _v3258 = () 
                #endif
#else
                let v3259 : (string -> unit) = v8.Push
                v3259 v3257
                let _v3258 = () 
                #endif
                _v3258 
                ()
            ()
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v4163 : Async<unit> = _v3128 
    let _v10 = v4163 
    #endif
    let v4164 : Async<unit> = _v10 
    let v4686 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    null |> unbox<unit>
    let _v4686 = () 
    #endif
#if FABLE_COMPILER_RUST && WASM
    null |> unbox<unit>
    let _v4686 = () 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    null |> unbox<unit>
    let _v4686 = () 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4687 : (Async<unit> -> unit) = Async.StartImmediate
    v4687 v4164
    let _v4686 = () 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4688 : (Async<unit> -> unit) = Async.StartImmediate
    v4688 v4164
    let _v4686 = () 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4689 : (Async<unit> -> unit) = Async.StartImmediate
    v4689 v4164
    let _v4686 = () 
    #endif
#else
    let v4690 : (Async<unit> -> unit) = Async.StartImmediate
    v4690 v4164
    let _v4686 = () 
    #endif
    _v4686 
    ()
and closure57 () (v0 : System.Threading.CancellationToken) : US32 =
    US32_0(v0)
and method129 () : (System.Threading.CancellationToken -> US32) =
    closure57()
and closure58 (v0 : System.Diagnostics.Process) () : unit =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = null |> unbox<bool>
    let _v1 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : bool = null |> unbox<bool>
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : bool = null |> unbox<bool>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v11 : bool = null |> unbox<bool>
    let _v1 = v11 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : bool = null |> unbox<bool>
    let _v1 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v17 : bool = null |> unbox<bool>
    let _v1 = v17 
    #endif
#else
    let v20 : bool = v0.HasExited
    let _v1 = v20 
    #endif
    let v21 : bool = _v1 
    let v26 : bool = v21 = false
    if v26 then
        let v27 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let _v27 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v27 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v27 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v27 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v27 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v27 = () 
        #endif
#else
        let v28 : (unit -> unit) = v0.Kill
        v28 ()
        let _v27 = () 
        #endif
        _v27 
        ()
and method131 (v0 : System.Threading.Tasks.TaskCanceledException) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "ex"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "format!(\"{:#?}\", $0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v31 
    let v33 : string = "fable_library_rust::String_::fromString($0)"
    let v34 : string = Fable.Core.RustInterop.emitRustExpr v32 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v35 : string = "format!(\"{:#?}\", $0)"
    let v36 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v35 
    let v37 : string = "fable_library_rust::String_::fromString($0)"
    let v38 : string = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let _v30 = v38 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v39 : string = "format!(\"{:#?}\", $0)"
    let v40 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v39 
    let v41 : string = "fable_library_rust::String_::fromString($0)"
    let v42 : string = Fable.Core.RustInterop.emitRustExpr v40 v41 
    let _v30 = v42 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v43 : string = $"%A{v0}"
    let _v30 = v43 
    #endif
#if FABLE_COMPILER_PYTHON
    let v46 : string = $"%A{v0}"
    let _v30 = v46 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v30 = v49 
    #endif
#else
    let v52 : string = $"%A{v0}"
    let _v30 = v52 
    #endif
    let v55 : string = _v30 
    let v60 : string = $"{v55}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v2, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = " }"
    let v69 : string = $"{v68}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v2, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = v2.l0
    v77
and method130 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : System.Threading.Tasks.TaskCanceledException) : string =
    let v9 : string = method131(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "runtime.execute_with_options_async / WaitForExitAsync"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure59 (v0 : System.Threading.Tasks.TaskCanceledException) () : unit =
    let v1 : US0 = US0_3
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method36()
        let v39 : string = method130(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method133 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "output_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method132 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method133(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "runtime.execute_with_options_async"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure60 (v0 : int32, v1 : string) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v1.Length
        let v41 : string = method132(v20, v21, v22, v23, v24, v25, v38, v39, v0, v40)
        method19(v41)
and method124 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : Async<struct (int32 * string)> =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v11 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v17 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v23 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v7 = v23 
    #endif
#else
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v26 = v27 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v30 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v33 : Async<struct (int32 * string)> = null |> unbox<Async<struct (int32 * string)>>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v36 : unit = ()
    let _v36 =
        async {
            let v39 : US14 = method70(v0)
            let struct (v50 : string, v51 : US5) =
                match v39 with
                | US14_1(v42) -> (* Error *)
                    let v43 : string = $"resultm.get / Result value was Error: {v42}"
                    failwith<struct (string * US5)> v43
                | US14_0(v40, v41) -> (* Ok *)
                    struct (v40, v41)
            let v52 : (string -> US5) = method6()
            let v53 : US5 option = v6 |> Option.map v52 
            let v64 : US5 = US5_1
            let v65 : US5 = v53 |> Option.defaultValue v64 
            let v72 : string =
                match v65 with
                | US5_1 -> (* None *)
                    let v70 : string = ""
                    v70
                | US5_0(v69) -> (* Some *)
                    v69
            let v73 : unit = ()
            let v74 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v51, v50)
            let v75 : unit = (fun () -> v74 (); v73) ()
            let v115 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v119 : string =
                match v51 with
                | US5_1 -> (* None *)
                    let v117 : string = ""
                    v117
                | US5_0(v116) -> (* Some *)
                    v116
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v119,
              StandardOutputEncoding = v115,
              WorkingDirectory = v72,
              FileName = v50,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v120 : System.Diagnostics.ProcessStartInfo = start_info
            let v121 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v122 : int32 = v121.Length
            let v123 : Mut5 = {l0 = 0} : Mut5
            while method72(v122, v123) do
                let v125 : int32 = v123.l0
                let struct (v126 : string, v127 : string) = v121.[int v125]
                v120.EnvironmentVariables.[v126] <- v127 
                let v128 : int32 = v125 + 1
                v123.l0 <- v128
                ()
            let v129 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v120)
            use v129 = v129 
            let v130 : System.Diagnostics.Process = v129 
            let v131 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v132 : System.Collections.Concurrent.ConcurrentStack<string> = v131 ()
            let v133 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v130, v132)
            v130.OutputDataReceived.Add v133 
            let v134 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v130, v132)
            v130.ErrorDataReceived.Add v134 
            let v135 : (unit -> bool) = v130.Start
            let v136 : bool = v135 ()
            let v137 : bool = v136 = false
            if v137 then
                let v138 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v138
            let v139 : (unit -> unit) = v130.BeginErrorReadLine
            v139 ()
            let v140 : (unit -> unit) = v130.BeginOutputReadLine
            v140 ()
            let v141 : (System.Threading.CancellationToken -> US32) = method129()
            let v142 : US32 option = v1 |> Option.map v141 
            let v153 : US32 = US32_1
            let v154 : US32 = v142 |> Option.defaultValue v153 
            let v161 : System.Threading.CancellationToken =
                match v154 with
                | US32_1 -> (* None *)
                    let v159 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v159
                | US32_0(v158) -> (* Some *)
                    v158
            let v162 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v163 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v162 = v163 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v166 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v162 = v166 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v169 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v162 = v169 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v172 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v162 = v172 
            #endif
#if FABLE_COMPILER_PYTHON
            let v175 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v162 = v175 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v178 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v162 = v178 
            #endif
#else
            let v181 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v182 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v181 = v182 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v185 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v181 = v185 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v188 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v181 = v188 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v191 : unit = ()
            let _v191 =
                async {
                    let v194 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v194 = v194 
                    let v195 : System.Threading.CancellationToken = v194 
                    let v196 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v197 : (System.Threading.CancellationToken []) = [|v195; v196; v161|]
                    let v198 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v199 : System.Threading.CancellationTokenSource = v198 v197
                    let v200 : System.Threading.CancellationToken = v199.Token
                    return v200 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v250 : Async<System.Threading.CancellationToken> = _v191 
            let _v181 = v250 
            #endif
#if FABLE_COMPILER_PYTHON
            let v251 : unit = ()
            let _v251 =
                async {
                    let v254 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v254 = v254 
                    let v255 : System.Threading.CancellationToken = v254 
                    let v256 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v257 : (System.Threading.CancellationToken []) = [|v255; v256; v161|]
                    let v258 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v259 : System.Threading.CancellationTokenSource = v258 v257
                    let v260 : System.Threading.CancellationToken = v259.Token
                    return v260 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v310 : Async<System.Threading.CancellationToken> = _v251 
            let _v181 = v310 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v311 : unit = ()
            let _v311 =
                async {
                    let v314 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v314 = v314 
                    let v315 : System.Threading.CancellationToken = v314 
                    let v316 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v317 : (System.Threading.CancellationToken []) = [|v315; v316; v161|]
                    let v318 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v319 : System.Threading.CancellationTokenSource = v318 v317
                    let v320 : System.Threading.CancellationToken = v319.Token
                    return v320 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v370 : Async<System.Threading.CancellationToken> = _v311 
            let _v181 = v370 
            #endif
#else
            let v371 : unit = ()
            let _v371 =
                async {
                    let v374 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v374 = v374 
                    let v375 : System.Threading.CancellationToken = v374 
                    let v376 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v377 : (System.Threading.CancellationToken []) = [|v375; v376; v161|]
                    let v378 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v379 : System.Threading.CancellationTokenSource = v378 v377
                    let v380 : System.Threading.CancellationToken = v379.Token
                    return v380 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v430 : Async<System.Threading.CancellationToken> = _v371 
            let _v181 = v430 
            #endif
            let v431 : Async<System.Threading.CancellationToken> = _v181 
            let _v162 = v431 
            #endif
            let v465 : Async<System.Threading.CancellationToken> = _v162 
            let! v465 = v465 
            let v470 : System.Threading.CancellationToken = v465 
            let v471 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v470.Register
            let v472 : (unit -> unit) = closure58(v130)
            let v473 : System.Threading.CancellationTokenRegistration = v471 v472
            use v473 = v473 
            let v474 : System.Threading.CancellationTokenRegistration = v473 
            let v475 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v476 : Async<int32> = null |> unbox<Async<int32>>
            let _v475 = v476 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v479 : Async<int32> = null |> unbox<Async<int32>>
            let _v475 = v479 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v482 : Async<int32> = null |> unbox<Async<int32>>
            let _v475 = v482 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v485 : unit = ()
            let _v485 =
                async {
                    try
                    let v488 : System.Threading.Tasks.Task = v130.WaitForExitAsync v470 
                    let v489 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v490 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v491 : Async<unit> = v490 v488
                    let _v489 = v491 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v492 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v493 : Async<unit> = v492 v488
                    let _v489 = v493 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v494 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v495 : Async<unit> = v494 v488
                    let _v489 = v495 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v496 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v497 : Async<unit> = v496 v488
                    let _v489 = v497 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v498 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v499 : Async<unit> = v498 v488
                    let _v489 = v499 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v500 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v501 : Async<unit> = v500 v488
                    let _v489 = v501 
                    #endif
#else
                    let v502 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v503 : Async<unit> = v502 v488
                    let _v489 = v503 
                    #endif
                    let v504 : Async<unit> = _v489 
                    do! v504 
                    let v509 : int32 = v130.ExitCode
                    return v509 
                    with ex ->
                        let v510 : exn = ex
                        let v511 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v512 : string = $"%A{v510}"
                        let _v511 = v512 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v515 : string = $"%A{v510}"
                        let _v511 = v515 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v518 : string = $"%A{v510}"
                        let _v511 = v518 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v521 : string = $"%A{v510}"
                        let _v511 = v521 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v524 : string = $"%A{v510}"
                        let _v511 = v524 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v527 : string = $"%A{v510}"
                        let _v511 = v527 
                        #endif
#else
                        let v530 : string = $"{v510.GetType ()}: {v510.Message}"
                        let _v511 = v530 
                        #endif
                        let v531 : string = _v511 
                        let v536 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v536 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v536 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v536 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v536 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v536 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v536 = () 
                        #endif
#else
                        let v537 : (string -> unit) = v132.Push
                        v537 v531
                        let _v536 = () 
                        #endif
                        _v536 
                        let v538 : System.Threading.Tasks.TaskCanceledException = v510 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v541 : unit = ()
                        let v542 : (unit -> unit) = closure59(v538)
                        let v543 : unit = (fun () -> v542 (); v541) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v1832 : Async<int32> = _v485 
            let _v475 = v1832 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1833 : unit = ()
            let _v1833 =
                async {
                    try
                    let v1836 : System.Threading.Tasks.Task = v130.WaitForExitAsync v470 
                    let v1837 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1838 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1839 : Async<unit> = v1838 v1836
                    let _v1837 = v1839 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1840 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1841 : Async<unit> = v1840 v1836
                    let _v1837 = v1841 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1842 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1843 : Async<unit> = v1842 v1836
                    let _v1837 = v1843 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1844 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1845 : Async<unit> = v1844 v1836
                    let _v1837 = v1845 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1846 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1847 : Async<unit> = v1846 v1836
                    let _v1837 = v1847 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1848 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1849 : Async<unit> = v1848 v1836
                    let _v1837 = v1849 
                    #endif
#else
                    let v1850 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v1851 : Async<unit> = v1850 v1836
                    let _v1837 = v1851 
                    #endif
                    let v1852 : Async<unit> = _v1837 
                    do! v1852 
                    let v1857 : int32 = v130.ExitCode
                    return v1857 
                    with ex ->
                        let v1858 : exn = ex
                        let v1859 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1860 : string = $"%A{v1858}"
                        let _v1859 = v1860 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1863 : string = $"%A{v1858}"
                        let _v1859 = v1863 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1866 : string = $"%A{v1858}"
                        let _v1859 = v1866 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1869 : string = $"%A{v1858}"
                        let _v1859 = v1869 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1872 : string = $"%A{v1858}"
                        let _v1859 = v1872 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1875 : string = $"%A{v1858}"
                        let _v1859 = v1875 
                        #endif
#else
                        let v1878 : string = $"{v1858.GetType ()}: {v1858.Message}"
                        let _v1859 = v1878 
                        #endif
                        let v1879 : string = _v1859 
                        let v1884 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v1884 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v1884 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v1884 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v1884 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v1884 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v1884 = () 
                        #endif
#else
                        let v1885 : (string -> unit) = v132.Push
                        v1885 v1879
                        let _v1884 = () 
                        #endif
                        _v1884 
                        let v1886 : System.Threading.Tasks.TaskCanceledException = v1858 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v1889 : unit = ()
                        let v1890 : (unit -> unit) = closure59(v1886)
                        let v1891 : unit = (fun () -> v1890 (); v1889) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v3180 : Async<int32> = _v1833 
            let _v475 = v3180 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v3181 : unit = ()
            let _v3181 =
                async {
                    try
                    let v3184 : System.Threading.Tasks.Task = v130.WaitForExitAsync v470 
                    let v3185 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v3186 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v3187 : Async<unit> = v3186 v3184
                    let _v3185 = v3187 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v3188 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v3189 : Async<unit> = v3188 v3184
                    let _v3185 = v3189 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v3190 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v3191 : Async<unit> = v3190 v3184
                    let _v3185 = v3191 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v3192 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v3193 : Async<unit> = v3192 v3184
                    let _v3185 = v3193 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v3194 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v3195 : Async<unit> = v3194 v3184
                    let _v3185 = v3195 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v3196 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v3197 : Async<unit> = v3196 v3184
                    let _v3185 = v3197 
                    #endif
#else
                    let v3198 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v3199 : Async<unit> = v3198 v3184
                    let _v3185 = v3199 
                    #endif
                    let v3200 : Async<unit> = _v3185 
                    do! v3200 
                    let v3205 : int32 = v130.ExitCode
                    return v3205 
                    with ex ->
                        let v3206 : exn = ex
                        let v3207 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v3208 : string = $"%A{v3206}"
                        let _v3207 = v3208 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v3211 : string = $"%A{v3206}"
                        let _v3207 = v3211 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v3214 : string = $"%A{v3206}"
                        let _v3207 = v3214 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v3217 : string = $"%A{v3206}"
                        let _v3207 = v3217 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v3220 : string = $"%A{v3206}"
                        let _v3207 = v3220 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v3223 : string = $"%A{v3206}"
                        let _v3207 = v3223 
                        #endif
#else
                        let v3226 : string = $"{v3206.GetType ()}: {v3206.Message}"
                        let _v3207 = v3226 
                        #endif
                        let v3227 : string = _v3207 
                        let v3232 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v3232 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v3232 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v3232 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v3232 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v3232 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v3232 = () 
                        #endif
#else
                        let v3233 : (string -> unit) = v132.Push
                        v3233 v3227
                        let _v3232 = () 
                        #endif
                        _v3232 
                        let v3234 : System.Threading.Tasks.TaskCanceledException = v3206 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v3237 : unit = ()
                        let v3238 : (unit -> unit) = closure59(v3234)
                        let v3239 : unit = (fun () -> v3238 (); v3237) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v4528 : Async<int32> = _v3181 
            let _v475 = v4528 
            #endif
#else
            let v4529 : unit = ()
            let _v4529 =
                async {
                    try
                    let v4532 : System.Threading.Tasks.Task = v130.WaitForExitAsync v470 
                    let v4533 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v4534 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v4535 : Async<unit> = v4534 v4532
                    let _v4533 = v4535 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v4536 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v4537 : Async<unit> = v4536 v4532
                    let _v4533 = v4537 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v4538 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v4539 : Async<unit> = v4538 v4532
                    let _v4533 = v4539 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v4540 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v4541 : Async<unit> = v4540 v4532
                    let _v4533 = v4541 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v4542 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v4543 : Async<unit> = v4542 v4532
                    let _v4533 = v4543 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v4544 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v4545 : Async<unit> = v4544 v4532
                    let _v4533 = v4545 
                    #endif
#else
                    let v4546 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v4547 : Async<unit> = v4546 v4532
                    let _v4533 = v4547 
                    #endif
                    let v4548 : Async<unit> = _v4533 
                    do! v4548 
                    let v4553 : int32 = v130.ExitCode
                    return v4553 
                    with ex ->
                        let v4554 : exn = ex
                        let v4555 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v4556 : string = $"%A{v4554}"
                        let _v4555 = v4556 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v4559 : string = $"%A{v4554}"
                        let _v4555 = v4559 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v4562 : string = $"%A{v4554}"
                        let _v4555 = v4562 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v4565 : string = $"%A{v4554}"
                        let _v4555 = v4565 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v4568 : string = $"%A{v4554}"
                        let _v4555 = v4568 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v4571 : string = $"%A{v4554}"
                        let _v4555 = v4571 
                        #endif
#else
                        let v4574 : string = $"{v4554.GetType ()}: {v4554.Message}"
                        let _v4555 = v4574 
                        #endif
                        let v4575 : string = _v4555 
                        let v4580 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v4580 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v4580 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v4580 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v4580 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v4580 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v4580 = () 
                        #endif
#else
                        let v4581 : (string -> unit) = v132.Push
                        v4581 v4575
                        let _v4580 = () 
                        #endif
                        _v4580 
                        let v4582 : System.Threading.Tasks.TaskCanceledException = v4554 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v4585 : unit = ()
                        let v4586 : (unit -> unit) = closure59(v4582)
                        let v4587 : unit = (fun () -> v4586 (); v4585) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v5876 : Async<int32> = _v4529 
            let _v475 = v5876 
            #endif
            let v5877 : Async<int32> = _v475 
            let! v5877 = v5877 
            let v6555 : int32 = v5877 
            let v6556 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v6557 : string seq = v6556 v132
            let v6560 : (string seq -> string seq) = Seq.rev
            let v6561 : string seq = v6560 v6557
            let v6564 : string = method40()
            let v6565 : (string -> (string seq -> string)) = String.concat
            let v6566 : (string seq -> string) = v6565 v6564
            let v6567 : string = v6566 v6561
            let v6571 : unit = ()
            let v6572 : (unit -> unit) = closure60(v6555, v6567)
            let v6573 : unit = (fun () -> v6572 (); v6571) ()
            return struct (v6555, v6567) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v52639 : Async<struct (int32 * string)> = _v36 
    let _v26 = v52639 
    #endif
#if FABLE_COMPILER_PYTHON
    let v52640 : unit = ()
    let _v52640 =
        async {
            let v52643 : US14 = method70(v0)
            let struct (v52654 : string, v52655 : US5) =
                match v52643 with
                | US14_1(v52646) -> (* Error *)
                    let v52647 : string = $"resultm.get / Result value was Error: {v52646}"
                    failwith<struct (string * US5)> v52647
                | US14_0(v52644, v52645) -> (* Ok *)
                    struct (v52644, v52645)
            let v52656 : (string -> US5) = method6()
            let v52657 : US5 option = v6 |> Option.map v52656 
            let v52668 : US5 = US5_1
            let v52669 : US5 = v52657 |> Option.defaultValue v52668 
            let v52676 : string =
                match v52669 with
                | US5_1 -> (* None *)
                    let v52674 : string = ""
                    v52674
                | US5_0(v52673) -> (* Some *)
                    v52673
            let v52677 : unit = ()
            let v52678 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v52655, v52654)
            let v52679 : unit = (fun () -> v52678 (); v52677) ()
            let v52719 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v52723 : string =
                match v52655 with
                | US5_1 -> (* None *)
                    let v52721 : string = ""
                    v52721
                | US5_0(v52720) -> (* Some *)
                    v52720
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v52723,
              StandardOutputEncoding = v52719,
              WorkingDirectory = v52676,
              FileName = v52654,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v52724 : System.Diagnostics.ProcessStartInfo = start_info
            let v52725 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v52726 : int32 = v52725.Length
            let v52727 : Mut5 = {l0 = 0} : Mut5
            while method72(v52726, v52727) do
                let v52729 : int32 = v52727.l0
                let struct (v52730 : string, v52731 : string) = v52725.[int v52729]
                v52724.EnvironmentVariables.[v52730] <- v52731 
                let v52732 : int32 = v52729 + 1
                v52727.l0 <- v52732
                ()
            let v52733 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v52724)
            use v52733 = v52733 
            let v52734 : System.Diagnostics.Process = v52733 
            let v52735 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v52736 : System.Collections.Concurrent.ConcurrentStack<string> = v52735 ()
            let v52737 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v52734, v52736)
            v52734.OutputDataReceived.Add v52737 
            let v52738 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v52734, v52736)
            v52734.ErrorDataReceived.Add v52738 
            let v52739 : (unit -> bool) = v52734.Start
            let v52740 : bool = v52739 ()
            let v52741 : bool = v52740 = false
            if v52741 then
                let v52742 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v52742
            let v52743 : (unit -> unit) = v52734.BeginErrorReadLine
            v52743 ()
            let v52744 : (unit -> unit) = v52734.BeginOutputReadLine
            v52744 ()
            let v52745 : (System.Threading.CancellationToken -> US32) = method129()
            let v52746 : US32 option = v1 |> Option.map v52745 
            let v52757 : US32 = US32_1
            let v52758 : US32 = v52746 |> Option.defaultValue v52757 
            let v52765 : System.Threading.CancellationToken =
                match v52758 with
                | US32_1 -> (* None *)
                    let v52763 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v52763
                | US32_0(v52762) -> (* Some *)
                    v52762
            let v52766 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v52767 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52766 = v52767 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v52770 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52766 = v52770 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v52773 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52766 = v52773 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v52776 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52766 = v52776 
            #endif
#if FABLE_COMPILER_PYTHON
            let v52779 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52766 = v52779 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v52782 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52766 = v52782 
            #endif
#else
            let v52785 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v52786 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52785 = v52786 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v52789 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52785 = v52789 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v52792 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v52785 = v52792 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v52795 : unit = ()
            let _v52795 =
                async {
                    let v52798 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v52798 = v52798 
                    let v52799 : System.Threading.CancellationToken = v52798 
                    let v52800 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v52801 : (System.Threading.CancellationToken []) = [|v52799; v52800; v52765|]
                    let v52802 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v52803 : System.Threading.CancellationTokenSource = v52802 v52801
                    let v52804 : System.Threading.CancellationToken = v52803.Token
                    return v52804 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v52854 : Async<System.Threading.CancellationToken> = _v52795 
            let _v52785 = v52854 
            #endif
#if FABLE_COMPILER_PYTHON
            let v52855 : unit = ()
            let _v52855 =
                async {
                    let v52858 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v52858 = v52858 
                    let v52859 : System.Threading.CancellationToken = v52858 
                    let v52860 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v52861 : (System.Threading.CancellationToken []) = [|v52859; v52860; v52765|]
                    let v52862 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v52863 : System.Threading.CancellationTokenSource = v52862 v52861
                    let v52864 : System.Threading.CancellationToken = v52863.Token
                    return v52864 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v52914 : Async<System.Threading.CancellationToken> = _v52855 
            let _v52785 = v52914 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v52915 : unit = ()
            let _v52915 =
                async {
                    let v52918 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v52918 = v52918 
                    let v52919 : System.Threading.CancellationToken = v52918 
                    let v52920 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v52921 : (System.Threading.CancellationToken []) = [|v52919; v52920; v52765|]
                    let v52922 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v52923 : System.Threading.CancellationTokenSource = v52922 v52921
                    let v52924 : System.Threading.CancellationToken = v52923.Token
                    return v52924 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v52974 : Async<System.Threading.CancellationToken> = _v52915 
            let _v52785 = v52974 
            #endif
#else
            let v52975 : unit = ()
            let _v52975 =
                async {
                    let v52978 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v52978 = v52978 
                    let v52979 : System.Threading.CancellationToken = v52978 
                    let v52980 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v52981 : (System.Threading.CancellationToken []) = [|v52979; v52980; v52765|]
                    let v52982 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v52983 : System.Threading.CancellationTokenSource = v52982 v52981
                    let v52984 : System.Threading.CancellationToken = v52983.Token
                    return v52984 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v53034 : Async<System.Threading.CancellationToken> = _v52975 
            let _v52785 = v53034 
            #endif
            let v53035 : Async<System.Threading.CancellationToken> = _v52785 
            let _v52766 = v53035 
            #endif
            let v53069 : Async<System.Threading.CancellationToken> = _v52766 
            let! v53069 = v53069 
            let v53074 : System.Threading.CancellationToken = v53069 
            let v53075 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v53074.Register
            let v53076 : (unit -> unit) = closure58(v52734)
            let v53077 : System.Threading.CancellationTokenRegistration = v53075 v53076
            use v53077 = v53077 
            let v53078 : System.Threading.CancellationTokenRegistration = v53077 
            let v53079 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v53080 : Async<int32> = null |> unbox<Async<int32>>
            let _v53079 = v53080 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v53083 : Async<int32> = null |> unbox<Async<int32>>
            let _v53079 = v53083 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v53086 : Async<int32> = null |> unbox<Async<int32>>
            let _v53079 = v53086 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v53089 : unit = ()
            let _v53089 =
                async {
                    try
                    let v53092 : System.Threading.Tasks.Task = v52734.WaitForExitAsync v53074 
                    let v53093 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v53094 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v53095 : Async<unit> = v53094 v53092
                    let _v53093 = v53095 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v53096 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v53097 : Async<unit> = v53096 v53092
                    let _v53093 = v53097 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v53098 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v53099 : Async<unit> = v53098 v53092
                    let _v53093 = v53099 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v53100 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v53101 : Async<unit> = v53100 v53092
                    let _v53093 = v53101 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v53102 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v53103 : Async<unit> = v53102 v53092
                    let _v53093 = v53103 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v53104 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v53105 : Async<unit> = v53104 v53092
                    let _v53093 = v53105 
                    #endif
#else
                    let v53106 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v53107 : Async<unit> = v53106 v53092
                    let _v53093 = v53107 
                    #endif
                    let v53108 : Async<unit> = _v53093 
                    do! v53108 
                    let v53113 : int32 = v52734.ExitCode
                    return v53113 
                    with ex ->
                        let v53114 : exn = ex
                        let v53115 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v53116 : string = $"%A{v53114}"
                        let _v53115 = v53116 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v53119 : string = $"%A{v53114}"
                        let _v53115 = v53119 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v53122 : string = $"%A{v53114}"
                        let _v53115 = v53122 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v53125 : string = $"%A{v53114}"
                        let _v53115 = v53125 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v53128 : string = $"%A{v53114}"
                        let _v53115 = v53128 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v53131 : string = $"%A{v53114}"
                        let _v53115 = v53131 
                        #endif
#else
                        let v53134 : string = $"{v53114.GetType ()}: {v53114.Message}"
                        let _v53115 = v53134 
                        #endif
                        let v53135 : string = _v53115 
                        let v53140 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v53140 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v53140 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v53140 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v53140 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v53140 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v53140 = () 
                        #endif
#else
                        let v53141 : (string -> unit) = v52736.Push
                        v53141 v53135
                        let _v53140 = () 
                        #endif
                        _v53140 
                        let v53142 : System.Threading.Tasks.TaskCanceledException = v53114 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v53145 : unit = ()
                        let v53146 : (unit -> unit) = closure59(v53142)
                        let v53147 : unit = (fun () -> v53146 (); v53145) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v54436 : Async<int32> = _v53089 
            let _v53079 = v54436 
            #endif
#if FABLE_COMPILER_PYTHON
            let v54437 : unit = ()
            let _v54437 =
                async {
                    try
                    let v54440 : System.Threading.Tasks.Task = v52734.WaitForExitAsync v53074 
                    let v54441 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v54442 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v54443 : Async<unit> = v54442 v54440
                    let _v54441 = v54443 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v54444 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v54445 : Async<unit> = v54444 v54440
                    let _v54441 = v54445 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v54446 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v54447 : Async<unit> = v54446 v54440
                    let _v54441 = v54447 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v54448 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v54449 : Async<unit> = v54448 v54440
                    let _v54441 = v54449 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v54450 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v54451 : Async<unit> = v54450 v54440
                    let _v54441 = v54451 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v54452 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v54453 : Async<unit> = v54452 v54440
                    let _v54441 = v54453 
                    #endif
#else
                    let v54454 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v54455 : Async<unit> = v54454 v54440
                    let _v54441 = v54455 
                    #endif
                    let v54456 : Async<unit> = _v54441 
                    do! v54456 
                    let v54461 : int32 = v52734.ExitCode
                    return v54461 
                    with ex ->
                        let v54462 : exn = ex
                        let v54463 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v54464 : string = $"%A{v54462}"
                        let _v54463 = v54464 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v54467 : string = $"%A{v54462}"
                        let _v54463 = v54467 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v54470 : string = $"%A{v54462}"
                        let _v54463 = v54470 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v54473 : string = $"%A{v54462}"
                        let _v54463 = v54473 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v54476 : string = $"%A{v54462}"
                        let _v54463 = v54476 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v54479 : string = $"%A{v54462}"
                        let _v54463 = v54479 
                        #endif
#else
                        let v54482 : string = $"{v54462.GetType ()}: {v54462.Message}"
                        let _v54463 = v54482 
                        #endif
                        let v54483 : string = _v54463 
                        let v54488 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v54488 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v54488 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v54488 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v54488 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v54488 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v54488 = () 
                        #endif
#else
                        let v54489 : (string -> unit) = v52736.Push
                        v54489 v54483
                        let _v54488 = () 
                        #endif
                        _v54488 
                        let v54490 : System.Threading.Tasks.TaskCanceledException = v54462 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v54493 : unit = ()
                        let v54494 : (unit -> unit) = closure59(v54490)
                        let v54495 : unit = (fun () -> v54494 (); v54493) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v55784 : Async<int32> = _v54437 
            let _v53079 = v55784 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v55785 : unit = ()
            let _v55785 =
                async {
                    try
                    let v55788 : System.Threading.Tasks.Task = v52734.WaitForExitAsync v53074 
                    let v55789 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v55790 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v55791 : Async<unit> = v55790 v55788
                    let _v55789 = v55791 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v55792 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v55793 : Async<unit> = v55792 v55788
                    let _v55789 = v55793 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v55794 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v55795 : Async<unit> = v55794 v55788
                    let _v55789 = v55795 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v55796 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v55797 : Async<unit> = v55796 v55788
                    let _v55789 = v55797 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v55798 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v55799 : Async<unit> = v55798 v55788
                    let _v55789 = v55799 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v55800 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v55801 : Async<unit> = v55800 v55788
                    let _v55789 = v55801 
                    #endif
#else
                    let v55802 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v55803 : Async<unit> = v55802 v55788
                    let _v55789 = v55803 
                    #endif
                    let v55804 : Async<unit> = _v55789 
                    do! v55804 
                    let v55809 : int32 = v52734.ExitCode
                    return v55809 
                    with ex ->
                        let v55810 : exn = ex
                        let v55811 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v55812 : string = $"%A{v55810}"
                        let _v55811 = v55812 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v55815 : string = $"%A{v55810}"
                        let _v55811 = v55815 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v55818 : string = $"%A{v55810}"
                        let _v55811 = v55818 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v55821 : string = $"%A{v55810}"
                        let _v55811 = v55821 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v55824 : string = $"%A{v55810}"
                        let _v55811 = v55824 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v55827 : string = $"%A{v55810}"
                        let _v55811 = v55827 
                        #endif
#else
                        let v55830 : string = $"{v55810.GetType ()}: {v55810.Message}"
                        let _v55811 = v55830 
                        #endif
                        let v55831 : string = _v55811 
                        let v55836 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v55836 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v55836 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v55836 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v55836 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v55836 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v55836 = () 
                        #endif
#else
                        let v55837 : (string -> unit) = v52736.Push
                        v55837 v55831
                        let _v55836 = () 
                        #endif
                        _v55836 
                        let v55838 : System.Threading.Tasks.TaskCanceledException = v55810 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v55841 : unit = ()
                        let v55842 : (unit -> unit) = closure59(v55838)
                        let v55843 : unit = (fun () -> v55842 (); v55841) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v57132 : Async<int32> = _v55785 
            let _v53079 = v57132 
            #endif
#else
            let v57133 : unit = ()
            let _v57133 =
                async {
                    try
                    let v57136 : System.Threading.Tasks.Task = v52734.WaitForExitAsync v53074 
                    let v57137 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v57138 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v57139 : Async<unit> = v57138 v57136
                    let _v57137 = v57139 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v57140 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v57141 : Async<unit> = v57140 v57136
                    let _v57137 = v57141 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v57142 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v57143 : Async<unit> = v57142 v57136
                    let _v57137 = v57143 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v57144 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v57145 : Async<unit> = v57144 v57136
                    let _v57137 = v57145 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v57146 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v57147 : Async<unit> = v57146 v57136
                    let _v57137 = v57147 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v57148 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v57149 : Async<unit> = v57148 v57136
                    let _v57137 = v57149 
                    #endif
#else
                    let v57150 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v57151 : Async<unit> = v57150 v57136
                    let _v57137 = v57151 
                    #endif
                    let v57152 : Async<unit> = _v57137 
                    do! v57152 
                    let v57157 : int32 = v52734.ExitCode
                    return v57157 
                    with ex ->
                        let v57158 : exn = ex
                        let v57159 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v57160 : string = $"%A{v57158}"
                        let _v57159 = v57160 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v57163 : string = $"%A{v57158}"
                        let _v57159 = v57163 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v57166 : string = $"%A{v57158}"
                        let _v57159 = v57166 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v57169 : string = $"%A{v57158}"
                        let _v57159 = v57169 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v57172 : string = $"%A{v57158}"
                        let _v57159 = v57172 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v57175 : string = $"%A{v57158}"
                        let _v57159 = v57175 
                        #endif
#else
                        let v57178 : string = $"{v57158.GetType ()}: {v57158.Message}"
                        let _v57159 = v57178 
                        #endif
                        let v57179 : string = _v57159 
                        let v57184 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v57184 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v57184 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v57184 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v57184 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v57184 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v57184 = () 
                        #endif
#else
                        let v57185 : (string -> unit) = v52736.Push
                        v57185 v57179
                        let _v57184 = () 
                        #endif
                        _v57184 
                        let v57186 : System.Threading.Tasks.TaskCanceledException = v57158 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v57189 : unit = ()
                        let v57190 : (unit -> unit) = closure59(v57186)
                        let v57191 : unit = (fun () -> v57190 (); v57189) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v58480 : Async<int32> = _v57133 
            let _v53079 = v58480 
            #endif
            let v58481 : Async<int32> = _v53079 
            let! v58481 = v58481 
            let v59159 : int32 = v58481 
            let v59160 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v59161 : string seq = v59160 v52736
            let v59164 : (string seq -> string seq) = Seq.rev
            let v59165 : string seq = v59164 v59161
            let v59168 : string = method40()
            let v59169 : (string -> (string seq -> string)) = String.concat
            let v59170 : (string seq -> string) = v59169 v59168
            let v59171 : string = v59170 v59165
            let v59175 : unit = ()
            let v59176 : (unit -> unit) = closure60(v59159, v59171)
            let v59177 : unit = (fun () -> v59176 (); v59175) ()
            return struct (v59159, v59171) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v105243 : Async<struct (int32 * string)> = _v52640 
    let _v26 = v105243 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v105244 : unit = ()
    let _v105244 =
        async {
            let v105247 : US14 = method70(v0)
            let struct (v105258 : string, v105259 : US5) =
                match v105247 with
                | US14_1(v105250) -> (* Error *)
                    let v105251 : string = $"resultm.get / Result value was Error: {v105250}"
                    failwith<struct (string * US5)> v105251
                | US14_0(v105248, v105249) -> (* Ok *)
                    struct (v105248, v105249)
            let v105260 : (string -> US5) = method6()
            let v105261 : US5 option = v6 |> Option.map v105260 
            let v105272 : US5 = US5_1
            let v105273 : US5 = v105261 |> Option.defaultValue v105272 
            let v105280 : string =
                match v105273 with
                | US5_1 -> (* None *)
                    let v105278 : string = ""
                    v105278
                | US5_0(v105277) -> (* Some *)
                    v105277
            let v105281 : unit = ()
            let v105282 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v105259, v105258)
            let v105283 : unit = (fun () -> v105282 (); v105281) ()
            let v105323 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v105327 : string =
                match v105259 with
                | US5_1 -> (* None *)
                    let v105325 : string = ""
                    v105325
                | US5_0(v105324) -> (* Some *)
                    v105324
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v105327,
              StandardOutputEncoding = v105323,
              WorkingDirectory = v105280,
              FileName = v105258,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v105328 : System.Diagnostics.ProcessStartInfo = start_info
            let v105329 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v105330 : int32 = v105329.Length
            let v105331 : Mut5 = {l0 = 0} : Mut5
            while method72(v105330, v105331) do
                let v105333 : int32 = v105331.l0
                let struct (v105334 : string, v105335 : string) = v105329.[int v105333]
                v105328.EnvironmentVariables.[v105334] <- v105335 
                let v105336 : int32 = v105333 + 1
                v105331.l0 <- v105336
                ()
            let v105337 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v105328)
            use v105337 = v105337 
            let v105338 : System.Diagnostics.Process = v105337 
            let v105339 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v105340 : System.Collections.Concurrent.ConcurrentStack<string> = v105339 ()
            let v105341 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v105338, v105340)
            v105338.OutputDataReceived.Add v105341 
            let v105342 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v105338, v105340)
            v105338.ErrorDataReceived.Add v105342 
            let v105343 : (unit -> bool) = v105338.Start
            let v105344 : bool = v105343 ()
            let v105345 : bool = v105344 = false
            if v105345 then
                let v105346 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v105346
            let v105347 : (unit -> unit) = v105338.BeginErrorReadLine
            v105347 ()
            let v105348 : (unit -> unit) = v105338.BeginOutputReadLine
            v105348 ()
            let v105349 : (System.Threading.CancellationToken -> US32) = method129()
            let v105350 : US32 option = v1 |> Option.map v105349 
            let v105361 : US32 = US32_1
            let v105362 : US32 = v105350 |> Option.defaultValue v105361 
            let v105369 : System.Threading.CancellationToken =
                match v105362 with
                | US32_1 -> (* None *)
                    let v105367 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v105367
                | US32_0(v105366) -> (* Some *)
                    v105366
            let v105370 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v105371 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105370 = v105371 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v105374 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105370 = v105374 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v105377 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105370 = v105377 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v105380 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105370 = v105380 
            #endif
#if FABLE_COMPILER_PYTHON
            let v105383 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105370 = v105383 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v105386 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105370 = v105386 
            #endif
#else
            let v105389 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v105390 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105389 = v105390 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v105393 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105389 = v105393 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v105396 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v105389 = v105396 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v105399 : unit = ()
            let _v105399 =
                async {
                    let v105402 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v105402 = v105402 
                    let v105403 : System.Threading.CancellationToken = v105402 
                    let v105404 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v105405 : (System.Threading.CancellationToken []) = [|v105403; v105404; v105369|]
                    let v105406 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v105407 : System.Threading.CancellationTokenSource = v105406 v105405
                    let v105408 : System.Threading.CancellationToken = v105407.Token
                    return v105408 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v105458 : Async<System.Threading.CancellationToken> = _v105399 
            let _v105389 = v105458 
            #endif
#if FABLE_COMPILER_PYTHON
            let v105459 : unit = ()
            let _v105459 =
                async {
                    let v105462 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v105462 = v105462 
                    let v105463 : System.Threading.CancellationToken = v105462 
                    let v105464 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v105465 : (System.Threading.CancellationToken []) = [|v105463; v105464; v105369|]
                    let v105466 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v105467 : System.Threading.CancellationTokenSource = v105466 v105465
                    let v105468 : System.Threading.CancellationToken = v105467.Token
                    return v105468 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v105518 : Async<System.Threading.CancellationToken> = _v105459 
            let _v105389 = v105518 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v105519 : unit = ()
            let _v105519 =
                async {
                    let v105522 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v105522 = v105522 
                    let v105523 : System.Threading.CancellationToken = v105522 
                    let v105524 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v105525 : (System.Threading.CancellationToken []) = [|v105523; v105524; v105369|]
                    let v105526 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v105527 : System.Threading.CancellationTokenSource = v105526 v105525
                    let v105528 : System.Threading.CancellationToken = v105527.Token
                    return v105528 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v105578 : Async<System.Threading.CancellationToken> = _v105519 
            let _v105389 = v105578 
            #endif
#else
            let v105579 : unit = ()
            let _v105579 =
                async {
                    let v105582 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v105582 = v105582 
                    let v105583 : System.Threading.CancellationToken = v105582 
                    let v105584 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v105585 : (System.Threading.CancellationToken []) = [|v105583; v105584; v105369|]
                    let v105586 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v105587 : System.Threading.CancellationTokenSource = v105586 v105585
                    let v105588 : System.Threading.CancellationToken = v105587.Token
                    return v105588 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v105638 : Async<System.Threading.CancellationToken> = _v105579 
            let _v105389 = v105638 
            #endif
            let v105639 : Async<System.Threading.CancellationToken> = _v105389 
            let _v105370 = v105639 
            #endif
            let v105673 : Async<System.Threading.CancellationToken> = _v105370 
            let! v105673 = v105673 
            let v105678 : System.Threading.CancellationToken = v105673 
            let v105679 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v105678.Register
            let v105680 : (unit -> unit) = closure58(v105338)
            let v105681 : System.Threading.CancellationTokenRegistration = v105679 v105680
            use v105681 = v105681 
            let v105682 : System.Threading.CancellationTokenRegistration = v105681 
            let v105683 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v105684 : Async<int32> = null |> unbox<Async<int32>>
            let _v105683 = v105684 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v105687 : Async<int32> = null |> unbox<Async<int32>>
            let _v105683 = v105687 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v105690 : Async<int32> = null |> unbox<Async<int32>>
            let _v105683 = v105690 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v105693 : unit = ()
            let _v105693 =
                async {
                    try
                    let v105696 : System.Threading.Tasks.Task = v105338.WaitForExitAsync v105678 
                    let v105697 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v105698 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v105699 : Async<unit> = v105698 v105696
                    let _v105697 = v105699 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v105700 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v105701 : Async<unit> = v105700 v105696
                    let _v105697 = v105701 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v105702 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v105703 : Async<unit> = v105702 v105696
                    let _v105697 = v105703 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v105704 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v105705 : Async<unit> = v105704 v105696
                    let _v105697 = v105705 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v105706 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v105707 : Async<unit> = v105706 v105696
                    let _v105697 = v105707 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v105708 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v105709 : Async<unit> = v105708 v105696
                    let _v105697 = v105709 
                    #endif
#else
                    let v105710 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v105711 : Async<unit> = v105710 v105696
                    let _v105697 = v105711 
                    #endif
                    let v105712 : Async<unit> = _v105697 
                    do! v105712 
                    let v105717 : int32 = v105338.ExitCode
                    return v105717 
                    with ex ->
                        let v105718 : exn = ex
                        let v105719 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v105720 : string = $"%A{v105718}"
                        let _v105719 = v105720 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v105723 : string = $"%A{v105718}"
                        let _v105719 = v105723 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v105726 : string = $"%A{v105718}"
                        let _v105719 = v105726 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v105729 : string = $"%A{v105718}"
                        let _v105719 = v105729 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v105732 : string = $"%A{v105718}"
                        let _v105719 = v105732 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v105735 : string = $"%A{v105718}"
                        let _v105719 = v105735 
                        #endif
#else
                        let v105738 : string = $"{v105718.GetType ()}: {v105718.Message}"
                        let _v105719 = v105738 
                        #endif
                        let v105739 : string = _v105719 
                        let v105744 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v105744 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v105744 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v105744 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v105744 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v105744 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v105744 = () 
                        #endif
#else
                        let v105745 : (string -> unit) = v105340.Push
                        v105745 v105739
                        let _v105744 = () 
                        #endif
                        _v105744 
                        let v105746 : System.Threading.Tasks.TaskCanceledException = v105718 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v105749 : unit = ()
                        let v105750 : (unit -> unit) = closure59(v105746)
                        let v105751 : unit = (fun () -> v105750 (); v105749) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v107040 : Async<int32> = _v105693 
            let _v105683 = v107040 
            #endif
#if FABLE_COMPILER_PYTHON
            let v107041 : unit = ()
            let _v107041 =
                async {
                    try
                    let v107044 : System.Threading.Tasks.Task = v105338.WaitForExitAsync v105678 
                    let v107045 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v107046 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v107047 : Async<unit> = v107046 v107044
                    let _v107045 = v107047 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v107048 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v107049 : Async<unit> = v107048 v107044
                    let _v107045 = v107049 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v107050 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v107051 : Async<unit> = v107050 v107044
                    let _v107045 = v107051 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v107052 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v107053 : Async<unit> = v107052 v107044
                    let _v107045 = v107053 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v107054 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v107055 : Async<unit> = v107054 v107044
                    let _v107045 = v107055 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v107056 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v107057 : Async<unit> = v107056 v107044
                    let _v107045 = v107057 
                    #endif
#else
                    let v107058 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v107059 : Async<unit> = v107058 v107044
                    let _v107045 = v107059 
                    #endif
                    let v107060 : Async<unit> = _v107045 
                    do! v107060 
                    let v107065 : int32 = v105338.ExitCode
                    return v107065 
                    with ex ->
                        let v107066 : exn = ex
                        let v107067 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v107068 : string = $"%A{v107066}"
                        let _v107067 = v107068 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v107071 : string = $"%A{v107066}"
                        let _v107067 = v107071 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v107074 : string = $"%A{v107066}"
                        let _v107067 = v107074 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v107077 : string = $"%A{v107066}"
                        let _v107067 = v107077 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v107080 : string = $"%A{v107066}"
                        let _v107067 = v107080 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v107083 : string = $"%A{v107066}"
                        let _v107067 = v107083 
                        #endif
#else
                        let v107086 : string = $"{v107066.GetType ()}: {v107066.Message}"
                        let _v107067 = v107086 
                        #endif
                        let v107087 : string = _v107067 
                        let v107092 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v107092 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v107092 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v107092 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v107092 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v107092 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v107092 = () 
                        #endif
#else
                        let v107093 : (string -> unit) = v105340.Push
                        v107093 v107087
                        let _v107092 = () 
                        #endif
                        _v107092 
                        let v107094 : System.Threading.Tasks.TaskCanceledException = v107066 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v107097 : unit = ()
                        let v107098 : (unit -> unit) = closure59(v107094)
                        let v107099 : unit = (fun () -> v107098 (); v107097) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v108388 : Async<int32> = _v107041 
            let _v105683 = v108388 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v108389 : unit = ()
            let _v108389 =
                async {
                    try
                    let v108392 : System.Threading.Tasks.Task = v105338.WaitForExitAsync v105678 
                    let v108393 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v108394 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v108395 : Async<unit> = v108394 v108392
                    let _v108393 = v108395 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v108396 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v108397 : Async<unit> = v108396 v108392
                    let _v108393 = v108397 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v108398 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v108399 : Async<unit> = v108398 v108392
                    let _v108393 = v108399 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v108400 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v108401 : Async<unit> = v108400 v108392
                    let _v108393 = v108401 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v108402 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v108403 : Async<unit> = v108402 v108392
                    let _v108393 = v108403 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v108404 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v108405 : Async<unit> = v108404 v108392
                    let _v108393 = v108405 
                    #endif
#else
                    let v108406 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v108407 : Async<unit> = v108406 v108392
                    let _v108393 = v108407 
                    #endif
                    let v108408 : Async<unit> = _v108393 
                    do! v108408 
                    let v108413 : int32 = v105338.ExitCode
                    return v108413 
                    with ex ->
                        let v108414 : exn = ex
                        let v108415 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v108416 : string = $"%A{v108414}"
                        let _v108415 = v108416 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v108419 : string = $"%A{v108414}"
                        let _v108415 = v108419 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v108422 : string = $"%A{v108414}"
                        let _v108415 = v108422 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v108425 : string = $"%A{v108414}"
                        let _v108415 = v108425 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v108428 : string = $"%A{v108414}"
                        let _v108415 = v108428 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v108431 : string = $"%A{v108414}"
                        let _v108415 = v108431 
                        #endif
#else
                        let v108434 : string = $"{v108414.GetType ()}: {v108414.Message}"
                        let _v108415 = v108434 
                        #endif
                        let v108435 : string = _v108415 
                        let v108440 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v108440 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v108440 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v108440 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v108440 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v108440 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v108440 = () 
                        #endif
#else
                        let v108441 : (string -> unit) = v105340.Push
                        v108441 v108435
                        let _v108440 = () 
                        #endif
                        _v108440 
                        let v108442 : System.Threading.Tasks.TaskCanceledException = v108414 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v108445 : unit = ()
                        let v108446 : (unit -> unit) = closure59(v108442)
                        let v108447 : unit = (fun () -> v108446 (); v108445) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v109736 : Async<int32> = _v108389 
            let _v105683 = v109736 
            #endif
#else
            let v109737 : unit = ()
            let _v109737 =
                async {
                    try
                    let v109740 : System.Threading.Tasks.Task = v105338.WaitForExitAsync v105678 
                    let v109741 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v109742 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v109743 : Async<unit> = v109742 v109740
                    let _v109741 = v109743 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v109744 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v109745 : Async<unit> = v109744 v109740
                    let _v109741 = v109745 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v109746 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v109747 : Async<unit> = v109746 v109740
                    let _v109741 = v109747 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v109748 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v109749 : Async<unit> = v109748 v109740
                    let _v109741 = v109749 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v109750 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v109751 : Async<unit> = v109750 v109740
                    let _v109741 = v109751 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v109752 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v109753 : Async<unit> = v109752 v109740
                    let _v109741 = v109753 
                    #endif
#else
                    let v109754 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v109755 : Async<unit> = v109754 v109740
                    let _v109741 = v109755 
                    #endif
                    let v109756 : Async<unit> = _v109741 
                    do! v109756 
                    let v109761 : int32 = v105338.ExitCode
                    return v109761 
                    with ex ->
                        let v109762 : exn = ex
                        let v109763 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v109764 : string = $"%A{v109762}"
                        let _v109763 = v109764 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v109767 : string = $"%A{v109762}"
                        let _v109763 = v109767 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v109770 : string = $"%A{v109762}"
                        let _v109763 = v109770 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v109773 : string = $"%A{v109762}"
                        let _v109763 = v109773 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v109776 : string = $"%A{v109762}"
                        let _v109763 = v109776 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v109779 : string = $"%A{v109762}"
                        let _v109763 = v109779 
                        #endif
#else
                        let v109782 : string = $"{v109762.GetType ()}: {v109762.Message}"
                        let _v109763 = v109782 
                        #endif
                        let v109783 : string = _v109763 
                        let v109788 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v109788 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v109788 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v109788 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v109788 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v109788 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v109788 = () 
                        #endif
#else
                        let v109789 : (string -> unit) = v105340.Push
                        v109789 v109783
                        let _v109788 = () 
                        #endif
                        _v109788 
                        let v109790 : System.Threading.Tasks.TaskCanceledException = v109762 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v109793 : unit = ()
                        let v109794 : (unit -> unit) = closure59(v109790)
                        let v109795 : unit = (fun () -> v109794 (); v109793) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v111084 : Async<int32> = _v109737 
            let _v105683 = v111084 
            #endif
            let v111085 : Async<int32> = _v105683 
            let! v111085 = v111085 
            let v111763 : int32 = v111085 
            let v111764 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v111765 : string seq = v111764 v105340
            let v111768 : (string seq -> string seq) = Seq.rev
            let v111769 : string seq = v111768 v111765
            let v111772 : string = method40()
            let v111773 : (string -> (string seq -> string)) = String.concat
            let v111774 : (string seq -> string) = v111773 v111772
            let v111775 : string = v111774 v111769
            let v111779 : unit = ()
            let v111780 : (unit -> unit) = closure60(v111763, v111775)
            let v111781 : unit = (fun () -> v111780 (); v111779) ()
            return struct (v111763, v111775) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v157847 : Async<struct (int32 * string)> = _v105244 
    let _v26 = v157847 
    #endif
#else
    let v157848 : unit = ()
    let _v157848 =
        async {
            let v157851 : US14 = method70(v0)
            let struct (v157862 : string, v157863 : US5) =
                match v157851 with
                | US14_1(v157854) -> (* Error *)
                    let v157855 : string = $"resultm.get / Result value was Error: {v157854}"
                    failwith<struct (string * US5)> v157855
                | US14_0(v157852, v157853) -> (* Ok *)
                    struct (v157852, v157853)
            let v157864 : (string -> US5) = method6()
            let v157865 : US5 option = v6 |> Option.map v157864 
            let v157876 : US5 = US5_1
            let v157877 : US5 = v157865 |> Option.defaultValue v157876 
            let v157884 : string =
                match v157877 with
                | US5_1 -> (* None *)
                    let v157882 : string = ""
                    v157882
                | US5_0(v157881) -> (* Some *)
                    v157881
            let v157885 : unit = ()
            let v157886 : (unit -> unit) = closure52(v0, v1, v2, v3, v4, v5, v6, v157863, v157862)
            let v157887 : unit = (fun () -> v157886 (); v157885) ()
            let v157927 : System.Text.Encoding = System.Text.Encoding.UTF8
            let v157931 : string =
                match v157863 with
                | US5_1 -> (* None *)
                    let v157929 : string = ""
                    v157929
                | US5_0(v157928) -> (* Some *)
                    v157928
            let start_info = System.Diagnostics.ProcessStartInfo (
              Arguments = v157931,
              StandardOutputEncoding = v157927,
              WorkingDirectory = v157884,
              FileName = v157862,
              CreateNoWindow = true,
              RedirectStandardError = true,
              RedirectStandardOutput = true,
              UseShellExecute = false
            )
            let v157932 : System.Diagnostics.ProcessStartInfo = start_info
            let v157933 : (struct (string * string) []) = method127(v0, v1, v2, v3, v4, v5, v6)
            let v157934 : int32 = v157933.Length
            let v157935 : Mut5 = {l0 = 0} : Mut5
            while method72(v157934, v157935) do
                let v157937 : int32 = v157935.l0
                let struct (v157938 : string, v157939 : string) = v157933.[int v157937]
                v157932.EnvironmentVariables.[v157938] <- v157939 
                let v157940 : int32 = v157937 + 1
                v157935.l0 <- v157940
                ()
            let v157941 : System.Diagnostics.Process = new System.Diagnostics.Process (StartInfo = v157932)
            use v157941 = v157941 
            let v157942 : System.Diagnostics.Process = v157941 
            let v157943 : (unit -> System.Collections.Concurrent.ConcurrentStack<string>) = System.Collections.Concurrent.ConcurrentStack<string>
            let v157944 : System.Collections.Concurrent.ConcurrentStack<string> = v157943 ()
            let v157945 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure53(v0, v1, v2, v3, v4, v5, v6, v157942, v157944)
            v157942.OutputDataReceived.Add v157945 
            let v157946 : (System.Diagnostics.DataReceivedEventArgs -> unit) = closure56(v0, v1, v2, v3, v4, v5, v6, v157942, v157944)
            v157942.ErrorDataReceived.Add v157946 
            let v157947 : (unit -> bool) = v157942.Start
            let v157948 : bool = v157947 ()
            let v157949 : bool = v157948 = false
            if v157949 then
                let v157950 : string = $"runtime.execute_with_options_async / process_start error"
                failwith<unit> v157950
            let v157951 : (unit -> unit) = v157942.BeginErrorReadLine
            v157951 ()
            let v157952 : (unit -> unit) = v157942.BeginOutputReadLine
            v157952 ()
            let v157953 : (System.Threading.CancellationToken -> US32) = method129()
            let v157954 : US32 option = v1 |> Option.map v157953 
            let v157965 : US32 = US32_1
            let v157966 : US32 = v157954 |> Option.defaultValue v157965 
            let v157973 : System.Threading.CancellationToken =
                match v157966 with
                | US32_1 -> (* None *)
                    let v157971 : System.Threading.CancellationToken = System.Threading.CancellationToken.None
                    v157971
                | US32_0(v157970) -> (* Some *)
                    v157970
            let v157974 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v157975 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157974 = v157975 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v157978 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157974 = v157978 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v157981 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157974 = v157981 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v157984 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157974 = v157984 
            #endif
#if FABLE_COMPILER_PYTHON
            let v157987 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157974 = v157987 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v157990 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157974 = v157990 
            #endif
#else
            let v157993 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v157994 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157993 = v157994 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v157997 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157993 = v157997 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v158000 : Async<System.Threading.CancellationToken> = null |> unbox<Async<System.Threading.CancellationToken>>
            let _v157993 = v158000 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v158003 : unit = ()
            let _v158003 =
                async {
                    let v158006 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v158006 = v158006 
                    let v158007 : System.Threading.CancellationToken = v158006 
                    let v158008 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v158009 : (System.Threading.CancellationToken []) = [|v158007; v158008; v157973|]
                    let v158010 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v158011 : System.Threading.CancellationTokenSource = v158010 v158009
                    let v158012 : System.Threading.CancellationToken = v158011.Token
                    return v158012 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v158062 : Async<System.Threading.CancellationToken> = _v158003 
            let _v157993 = v158062 
            #endif
#if FABLE_COMPILER_PYTHON
            let v158063 : unit = ()
            let _v158063 =
                async {
                    let v158066 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v158066 = v158066 
                    let v158067 : System.Threading.CancellationToken = v158066 
                    let v158068 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v158069 : (System.Threading.CancellationToken []) = [|v158067; v158068; v157973|]
                    let v158070 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v158071 : System.Threading.CancellationTokenSource = v158070 v158069
                    let v158072 : System.Threading.CancellationToken = v158071.Token
                    return v158072 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v158122 : Async<System.Threading.CancellationToken> = _v158063 
            let _v157993 = v158122 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v158123 : unit = ()
            let _v158123 =
                async {
                    let v158126 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v158126 = v158126 
                    let v158127 : System.Threading.CancellationToken = v158126 
                    let v158128 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v158129 : (System.Threading.CancellationToken []) = [|v158127; v158128; v157973|]
                    let v158130 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v158131 : System.Threading.CancellationTokenSource = v158130 v158129
                    let v158132 : System.Threading.CancellationToken = v158131.Token
                    return v158132 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v158182 : Async<System.Threading.CancellationToken> = _v158123 
            let _v157993 = v158182 
            #endif
#else
            let v158183 : unit = ()
            let _v158183 =
                async {
                    let v158186 : Async<System.Threading.CancellationToken> = Async.CancellationToken
                    let! v158186 = v158186 
                    let v158187 : System.Threading.CancellationToken = v158186 
                    let v158188 : System.Threading.CancellationToken = Async.DefaultCancellationToken
                    let v158189 : (System.Threading.CancellationToken []) = [|v158187; v158188; v157973|]
                    let v158190 : ((System.Threading.CancellationToken []) -> System.Threading.CancellationTokenSource) = System.Threading.CancellationTokenSource.CreateLinkedTokenSource
                    let v158191 : System.Threading.CancellationTokenSource = v158190 v158189
                    let v158192 : System.Threading.CancellationToken = v158191.Token
                    return v158192 
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v158242 : Async<System.Threading.CancellationToken> = _v158183 
            let _v157993 = v158242 
            #endif
            let v158243 : Async<System.Threading.CancellationToken> = _v157993 
            let _v157974 = v158243 
            #endif
            let v158277 : Async<System.Threading.CancellationToken> = _v157974 
            let! v158277 = v158277 
            let v158282 : System.Threading.CancellationToken = v158277 
            let v158283 : ((unit -> unit) -> System.Threading.CancellationTokenRegistration) = v158282.Register
            let v158284 : (unit -> unit) = closure58(v157942)
            let v158285 : System.Threading.CancellationTokenRegistration = v158283 v158284
            use v158285 = v158285 
            let v158286 : System.Threading.CancellationTokenRegistration = v158285 
            let v158287 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v158288 : Async<int32> = null |> unbox<Async<int32>>
            let _v158287 = v158288 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v158291 : Async<int32> = null |> unbox<Async<int32>>
            let _v158287 = v158291 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v158294 : Async<int32> = null |> unbox<Async<int32>>
            let _v158287 = v158294 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v158297 : unit = ()
            let _v158297 =
                async {
                    try
                    let v158300 : System.Threading.Tasks.Task = v157942.WaitForExitAsync v158282 
                    let v158301 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v158302 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v158303 : Async<unit> = v158302 v158300
                    let _v158301 = v158303 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v158304 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v158305 : Async<unit> = v158304 v158300
                    let _v158301 = v158305 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v158306 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v158307 : Async<unit> = v158306 v158300
                    let _v158301 = v158307 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v158308 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v158309 : Async<unit> = v158308 v158300
                    let _v158301 = v158309 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v158310 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v158311 : Async<unit> = v158310 v158300
                    let _v158301 = v158311 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v158312 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v158313 : Async<unit> = v158312 v158300
                    let _v158301 = v158313 
                    #endif
#else
                    let v158314 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v158315 : Async<unit> = v158314 v158300
                    let _v158301 = v158315 
                    #endif
                    let v158316 : Async<unit> = _v158301 
                    do! v158316 
                    let v158321 : int32 = v157942.ExitCode
                    return v158321 
                    with ex ->
                        let v158322 : exn = ex
                        let v158323 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v158324 : string = $"%A{v158322}"
                        let _v158323 = v158324 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v158327 : string = $"%A{v158322}"
                        let _v158323 = v158327 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v158330 : string = $"%A{v158322}"
                        let _v158323 = v158330 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v158333 : string = $"%A{v158322}"
                        let _v158323 = v158333 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v158336 : string = $"%A{v158322}"
                        let _v158323 = v158336 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v158339 : string = $"%A{v158322}"
                        let _v158323 = v158339 
                        #endif
#else
                        let v158342 : string = $"{v158322.GetType ()}: {v158322.Message}"
                        let _v158323 = v158342 
                        #endif
                        let v158343 : string = _v158323 
                        let v158348 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v158348 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v158348 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v158348 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v158348 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v158348 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v158348 = () 
                        #endif
#else
                        let v158349 : (string -> unit) = v157944.Push
                        v158349 v158343
                        let _v158348 = () 
                        #endif
                        _v158348 
                        let v158350 : System.Threading.Tasks.TaskCanceledException = v158322 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v158353 : unit = ()
                        let v158354 : (unit -> unit) = closure59(v158350)
                        let v158355 : unit = (fun () -> v158354 (); v158353) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v159644 : Async<int32> = _v158297 
            let _v158287 = v159644 
            #endif
#if FABLE_COMPILER_PYTHON
            let v159645 : unit = ()
            let _v159645 =
                async {
                    try
                    let v159648 : System.Threading.Tasks.Task = v157942.WaitForExitAsync v158282 
                    let v159649 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v159650 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v159651 : Async<unit> = v159650 v159648
                    let _v159649 = v159651 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v159652 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v159653 : Async<unit> = v159652 v159648
                    let _v159649 = v159653 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v159654 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v159655 : Async<unit> = v159654 v159648
                    let _v159649 = v159655 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v159656 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v159657 : Async<unit> = v159656 v159648
                    let _v159649 = v159657 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v159658 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v159659 : Async<unit> = v159658 v159648
                    let _v159649 = v159659 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v159660 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v159661 : Async<unit> = v159660 v159648
                    let _v159649 = v159661 
                    #endif
#else
                    let v159662 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v159663 : Async<unit> = v159662 v159648
                    let _v159649 = v159663 
                    #endif
                    let v159664 : Async<unit> = _v159649 
                    do! v159664 
                    let v159669 : int32 = v157942.ExitCode
                    return v159669 
                    with ex ->
                        let v159670 : exn = ex
                        let v159671 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v159672 : string = $"%A{v159670}"
                        let _v159671 = v159672 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v159675 : string = $"%A{v159670}"
                        let _v159671 = v159675 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v159678 : string = $"%A{v159670}"
                        let _v159671 = v159678 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v159681 : string = $"%A{v159670}"
                        let _v159671 = v159681 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v159684 : string = $"%A{v159670}"
                        let _v159671 = v159684 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v159687 : string = $"%A{v159670}"
                        let _v159671 = v159687 
                        #endif
#else
                        let v159690 : string = $"{v159670.GetType ()}: {v159670.Message}"
                        let _v159671 = v159690 
                        #endif
                        let v159691 : string = _v159671 
                        let v159696 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v159696 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v159696 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v159696 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v159696 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v159696 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v159696 = () 
                        #endif
#else
                        let v159697 : (string -> unit) = v157944.Push
                        v159697 v159691
                        let _v159696 = () 
                        #endif
                        _v159696 
                        let v159698 : System.Threading.Tasks.TaskCanceledException = v159670 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v159701 : unit = ()
                        let v159702 : (unit -> unit) = closure59(v159698)
                        let v159703 : unit = (fun () -> v159702 (); v159701) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v160992 : Async<int32> = _v159645 
            let _v158287 = v160992 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v160993 : unit = ()
            let _v160993 =
                async {
                    try
                    let v160996 : System.Threading.Tasks.Task = v157942.WaitForExitAsync v158282 
                    let v160997 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v160998 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v160999 : Async<unit> = v160998 v160996
                    let _v160997 = v160999 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v161000 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v161001 : Async<unit> = v161000 v160996
                    let _v160997 = v161001 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v161002 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v161003 : Async<unit> = v161002 v160996
                    let _v160997 = v161003 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v161004 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v161005 : Async<unit> = v161004 v160996
                    let _v160997 = v161005 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v161006 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v161007 : Async<unit> = v161006 v160996
                    let _v160997 = v161007 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v161008 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v161009 : Async<unit> = v161008 v160996
                    let _v160997 = v161009 
                    #endif
#else
                    let v161010 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v161011 : Async<unit> = v161010 v160996
                    let _v160997 = v161011 
                    #endif
                    let v161012 : Async<unit> = _v160997 
                    do! v161012 
                    let v161017 : int32 = v157942.ExitCode
                    return v161017 
                    with ex ->
                        let v161018 : exn = ex
                        let v161019 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v161020 : string = $"%A{v161018}"
                        let _v161019 = v161020 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v161023 : string = $"%A{v161018}"
                        let _v161019 = v161023 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v161026 : string = $"%A{v161018}"
                        let _v161019 = v161026 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v161029 : string = $"%A{v161018}"
                        let _v161019 = v161029 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v161032 : string = $"%A{v161018}"
                        let _v161019 = v161032 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v161035 : string = $"%A{v161018}"
                        let _v161019 = v161035 
                        #endif
#else
                        let v161038 : string = $"{v161018.GetType ()}: {v161018.Message}"
                        let _v161019 = v161038 
                        #endif
                        let v161039 : string = _v161019 
                        let v161044 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v161044 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v161044 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v161044 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v161044 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v161044 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v161044 = () 
                        #endif
#else
                        let v161045 : (string -> unit) = v157944.Push
                        v161045 v161039
                        let _v161044 = () 
                        #endif
                        _v161044 
                        let v161046 : System.Threading.Tasks.TaskCanceledException = v161018 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v161049 : unit = ()
                        let v161050 : (unit -> unit) = closure59(v161046)
                        let v161051 : unit = (fun () -> v161050 (); v161049) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v162340 : Async<int32> = _v160993 
            let _v158287 = v162340 
            #endif
#else
            let v162341 : unit = ()
            let _v162341 =
                async {
                    try
                    let v162344 : System.Threading.Tasks.Task = v157942.WaitForExitAsync v158282 
                    let v162345 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v162346 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v162347 : Async<unit> = v162346 v162344
                    let _v162345 = v162347 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v162348 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v162349 : Async<unit> = v162348 v162344
                    let _v162345 = v162349 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v162350 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v162351 : Async<unit> = v162350 v162344
                    let _v162345 = v162351 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v162352 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v162353 : Async<unit> = v162352 v162344
                    let _v162345 = v162353 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v162354 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v162355 : Async<unit> = v162354 v162344
                    let _v162345 = v162355 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v162356 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v162357 : Async<unit> = v162356 v162344
                    let _v162345 = v162357 
                    #endif
#else
                    let v162358 : (System.Threading.Tasks.Task -> Async<unit>) = Async.AwaitTask
                    let v162359 : Async<unit> = v162358 v162344
                    let _v162345 = v162359 
                    #endif
                    let v162360 : Async<unit> = _v162345 
                    do! v162360 
                    let v162365 : int32 = v157942.ExitCode
                    return v162365 
                    with ex ->
                        let v162366 : exn = ex
                        let v162367 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v162368 : string = $"%A{v162366}"
                        let _v162367 = v162368 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v162371 : string = $"%A{v162366}"
                        let _v162367 = v162371 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v162374 : string = $"%A{v162366}"
                        let _v162367 = v162374 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v162377 : string = $"%A{v162366}"
                        let _v162367 = v162377 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v162380 : string = $"%A{v162366}"
                        let _v162367 = v162380 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v162383 : string = $"%A{v162366}"
                        let _v162367 = v162383 
                        #endif
#else
                        let v162386 : string = $"{v162366.GetType ()}: {v162366.Message}"
                        let _v162367 = v162386 
                        #endif
                        let v162387 : string = _v162367 
                        let v162392 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let _v162392 = () 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let _v162392 = () 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let _v162392 = () 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let _v162392 = () 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let _v162392 = () 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let _v162392 = () 
                        #endif
#else
                        let v162393 : (string -> unit) = v157944.Push
                        v162393 v162387
                        let _v162392 = () 
                        #endif
                        _v162392 
                        let v162394 : System.Threading.Tasks.TaskCanceledException = v162366 |> unbox<System.Threading.Tasks.TaskCanceledException>
                        let v162397 : unit = ()
                        let v162398 : (unit -> unit) = closure59(v162394)
                        let v162399 : unit = (fun () -> v162398 (); v162397) ()
                        return -2147483648 
                        (*
                        ()
                    *)
                    (*
                    *)
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v163688 : Async<int32> = _v162341 
            let _v158287 = v163688 
            #endif
            let v163689 : Async<int32> = _v158287 
            let! v163689 = v163689 
            let v164367 : int32 = v163689 
            let v164368 : (System.Collections.Concurrent.ConcurrentStack<string> -> string seq) = Seq.cast
            let v164369 : string seq = v164368 v157944
            let v164372 : (string seq -> string seq) = Seq.rev
            let v164373 : string seq = v164372 v164369
            let v164376 : string = method40()
            let v164377 : (string -> (string seq -> string)) = String.concat
            let v164378 : (string seq -> string) = v164377 v164376
            let v164379 : string = v164378 v164373
            let v164383 : unit = ()
            let v164384 : (unit -> unit) = closure60(v164367, v164379)
            let v164385 : unit = (fun () -> v164384 (); v164383) ()
            return struct (v164367, v164379) 
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v210451 : Async<struct (int32 * string)> = _v157848 
    let _v26 = v210451 
    #endif
    let v210452 : Async<struct (int32 * string)> = _v26 
    let _v7 = v210452 
    #endif
    let v236758 : Async<struct (int32 * string)> = _v7 
    v236758
and method68 (v0 : string, v1 : System.Threading.CancellationToken option, v2 : (struct (string * string) []), v3 : (struct (int32 * string * bool) -> Async<unit>) option, v4 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v5 : bool, v6 : string option) : struct (int32 * string) =
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = method69(v0, v1, v2, v3, v4, v5, v6)
    let v9 : US14 = method70(v8)
    let struct (v20 : string, v21 : US5) =
        match v9 with
        | US14_1(v12) -> (* Error *)
            let v13 : string = $"resultm.get / Result value was Error: {v12}"
            failwith<struct (string * US5)> v13
        | US14_0(v10, v11) -> (* Ok *)
            struct (v10, v11)
    let v25 : string =
        match v21 with
        | US5_1 -> (* None *)
            let v23 : string = ""
            v23
        | US5_0(v22) -> (* Some *)
            v22
    let v26 : US22 = method83(v25)
    let v34 : (string []) =
        match v26 with
        | US22_1(v28) -> (* Error *)
            let v29 : string = $"resultm.get / Result value was Error: {v28}"
            failwith<(string [])> v29
        | US22_0(v27) -> (* Ok *)
            v27
    let v35 : string = "$0.to_vec()"
    let v36 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v34 v35 
    let v37 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v38 : bool = Fable.Core.RustInterop.emitRustExpr v36 v37 
    let v39 : string = "x"
    let v40 : string = Fable.Core.RustInterop.emitRustExpr () v39 
    let v41 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v42 : string = "&*$0"
    let v43 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v42 
    let _v41 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "&*$0"
    let v45 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v44 
    let _v41 = v45 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v46 : string = "&*$0"
    let v47 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v40 v46 
    let _v41 = v47 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v48 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v48 
    #endif
#if FABLE_COMPILER_PYTHON
    let v51 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v51 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v54 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v54 
    #endif
#else
    let v57 : Ref<Str> = v40 |> unbox<Ref<Str>>
    let _v41 = v57 
    #endif
    let v60 : Ref<Str> = _v41 
    let v65 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v66 : string = "String::from($0)"
    let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v66 
    let _v65 = v67 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v68 : string = "String::from($0)"
    let v69 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v68 
    let _v65 = v69 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v70 : string = "String::from($0)"
    let v71 : std_string_String = Fable.Core.RustInterop.emitRustExpr v60 v70 
    let _v65 = v71 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v72 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v72 
    #endif
#if FABLE_COMPILER_PYTHON
    let v75 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v75 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v78 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v78 
    #endif
#else
    let v81 : std_string_String = v60 |> unbox<std_string_String>
    let _v65 = v81 
    #endif
    let v84 : std_string_String = _v65 
    let v89 : string = "true; $0 }).collect::<Vec<_>>()"
    let v90 : bool = Fable.Core.RustInterop.emitRustExpr v84 v89 
    let v91 : string = "_vec_map"
    let v92 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v91 
    let v93 : unit = ()
    let v94 : (unit -> unit) = closure32(v0, v1, v2, v3, v4, v5, v6, v20, v92)
    let v95 : unit = (fun () -> v94 (); v93) ()
    let v138 : bool = true
    let mutable _v138 : (int32 * string) option = None 
    (
    (fun () ->
    (fun () ->
    let v139 : string = "std::process::Command::new(&*$0)"
    let v140 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v20 v139 
    let v141 : string = "true; let mut v140 = v140"
    let v142 : bool = Fable.Core.RustInterop.emitRustExpr () v141 
    let v143 : string = "true; std::process::Command::args(&mut v140, &*$0)"
    let v144 : bool = Fable.Core.RustInterop.emitRustExpr v92 v143 
    let v145 : string = "$0"
    let v146 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v140 v145 
    let v147 : string = "std::process::Stdio::piped()"
    let v148 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v147 
    let v149 : string = "true; let mut v146 = v146"
    let v150 : bool = Fable.Core.RustInterop.emitRustExpr () v149 
    let v151 : string = "true; std::process::Command::stdout(&mut v146, std::process::Stdio::piped())"
    let v152 : bool = Fable.Core.RustInterop.emitRustExpr () v151 
    let v153 : string = "$0"
    let v154 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v146 v153 
    let v155 : string = "std::process::Stdio::piped()"
    let v156 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v155 
    let v157 : string = "true; let mut v154 = v154"
    let v158 : bool = Fable.Core.RustInterop.emitRustExpr () v157 
    let v159 : string = "true; std::process::Command::stderr(&mut v154, std::process::Stdio::piped())"
    let v160 : bool = Fable.Core.RustInterop.emitRustExpr () v159 
    let v161 : string = "$0"
    let v162 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v154 v161 
    let v163 : string = "std::process::Stdio::piped()"
    let v164 : std_process_Stdio = Fable.Core.RustInterop.emitRustExpr () v163 
    let v165 : string = "true; let mut v162 = v162"
    let v166 : bool = Fable.Core.RustInterop.emitRustExpr () v165 
    let v167 : string = "true; std::process::Command::stdin(&mut v162, std::process::Stdio::piped())"
    let v168 : bool = Fable.Core.RustInterop.emitRustExpr () v167 
    let v169 : string = "$0"
    let v170 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v162 v169 
    let v171 : (string -> US5) = method6()
    let v172 : US5 option = v6 |> Option.map v171 
    let v183 : US5 = US5_1
    let v184 : US5 = v172 |> Option.defaultValue v183 
    let v198 : std_process_Command =
        match v184 with
        | US5_1 -> (* None *)
            let v195 : string = $"v170"
            let v196 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v195 
            v196
        | US5_0(v188) -> (* Some *)
            let v189 : string = "true; let mut v170 = v170"
            let v190 : bool = Fable.Core.RustInterop.emitRustExpr () v189 
            let v191 : string = "true; std::process::Command::current_dir(&mut v170, &*$0)"
            let v192 : bool = Fable.Core.RustInterop.emitRustExpr v188 v191 
            let v193 : string = $"v170"
            let v194 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v193 
            v194
    let v199 : uint64 = System.Convert.ToUInt64 v2.Length
    let v200 : bool = v199 = 0UL
    let v220 : std_process_Command =
        if v200 then
            v198
        else
            let v201 : string = "$0.to_vec()"
            let v202 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v2 v201 
            let v203 : string = "true; let _vec_fold_ = $0.into_iter().fold(v198, |acc, x| { //"
            let v204 : bool = Fable.Core.RustInterop.emitRustExpr v202 v203 
            let v205 : string = "acc"
            let v206 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v205 
            let v207 : string = "x"
            let struct (v208 : string, v209 : string) = Fable.Core.RustInterop.emitRustExpr () v207 
            let v210 : string = "true; let mut v206 = v206"
            let v211 : bool = Fable.Core.RustInterop.emitRustExpr () v210 
            let v212 : string = "true; std::process::Command::env(&mut v206, &*$0, &*$1)"
            let v213 : bool = Fable.Core.RustInterop.emitRustExpr struct (v208, v209) v212 
            let v214 : string = "$0"
            let v215 : std_process_Command = Fable.Core.RustInterop.emitRustExpr v206 v214 
            let v216 : string = "true; $0 })"
            let v217 : bool = Fable.Core.RustInterop.emitRustExpr v215 v216 
            let v218 : string = "_vec_fold_"
            let v219 : std_process_Command = Fable.Core.RustInterop.emitRustExpr () v218 
            v219
    let v221 : string = "true; let mut v220 = v220"
    let v222 : bool = Fable.Core.RustInterop.emitRustExpr () v221 
    let v223 : string = "std::process::Command::spawn(&mut v220)"
    let v224 : Result<std_process_Child, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v223 
    let v225 : (std_io_Error -> std_string_String) = method46()
    let v226 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v227 : string = "$0.map_err(|x| $1(x))"
    let v228 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v227 
    let _v226 = v228 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v229 : string = "$0.map_err(|x| $1(x))"
    let v230 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v229 
    let _v226 = v230 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v231 : string = "$0.map_err(|x| $1(x))"
    let v232 : Result<std_process_Child, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v224, v225) v231 
    let _v226 = v232 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v233 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v233 
    #endif
#if FABLE_COMPILER_PYTHON
    let v234 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v234 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v235 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v235 
    #endif
#else
    let v236 : Result<std_process_Child, std_string_String> = match v224 with Ok x -> Ok x | Error x -> Error (v225 x)
    let _v226 = v236 
    #endif
    let v237 : Result<std_process_Child, std_string_String> = _v226 
    let v240 : (std_process_Child option -> std_process_Child option) = method95()
    let v241 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v242 : bool = Fable.Core.RustInterop.emitRustExpr v237 v241 
    let v243 : string = "x"
    let v244 : std_process_Child = Fable.Core.RustInterop.emitRustExpr () v243 
    let v245 : std_process_Child option = Some v244 
    let v248 : std_process_Child option = v240 v245
    let v249 : string = "std::sync::Mutex::new(v248)"
    let v250 : std_sync_Mutex<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr () v249 
    let v251 : string = "std::sync::Arc::new(v250)"
    let v252 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr () v251 
    let v253 : string = "true; $0 })"
    let v254 : bool = Fable.Core.RustInterop.emitRustExpr v252 v253 
    let v255 : string = "_result_map_"
    let v256 : Result<std_sync_Arc<std_sync_Mutex<std_process_Child option>>, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v255 
    let v257 : (std_sync_Arc<std_sync_Mutex<std_process_Child option>> -> US24) = method96()
    let v258 : (std_string_String -> US24) = method97()
    let v259 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
    let v260 : US24 = Fable.Core.RustInterop.emitRustExpr struct (v257, v258, v256) v259 
    let struct (v1406 : int32, v1407 : US7, v1408 : US25) =
        match v260 with
        | US24_1(v1358) -> (* Error *)
            let v1359 : unit = ()
            let v1360 : (unit -> unit) = closure36(v1358)
            let v1361 : unit = (fun () -> v1360 (); v1359) ()
            let v1401 : US7 = US7_0(v1358)
            let v1402 : US25 = US25_1
            struct (-1, v1401, v1402)
        | US24_0(v261) -> (* Ok *)
            let v262 : string = "true; let _capture = (|| { //"
            let v263 : bool = Fable.Core.RustInterop.emitRustExpr () v262 
            let v264 : string = "$0"
            let v265 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v264 
            let v266 : string = "v265.lock()"
            let v267 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v266 
            let v268 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v269 : string = "$0.unwrap()"
            let v270 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v269 
            let _v268 = v270 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v271 : string = "$0.unwrap()"
            let v272 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v271 
            let _v268 = v272 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v273 : string = "$0.unwrap()"
            let v274 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v267 v273 
            let _v268 = v274 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v275 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v275 
            #endif
#if FABLE_COMPILER_PYTHON
            let v276 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v276 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v277 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v277 
            #endif
#else
            let v278 : std_sync_MutexGuard<std_process_Child option> = match v267 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v268 = v278 
            #endif
            let v279 : std_sync_MutexGuard<std_process_Child option> = _v268 
            let v282 : std_sync_MutexGuard<std_process_Child option> = method100(v279)
            let v283 : string = "true; let mut v282 = v282"
            let v284 : bool = Fable.Core.RustInterop.emitRustExpr () v283 
            let v285 : string = "&mut $0"
            let v286 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v282 v285 
            let v287 : string = "$0.as_mut()"
            let v288 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v286 v287 
            let v289 : string = "$0.unwrap()"
            let v290 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v288 v289 
            let v291 : string = "&mut $0.stdout"
            let v292 : Ref<Mut<std_process_ChildStdout option>> = Fable.Core.RustInterop.emitRustExpr v290 v291 
            let v293 : string = "Option::take($0)"
            let v294 : std_process_ChildStdout option = Fable.Core.RustInterop.emitRustExpr v292 v293 
            let v295 : string = "$0.unwrap()"
            let v296 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr v294 v295 
            let v297 : string = "true; $0 })()"
            let v298 : bool = Fable.Core.RustInterop.emitRustExpr v296 v297 
            let v299 : string = "_capture"
            let v300 : std_process_ChildStdout = Fable.Core.RustInterop.emitRustExpr () v299 
            let v301 : string = "true; let _capture = (|| { //"
            let v302 : bool = Fable.Core.RustInterop.emitRustExpr () v301 
            let v303 : string = "$0"
            let v304 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v303 
            let v305 : string = "v304.lock()"
            let v306 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v305 
            let v307 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v308 : string = "$0.unwrap()"
            let v309 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v308 
            let _v307 = v309 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v310 : string = "$0.unwrap()"
            let v311 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v310 
            let _v307 = v311 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v312 : string = "$0.unwrap()"
            let v313 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v306 v312 
            let _v307 = v313 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v314 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v314 
            #endif
#if FABLE_COMPILER_PYTHON
            let v315 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v315 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v316 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v316 
            #endif
#else
            let v317 : std_sync_MutexGuard<std_process_Child option> = match v306 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v307 = v317 
            #endif
            let v318 : std_sync_MutexGuard<std_process_Child option> = _v307 
            let v321 : std_sync_MutexGuard<std_process_Child option> = method100(v318)
            let v322 : string = "true; let mut v321 = v321"
            let v323 : bool = Fable.Core.RustInterop.emitRustExpr () v322 
            let v324 : string = "&mut $0"
            let v325 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v321 v324 
            let v326 : string = "$0.as_mut()"
            let v327 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v325 v326 
            let v328 : string = "$0.unwrap()"
            let v329 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v327 v328 
            let v330 : string = "&mut $0.stderr"
            let v331 : Ref<Mut<std_process_ChildStderr option>> = Fable.Core.RustInterop.emitRustExpr v329 v330 
            let v332 : string = "Option::take($0)"
            let v333 : std_process_ChildStderr option = Fable.Core.RustInterop.emitRustExpr v331 v332 
            let v334 : string = "$0.unwrap()"
            let v335 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr v333 v334 
            let v336 : string = "true; $0 })()"
            let v337 : bool = Fable.Core.RustInterop.emitRustExpr v335 v336 
            let v338 : string = "_capture"
            let v339 : std_process_ChildStderr = Fable.Core.RustInterop.emitRustExpr () v338 
            let v340 : string = "true; let _capture = (|| { //"
            let v341 : bool = Fable.Core.RustInterop.emitRustExpr () v340 
            let v342 : string = "$0"
            let v343 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v342 
            let v344 : string = "v343.lock()"
            let v345 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v344 
            let v346 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v347 : string = "$0.unwrap()"
            let v348 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v347 
            let _v346 = v348 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v349 : string = "$0.unwrap()"
            let v350 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v349 
            let _v346 = v350 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v351 : string = "$0.unwrap()"
            let v352 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v345 v351 
            let _v346 = v352 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v353 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v353 
            #endif
#if FABLE_COMPILER_PYTHON
            let v354 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v354 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v355 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v355 
            #endif
#else
            let v356 : std_sync_MutexGuard<std_process_Child option> = match v345 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v346 = v356 
            #endif
            let v357 : std_sync_MutexGuard<std_process_Child option> = _v346 
            let v360 : std_sync_MutexGuard<std_process_Child option> = method100(v357)
            let v361 : string = "true; let mut v360 = v360"
            let v362 : bool = Fable.Core.RustInterop.emitRustExpr () v361 
            let v363 : string = "&mut $0"
            let v364 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v360 v363 
            let v365 : string = "$0.as_mut()"
            let v366 : Ref<Mut<std_process_Child>> option = Fable.Core.RustInterop.emitRustExpr v364 v365 
            let v367 : string = "$0.unwrap()"
            let v368 : Ref<Mut<std_process_Child>> = Fable.Core.RustInterop.emitRustExpr v366 v367 
            let v369 : string = "&mut $0.stdin"
            let v370 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v368 v369 
            let v371 : string = "Option::take($0)"
            let v372 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v370 v371 
            let v373 : string = "$0.unwrap()"
            let v374 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr v372 v373 
            let v375 : std_process_ChildStdin option = Some v374 
            let v378 : (std_process_ChildStdin option -> std_process_ChildStdin option) = method101()
            let v379 : std_process_ChildStdin option = v378 v375
            let v380 : string = "std::sync::Mutex::new(v379)"
            let v381 : std_sync_Mutex<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr () v380 
            let v382 : string = "std::sync::Arc::new(v381)"
            let v383 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v382 
            let v384 : string = "true; $0 })()"
            let v385 : bool = Fable.Core.RustInterop.emitRustExpr v383 v384 
            let v386 : string = "_capture"
            let v387 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr () v386 
            let v388 : string = "{ let (sender, receiver) = std::sync::mpsc::channel(); (sender, std::sync::Arc::new(receiver)) }"
            let struct (v389 : std_sync_mpsc_Sender<std_string_String>, v390 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = Fable.Core.RustInterop.emitRustExpr () v388 
            let v391 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method102()
            let v392 : std_sync_mpsc_Sender<std_string_String> = v391 v389
            let v393 : string = "std::sync::Mutex::new(v392)"
            let v394 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v393 
            let v395 : string = "std::sync::Arc::new(v394)"
            let v396 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v395 
            let v397 : (std_sync_mpsc_Sender<std_string_String> -> std_sync_mpsc_Sender<std_string_String>) = method103()
            let v398 : std_sync_mpsc_Sender<std_string_String> = v397 v389
            let v399 : string = "std::sync::Mutex::new(v398)"
            let v400 : std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr () v399 
            let v401 : string = "std::sync::Arc::new(v400)"
            let v402 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v401 
            let v403 : (std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> -> std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>) = method104()
            let v404 : std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>> = v403 v390
            let v405 : string = "std::sync::Mutex::new(v404)"
            let v406 : std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr () v405 
            let v407 : string = "std::sync::Arc::new(v406)"
            let v408 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v407 
            let v409 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v410 : bool = Fable.Core.RustInterop.emitRustExpr () v409 
            let v411 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v412 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v300 v411 
            let v413 : string = "std::io::BufReader::new($0)"
            let v414 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v412 v413 
            let v415 : string = "std::io::BufRead::lines(v414)"
            let v416 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStdout, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v415 
            let v417 : string = "true; let mut v416 = v416; let _iter_try_for_each = v416.try_for_each(|x| { //"
            let v418 : bool = Fable.Core.RustInterop.emitRustExpr () v417 
            let v419 : string = "x"
            let v420 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v419 
            let v421 : string = "$0.clone()"
            let v422 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v396 v421 
            let v423 : (std_io_Error -> std_string_String) = method46()
            let v424 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v425 : string = "$0.map_err(|x| $1(x))"
            let v426 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v425 
            let _v424 = v426 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v427 : string = "$0.map_err(|x| $1(x))"
            let v428 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v427 
            let _v424 = v428 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v429 : string = "$0.map_err(|x| $1(x))"
            let v430 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v420, v423) v429 
            let _v424 = v430 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v431 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v431 
            #endif
#if FABLE_COMPILER_PYTHON
            let v432 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v432 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v433 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v433 
            #endif
#else
            let v434 : Result<std_string_String, std_string_String> = match v420 with Ok x -> Ok x | Error x -> Error (v423 x)
            let _v424 = v434 
            #endif
            let v435 : Result<std_string_String, std_string_String> = _v424 
            let v438 : (std_string_String -> US26) = method105()
            let v439 : (std_string_String -> US26) = method106()
            let v440 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v441 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v438, v439, v435) v440 
            let v636 : std_string_String =
                match v441 with
                | US26_1(v543) -> (* Error *)
                    let v544 : unit = ()
                    let v545 : (unit -> unit) = closure42(v5, v543)
                    let v546 : unit = (fun () -> v545 (); v544) ()
                    let v586 : string = $"\u001b[4;7m{v543}\u001b[0m"
                    let v587 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v588 : string = "&*$0"
                    let v589 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v588 
                    let _v587 = v589 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v590 : string = "&*$0"
                    let v591 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v590 
                    let _v587 = v591 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v592 : string = "&*$0"
                    let v593 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v586 v592 
                    let _v587 = v593 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v594 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v594 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v597 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v597 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v600 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v600 
                    #endif
#else
                    let v603 : Ref<Str> = v586 |> unbox<Ref<Str>>
                    let _v587 = v603 
                    #endif
                    let v606 : Ref<Str> = _v587 
                    let v611 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v612 : string = "String::from($0)"
                    let v613 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v612 
                    let _v611 = v613 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v614 : string = "String::from($0)"
                    let v615 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v614 
                    let _v611 = v615 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v616 : string = "String::from($0)"
                    let v617 : std_string_String = Fable.Core.RustInterop.emitRustExpr v606 v616 
                    let _v611 = v617 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v618 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v618 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v621 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v621 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v624 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v624 
                    #endif
#else
                    let v627 : std_string_String = v606 |> unbox<std_string_String>
                    let _v611 = v627 
                    #endif
                    let v630 : std_string_String = _v611 
                    v630
                | US26_0(v442) -> (* Ok *)
                    let v443 : string = "fable_library_rust::String_::fromString($0)"
                    let v444 : string = Fable.Core.RustInterop.emitRustExpr v442 v443 
                    let v445 : string = "encoding_rs::UTF_8"
                    let v446 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v445 
                    let v447 : string = "$0.encode(&*$1).0"
                    let v448 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v446, v444) v447 
                    let v449 : string = "$0.as_ref()"
                    let v450 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v448 v449 
                    let v451 : string = "std::str::from_utf8($0)"
                    let v452 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v450 v451 
                    let v453 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v454 : string = "$0.unwrap()"
                    let v455 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v454 
                    let _v453 = v455 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v456 : string = "$0.unwrap()"
                    let v457 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v456 
                    let _v453 = v457 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v458 : string = "$0.unwrap()"
                    let v459 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v452 v458 
                    let _v453 = v459 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v460 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v460 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v461 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v461 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v462 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v462 
                    #endif
#else
                    let v463 : Ref<Str> = match v452 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v453 = v463 
                    #endif
                    let v464 : Ref<Str> = _v453 
                    let v467 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v468 : string = "String::from($0)"
                    let v469 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v468 
                    let _v467 = v469 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v470 : string = "String::from($0)"
                    let v471 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v470 
                    let _v467 = v471 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v472 : string = "String::from($0)"
                    let v473 : std_string_String = Fable.Core.RustInterop.emitRustExpr v464 v472 
                    let _v467 = v473 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v474 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v474 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v477 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v477 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v480 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v480 
                    #endif
#else
                    let v483 : std_string_String = v464 |> unbox<std_string_String>
                    let _v467 = v483 
                    #endif
                    let v486 : std_string_String = _v467 
                    let v491 : string = "fable_library_rust::String_::fromString($0)"
                    let v492 : string = Fable.Core.RustInterop.emitRustExpr v486 v491 
                    let v493 : string = $"> {v492}"
                    if v5 then
                        let v494 : unit = ()
                        let v495 : (unit -> unit) = closure43(v493)
                        let v496 : unit = (fun () -> v495 (); v494) ()
                        ()
                    else
                        let v539 : unit = ()
                        let v540 : (unit -> unit) = closure10(v493)
                        let v541 : unit = (fun () -> v540 (); v539) ()
                        ()
                    v486
            let v637 : string = "$0"
            let v638 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v422 v637 
            let v639 : string = "v638.lock()"
            let v640 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v639 
            let v641 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v642 : string = "$0.unwrap()"
            let v643 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v642 
            let _v641 = v643 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v644 : string = "$0.unwrap()"
            let v645 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v644 
            let _v641 = v645 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v646 : string = "$0.unwrap()"
            let v647 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v640 v646 
            let _v641 = v647 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v648 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v648 
            #endif
#if FABLE_COMPILER_PYTHON
            let v649 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v649 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v650 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v650 
            #endif
#else
            let v651 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v640 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v641 = v651 
            #endif
            let v652 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _v641 
            let v655 : string = "&$0"
            let v656 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v652 v655 
            let v657 : string = "$0.send($1)"
            let v658 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v656, v636) v657 
            let v659 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method111()
            let v660 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v661 : string = "$0.map_err(|x| $1(x))"
            let v662 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v661 
            let _v660 = v662 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v663 : string = "$0.map_err(|x| $1(x))"
            let v664 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v663 
            let _v660 = v664 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v665 : string = "$0.map_err(|x| $1(x))"
            let v666 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v658, v659) v665 
            let _v660 = v666 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v667 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v667 
            #endif
#if FABLE_COMPILER_PYTHON
            let v668 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v668 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v669 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v669 
            #endif
#else
            let v670 : Result<unit, std_string_String> = match v658 with Ok x -> Ok x | Error x -> Error (v659 x)
            let _v660 = v670 
            #endif
            let v671 : Result<unit, std_string_String> = _v660 
            let v674 : string = "$0"
            let v675 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v671 v674 
            let v676 : string = "true; $0 }); //"
            let v677 : bool = Fable.Core.RustInterop.emitRustExpr v675 v676 
            let v678 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v679 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v678 
            let v680 : Result<unit, string> = method112(v679)
            let v681 : string = ""
            let v682 : string = "}"
            let v683 : string = v681 + v682 
            let v684 : _ = v680 
            let v685 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v686 : string = $"true; let v684 = $0"
            let v687 : bool = Fable.Core.RustInterop.emitRustExpr v684 v686 
            let _v685 = v687 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v688 : string = $"true; let v684 = $0"
            let v689 : bool = Fable.Core.RustInterop.emitRustExpr v684 v688 
            let _v685 = v689 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v690 : string = $"true; let v684 = $0"
            let v691 : bool = Fable.Core.RustInterop.emitRustExpr v684 v690 
            let _v685 = v691 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v692 : bool = true
            let _v685 = v692 
            #endif
#if FABLE_COMPILER_PYTHON
            let v693 : bool = true
            let _v685 = v693 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v694 : bool = true
            let _v685 = v694 
            #endif
#else
            let v695 : bool = true
            let _v685 = v695 
            #endif
            let v696 : bool = _v685 
            let v699 : string = $"true; v684 " + v683 + "); " + v681 + " // rust.fix_closure'"
            let v700 : bool = Fable.Core.RustInterop.emitRustExpr () v699 
            let v701 : string = "__spawn"
            let v702 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v701 
            let v703 : string = "true; let __spawn = std::thread::spawn(move || { //"
            let v704 : bool = Fable.Core.RustInterop.emitRustExpr () v703 
            let v705 : string = "encoding_rs_io::DecodeReaderBytesBuilder::new().utf8_passthru(true).build($0)"
            let v706 : encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr v339 v705 
            let v707 : string = "std::io::BufReader::new($0)"
            let v708 : std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v706 v707 
            let v709 : string = "std::io::BufRead::lines(v708)"
            let v710 : std_io_Lines<std_io_BufReader<encoding_rs_io_DecodeReaderBytes<std_process_ChildStderr, Vec<uint8>>>> = Fable.Core.RustInterop.emitRustExpr () v709 
            let v711 : string = "true; let mut v710 = v710; let _iter_try_for_each = v710.try_for_each(|x| { //"
            let v712 : bool = Fable.Core.RustInterop.emitRustExpr () v711 
            let v713 : string = "x"
            let v714 : Result<std_string_String, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v713 
            let v715 : string = "$0.clone()"
            let v716 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v402 v715 
            let v717 : (std_io_Error -> std_string_String) = method46()
            let v718 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v719 : string = "$0.map_err(|x| $1(x))"
            let v720 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v714, v717) v719 
            let _v718 = v720 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v721 : string = "$0.map_err(|x| $1(x))"
            let v722 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v714, v717) v721 
            let _v718 = v722 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v723 : string = "$0.map_err(|x| $1(x))"
            let v724 : Result<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v714, v717) v723 
            let _v718 = v724 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v725 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v725 
            #endif
#if FABLE_COMPILER_PYTHON
            let v726 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v726 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v727 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v727 
            #endif
#else
            let v728 : Result<std_string_String, std_string_String> = match v714 with Ok x -> Ok x | Error x -> Error (v717 x)
            let _v718 = v728 
            #endif
            let v729 : Result<std_string_String, std_string_String> = _v718 
            let v732 : (std_string_String -> US26) = method105()
            let v733 : (std_string_String -> US26) = method106()
            let v734 : string = "match $2 { Ok(x) => $0(x), Err(e) => $1(e) }"
            let v735 : US26 = Fable.Core.RustInterop.emitRustExpr struct (v732, v733, v729) v734 
            let v978 : std_string_String =
                match v735 with
                | US26_1(v885) -> (* Error *)
                    let v886 : unit = ()
                    let v887 : (unit -> unit) = closure42(v5, v885)
                    let v888 : unit = (fun () -> v887 (); v886) ()
                    let v928 : string = $"\u001b[4;7m{v885}\u001b[0m"
                    let v929 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v930 : string = "&*$0"
                    let v931 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v928 v930 
                    let _v929 = v931 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v932 : string = "&*$0"
                    let v933 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v928 v932 
                    let _v929 = v933 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v934 : string = "&*$0"
                    let v935 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v928 v934 
                    let _v929 = v935 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v936 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v936 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v939 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v939 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v942 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v942 
                    #endif
#else
                    let v945 : Ref<Str> = v928 |> unbox<Ref<Str>>
                    let _v929 = v945 
                    #endif
                    let v948 : Ref<Str> = _v929 
                    let v953 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v954 : string = "String::from($0)"
                    let v955 : std_string_String = Fable.Core.RustInterop.emitRustExpr v948 v954 
                    let _v953 = v955 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v956 : string = "String::from($0)"
                    let v957 : std_string_String = Fable.Core.RustInterop.emitRustExpr v948 v956 
                    let _v953 = v957 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v958 : string = "String::from($0)"
                    let v959 : std_string_String = Fable.Core.RustInterop.emitRustExpr v948 v958 
                    let _v953 = v959 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v960 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v960 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v963 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v963 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v966 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v966 
                    #endif
#else
                    let v969 : std_string_String = v948 |> unbox<std_string_String>
                    let _v953 = v969 
                    #endif
                    let v972 : std_string_String = _v953 
                    v972
                | US26_0(v736) -> (* Ok *)
                    let v737 : string = "fable_library_rust::String_::fromString($0)"
                    let v738 : string = Fable.Core.RustInterop.emitRustExpr v736 v737 
                    let v739 : string = "encoding_rs::UTF_8"
                    let v740 : Ref<encoding_rs_Encoding> = Fable.Core.RustInterop.emitRustExpr () v739 
                    let v741 : string = "$0.encode(&*$1).0"
                    let v742 : std_borrow_Cow<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v740, v738) v741 
                    let v743 : string = "$0.as_ref()"
                    let v744 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr v742 v743 
                    let v745 : string = "std::str::from_utf8($0)"
                    let v746 : Result<Ref<Str>, std_str_Utf8Error> = Fable.Core.RustInterop.emitRustExpr v744 v745 
                    let v747 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v748 : string = "$0.unwrap()"
                    let v749 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v748 
                    let _v747 = v749 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v750 : string = "$0.unwrap()"
                    let v751 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v750 
                    let _v747 = v751 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v752 : string = "$0.unwrap()"
                    let v753 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v746 v752 
                    let _v747 = v753 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v754 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v754 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v755 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v755 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v756 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v756 
                    #endif
#else
                    let v757 : Ref<Str> = match v746 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v747 = v757 
                    #endif
                    let v758 : Ref<Str> = _v747 
                    let v761 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v762 : string = "String::from($0)"
                    let v763 : std_string_String = Fable.Core.RustInterop.emitRustExpr v758 v762 
                    let _v761 = v763 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v764 : string = "String::from($0)"
                    let v765 : std_string_String = Fable.Core.RustInterop.emitRustExpr v758 v764 
                    let _v761 = v765 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v766 : string = "String::from($0)"
                    let v767 : std_string_String = Fable.Core.RustInterop.emitRustExpr v758 v766 
                    let _v761 = v767 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v768 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v768 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v771 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v771 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v774 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v774 
                    #endif
#else
                    let v777 : std_string_String = v758 |> unbox<std_string_String>
                    let _v761 = v777 
                    #endif
                    let v780 : std_string_String = _v761 
                    let v785 : string = "fable_library_rust::String_::fromString($0)"
                    let v786 : string = Fable.Core.RustInterop.emitRustExpr v780 v785 
                    let v787 : string = $"! {v786}"
                    if v5 then
                        let v788 : unit = ()
                        let v789 : (unit -> unit) = closure43(v787)
                        let v790 : unit = (fun () -> v789 (); v788) ()
                        ()
                    else
                        let v832 : unit = ()
                        let v833 : (unit -> unit) = closure10(v787)
                        let v834 : unit = (fun () -> v833 (); v832) ()
                        ()
                    let v836 : string = $"\u001b[4;7m{v780}\u001b[0m"
                    let v837 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v838 : string = "&*$0"
                    let v839 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v838 
                    let _v837 = v839 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v840 : string = "&*$0"
                    let v841 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v840 
                    let _v837 = v841 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v842 : string = "&*$0"
                    let v843 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v836 v842 
                    let _v837 = v843 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v844 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v844 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v847 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v847 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v850 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v850 
                    #endif
#else
                    let v853 : Ref<Str> = v836 |> unbox<Ref<Str>>
                    let _v837 = v853 
                    #endif
                    let v856 : Ref<Str> = _v837 
                    let v861 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v862 : string = "String::from($0)"
                    let v863 : std_string_String = Fable.Core.RustInterop.emitRustExpr v856 v862 
                    let _v861 = v863 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v864 : string = "String::from($0)"
                    let v865 : std_string_String = Fable.Core.RustInterop.emitRustExpr v856 v864 
                    let _v861 = v865 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v866 : string = "String::from($0)"
                    let v867 : std_string_String = Fable.Core.RustInterop.emitRustExpr v856 v866 
                    let _v861 = v867 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v868 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v868 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v871 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v871 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v874 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v874 
                    #endif
#else
                    let v877 : std_string_String = v856 |> unbox<std_string_String>
                    let _v861 = v877 
                    #endif
                    let v880 : std_string_String = _v861 
                    v880
            let v979 : string = "$0"
            let v980 : std_sync_Arc<std_sync_Mutex<std_sync_mpsc_Sender<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v716 v979 
            let v981 : string = "v980.lock()"
            let v982 : Result<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v981 
            let v983 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v984 : string = "$0.unwrap()"
            let v985 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v984 
            let _v983 = v985 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v986 : string = "$0.unwrap()"
            let v987 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v986 
            let _v983 = v987 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v988 : string = "$0.unwrap()"
            let v989 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v982 v988 
            let _v983 = v989 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v990 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v990 
            #endif
#if FABLE_COMPILER_PYTHON
            let v991 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v991 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v992 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v992 
            #endif
#else
            let v993 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = match v982 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v983 = v993 
            #endif
            let v994 : std_sync_MutexGuard<std_sync_mpsc_Sender<std_string_String>> = _v983 
            let v997 : string = "&$0"
            let v998 : Ref<std_sync_mpsc_Sender<std_string_String>> = Fable.Core.RustInterop.emitRustExpr v994 v997 
            let v999 : string = "$0.send($1)"
            let v1000 : Result<unit, std_sync_mpsc_SendError<std_string_String>> = Fable.Core.RustInterop.emitRustExpr struct (v998, v978) v999 
            let v1001 : (std_sync_mpsc_SendError<std_string_String> -> std_string_String) = method111()
            let v1002 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1003 : string = "$0.map_err(|x| $1(x))"
            let v1004 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1000, v1001) v1003 
            let _v1002 = v1004 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1005 : string = "$0.map_err(|x| $1(x))"
            let v1006 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1000, v1001) v1005 
            let _v1002 = v1006 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1007 : string = "$0.map_err(|x| $1(x))"
            let v1008 : Result<unit, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1000, v1001) v1007 
            let _v1002 = v1008 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1009 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1009 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1010 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1010 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1011 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1011 
            #endif
#else
            let v1012 : Result<unit, std_string_String> = match v1000 with Ok x -> Ok x | Error x -> Error (v1001 x)
            let _v1002 = v1012 
            #endif
            let v1013 : Result<unit, std_string_String> = _v1002 
            let v1016 : string = "$0"
            let v1017 : core_ops_Try<unit> = Fable.Core.RustInterop.emitRustExpr v1013 v1016 
            let v1018 : string = "true; $0 }); //"
            let v1019 : bool = Fable.Core.RustInterop.emitRustExpr v1017 v1018 
            let v1020 : string = "_iter_try_for_each.map_err(|x| x.into())"
            let v1021 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr () v1020 
            let v1022 : Result<unit, string> = method112(v1021)
            let v1023 : string = v681 + v682 
            let v1024 : _ = v1022 
            let v1025 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1026 : string = $"true; let v1024 = $0"
            let v1027 : bool = Fable.Core.RustInterop.emitRustExpr v1024 v1026 
            let _v1025 = v1027 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1028 : string = $"true; let v1024 = $0"
            let v1029 : bool = Fable.Core.RustInterop.emitRustExpr v1024 v1028 
            let _v1025 = v1029 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1030 : string = $"true; let v1024 = $0"
            let v1031 : bool = Fable.Core.RustInterop.emitRustExpr v1024 v1030 
            let _v1025 = v1031 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1032 : bool = true
            let _v1025 = v1032 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1033 : bool = true
            let _v1025 = v1033 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1034 : bool = true
            let _v1025 = v1034 
            #endif
#else
            let v1035 : bool = true
            let _v1025 = v1035 
            #endif
            let v1036 : bool = _v1025 
            let v1039 : string = $"true; v1024 " + v1023 + "); " + v681 + " // rust.fix_closure'"
            let v1040 : bool = Fable.Core.RustInterop.emitRustExpr () v1039 
            let v1041 : string = "__spawn"
            let v1042 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1041 
            let v1043 : ((std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) -> US27) = method113()
            let v1044 : US27 option = v4 |> Option.map v1043 
            let v1055 : US27 = US27_1
            let v1056 : US27 = v1044 |> Option.defaultValue v1055 
            match v1056 with
            | US27_1 -> (* None *)
                ()
            | US27_0(v1060) -> (* Some *)
                let v1061 : string = "$0"
                let v1062 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v387 v1061 
                let v1063 : string = "v1062.lock()"
                let v1064 : Result<std_sync_MutexGuard<std_process_ChildStdin option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin option>>> = Fable.Core.RustInterop.emitRustExpr () v1063 
                let v1065 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v1066 : string = "$0.unwrap()"
                let v1067 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1064 v1066 
                let _v1065 = v1067 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v1068 : string = "$0.unwrap()"
                let v1069 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1064 v1068 
                let _v1065 = v1069 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v1070 : string = "$0.unwrap()"
                let v1071 : std_sync_MutexGuard<std_process_ChildStdin option> = Fable.Core.RustInterop.emitRustExpr v1064 v1070 
                let _v1065 = v1071 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v1072 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1072 
                #endif
#if FABLE_COMPILER_PYTHON
                let v1073 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1073 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v1074 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1074 
                #endif
#else
                let v1075 : std_sync_MutexGuard<std_process_ChildStdin option> = match v1064 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v1065 = v1075 
                #endif
                let v1076 : std_sync_MutexGuard<std_process_ChildStdin option> = _v1065 
                let v1079 : std_sync_MutexGuard<std_process_ChildStdin option> = method114(v1076)
                let v1080 : string = "true; let mut v1079 = v1079"
                let v1081 : bool = Fable.Core.RustInterop.emitRustExpr () v1080 
                let v1082 : string = "&mut $0"
                let v1083 : Ref<Mut<std_process_ChildStdin option>> = Fable.Core.RustInterop.emitRustExpr v1079 v1082 
                let v1084 : string = "Option::take($0)"
                let v1085 : std_process_ChildStdin option = Fable.Core.RustInterop.emitRustExpr v1083 v1084 
                let v1086 : string = "true; let _optionm_map_ = $0.map(|x| { //"
                let v1087 : bool = Fable.Core.RustInterop.emitRustExpr v1085 v1086 
                let v1088 : string = "x"
                let v1089 : std_process_ChildStdin = Fable.Core.RustInterop.emitRustExpr () v1088 
                let v1090 : string = "std::sync::Mutex::new(v1089)"
                let v1091 : std_sync_Mutex<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr () v1090 
                let v1092 : string = "std::sync::Arc::new(v1091)"
                let v1093 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr () v1092 
                let v1094 : string = "true; $0 })"
                let v1095 : bool = Fable.Core.RustInterop.emitRustExpr v1093 v1094 
                let v1096 : string = "_optionm_map_"
                let v1097 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> option = Fable.Core.RustInterop.emitRustExpr () v1096 
                let v1098 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> US28) = method115()
                let v1099 : US28 option = v1097 |> Option.map v1098 
                let v1110 : US28 = US28_1
                let v1111 : US28 = v1099 |> Option.defaultValue v1110 
                match v1111 with
                | US28_1 -> (* None *)
                    ()
                | US28_0(v1115) -> (* Some *)
                    v1060 v1115
                    let v1116 : string = "$0"
                    let v1117 : std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> = Fable.Core.RustInterop.emitRustExpr v1115 v1116 
                    let v1118 : string = "v1117.lock()"
                    let v1119 : Result<std_sync_MutexGuard<std_process_ChildStdin>, std_sync_PoisonError<std_sync_MutexGuard<std_process_ChildStdin>>> = Fable.Core.RustInterop.emitRustExpr () v1118 
                    let v1120 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1121 : string = "$0.unwrap()"
                    let v1122 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1119 v1121 
                    let _v1120 = v1122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1123 : string = "$0.unwrap()"
                    let v1124 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1119 v1123 
                    let _v1120 = v1124 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1125 : string = "$0.unwrap()"
                    let v1126 : std_sync_MutexGuard<std_process_ChildStdin> = Fable.Core.RustInterop.emitRustExpr v1119 v1125 
                    let _v1120 = v1126 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1127 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1128 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1128 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1129 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1129 
                    #endif
#else
                    let v1130 : std_sync_MutexGuard<std_process_ChildStdin> = match v1119 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                    let _v1120 = v1130 
                    #endif
                    let v1131 : std_sync_MutexGuard<std_process_ChildStdin> = _v1120 
                    let v1134 : std_sync_MutexGuard<std_process_ChildStdin> = method116(v1131)
                    let v1135 : string = "true; let mut v1134 = v1134"
                    let v1136 : bool = Fable.Core.RustInterop.emitRustExpr () v1135 
                    let v1137 : string = "true; std::io::Write::flush(&mut *$0).unwrap()"
                    let v1138 : bool = Fable.Core.RustInterop.emitRustExpr v1134 v1137 
                    ()
            let v1139 : string = "$0"
            let v1140 : std_sync_Arc<std_sync_Mutex<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v261 v1139 
            let v1141 : string = "v1140.lock()"
            let v1142 : Result<std_sync_MutexGuard<std_process_Child option>, std_sync_PoisonError<std_sync_MutexGuard<std_process_Child option>>> = Fable.Core.RustInterop.emitRustExpr () v1141 
            let v1143 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1144 : string = "$0.unwrap()"
            let v1145 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1142 v1144 
            let _v1143 = v1145 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1146 : string = "$0.unwrap()"
            let v1147 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1142 v1146 
            let _v1143 = v1147 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1148 : string = "$0.unwrap()"
            let v1149 : std_sync_MutexGuard<std_process_Child option> = Fable.Core.RustInterop.emitRustExpr v1142 v1148 
            let _v1143 = v1149 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1150 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1150 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1151 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1151 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1152 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1152 
            #endif
#else
            let v1153 : std_sync_MutexGuard<std_process_Child option> = match v1142 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1143 = v1153 
            #endif
            let v1154 : std_sync_MutexGuard<std_process_Child option> = _v1143 
            let v1157 : std_sync_MutexGuard<std_process_Child option> = method100(v1154)
            let v1158 : string = "true; let mut v1157 = v1157"
            let v1159 : bool = Fable.Core.RustInterop.emitRustExpr () v1158 
            let v1160 : string = "&mut $0"
            let v1161 : Ref<Mut<std_process_Child option>> = Fable.Core.RustInterop.emitRustExpr v1157 v1160 
            let v1162 : string = "Option::take($0)"
            let v1163 : std_process_Child option = Fable.Core.RustInterop.emitRustExpr v1161 v1162 
            let v1164 : string = "$0.unwrap()"
            let v1165 : std_process_Child = Fable.Core.RustInterop.emitRustExpr v1163 v1164 
            let v1166 : string = "$0.wait_with_output()"
            let v1167 : Result<std_process_Output, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1165 v1166 
            let v1168 : (std_io_Error -> std_string_String) = method46()
            let v1169 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1170 : string = "$0.map_err(|x| $1(x))"
            let v1171 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1167, v1168) v1170 
            let _v1169 = v1171 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1172 : string = "$0.map_err(|x| $1(x))"
            let v1173 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1167, v1168) v1172 
            let _v1169 = v1173 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1174 : string = "$0.map_err(|x| $1(x))"
            let v1175 : Result<std_process_Output, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1167, v1168) v1174 
            let _v1169 = v1175 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1176 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1176 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1177 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1177 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1178 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1178 
            #endif
#else
            let v1179 : Result<std_process_Output, std_string_String> = match v1167 with Ok x -> Ok x | Error x -> Error (v1168 x)
            let _v1169 = v1179 
            #endif
            let v1180 : Result<std_process_Output, std_string_String> = _v1169 
            let v1183 : std_thread_JoinHandle<Result<unit, string>> = method117(v1042)
            let v1184 : string = "v1183"
            let v1185 : string = v1184 + v681 
            let v1186 : string = v1185 + v681 
            let v1187 : std_thread_JoinHandle<Result<unit, string>> = method117(v702)
            let v1188 : string = "v1187"
            let v1189 : string = ", "
            let v1190 : string = v1188 + v1189 
            let v1191 : string = v1190 + v1186 
            let v1192 : string = "vec![" + v1191 + "]"
            let v1193 : Vec<std_thread_JoinHandle<Result<unit, string>>> = Fable.Core.RustInterop.emitRustExpr () v1192 
            let v1194 : string = "true; $0.into_iter().for_each(|x| { //"
            let v1195 : bool = Fable.Core.RustInterop.emitRustExpr v1193 v1194 
            let v1196 : string = "x"
            let v1197 : std_thread_JoinHandle<Result<unit, string>> = Fable.Core.RustInterop.emitRustExpr () v1196 
            let v1198 : string = "std::thread::JoinHandle::join($0)"
            let v1199 : Result<Result<unit, string>, Box<LifetimeRef<Dyn<LifetimeJoin<core_any_Any, LifetimeRef<LifetimeJoin<StaticLifetime, Send<StaticLifetime>>>>>>>> = Fable.Core.RustInterop.emitRustExpr v1197 v1198 
            let v1200 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1201 : string = "$0.unwrap()"
            let v1202 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1199 v1201 
            let _v1200 = v1202 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1203 : string = "$0.unwrap()"
            let v1204 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1199 v1203 
            let _v1200 = v1204 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1205 : string = "$0.unwrap()"
            let v1206 : Result<unit, string> = Fable.Core.RustInterop.emitRustExpr v1199 v1205 
            let _v1200 = v1206 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v1207 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1207 
            #endif
#if FABLE_COMPILER_PYTHON
            let v1208 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1208 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v1209 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1209 
            #endif
#else
            let v1210 : Result<unit, string> = match v1199 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1200 = v1210 
            #endif
            let v1211 : Result<unit, string> = _v1200 
            let v1214 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v1215 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1211 v1215 
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v1216 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1211 v1216 
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v1217 : string = "$0.unwrap()"
            Fable.Core.RustInterop.emitRustExpr v1211 v1217 
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
#if FABLE_COMPILER_PYTHON
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
#else
            match v1211 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v1214 = () 
            #endif
            _v1214 
            let v1218 : string = $"true"
            let v1219 : bool = Fable.Core.RustInterop.emitRustExpr () v1218 
            let v1220 : string = "true; }}); { //"
            let v1221 : bool = Fable.Core.RustInterop.emitRustExpr () v1220 
            let v1222 : (std_process_Output -> US29) = method118()
            let v1223 : (std_string_String -> US29) = method119()
            let v1224 : US29 = match v1180 with Ok x -> v1222 x | Error x -> v1223 x
            match v1224 with
            | US29_1(v1307) -> (* Error *)
                let v1308 : unit = ()
                let v1309 : (unit -> unit) = closure49(v1307)
                let v1310 : unit = (fun () -> v1309 (); v1308) ()
                let v1350 : US7 = US7_0(v1307)
                let v1351 : US25 = US25_1
                struct (-2, v1350, v1351)
            | US29_0(v1225) -> (* Ok *)
                let v1226 : string = "$0.status"
                let v1227 : std_process_ExitStatus = Fable.Core.RustInterop.emitRustExpr v1225 v1226 
                let v1228 : string = "$0.code()"
                let v1229 : int32 option = Fable.Core.RustInterop.emitRustExpr v1227 v1228 
                let v1230 : (int32 -> US30) = method121()
                let v1231 : US30 option = v1229 |> Option.map v1230 
                let v1242 : US30 = US30_1
                let v1243 : US30 = v1231 |> Option.defaultValue v1242 
                match v1243 with
                | US30_1 -> (* None *)
                    let v1250 : string = "runtime.execute_with_options / exit_code=None"
                    let v1251 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1252 : string = "&*$0"
                    let v1253 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1250 v1252 
                    let _v1251 = v1253 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1254 : string = "&*$0"
                    let v1255 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1250 v1254 
                    let _v1251 = v1255 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1256 : string = "&*$0"
                    let v1257 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1250 v1256 
                    let _v1251 = v1257 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1258 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1258 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1261 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1261 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1264 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1264 
                    #endif
#else
                    let v1267 : Ref<Str> = v1250 |> unbox<Ref<Str>>
                    let _v1251 = v1267 
                    #endif
                    let v1270 : Ref<Str> = _v1251 
                    let v1275 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v1276 : string = "String::from($0)"
                    let v1277 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1270 v1276 
                    let _v1275 = v1277 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v1278 : string = "String::from($0)"
                    let v1279 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1270 v1278 
                    let _v1275 = v1279 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v1280 : string = "String::from($0)"
                    let v1281 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1270 v1280 
                    let _v1275 = v1281 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v1282 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1282 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v1285 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1285 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v1288 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1288 
                    #endif
#else
                    let v1291 : std_string_String = v1270 |> unbox<std_string_String>
                    let _v1275 = v1291 
                    #endif
                    let v1294 : std_string_String = _v1275 
                    let v1299 : US7 = US7_0(v1294)
                    let v1300 : US25 = US25_0(v408)
                    struct (-1, v1299, v1300)
                | US30_0(v1247) -> (* Some *)
                    let v1248 : US7 = US7_1
                    let v1249 : US25 = US25_0(v408)
                    struct (v1247, v1248, v1249)
    let v1415 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option =
        match v1408 with
        | US25_1 -> (* None *)
            let v1413 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = None
            v1413
        | US25_0(v1409) -> (* Some *)
            let v1410 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> option = Some v1409 
            v1410
    let v1416 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v1417 : bool = Fable.Core.RustInterop.emitRustExpr v1415 v1416 
    let v1418 : string = "x"
    let v1419 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr () v1418 
    let v1420 : string = "$0"
    let v1421 : std_sync_Arc<std_sync_Mutex<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>> = Fable.Core.RustInterop.emitRustExpr v1419 v1420 
    let v1422 : string = "v1421.lock()"
    let v1423 : Result<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>, std_sync_PoisonError<std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>>>> = Fable.Core.RustInterop.emitRustExpr () v1422 
    let v1424 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1425 : string = "$0.unwrap()"
    let v1426 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1423 v1425 
    let _v1424 = v1426 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1427 : string = "$0.unwrap()"
    let v1428 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1423 v1427 
    let _v1424 = v1428 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1429 : string = "$0.unwrap()"
    let v1430 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v1423 v1429 
    let _v1424 = v1430 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1431 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1431 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1432 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1432 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1433 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1433 
    #endif
#else
    let v1434 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = match v1423 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v1424 = v1434 
    #endif
    let v1435 : std_sync_MutexGuard<std_sync_Arc<std_sync_mpsc_Receiver<std_string_String>>> = _v1424 
    let v1438 : string = "$0.iter()"
    let v1439 : _ = Fable.Core.RustInterop.emitRustExpr v1435 v1438 
    let v1440 : string = "$0.collect::<Vec<_>>()"
    let v1441 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1439 v1440 
    let v1442 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v1443 : bool = Fable.Core.RustInterop.emitRustExpr v1441 v1442 
    let v1444 : string = "x"
    let v1445 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v1444 
    let v1446 : string = "fable_library_rust::String_::fromString($0)"
    let v1447 : string = Fable.Core.RustInterop.emitRustExpr v1445 v1446 
    let v1448 : string = "true; $0 }).collect::<Vec<_>>()"
    let v1449 : bool = Fable.Core.RustInterop.emitRustExpr v1447 v1448 
    let v1450 : string = "_vec_map"
    let v1451 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v1450 
    let v1452 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v1453 : (string []) = Fable.Core.RustInterop.emitRustExpr v1451 v1452 
    let v1454 : string seq = v1453 |> Seq.ofArray
    let v1457 : string = method40()
    let v1458 : (string -> (string seq -> string)) = String.concat
    let v1459 : (string seq -> string) = v1458 v1457
    let v1460 : string = v1459 v1454
    let v1464 : string = "true; $0 })"
    let v1465 : bool = Fable.Core.RustInterop.emitRustExpr v1460 v1464 
    let v1466 : string = "_optionm_map_"
    let v1467 : string option = Fable.Core.RustInterop.emitRustExpr () v1466 
    let v1474 : US5 =
        match v1407 with
        | US7_1 -> (* None *)
            US5_1
        | US7_0(v1468) -> (* Some *)
            let v1469 : string = "fable_library_rust::String_::fromString($0)"
            let v1470 : string = Fable.Core.RustInterop.emitRustExpr v1468 v1469 
            US5_0(v1470)
    let v1478 : string =
        match v1474 with
        | US5_1 -> (* None *)
            let v1476 : string = ""
            v1476
        | US5_0(v1475) -> (* Some *)
            v1475
    let v1479 : string = v1467 |> Option.defaultValue v1478 
    let v1482 : unit = ()
    let v1483 : (unit -> unit) = closure51(v1406, v1479)
    let v1484 : unit = (fun () -> v1483 (); v1482) ()
    let v1525 : (int32 * string) = v1406, v1479 
    v1525 
    )
    |> fun x -> x ()
    ) () )
    |> fun x -> _v138 <- Some x
    let v1526 : (int32 * string) = match _v138 with Some x -> x | None -> failwith "base.capture / _v138=None"
    let (a, b) = v1526 
    let v2913 : int32 = a
    let v2914 : string = b
    let _v7 = struct (v2913, v2914) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v2919 : int32, v2920 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2919, v2920) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v2925 : int32, v2926 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2925, v2926) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v2931 : int32, v2932 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2931, v2932) 
    #endif
#if FABLE_COMPILER_PYTHON
    let struct (v2937 : int32, v2938 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2937, v2938) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let struct (v2943 : int32, v2944 : string) = null |> unbox<struct (int32 * string)>
    let _v7 = struct (v2943, v2944) 
    #endif
#else
    let v2949 : Async<struct (int32 * string)> = method124(v0, v1, v2, v3, v4, v5, v6)
    let v2950 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let struct (v2951 : int32, v2952 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2951, v2952) 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let struct (v2957 : int32, v2958 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2957, v2958) 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let struct (v2963 : int32, v2964 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2963, v2964) 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let struct (v2969 : int32, v2970 : string) = null |> unbox<struct (int32 * string)>
    let _v2950 = struct (v2969, v2970) 
    #endif
#if FABLE_COMPILER_PYTHON
    let v2975 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2976 : int32, v2977 : string) = v2975 v2949
    let _v2950 = struct (v2976, v2977) 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v2978 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2979 : int32, v2980 : string) = v2978 v2949
    let _v2950 = struct (v2979, v2980) 
    #endif
#else
    let v2981 : (Async<struct (int32 * string)> -> struct (int32 * string)) = Async.RunSynchronously
    let struct (v2982 : int32, v2983 : string) = v2981 v2949
    let _v2950 = struct (v2982, v2983) 
    #endif
    let struct (v2984 : int32, v2985 : string) = _v2950 
    let _v7 = struct (v2984, v2985) 
    #endif
    let struct (v2994 : int32, v2995 : string) = _v7 
    struct (v2994, v2995)
and method135 (v0 : US10, v1 : int32, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "env"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : string = $"%A{v0}"
    let v36 : string = $"{v33}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v5, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v5, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v53 : string = "exit_code"
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v62 : string = $"{v24}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v70 : string = $"{v1}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = $"{v44}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v86 : string = "run_result"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = $"{v24}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v5, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = $"{v2}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v111 : string = $"{v44}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v5, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v119 : string = "new_code_path"
    let v120 : string = $"{v119}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v5, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v128 : string = $"{v24}"
    let v131 : unit = ()
    let v132 : (unit -> unit) = closure7(v5, v128)
    let v133 : unit = (fun () -> v132 (); v131) ()
    let v136 : string = $"{v3}"
    let v139 : unit = ()
    let v140 : (unit -> unit) = closure7(v5, v136)
    let v141 : unit = (fun () -> v140 (); v139) ()
    let v144 : string = " }"
    let v145 : string = $"{v144}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v5, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = v5.l0
    v153
and method134 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US10, v9 : int32, v10 : string, v11 : string) : string =
    let v12 : string = method135(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_cuda / env install error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure61 (v0 : US10, v1 : string, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method134(v22, v23, v24, v25, v26, v27, v40, v41, v0, v3, v2, v1)
        method19(v42)
and closure62 () (v0 : string) : US5 =
    US5_0(v0)
and closure63 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method40()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method137 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _v33 = v55 
    #endif
    let v58 : string = _v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "run_result"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "new_code_path"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "external_command"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method136 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method137(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_cuda / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure65 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method136(v22, v23, v24, v25, v26, v27, v40, v41, v3, v1, v0, v2)
        method19(v42)
and closure64 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure65(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method139 (v0 : int32, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "exit_code"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : string = $"{v0}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v5, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = "; "
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v5, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = "run_result"
    let v51 : string = $"{v50}"
    let v54 : unit = ()
    let v55 : (unit -> unit) = closure7(v5, v51)
    let v56 : unit = (fun () -> v55 (); v54) ()
    let v59 : string = $"{v24}"
    let v62 : unit = ()
    let v63 : (unit -> unit) = closure7(v5, v59)
    let v64 : unit = (fun () -> v63 (); v62) ()
    let v67 : string = $"{v1}"
    let v70 : unit = ()
    let v71 : (unit -> unit) = closure7(v5, v67)
    let v72 : unit = (fun () -> v71 (); v70) ()
    let v75 : string = $"{v41}"
    let v78 : unit = ()
    let v79 : (unit -> unit) = closure7(v5, v75)
    let v80 : unit = (fun () -> v79 (); v78) ()
    let v83 : string = "new_code_path"
    let v84 : string = $"{v83}"
    let v87 : unit = ()
    let v88 : (unit -> unit) = closure7(v5, v84)
    let v89 : unit = (fun () -> v88 (); v87) ()
    let v92 : string = $"{v24}"
    let v95 : unit = ()
    let v96 : (unit -> unit) = closure7(v5, v92)
    let v97 : unit = (fun () -> v96 (); v95) ()
    let v100 : string = $"{v2}"
    let v103 : unit = ()
    let v104 : (unit -> unit) = closure7(v5, v100)
    let v105 : unit = (fun () -> v104 (); v103) ()
    let v108 : string = $"{v41}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v5, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = "external_command"
    let v117 : string = $"{v116}"
    let v120 : unit = ()
    let v121 : (unit -> unit) = closure7(v5, v117)
    let v122 : unit = (fun () -> v121 (); v120) ()
    let v125 : string = $"{v24}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v5, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = $"{v3}"
    let v136 : unit = ()
    let v137 : (unit -> unit) = closure7(v5, v133)
    let v138 : unit = (fun () -> v137 (); v136) ()
    let v141 : string = " }"
    let v142 : string = $"{v141}"
    let v145 : unit = ()
    let v146 : (unit -> unit) = closure7(v5, v142)
    let v147 : unit = (fun () -> v146 (); v145) ()
    let v150 : string = v5.l0
    v150
and method138 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method139(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_cuda / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure66 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method138(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and closure67 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "&*$0"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "&*$0"
    let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v63 
    #endif
#else
    let v66 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v66 
    #endif
    let v69 : Ref<Str> = _v50 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "String::from($0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "String::from($0)"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v87 
    #endif
#else
    let v90 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v90 
    #endif
    let v93 : std_string_String = _v74 
    let v98 : (std_string_String * std_string_String) = v45, v93 
    v98
and method140 () : string =
    let v0 : string = "fs-path"
    v0
and method141 () : string =
    let v0 : string = "command"
    v0
and method142 () : string =
    let v0 : string = "path"
    v0
and method151 (v0 : std_io_Error) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "format!(\"{:#?}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : string = "fable_library_rust::String_::fromString($0)"
    let v7 : string = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : string = "format!(\"{:#?}\", $0)"
    let v9 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v8 
    let v10 : string = "fable_library_rust::String_::fromString($0)"
    let v11 : string = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let _v3 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "format!(\"{:#?}\", $0)"
    let v13 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v12 
    let v14 : string = "fable_library_rust::String_::fromString($0)"
    let v15 : string = Fable.Core.RustInterop.emitRustExpr v13 v14 
    let _v3 = v15 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v16 : string = $"%A{v0}"
    let _v3 = v16 
    #endif
#if FABLE_COMPILER_PYTHON
    let v19 : string = $"%A{v0}"
    let _v3 = v19 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v22 : string = $"%A{v0}"
    let _v3 = v22 
    #endif
#else
    let v25 : string = $"%A{v0}"
    let _v3 = v25 
    #endif
    let v28 : string = _v3 
    let v33 : string = $"{v28}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = v2.l0
    v41
and closure69 () (v0 : std_io_Error) : string =
    method151(v0)
and method150 () : (std_io_Error -> string) =
    closure69()
and closure70 () (v0 : std_path_PathBuf) : US33 =
    US33_0(v0)
and method152 () : (std_path_PathBuf -> US33) =
    closure70()
and closure71 () (v0 : string) : US33 =
    US33_1(v0)
and method153 () : (string -> US33) =
    closure71()
and method156 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"{v0}"
    let v6 : unit = ()
    let v7 : (unit -> unit) = closure7(v2, v3)
    let v8 : unit = (fun () -> v7 (); v6) ()
    let v11 : string = v2.l0
    v11
and method155 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method63(v4)
    let v6 : string option = method34(v4)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v6 |> Option.map v7 
    let v19 : US5 = US5_1
    let v20 : US5 = v8 |> Option.defaultValue v19 
    let v24 : string = method156(v3)
    let v25 : bool = v2 >= 11uy
    if v25 then
        let v26 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v27 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v28 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v29 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v28 
        let _v27 = v29 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v30 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v31 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v30 
        let _v27 = v31 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v32 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v33 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v32 
        let _v27 = v33 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v34 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v34 
        #endif
#if FABLE_COMPILER_PYTHON
        let v37 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v37 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v40 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v40 
        #endif
#else
        let v43 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v43 
        #endif
        let v46 : std_io_Error = _v27 
        let v51 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v52 : string = "Err($0)"
        let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v52 
        let _v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : string = "Err($0)"
        let v55 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v54 
        let _v51 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v56 : string = "Err($0)"
        let v57 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v56 
        let _v51 = v57 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v58 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v58 
        #endif
#if FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v59 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v60 
        #endif
#else
        let v61 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v61 
        #endif
        let v62 : Result<std_path_PathBuf, std_io_Error> = _v51 
        v62
    else
        match v20 with
        | US5_0(v65) -> (* Some *)
            let v66 : string = ""
            let v67 : bool = v4 <> v66 
            if v67 then
                let v70 : uint8 = v2 + 1uy
                let v71 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v70
                let v72 : Result<std_path_PathBuf, std_io_Error> = v71 v65
                let v73 : (std_io_Error -> string) = method150()
                let v74 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v75 : string = "$0.map_err(|x| $1(x))"
                let v76 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v75 
                let _v74 = v76 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v77 : string = "$0.map_err(|x| $1(x))"
                let v78 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v77 
                let _v74 = v78 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79 : string = "$0.map_err(|x| $1(x))"
                let v80 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v79 
                let _v74 = v80 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v81 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v81 
                #endif
#if FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v82 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v83 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v83 
                #endif
#else
                let v84 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v84 
                #endif
                let v85 : Result<std_path_PathBuf, string> = _v74 
                let v88 : (std_path_PathBuf -> US33) = method152()
                let v89 : (string -> US33) = method153()
                let v90 : US33 = match v85 with Ok x -> v88 x | Error x -> v89 x
                match v90 with
                | US33_1(v206) -> (* Error *)
                    let v207 : string = $"file_system.read_link / error': {v206} / error: {v24} / name: {v5}"
                    let v208 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v209 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v210 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v209 
                    let _v208 = v210 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v211 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v212 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v211 
                    let _v208 = v212 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v213 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v214 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v213 
                    let _v208 = v214 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v215 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v215 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v218 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v218 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v221 
                    #endif
#else
                    let v224 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v224 
                    #endif
                    let v227 : std_io_Error = _v208 
                    let v232 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v233 : string = "Err($0)"
                    let v234 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v233 
                    let _v232 = v234 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v235 : string = "Err($0)"
                    let v236 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v235 
                    let _v232 = v236 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v237 : string = "Err($0)"
                    let v238 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v237 
                    let _v232 = v238 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v239 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v240 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v241 
                    #endif
#else
                    let v242 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v242 
                    #endif
                    let v243 : Result<std_path_PathBuf, std_io_Error> = _v232 
                    v243
                | US33_0(v91) -> (* Ok *)
                    let v92 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v93 : string = "$0.display()"
                    let v94 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v93 
                    let _v92 = v94 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v95 : string = "$0.display()"
                    let v96 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v95 
                    let _v92 = v96 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v97 : string = "$0.display()"
                    let v98 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v97 
                    let _v92 = v98 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v99 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v99 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v102 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v102 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v105 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v105 
                    #endif
#else
                    let v108 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v108 
                    #endif
                    let v111 : std_path_Display = _v92 
                    let v116 : string = v111 |> string 
                    let v119 : string = method28(v116, v5)
                    let v120 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v121 : string = "&*$0"
                    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v121 
                    let _v120 = v122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v123 : string = "&*$0"
                    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v123 
                    let _v120 = v124 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v125 : string = "&*$0"
                    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v125 
                    let _v120 = v126 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v133 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v133 
                    #endif
#else
                    let v136 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v136 
                    #endif
                    let v139 : Ref<Str> = _v120 
                    let v144 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v145 : string = "String::from($0)"
                    let v146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v145 
                    let _v144 = v146 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v147 : string = "String::from($0)"
                    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v147 
                    let _v144 = v148 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v149 : string = "String::from($0)"
                    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v149 
                    let _v144 = v150 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v151 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v151 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v154 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v154 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v157 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v157 
                    #endif
#else
                    let v160 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v160 
                    #endif
                    let v163 : std_string_String = _v144 
                    let v168 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "std::path::PathBuf::from($0)"
                    let v170 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "std::path::PathBuf::from($0)"
                    let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "std::path::PathBuf::from($0)"
                    let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v175 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v175 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v178 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v178 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v181 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v181 
                    #endif
#else
                    let v184 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v184 
                    #endif
                    let v187 : std_path_PathBuf = _v168 
                    let v192 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v193 : string = "Ok($0)"
                    let v194 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v193 
                    let _v192 = v194 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v195 : string = "Ok($0)"
                    let v196 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v195 
                    let _v192 = v196 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v197 : string = "Ok($0)"
                    let v198 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v197 
                    let _v192 = v198 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v199 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v200 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v201 
                    #endif
#else
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v202 
                    #endif
                    let v203 : Result<std_path_PathBuf, std_io_Error> = _v192 
                    v203
            else
                let v248 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
                let v249 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v250 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v251 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v250 
                let _v249 = v251 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v252 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v253 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v252 
                let _v249 = v253 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v254 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v255 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v254 
                let _v249 = v255 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v256 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v256 
                #endif
#if FABLE_COMPILER_PYTHON
                let v259 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v259 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v262 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v262 
                #endif
#else
                let v265 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v265 
                #endif
                let v268 : std_io_Error = _v249 
                let v273 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v274 : string = "Err($0)"
                let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v274 
                let _v273 = v275 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v276 : string = "Err($0)"
                let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v276 
                let _v273 = v277 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v278 : string = "Err($0)"
                let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v278 
                let _v273 = v279 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v280 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v280 
                #endif
#if FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v281 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v282 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v282 
                #endif
#else
                let v283 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v283 
                #endif
                let v284 : Result<std_path_PathBuf, std_io_Error> = _v273 
                v284
        | _ ->
            let v288 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
            let v289 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v290 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v291 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v290 
            let _v289 = v291 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v292 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v293 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v292 
            let _v289 = v293 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v294 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v295 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v294 
            let _v289 = v295 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v296 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v296 
            #endif
#if FABLE_COMPILER_PYTHON
            let v299 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v299 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v302 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v302 
            #endif
#else
            let v305 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v305 
            #endif
            let v308 : std_io_Error = _v289 
            let v313 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v314 : string = "Err($0)"
            let v315 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v314 
            let _v313 = v315 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v316 : string = "Err($0)"
            let v317 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v316 
            let _v313 = v317 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v318 : string = "Err($0)"
            let v319 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v318 
            let _v313 = v319 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v320 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v320 
            #endif
#if FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v321 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v322 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v322 
            #endif
#else
            let v323 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v323 
            #endif
            let v324 : Result<std_path_PathBuf, std_io_Error> = _v313 
            v324
and method154 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "std::fs::read_link(&*$0)"
    let v5 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v4 
    let v6 : (std_io_Error -> string) = method150()
    let v7 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v8 
    let _v7 = v9 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v10 : string = "$0.map_err(|x| $1(x))"
    let v11 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v10 
    let _v7 = v11 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v12 : string = "$0.map_err(|x| $1(x))"
    let v13 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v5, v6) v12 
    let _v7 = v13 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v14 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v14 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v16 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v16 
    #endif
#else
    let v17 : Result<std_path_PathBuf, string> = match v5 with Ok x -> Ok x | Error x -> Error (v6 x)
    let _v7 = v17 
    #endif
    let v18 : Result<std_path_PathBuf, string> = _v7 
    let v21 : (std_path_PathBuf -> US33) = method152()
    let v22 : (string -> US33) = method153()
    let v23 : US33 = match v18 with Ok x -> v21 x | Error x -> v22 x
    let v43 : Result<std_path_PathBuf, std_io_Error> =
        match v23 with
        | US33_1(v39) -> (* Error *)
            let v40 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method155(v0, v40, v1, v39, v2)
        | US33_0(v24) -> (* Ok *)
            let v25 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v26 : string = "Ok($0)"
            let v27 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v26 
            let _v25 = v27 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v28 : string = "Ok($0)"
            let v29 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v28 
            let _v25 = v29 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v30 : string = "Ok($0)"
            let v31 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v24 v30 
            let _v25 = v31 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v32 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v32 
            #endif
#if FABLE_COMPILER_PYTHON
            let v33 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v33 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v34 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v34 
            #endif
#else
            let v35 : Result<std_path_PathBuf, std_io_Error> = v24 |> Ok
            let _v25 = v35 
            #endif
            let v36 : Result<std_path_PathBuf, std_io_Error> = _v25 
            v36
    let _v3 = v43 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v44 : string = "std::fs::read_link(&*$0)"
    let v45 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v44 
    let v46 : (std_io_Error -> string) = method150()
    let v47 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v48 : string = "$0.map_err(|x| $1(x))"
    let v49 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v48 
    let _v47 = v49 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v50 : string = "$0.map_err(|x| $1(x))"
    let v51 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v50 
    let _v47 = v51 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v52 : string = "$0.map_err(|x| $1(x))"
    let v53 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v45, v46) v52 
    let _v47 = v53 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v54 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v54 
    #endif
#if FABLE_COMPILER_PYTHON
    let v55 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v55 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v56 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v56 
    #endif
#else
    let v57 : Result<std_path_PathBuf, string> = match v45 with Ok x -> Ok x | Error x -> Error (v46 x)
    let _v47 = v57 
    #endif
    let v58 : Result<std_path_PathBuf, string> = _v47 
    let v61 : (std_path_PathBuf -> US33) = method152()
    let v62 : (string -> US33) = method153()
    let v63 : US33 = match v58 with Ok x -> v61 x | Error x -> v62 x
    let v83 : Result<std_path_PathBuf, std_io_Error> =
        match v63 with
        | US33_1(v79) -> (* Error *)
            let v80 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method155(v0, v80, v1, v79, v2)
        | US33_0(v64) -> (* Ok *)
            let v65 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v66 : string = "Ok($0)"
            let v67 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v66 
            let _v65 = v67 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v68 : string = "Ok($0)"
            let v69 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v68 
            let _v65 = v69 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v70 : string = "Ok($0)"
            let v71 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v64 v70 
            let _v65 = v71 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v72 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v72 
            #endif
#if FABLE_COMPILER_PYTHON
            let v73 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v73 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v74 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v74 
            #endif
#else
            let v75 : Result<std_path_PathBuf, std_io_Error> = v64 |> Ok
            let _v65 = v75 
            #endif
            let v76 : Result<std_path_PathBuf, std_io_Error> = _v65 
            v76
    let _v3 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v84 : string = "std::fs::read_link(&*$0)"
    let v85 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2 v84 
    let v86 : (std_io_Error -> string) = method150()
    let v87 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v88 : string = "$0.map_err(|x| $1(x))"
    let v89 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v88 
    let _v87 = v89 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v90 : string = "$0.map_err(|x| $1(x))"
    let v91 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v90 
    let _v87 = v91 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v92 : string = "$0.map_err(|x| $1(x))"
    let v93 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v85, v86) v92 
    let _v87 = v93 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v94 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v94 
    #endif
#if FABLE_COMPILER_PYTHON
    let v95 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v95 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v96 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v96 
    #endif
#else
    let v97 : Result<std_path_PathBuf, string> = match v85 with Ok x -> Ok x | Error x -> Error (v86 x)
    let _v87 = v97 
    #endif
    let v98 : Result<std_path_PathBuf, string> = _v87 
    let v101 : (std_path_PathBuf -> US33) = method152()
    let v102 : (string -> US33) = method153()
    let v103 : US33 = match v98 with Ok x -> v101 x | Error x -> v102 x
    let v123 : Result<std_path_PathBuf, std_io_Error> =
        match v103 with
        | US33_1(v119) -> (* Error *)
            let v120 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method155(v0, v120, v1, v119, v2)
        | US33_0(v104) -> (* Ok *)
            let v105 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v106 : string = "Ok($0)"
            let v107 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v106 
            let _v105 = v107 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v108 : string = "Ok($0)"
            let v109 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v108 
            let _v105 = v109 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v110 : string = "Ok($0)"
            let v111 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v104 v110 
            let _v105 = v111 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v112 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v112 
            #endif
#if FABLE_COMPILER_PYTHON
            let v113 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v113 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v114 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v114 
            #endif
#else
            let v115 : Result<std_path_PathBuf, std_io_Error> = v104 |> Ok
            let _v105 = v115 
            #endif
            let v116 : Result<std_path_PathBuf, std_io_Error> = _v105 
            v116
    let _v3 = v123 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v124 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v124 
    #endif
#if FABLE_COMPILER_PYTHON
    let v127 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v127 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v130 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v130 
    #endif
#else
    let v133 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v3 = v133 
    #endif
    let v136 : Result<std_path_PathBuf, std_io_Error> = _v3 
    v136
and closure73 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method154(v0, v1, v2)
and closure72 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure73(v0, v1)
and method157 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method63(v0)
    let v5 : string option = method34(v0)
    let v6 : (string -> US5) = method6()
    let v7 : US5 option = v5 |> Option.map v6 
    let v18 : US5 = US5_1
    let v19 : US5 = v7 |> Option.defaultValue v18 
    let v23 : string = method156(v3)
    let v24 : bool = v2 >= 11uy
    if v24 then
        let v25 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v26 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v27 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v28 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v27 
        let _v26 = v28 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v29 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v30 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v29 
        let _v26 = v30 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v31 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v32 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v31 
        let _v26 = v32 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v36 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v39 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v39 
        #endif
#else
        let v42 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v42 
        #endif
        let v45 : std_io_Error = _v26 
        let v50 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : string = "Err($0)"
        let v52 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v51 
        let _v50 = v52 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v53 : string = "Err($0)"
        let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v53 
        let _v50 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v55 : string = "Err($0)"
        let v56 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v55 
        let _v50 = v56 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v57 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v57 
        #endif
#if FABLE_COMPILER_PYTHON
        let v58 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v58 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v59 
        #endif
#else
        let v60 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v60 
        #endif
        let v61 : Result<std_path_PathBuf, std_io_Error> = _v50 
        v61
    else
        match v19 with
        | US5_0(v64) -> (* Some *)
            let v65 : string = ""
            let v66 : bool = v0 <> v65 
            if v66 then
                let v69 : uint8 = v2 + 1uy
                let v70 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v69
                let v71 : Result<std_path_PathBuf, std_io_Error> = v70 v64
                let v72 : (std_io_Error -> string) = method150()
                let v73 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v74 : string = "$0.map_err(|x| $1(x))"
                let v75 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v74 
                let _v73 = v75 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76 : string = "$0.map_err(|x| $1(x))"
                let v77 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v76 
                let _v73 = v77 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v78 : string = "$0.map_err(|x| $1(x))"
                let v79 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v78 
                let _v73 = v79 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v80 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v80 
                #endif
#if FABLE_COMPILER_PYTHON
                let v81 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v81 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v82 
                #endif
#else
                let v83 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v83 
                #endif
                let v84 : Result<std_path_PathBuf, string> = _v73 
                let v87 : (std_path_PathBuf -> US33) = method152()
                let v88 : (string -> US33) = method153()
                let v89 : US33 = match v84 with Ok x -> v87 x | Error x -> v88 x
                match v89 with
                | US33_1(v205) -> (* Error *)
                    let v206 : string = $"file_system.read_link / error': {v205} / error: {v23} / name: {v4}"
                    let v207 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v208 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v209 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v208 
                    let _v207 = v209 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v210 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v211 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v210 
                    let _v207 = v211 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v212 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v213 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v212 
                    let _v207 = v213 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v214 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v214 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v220 
                    #endif
#else
                    let v223 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v223 
                    #endif
                    let v226 : std_io_Error = _v207 
                    let v231 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v232 : string = "Err($0)"
                    let v233 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v232 
                    let _v231 = v233 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v234 : string = "Err($0)"
                    let v235 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v234 
                    let _v231 = v235 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v236 : string = "Err($0)"
                    let v237 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v236 
                    let _v231 = v237 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v238 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v238 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v239 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v240 
                    #endif
#else
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v241 
                    #endif
                    let v242 : Result<std_path_PathBuf, std_io_Error> = _v231 
                    v242
                | US33_0(v90) -> (* Ok *)
                    let v91 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v92 : string = "$0.display()"
                    let v93 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v92 
                    let _v91 = v93 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v94 : string = "$0.display()"
                    let v95 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v94 
                    let _v91 = v95 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v96 : string = "$0.display()"
                    let v97 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v96 
                    let _v91 = v97 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v98 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v98 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v101 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v101 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v104 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v104 
                    #endif
#else
                    let v107 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v107 
                    #endif
                    let v110 : std_path_Display = _v91 
                    let v115 : string = v110 |> string 
                    let v118 : string = method28(v115, v4)
                    let v119 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "&*$0"
                    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v120 
                    let _v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "&*$0"
                    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v122 
                    let _v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "&*$0"
                    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                    let _v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v129 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v129 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v132 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v132 
                    #endif
#else
                    let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v135 
                    #endif
                    let v138 : Ref<Str> = _v119 
                    let v143 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v144 : string = "String::from($0)"
                    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v144 
                    let _v143 = v145 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v146 : string = "String::from($0)"
                    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v146 
                    let _v143 = v147 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v148 : string = "String::from($0)"
                    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v148 
                    let _v143 = v149 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v150 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v150 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v153 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v153 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v156 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v156 
                    #endif
#else
                    let v159 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v159 
                    #endif
                    let v162 : std_string_String = _v143 
                    let v167 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v168 : string = "std::path::PathBuf::from($0)"
                    let v169 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v168 
                    let _v167 = v169 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v170 : string = "std::path::PathBuf::from($0)"
                    let v171 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v170 
                    let _v167 = v171 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v172 : string = "std::path::PathBuf::from($0)"
                    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v172 
                    let _v167 = v173 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v174 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v174 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v177 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v177 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v180 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v180 
                    #endif
#else
                    let v183 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v183 
                    #endif
                    let v186 : std_path_PathBuf = _v167 
                    let v191 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v192 : string = "Ok($0)"
                    let v193 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v192 
                    let _v191 = v193 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v194 : string = "Ok($0)"
                    let v195 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v194 
                    let _v191 = v195 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v196 : string = "Ok($0)"
                    let v197 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v196 
                    let _v191 = v197 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v199 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v200 
                    #endif
#else
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v201 
                    #endif
                    let v202 : Result<std_path_PathBuf, std_io_Error> = _v191 
                    v202
            else
                let v247 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
                let v248 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v249 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v250 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v249 
                let _v248 = v250 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v251 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v252 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v251 
                let _v248 = v252 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v253 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v254 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v253 
                let _v248 = v254 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v255 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v255 
                #endif
#if FABLE_COMPILER_PYTHON
                let v258 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v258 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v261 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v261 
                #endif
#else
                let v264 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v264 
                #endif
                let v267 : std_io_Error = _v248 
                let v272 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v273 : string = "Err($0)"
                let v274 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v273 
                let _v272 = v274 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v275 : string = "Err($0)"
                let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v275 
                let _v272 = v276 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v277 : string = "Err($0)"
                let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v277 
                let _v272 = v278 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v279 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v279 
                #endif
#if FABLE_COMPILER_PYTHON
                let v280 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v281 
                #endif
#else
                let v282 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v282 
                #endif
                let v283 : Result<std_path_PathBuf, std_io_Error> = _v272 
                v283
        | _ ->
            let v287 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
            let v288 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v289 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v290 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v289 
            let _v288 = v290 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v291 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v292 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v291 
            let _v288 = v292 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v293 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v294 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v293 
            let _v288 = v294 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v295 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v295 
            #endif
#if FABLE_COMPILER_PYTHON
            let v298 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v298 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v301 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v301 
            #endif
#else
            let v304 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v304 
            #endif
            let v307 : std_io_Error = _v288 
            let v312 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v313 : string = "Err($0)"
            let v314 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v313 
            let _v312 = v314 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v315 : string = "Err($0)"
            let v316 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v315 
            let _v312 = v316 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v317 : string = "Err($0)"
            let v318 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v317 
            let _v312 = v318 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v319 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v319 
            #endif
#if FABLE_COMPILER_PYTHON
            let v320 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v320 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v321 
            #endif
#else
            let v322 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v322 
            #endif
            let v323 : Result<std_path_PathBuf, std_io_Error> = _v312 
            v323
and method149 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "std::fs::read_link(&*$0)"
    let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let v5 : (std_io_Error -> string) = method150()
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.map_err(|x| $1(x))"
    let v8 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.map_err(|x| $1(x))"
    let v10 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.map_err(|x| $1(x))"
    let v12 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v4, v5) v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v15 
    #endif
#else
    let v16 : Result<std_path_PathBuf, string> = match v4 with Ok x -> Ok x | Error x -> Error (v5 x)
    let _v6 = v16 
    #endif
    let v17 : Result<std_path_PathBuf, string> = _v6 
    let v20 : (std_path_PathBuf -> US33) = method152()
    let v21 : (string -> US33) = method153()
    let v22 : US33 = match v17 with Ok x -> v20 x | Error x -> v21 x
    let v42 : Result<std_path_PathBuf, std_io_Error> =
        match v22 with
        | US33_1(v38) -> (* Error *)
            let v39 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method157(v0, v39, v1, v38)
        | US33_0(v23) -> (* Ok *)
            let v24 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v25 : string = "Ok($0)"
            let v26 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v25 
            let _v24 = v26 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v27 : string = "Ok($0)"
            let v28 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v27 
            let _v24 = v28 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v29 : string = "Ok($0)"
            let v30 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v23 v29 
            let _v24 = v30 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v31 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v31 
            #endif
#if FABLE_COMPILER_PYTHON
            let v32 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v32 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v33 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v33 
            #endif
#else
            let v34 : Result<std_path_PathBuf, std_io_Error> = v23 |> Ok
            let _v24 = v34 
            #endif
            let v35 : Result<std_path_PathBuf, std_io_Error> = _v24 
            v35
    let _v2 = v42 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v43 : string = "std::fs::read_link(&*$0)"
    let v44 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v43 
    let v45 : (std_io_Error -> string) = method150()
    let v46 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v47 : string = "$0.map_err(|x| $1(x))"
    let v48 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v47 
    let _v46 = v48 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v49 : string = "$0.map_err(|x| $1(x))"
    let v50 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v49 
    let _v46 = v50 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v51 : string = "$0.map_err(|x| $1(x))"
    let v52 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v44, v45) v51 
    let _v46 = v52 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v53 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v53 
    #endif
#if FABLE_COMPILER_PYTHON
    let v54 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v54 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v55 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v55 
    #endif
#else
    let v56 : Result<std_path_PathBuf, string> = match v44 with Ok x -> Ok x | Error x -> Error (v45 x)
    let _v46 = v56 
    #endif
    let v57 : Result<std_path_PathBuf, string> = _v46 
    let v60 : (std_path_PathBuf -> US33) = method152()
    let v61 : (string -> US33) = method153()
    let v62 : US33 = match v57 with Ok x -> v60 x | Error x -> v61 x
    let v82 : Result<std_path_PathBuf, std_io_Error> =
        match v62 with
        | US33_1(v78) -> (* Error *)
            let v79 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method157(v0, v79, v1, v78)
        | US33_0(v63) -> (* Ok *)
            let v64 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v65 : string = "Ok($0)"
            let v66 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v65 
            let _v64 = v66 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v67 : string = "Ok($0)"
            let v68 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v67 
            let _v64 = v68 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v69 : string = "Ok($0)"
            let v70 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v63 v69 
            let _v64 = v70 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v71 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v71 
            #endif
#if FABLE_COMPILER_PYTHON
            let v72 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v72 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v73 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v73 
            #endif
#else
            let v74 : Result<std_path_PathBuf, std_io_Error> = v63 |> Ok
            let _v64 = v74 
            #endif
            let v75 : Result<std_path_PathBuf, std_io_Error> = _v64 
            v75
    let _v2 = v82 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v83 : string = "std::fs::read_link(&*$0)"
    let v84 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v83 
    let v85 : (std_io_Error -> string) = method150()
    let v86 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "$0.map_err(|x| $1(x))"
    let v88 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v87 
    let _v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "$0.map_err(|x| $1(x))"
    let v90 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v89 
    let _v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "$0.map_err(|x| $1(x))"
    let v92 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v84, v85) v91 
    let _v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v94 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v94 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v95 
    #endif
#else
    let v96 : Result<std_path_PathBuf, string> = match v84 with Ok x -> Ok x | Error x -> Error (v85 x)
    let _v86 = v96 
    #endif
    let v97 : Result<std_path_PathBuf, string> = _v86 
    let v100 : (std_path_PathBuf -> US33) = method152()
    let v101 : (string -> US33) = method153()
    let v102 : US33 = match v97 with Ok x -> v100 x | Error x -> v101 x
    let v122 : Result<std_path_PathBuf, std_io_Error> =
        match v102 with
        | US33_1(v118) -> (* Error *)
            let v119 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure72(v0)
            method157(v0, v119, v1, v118)
        | US33_0(v103) -> (* Ok *)
            let v104 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v105 : string = "Ok($0)"
            let v106 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v105 
            let _v104 = v106 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v107 : string = "Ok($0)"
            let v108 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v107 
            let _v104 = v108 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v109 : string = "Ok($0)"
            let v110 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v103 v109 
            let _v104 = v110 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v111 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v111 
            #endif
#if FABLE_COMPILER_PYTHON
            let v112 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v112 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v113 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v113 
            #endif
#else
            let v114 : Result<std_path_PathBuf, std_io_Error> = v103 |> Ok
            let _v104 = v114 
            #endif
            let v115 : Result<std_path_PathBuf, std_io_Error> = _v104 
            v115
    let _v2 = v122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v123 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v123 
    #endif
#if FABLE_COMPILER_PYTHON
    let v126 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v126 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v129 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v129 
    #endif
#else
    let v132 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v2 = v132 
    #endif
    let v135 : Result<std_path_PathBuf, std_io_Error> = _v2 
    v135
and method160 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error, v4 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v5 : string = method63(v4)
    let v6 : string option = method34(v4)
    let v7 : (string -> US5) = method6()
    let v8 : US5 option = v6 |> Option.map v7 
    let v19 : US5 = US5_1
    let v20 : US5 = v8 |> Option.defaultValue v19 
    let v24 : string = method151(v3)
    let v25 : bool = v2 >= 11uy
    if v25 then
        let v26 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v4} / name: {v5}"
        let v27 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v28 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v29 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v28 
        let _v27 = v29 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v30 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v31 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v30 
        let _v27 = v31 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v32 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v33 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v26 v32 
        let _v27 = v33 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v34 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v34 
        #endif
#if FABLE_COMPILER_PYTHON
        let v37 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v37 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v40 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v40 
        #endif
#else
        let v43 : std_io_Error = v26 |> unbox<std_io_Error>
        let _v27 = v43 
        #endif
        let v46 : std_io_Error = _v27 
        let v51 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v52 : string = "Err($0)"
        let v53 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v52 
        let _v51 = v53 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v54 : string = "Err($0)"
        let v55 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v54 
        let _v51 = v55 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v56 : string = "Err($0)"
        let v57 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v46 v56 
        let _v51 = v57 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v58 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v58 
        #endif
#if FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v59 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v60 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v60 
        #endif
#else
        let v61 : Result<std_path_PathBuf, std_io_Error> = v46 |> Error
        let _v51 = v61 
        #endif
        let v62 : Result<std_path_PathBuf, std_io_Error> = _v51 
        v62
    else
        match v20 with
        | US5_0(v65) -> (* Some *)
            let v66 : string = ""
            let v67 : bool = v4 <> v66 
            if v67 then
                let v70 : uint8 = v2 + 1uy
                let v71 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v70
                let v72 : Result<std_path_PathBuf, std_io_Error> = v71 v65
                let v73 : (std_io_Error -> string) = method150()
                let v74 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v75 : string = "$0.map_err(|x| $1(x))"
                let v76 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v75 
                let _v74 = v76 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v77 : string = "$0.map_err(|x| $1(x))"
                let v78 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v77 
                let _v74 = v78 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v79 : string = "$0.map_err(|x| $1(x))"
                let v80 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v72, v73) v79 
                let _v74 = v80 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v81 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v81 
                #endif
#if FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v82 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v83 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v83 
                #endif
#else
                let v84 : Result<std_path_PathBuf, string> = match v72 with Ok x -> Ok x | Error x -> Error (v73 x)
                let _v74 = v84 
                #endif
                let v85 : Result<std_path_PathBuf, string> = _v74 
                let v88 : (std_path_PathBuf -> US33) = method152()
                let v89 : (string -> US33) = method153()
                let v90 : US33 = match v85 with Ok x -> v88 x | Error x -> v89 x
                match v90 with
                | US33_1(v206) -> (* Error *)
                    let v207 : string = $"file_system.read_link / error': {v206} / error: {v24} / name: {v5}"
                    let v208 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v209 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v210 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v209 
                    let _v208 = v210 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v211 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v212 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v211 
                    let _v208 = v212 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v213 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v214 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v207 v213 
                    let _v208 = v214 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v215 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v215 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v218 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v218 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v221 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v221 
                    #endif
#else
                    let v224 : std_io_Error = v207 |> unbox<std_io_Error>
                    let _v208 = v224 
                    #endif
                    let v227 : std_io_Error = _v208 
                    let v232 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v233 : string = "Err($0)"
                    let v234 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v233 
                    let _v232 = v234 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v235 : string = "Err($0)"
                    let v236 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v235 
                    let _v232 = v236 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v237 : string = "Err($0)"
                    let v238 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v227 v237 
                    let _v232 = v238 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v239 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v240 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v241 
                    #endif
#else
                    let v242 : Result<std_path_PathBuf, std_io_Error> = v227 |> Error
                    let _v232 = v242 
                    #endif
                    let v243 : Result<std_path_PathBuf, std_io_Error> = _v232 
                    v243
                | US33_0(v91) -> (* Ok *)
                    let v92 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v93 : string = "$0.display()"
                    let v94 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v93 
                    let _v92 = v94 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v95 : string = "$0.display()"
                    let v96 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v95 
                    let _v92 = v96 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v97 : string = "$0.display()"
                    let v98 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v91 v97 
                    let _v92 = v98 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v99 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v99 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v102 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v102 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v105 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v105 
                    #endif
#else
                    let v108 : std_path_Display = v91 |> unbox<std_path_Display>
                    let _v92 = v108 
                    #endif
                    let v111 : std_path_Display = _v92 
                    let v116 : string = v111 |> string 
                    let v119 : string = method28(v116, v5)
                    let v120 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v121 : string = "&*$0"
                    let v122 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v121 
                    let _v120 = v122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v123 : string = "&*$0"
                    let v124 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v123 
                    let _v120 = v124 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v125 : string = "&*$0"
                    let v126 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v119 v125 
                    let _v120 = v126 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v130 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v130 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v133 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v133 
                    #endif
#else
                    let v136 : Ref<Str> = v119 |> unbox<Ref<Str>>
                    let _v120 = v136 
                    #endif
                    let v139 : Ref<Str> = _v120 
                    let v144 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v145 : string = "String::from($0)"
                    let v146 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v145 
                    let _v144 = v146 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v147 : string = "String::from($0)"
                    let v148 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v147 
                    let _v144 = v148 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v149 : string = "String::from($0)"
                    let v150 : std_string_String = Fable.Core.RustInterop.emitRustExpr v139 v149 
                    let _v144 = v150 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v151 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v151 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v154 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v154 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v157 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v157 
                    #endif
#else
                    let v160 : std_string_String = v139 |> unbox<std_string_String>
                    let _v144 = v160 
                    #endif
                    let v163 : std_string_String = _v144 
                    let v168 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "std::path::PathBuf::from($0)"
                    let v170 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v169 
                    let _v168 = v170 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v171 : string = "std::path::PathBuf::from($0)"
                    let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v171 
                    let _v168 = v172 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v173 : string = "std::path::PathBuf::from($0)"
                    let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v163 v173 
                    let _v168 = v174 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v175 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v175 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v178 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v178 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v181 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v181 
                    #endif
#else
                    let v184 : std_path_PathBuf = v163 |> unbox<std_path_PathBuf>
                    let _v168 = v184 
                    #endif
                    let v187 : std_path_PathBuf = _v168 
                    let v192 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v193 : string = "Ok($0)"
                    let v194 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v193 
                    let _v192 = v194 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v195 : string = "Ok($0)"
                    let v196 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v195 
                    let _v192 = v196 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v197 : string = "Ok($0)"
                    let v198 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v187 v197 
                    let _v192 = v198 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v199 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v200 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v201 
                    #endif
#else
                    let v202 : Result<std_path_PathBuf, std_io_Error> = v187 |> Ok
                    let _v192 = v202 
                    #endif
                    let v203 : Result<std_path_PathBuf, std_io_Error> = _v192 
                    v203
            else
                let v248 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
                let v249 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v250 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v251 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v250 
                let _v249 = v251 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v252 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v253 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v252 
                let _v249 = v253 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v254 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v255 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v248 v254 
                let _v249 = v255 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v256 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v256 
                #endif
#if FABLE_COMPILER_PYTHON
                let v259 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v259 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v262 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v262 
                #endif
#else
                let v265 : std_io_Error = v248 |> unbox<std_io_Error>
                let _v249 = v265 
                #endif
                let v268 : std_io_Error = _v249 
                let v273 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v274 : string = "Err($0)"
                let v275 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v274 
                let _v273 = v275 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v276 : string = "Err($0)"
                let v277 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v276 
                let _v273 = v277 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v278 : string = "Err($0)"
                let v279 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v268 v278 
                let _v273 = v279 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v280 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v280 
                #endif
#if FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v281 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v282 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v282 
                #endif
#else
                let v283 : Result<std_path_PathBuf, std_io_Error> = v268 |> Error
                let _v273 = v283 
                #endif
                let v284 : Result<std_path_PathBuf, std_io_Error> = _v273 
                v284
        | _ ->
            let v288 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v24} / path': {v4} / name: {v5}"
            let v289 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v290 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v291 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v290 
            let _v289 = v291 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v292 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v293 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v292 
            let _v289 = v293 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v294 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v295 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v288 v294 
            let _v289 = v295 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v296 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v296 
            #endif
#if FABLE_COMPILER_PYTHON
            let v299 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v299 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v302 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v302 
            #endif
#else
            let v305 : std_io_Error = v288 |> unbox<std_io_Error>
            let _v289 = v305 
            #endif
            let v308 : std_io_Error = _v289 
            let v313 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v314 : string = "Err($0)"
            let v315 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v314 
            let _v313 = v315 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v316 : string = "Err($0)"
            let v317 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v316 
            let _v313 = v317 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v318 : string = "Err($0)"
            let v319 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v308 v318 
            let _v313 = v319 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v320 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v320 
            #endif
#if FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v321 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v322 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v322 
            #endif
#else
            let v323 : Result<std_path_PathBuf, std_io_Error> = v308 |> Error
            let _v313 = v323 
            #endif
            let v324 : Result<std_path_PathBuf, std_io_Error> = _v313 
            v324
and method159 (v0 : string, v1 : uint8, v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v7 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v10 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v16 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v16 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v19 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v3 = v19 
    #endif
#else
    let v22 : (string -> System_IO_DirectoryInfo) = System_IO_DirectoryInfo 
    let v23 : System_IO_DirectoryInfo = v22 v2
    let _v3 = v23 
    #endif
    let v24 : System_IO_DirectoryInfo = _v3 
    let v29 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v30 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v30 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v33 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v36 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v39 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v39 
    #endif
#if FABLE_COMPILER_PYTHON
    let v42 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v42 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v45 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v29 = v45 
    #endif
#else
    let v48 : System.IO.FileAttributes = v24.Attributes
    let _v29 = v48 
    #endif
    let v49 : System.IO.FileAttributes = _v29 
    let v54 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v55 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v55 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v58 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v58 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v61 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v61 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v64 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v64 
    #endif
#if FABLE_COMPILER_PYTHON
    let v67 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v67 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v70 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v54 = v70 
    #endif
#else
    let v73 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _v54 = v73 
    #endif
    let v74 : System.IO.FileAttributes = _v54 
    let v79 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v80 : bool = null |> unbox<bool>
    let _v79 = v80 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v83 : bool = null |> unbox<bool>
    let _v79 = v83 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v86 : bool = null |> unbox<bool>
    let _v79 = v86 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v89 : bool = null |> unbox<bool>
    let _v79 = v89 
    #endif
#if FABLE_COMPILER_PYTHON
    let v92 : bool = null |> unbox<bool>
    let _v79 = v92 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v95 : bool = null |> unbox<bool>
    let _v79 = v95 
    #endif
#else
    let v98 : bool = v49.HasFlag v74 
    let _v79 = v98 
    #endif
    let v99 : bool = _v79 
    if v99 then
        let v104 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v105 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v105 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v108 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v108 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v111 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v111 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v114 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v114 
        #endif
#if FABLE_COMPILER_PYTHON
        let v117 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v117 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v120 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v104 = v120 
        #endif
#else
        let v123 : (string -> System_IO_FileInfo) = System_IO_FileInfo 
        let v124 : System_IO_FileInfo = v123 v2
        let _v104 = v124 
        #endif
        let v125 : System_IO_FileInfo = _v104 
        let v130 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v131 : string = null |> unbox<string>
        let _v130 = v131 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v134 : string = null |> unbox<string>
        let _v130 = v134 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v137 : string = null |> unbox<string>
        let _v130 = v137 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v140 : string = null |> unbox<string>
        let _v130 = v140 
        #endif
#if FABLE_COMPILER_PYTHON
        let v143 : string = null |> unbox<string>
        let _v130 = v143 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v146 : string = null |> unbox<string>
        let _v130 = v146 
        #endif
#else
        let v149 : string = v125.LinkTarget
        let _v130 = v149 
        #endif
        let v150 : string = _v130 
        let v155 : std_path_PathBuf = v150 |> unbox<std_path_PathBuf>
        let v158 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v159 : string = "Ok($0)"
        let v160 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v155 v159 
        let _v158 = v160 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v161 : string = "Ok($0)"
        let v162 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v155 v161 
        let _v158 = v162 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v163 : string = "Ok($0)"
        let v164 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v155 v163 
        let _v158 = v164 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v165 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v165 
        #endif
#if FABLE_COMPILER_PYTHON
        let v166 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v166 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v167 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v167 
        #endif
#else
        let v168 : Result<std_path_PathBuf, std_io_Error> = v155 |> Ok
        let _v158 = v168 
        #endif
        let v169 : Result<std_path_PathBuf, std_io_Error> = _v158 
        v169
    else
        let v172 : string = $"file_system.read_link / Fsharp / The file or directory is not a reparse point. / path: {v0} / result: {v99} / path': {v2} / n: {v1}"
        let v173 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v174 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v175 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v172 v174 
        let _v173 = v175 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v176 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v177 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v172 v176 
        let _v173 = v177 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v178 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v179 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v172 v178 
        let _v173 = v179 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v180 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v180 
        #endif
#if FABLE_COMPILER_PYTHON
        let v183 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v183 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v186 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v186 
        #endif
#else
        let v189 : std_io_Error = v172 |> unbox<std_io_Error>
        let _v173 = v189 
        #endif
        let v192 : std_io_Error = _v173 
        let v197 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure74(v0)
        method160(v0, v197, v1, v192, v2)
and closure75 (v0 : string, v1 : uint8) (v2 : string) : Result<std_path_PathBuf, std_io_Error> =
    method159(v0, v1, v2)
and closure74 (v0 : string) (v1 : uint8) : (string -> Result<std_path_PathBuf, std_io_Error>) =
    closure75(v0, v1)
and method161 (v0 : string, v1 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)), v2 : uint8, v3 : std_io_Error) : Result<std_path_PathBuf, std_io_Error> =
    let v4 : string = method63(v0)
    let v5 : string option = method34(v0)
    let v6 : (string -> US5) = method6()
    let v7 : US5 option = v5 |> Option.map v6 
    let v18 : US5 = US5_1
    let v19 : US5 = v7 |> Option.defaultValue v18 
    let v23 : string = method151(v3)
    let v24 : bool = v2 >= 11uy
    if v24 then
        let v25 : string = $"file_system.read_link / path: {v0} / n: {v2} / path': {v0} / name: {v4}"
        let v26 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v27 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v28 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v27 
        let _v26 = v28 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v29 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v30 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v29 
        let _v26 = v30 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v31 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v32 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v25 v31 
        let _v26 = v32 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v33 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v33 
        #endif
#if FABLE_COMPILER_PYTHON
        let v36 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v36 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v39 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v39 
        #endif
#else
        let v42 : std_io_Error = v25 |> unbox<std_io_Error>
        let _v26 = v42 
        #endif
        let v45 : std_io_Error = _v26 
        let v50 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v51 : string = "Err($0)"
        let v52 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v51 
        let _v50 = v52 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v53 : string = "Err($0)"
        let v54 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v53 
        let _v50 = v54 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v55 : string = "Err($0)"
        let v56 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v45 v55 
        let _v50 = v56 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v57 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v57 
        #endif
#if FABLE_COMPILER_PYTHON
        let v58 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v58 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v59 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v59 
        #endif
#else
        let v60 : Result<std_path_PathBuf, std_io_Error> = v45 |> Error
        let _v50 = v60 
        #endif
        let v61 : Result<std_path_PathBuf, std_io_Error> = _v50 
        v61
    else
        match v19 with
        | US5_0(v64) -> (* Some *)
            let v65 : string = ""
            let v66 : bool = v0 <> v65 
            if v66 then
                let v69 : uint8 = v2 + 1uy
                let v70 : (string -> Result<std_path_PathBuf, std_io_Error>) = v1 v69
                let v71 : Result<std_path_PathBuf, std_io_Error> = v70 v64
                let v72 : (std_io_Error -> string) = method150()
                let v73 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v74 : string = "$0.map_err(|x| $1(x))"
                let v75 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v74 
                let _v73 = v75 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v76 : string = "$0.map_err(|x| $1(x))"
                let v77 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v76 
                let _v73 = v77 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v78 : string = "$0.map_err(|x| $1(x))"
                let v79 : Result<std_path_PathBuf, string> = Fable.Core.RustInterop.emitRustExpr struct (v71, v72) v78 
                let _v73 = v79 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v80 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v80 
                #endif
#if FABLE_COMPILER_PYTHON
                let v81 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v81 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v82 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v82 
                #endif
#else
                let v83 : Result<std_path_PathBuf, string> = match v71 with Ok x -> Ok x | Error x -> Error (v72 x)
                let _v73 = v83 
                #endif
                let v84 : Result<std_path_PathBuf, string> = _v73 
                let v87 : (std_path_PathBuf -> US33) = method152()
                let v88 : (string -> US33) = method153()
                let v89 : US33 = match v84 with Ok x -> v87 x | Error x -> v88 x
                match v89 with
                | US33_1(v205) -> (* Error *)
                    let v206 : string = $"file_system.read_link / error': {v205} / error: {v23} / name: {v4}"
                    let v207 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v208 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v209 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v208 
                    let _v207 = v209 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v210 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v211 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v210 
                    let _v207 = v211 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v212 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                    let v213 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v206 v212 
                    let _v207 = v213 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v214 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v214 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v217 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v217 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v220 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v220 
                    #endif
#else
                    let v223 : std_io_Error = v206 |> unbox<std_io_Error>
                    let _v207 = v223 
                    #endif
                    let v226 : std_io_Error = _v207 
                    let v231 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v232 : string = "Err($0)"
                    let v233 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v232 
                    let _v231 = v233 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v234 : string = "Err($0)"
                    let v235 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v234 
                    let _v231 = v235 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v236 : string = "Err($0)"
                    let v237 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v226 v236 
                    let _v231 = v237 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v238 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v238 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v239 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v239 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v240 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v240 
                    #endif
#else
                    let v241 : Result<std_path_PathBuf, std_io_Error> = v226 |> Error
                    let _v231 = v241 
                    #endif
                    let v242 : Result<std_path_PathBuf, std_io_Error> = _v231 
                    v242
                | US33_0(v90) -> (* Ok *)
                    let v91 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v92 : string = "$0.display()"
                    let v93 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v92 
                    let _v91 = v93 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v94 : string = "$0.display()"
                    let v95 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v94 
                    let _v91 = v95 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v96 : string = "$0.display()"
                    let v97 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v90 v96 
                    let _v91 = v97 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v98 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v98 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v101 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v101 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v104 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v104 
                    #endif
#else
                    let v107 : std_path_Display = v90 |> unbox<std_path_Display>
                    let _v91 = v107 
                    #endif
                    let v110 : std_path_Display = _v91 
                    let v115 : string = v110 |> string 
                    let v118 : string = method28(v115, v4)
                    let v119 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v120 : string = "&*$0"
                    let v121 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v120 
                    let _v119 = v121 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v122 : string = "&*$0"
                    let v123 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v122 
                    let _v119 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : string = "&*$0"
                    let v125 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v118 v124 
                    let _v119 = v125 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v126 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v126 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v129 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v129 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v132 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v132 
                    #endif
#else
                    let v135 : Ref<Str> = v118 |> unbox<Ref<Str>>
                    let _v119 = v135 
                    #endif
                    let v138 : Ref<Str> = _v119 
                    let v143 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v144 : string = "String::from($0)"
                    let v145 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v144 
                    let _v143 = v145 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v146 : string = "String::from($0)"
                    let v147 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v146 
                    let _v143 = v147 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v148 : string = "String::from($0)"
                    let v149 : std_string_String = Fable.Core.RustInterop.emitRustExpr v138 v148 
                    let _v143 = v149 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v150 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v150 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v153 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v153 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v156 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v156 
                    #endif
#else
                    let v159 : std_string_String = v138 |> unbox<std_string_String>
                    let _v143 = v159 
                    #endif
                    let v162 : std_string_String = _v143 
                    let v167 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v168 : string = "std::path::PathBuf::from($0)"
                    let v169 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v168 
                    let _v167 = v169 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v170 : string = "std::path::PathBuf::from($0)"
                    let v171 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v170 
                    let _v167 = v171 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v172 : string = "std::path::PathBuf::from($0)"
                    let v173 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v162 v172 
                    let _v167 = v173 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v174 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v174 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v177 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v177 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v180 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v180 
                    #endif
#else
                    let v183 : std_path_PathBuf = v162 |> unbox<std_path_PathBuf>
                    let _v167 = v183 
                    #endif
                    let v186 : std_path_PathBuf = _v167 
                    let v191 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v192 : string = "Ok($0)"
                    let v193 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v192 
                    let _v191 = v193 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v194 : string = "Ok($0)"
                    let v195 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v194 
                    let _v191 = v195 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v196 : string = "Ok($0)"
                    let v197 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v186 v196 
                    let _v191 = v197 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v198 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v198 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v199 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v199 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v200 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v200 
                    #endif
#else
                    let v201 : Result<std_path_PathBuf, std_io_Error> = v186 |> Ok
                    let _v191 = v201 
                    #endif
                    let v202 : Result<std_path_PathBuf, std_io_Error> = _v191 
                    v202
            else
                let v247 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
                let v248 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v249 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v250 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v249 
                let _v248 = v250 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v251 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v252 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v251 
                let _v248 = v252 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v253 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
                let v254 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v247 v253 
                let _v248 = v254 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v255 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v255 
                #endif
#if FABLE_COMPILER_PYTHON
                let v258 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v258 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v261 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v261 
                #endif
#else
                let v264 : std_io_Error = v247 |> unbox<std_io_Error>
                let _v248 = v264 
                #endif
                let v267 : std_io_Error = _v248 
                let v272 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v273 : string = "Err($0)"
                let v274 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v273 
                let _v272 = v274 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v275 : string = "Err($0)"
                let v276 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v275 
                let _v272 = v276 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v277 : string = "Err($0)"
                let v278 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v267 v277 
                let _v272 = v278 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v279 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v279 
                #endif
#if FABLE_COMPILER_PYTHON
                let v280 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v281 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v281 
                #endif
#else
                let v282 : Result<std_path_PathBuf, std_io_Error> = v267 |> Error
                let _v272 = v282 
                #endif
                let v283 : Result<std_path_PathBuf, std_io_Error> = _v272 
                v283
        | _ ->
            let v287 : string = $"file_system.read_link / run / The file or directory is not a reparse point. / path: {v0} / error: {v23} / path': {v0} / name: {v4}"
            let v288 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v289 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v290 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v289 
            let _v288 = v290 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v291 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v292 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v291 
            let _v288 = v292 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v293 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
            let v294 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v287 v293 
            let _v288 = v294 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v295 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v295 
            #endif
#if FABLE_COMPILER_PYTHON
            let v298 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v298 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v301 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v301 
            #endif
#else
            let v304 : std_io_Error = v287 |> unbox<std_io_Error>
            let _v288 = v304 
            #endif
            let v307 : std_io_Error = _v288 
            let v312 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v313 : string = "Err($0)"
            let v314 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v313 
            let _v312 = v314 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v315 : string = "Err($0)"
            let v316 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v315 
            let _v312 = v316 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v317 : string = "Err($0)"
            let v318 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v307 v317 
            let _v312 = v318 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v319 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v319 
            #endif
#if FABLE_COMPILER_PYTHON
            let v320 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v320 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v321 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v321 
            #endif
#else
            let v322 : Result<std_path_PathBuf, std_io_Error> = v307 |> Error
            let _v312 = v322 
            #endif
            let v323 : Result<std_path_PathBuf, std_io_Error> = _v312 
            v323
and method158 (v0 : string, v1 : uint8) : Result<std_path_PathBuf, std_io_Error> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v9 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v12 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v12 
    #endif
#if FABLE_COMPILER_PYTHON
    let v15 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v15 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v18 : System_IO_DirectoryInfo = null |> unbox<System_IO_DirectoryInfo>
    let _v2 = v18 
    #endif
#else
    let v21 : (string -> System_IO_DirectoryInfo) = System_IO_DirectoryInfo 
    let v22 : System_IO_DirectoryInfo = v21 v0
    let _v2 = v22 
    #endif
    let v23 : System_IO_DirectoryInfo = _v2 
    let v28 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v29 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v29 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v32 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v32 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v35 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v38 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v38 
    #endif
#if FABLE_COMPILER_PYTHON
    let v41 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v41 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v44 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v28 = v44 
    #endif
#else
    let v47 : System.IO.FileAttributes = v23.Attributes
    let _v28 = v47 
    #endif
    let v48 : System.IO.FileAttributes = _v28 
    let v53 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v54 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v54 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v57 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v57 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v60 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v60 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v63 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v63 
    #endif
#if FABLE_COMPILER_PYTHON
    let v66 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v66 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v69 : System.IO.FileAttributes = null |> unbox<System.IO.FileAttributes>
    let _v53 = v69 
    #endif
#else
    let v72 : System.IO.FileAttributes = System.IO.FileAttributes.ReparsePoint
    let _v53 = v72 
    #endif
    let v73 : System.IO.FileAttributes = _v53 
    let v78 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v79 : bool = null |> unbox<bool>
    let _v78 = v79 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v82 : bool = null |> unbox<bool>
    let _v78 = v82 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v85 : bool = null |> unbox<bool>
    let _v78 = v85 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v88 : bool = null |> unbox<bool>
    let _v78 = v88 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : bool = null |> unbox<bool>
    let _v78 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v94 : bool = null |> unbox<bool>
    let _v78 = v94 
    #endif
#else
    let v97 : bool = v48.HasFlag v73 
    let _v78 = v97 
    #endif
    let v98 : bool = _v78 
    if v98 then
        let v103 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v104 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v104 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v107 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v107 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v110 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v110 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v113 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v113 
        #endif
#if FABLE_COMPILER_PYTHON
        let v116 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v116 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v119 : System_IO_FileInfo = null |> unbox<System_IO_FileInfo>
        let _v103 = v119 
        #endif
#else
        let v122 : (string -> System_IO_FileInfo) = System_IO_FileInfo 
        let v123 : System_IO_FileInfo = v122 v0
        let _v103 = v123 
        #endif
        let v124 : System_IO_FileInfo = _v103 
        let v129 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v130 : string = null |> unbox<string>
        let _v129 = v130 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v133 : string = null |> unbox<string>
        let _v129 = v133 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v136 : string = null |> unbox<string>
        let _v129 = v136 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v139 : string = null |> unbox<string>
        let _v129 = v139 
        #endif
#if FABLE_COMPILER_PYTHON
        let v142 : string = null |> unbox<string>
        let _v129 = v142 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v145 : string = null |> unbox<string>
        let _v129 = v145 
        #endif
#else
        let v148 : string = v124.LinkTarget
        let _v129 = v148 
        #endif
        let v149 : string = _v129 
        let v154 : std_path_PathBuf = v149 |> unbox<std_path_PathBuf>
        let v157 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v158 : string = "Ok($0)"
        let v159 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v154 v158 
        let _v157 = v159 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v160 : string = "Ok($0)"
        let v161 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v154 v160 
        let _v157 = v161 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v162 : string = "Ok($0)"
        let v163 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v154 v162 
        let _v157 = v163 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v164 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v164 
        #endif
#if FABLE_COMPILER_PYTHON
        let v165 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v165 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v166 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v166 
        #endif
#else
        let v167 : Result<std_path_PathBuf, std_io_Error> = v154 |> Ok
        let _v157 = v167 
        #endif
        let v168 : Result<std_path_PathBuf, std_io_Error> = _v157 
        v168
    else
        let v171 : string = $"file_system.read_link / Fsharp / The file or directory is not a reparse point. / path: {v0} / result: {v98} / path': {v0} / n: {v1}"
        let v172 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v173 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v174 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v171 v173 
        let _v172 = v174 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v175 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v176 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v171 v175 
        let _v172 = v176 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v177 : string = "std::io::Error::new(std::io::ErrorKind::Other, &*$0)"
        let v178 : std_io_Error = Fable.Core.RustInterop.emitRustExpr v171 v177 
        let _v172 = v178 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v179 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v179 
        #endif
#if FABLE_COMPILER_PYTHON
        let v182 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v182 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v185 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v185 
        #endif
#else
        let v188 : std_io_Error = v171 |> unbox<std_io_Error>
        let _v172 = v188 
        #endif
        let v191 : std_io_Error = _v172 
        let v196 : (uint8 -> (string -> Result<std_path_PathBuf, std_io_Error>)) = closure74(v0)
        method161(v0, v196, v1, v191)
and method148 (v0 : string) : Result<std_path_PathBuf, std_io_Error> =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : bool = method32(v0)
    let v7 : Result<std_path_PathBuf, std_io_Error> =
        if v2 then
            let v3 : string = "std::fs::read_link(&*$0)"
            let v4 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v3 
            v4
        else
            let v5 : uint8 = 0uy
            method149(v0, v5)
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v8 : bool = method32(v0)
    let v13 : Result<std_path_PathBuf, std_io_Error> =
        if v8 then
            let v9 : string = "std::fs::read_link(&*$0)"
            let v10 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v9 
            v10
        else
            let v11 : uint8 = 0uy
            method149(v0, v11)
    let _v1 = v13 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v14 : bool = method32(v0)
    let v19 : Result<std_path_PathBuf, std_io_Error> =
        if v14 then
            let v15 : string = "std::fs::read_link(&*$0)"
            let v16 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v15 
            v16
        else
            let v17 : uint8 = 0uy
            method149(v0, v17)
    let _v1 = v19 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v20 : Result<std_path_PathBuf, std_io_Error> = null |> unbox<Result<std_path_PathBuf, std_io_Error>>
    let _v1 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : Result<std_path_PathBuf, std_io_Error> = Unchecked.defaultof<_>
    let _v1 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : uint8 = 0uy
    let v25 : Result<std_path_PathBuf, std_io_Error> = method158(v0, v24)
    let _v1 = v25 
    #endif
#else
    let v26 : uint8 = 0uy
    let v27 : Result<std_path_PathBuf, std_io_Error> = method158(v0, v26)
    let _v1 = v27 
    #endif
    let v28 : Result<std_path_PathBuf, std_io_Error> = _v1 
    v28
and closure76 () (v0 : std_path_PathBuf) : US34 =
    US34_0(v0)
and method162 () : (std_path_PathBuf -> US34) =
    closure76()
and method164 (v0 : string) : string =
    v0
and method163 (v0 : string, v1 : string, v2 : string) : string =
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = $"regex::Regex::new(&$0)"
    let v5 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let v6 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v7 : string = "$0.unwrap()"
    let v8 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v7 
    let _v6 = v8 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v9 : string = "$0.unwrap()"
    let v10 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v9 
    let _v6 = v10 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v11 : string = "$0.unwrap()"
    let v12 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v5 v11 
    let _v6 = v12 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v13 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v13 
    #endif
#if FABLE_COMPILER_PYTHON
    let v14 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v14 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v15 
    #endif
#else
    let v16 : regex_Regex = match v5 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v6 = v16 
    #endif
    let v17 : regex_Regex = _v6 
    let v20 : string = method164(v2)
    let v21 : string = $"$0.replace_all(&*$1, &*$2)"
    let v22 : std_borrow_Cow<Str> = Fable.Core.RustInterop.emitRustExpr struct (v17, v20, v1) v21 
    let v23 : string = "String::from($0)"
    let v24 : std_string_String = Fable.Core.RustInterop.emitRustExpr v22 v23 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v24 v25 
    let _v3 = v26 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v27 : string = null |> unbox<string>
    let _v3 = v27 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v30 : string = null |> unbox<string>
    let _v3 = v30 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : string = null |> unbox<string>
    let _v3 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : string = null |> unbox<string>
    let _v3 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : string = null |> unbox<string>
    let _v3 = v39 
    #endif
#else
    let v42 : string = System.Text.RegularExpressions.Regex.Replace (v2, v0, v1)
    let _v3 = v42 
    #endif
    let v43 : string = _v3 
    v43
and method147 (v0 : string) : string =
    let v1 : bool = v0 = ""
    if v1 then
        let v2 : string = ""
        v2
    else
        let v3 : Result<std_path_PathBuf, std_io_Error> = method148(v0)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "$0.ok()"
        let v6 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v5 
        let _v4 = v6 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let v7 : string = "$0.ok()"
        let v8 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v7 
        let _v4 = v8 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let v9 : string = "$0.ok()"
        let v10 : std_path_PathBuf option = Fable.Core.RustInterop.emitRustExpr v3 v9 
        let _v4 = v10 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let v11 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v11 
        #endif
#if FABLE_COMPILER_PYTHON
        let v12 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v12 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let v13 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v13 
        #endif
#else
        let v14 : std_path_PathBuf option = match v3 with Ok x -> Some x | Error _ -> None
        let _v4 = v14 
        #endif
        let v15 : std_path_PathBuf option = _v4 
        let v18 : (std_path_PathBuf -> US34) = method162()
        let v19 : US34 option = v15 |> Option.map v18 
        let v30 : US34 = US34_1
        let v31 : US34 = v19 |> Option.defaultValue v30 
        let v66 : string =
            match v31 with
            | US34_1 -> (* None *)
                v0
            | US34_0(v35) -> (* Some *)
                let v36 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v37 : string = "$0.display()"
                let v38 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v37 
                let _v36 = v38 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v39 : string = "$0.display()"
                let v40 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v39 
                let _v36 = v40 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v41 : string = "$0.display()"
                let v42 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v35 v41 
                let _v36 = v42 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v43 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v43 
                #endif
#if FABLE_COMPILER_PYTHON
                let v46 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v46 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v49 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v49 
                #endif
#else
                let v52 : std_path_Display = v35 |> unbox<std_path_Display>
                let _v36 = v52 
                #endif
                let v55 : std_path_Display = _v36 
                let v60 : string = v55 |> string 
                let v63 : bool = v60 = ""
                if v63 then
                    v0
                else
                    v60
        let v67 : bool = v66 = ""
        if v67 then
            let v68 : string = ""
            v68
        else
            let v69 : string = "^\\\\\\\\\\?\\\\"
            let v70 : string = ""
            let v71 : string = method163(v69, v70, v66)
            let v72 : string = $"{v71.[0] |> string |> _.ToLower()}{v71.[1..]}"
            let v73 : string = "\\"
            let v74 : string = "/"
            let v75 : string = v72.Replace (v73, v74)
            v75
and method165 (v0 : int32, v1 : Mut6) : bool =
    let v2 : int32 = v1.l0
    let v3 : bool = v2 < v0
    v3
and method166 () : char =
    let v0 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1 : string = "std::path::MAIN_SEPARATOR"
    let v2 : char = Fable.Core.RustInterop.emitRustExpr () v1 
    let _v0 = v2 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v3 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v3 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v4 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v5 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v5 
    #endif
#if FABLE_COMPILER_PYTHON
    let v6 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v6 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v7 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v7 
    #endif
#else
    let v8 : char = System.IO.Path.DirectorySeparatorChar
    let _v0 = v8 
    #endif
    let v9 : char = _v0 
    v9
and method167 (v0 : string) : string =
    v0
and method146 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.exists()"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : bool = v75 = false
    let v232 : string =
        if v76 then
            let v77 : string = method39()
            let v78 : string = method28(v77, v0)
            let v79 : string = method147(v78)
            let v80 : string = "/"
            let v81 : (string []) = v79.Split v80 
            let v84 : (string []) = [||]
            let v85 : int32 = v81.Length
            let v86 : Mut6 = {l0 = 0; l1 = 0; l2 = v84} : Mut6
            while method165(v85, v86) do
                let v88 : int32 = v86.l0
                let v89 : int32 =  -v88
                let v90 : int32 = v89 + v85
                let v91 : int32 = v90 - 1
                let struct (v92 : int32, v93 : (string [])) = v86.l1, v86.l2
                let v94 : string = v81.[int v91]
                let v95 : bool = ".." = v94
                let struct (v139 : int32, v140 : (string [])) =
                    if v95 then
                        let v96 : int32 = v92 + 1
                        struct (v96, v93)
                    else
                        let v97 : bool = "." = v94
                        if v97 then
                            struct (v92, v93)
                        else
                            let v98 : bool = 0 = v92
                            if v98 then
                                let v99 : string = ":"
                                let v100 : bool = v94.EndsWith (v99, false, null)
                                if v100 then
                                    let v103 : string = $"{v77.[0]}:"
                                    let v104 : (string []) = [|v103|]
                                    let v105 : int32 = v104.Length
                                    let v106 : int32 = v93.Length
                                    let v107 : int32 = v105 + v106
                                    let v108 : (string []) = Array.zeroCreate<string> (v107)
                                    let v109 : Mut5 = {l0 = 0} : Mut5
                                    while method72(v107, v109) do
                                        let v111 : int32 = v109.l0
                                        let v112 : bool = v111 < v105
                                        let v116 : string =
                                            if v112 then
                                                let v113 : string = v104.[int v111]
                                                v113
                                            else
                                                let v114 : int32 = v111 - v105
                                                let v115 : string = v93.[int v114]
                                                v115
                                        v108.[int v111] <- v116
                                        let v117 : int32 = v111 + 1
                                        v109.l0 <- v117
                                        ()
                                    struct (0, v108)
                                else
                                    let v118 : (string []) = [|v94|]
                                    let v119 : int32 = v118.Length
                                    let v120 : int32 = v93.Length
                                    let v121 : int32 = v119 + v120
                                    let v122 : (string []) = Array.zeroCreate<string> (v121)
                                    let v123 : Mut5 = {l0 = 0} : Mut5
                                    while method72(v121, v123) do
                                        let v125 : int32 = v123.l0
                                        let v126 : bool = v125 < v119
                                        let v130 : string =
                                            if v126 then
                                                let v127 : string = v118.[int v125]
                                                v127
                                            else
                                                let v128 : int32 = v125 - v119
                                                let v129 : string = v93.[int v128]
                                                v129
                                        v122.[int v125] <- v130
                                        let v131 : int32 = v125 + 1
                                        v123.l0 <- v131
                                        ()
                                    struct (0, v122)
                            else
                                let v134 : int32 = v92 - 1
                                struct (v134, v93)
                let v141 : int32 = v88 + 1
                v86.l0 <- v141
                v86.l1 <- v139
                v86.l2 <- v140
                ()
            let struct (v142 : int32, v143 : (string [])) = v86.l1, v86.l2
            let v144 : unit = ()
            let _v144 =
                seq {
                    for i = 0 to v143.Length - 1 do yield v143.[i]
                    (*
                    ()
                *)
                }
                (*
                ()
            *)
            let v147 : string seq = _v144 
            let v153 : char = method166()
            let v154 : (char -> string) = _.ToString()
            let v155 : string = v154 v153
            let v158 : bool = v155 = "\n"
            let v160 : string =
                if v158 then
                    method167(v155)
                else
                    v155
            let v161 : (string -> (string seq -> string)) = String.concat
            let v162 : (string seq -> string) = v161 v160
            v162 v147
        else
            let v166 : string = "std::fs::canonicalize(&*$0)"
            let v167 : Result<std_path_PathBuf, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v0 v166 
            let v168 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v169 : string = "$0.unwrap()"
            let v170 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v167 v169 
            let _v168 = v170 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v171 : string = "$0.unwrap()"
            let v172 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v167 v171 
            let _v168 = v172 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v173 : string = "$0.unwrap()"
            let v174 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v167 v173 
            let _v168 = v174 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v175 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v168 = v175 
            #endif
#if FABLE_COMPILER_PYTHON
            let v176 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v168 = v176 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v177 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v168 = v177 
            #endif
#else
            let v178 : std_path_PathBuf = match v167 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v168 = v178 
            #endif
            let v179 : std_path_PathBuf = _v168 
            let v182 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v183 : string = "$0.display()"
            let v184 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v179 v183 
            let _v182 = v184 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v185 : string = "$0.display()"
            let v186 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v179 v185 
            let _v182 = v186 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v187 : string = "$0.display()"
            let v188 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v179 v187 
            let _v182 = v188 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v189 : std_path_Display = v179 |> unbox<std_path_Display>
            let _v182 = v189 
            #endif
#if FABLE_COMPILER_PYTHON
            let v192 : std_path_Display = v179 |> unbox<std_path_Display>
            let _v182 = v192 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v195 : std_path_Display = v179 |> unbox<std_path_Display>
            let _v182 = v195 
            #endif
#else
            let v198 : std_path_Display = v179 |> unbox<std_path_Display>
            let _v182 = v198 
            #endif
            let v201 : std_path_Display = _v182 
            let v206 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v207 : string = "format!(\"{}\", $0)"
            let v208 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v207 
            let _v206 = v208 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v209 : string = "format!(\"{}\", $0)"
            let v210 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v209 
            let _v206 = v210 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v211 : string = "format!(\"{}\", $0)"
            let v212 : std_string_String = Fable.Core.RustInterop.emitRustExpr v201 v211 
            let _v206 = v212 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v213 : std_string_String = null |> unbox<std_string_String>
            let _v206 = v213 
            #endif
#if FABLE_COMPILER_PYTHON
            let v216 : std_string_String = null |> unbox<std_string_String>
            let _v206 = v216 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v219 : std_string_String = null |> unbox<std_string_String>
            let _v206 = v219 
            #endif
#else
            let v222 : std_string_String = null |> unbox<std_string_String>
            let _v206 = v222 
            #endif
            let v225 : std_string_String = _v206 
            let v230 : string = "fable_library_rust::String_::fromString($0)"
            let v231 : string = Fable.Core.RustInterop.emitRustExpr v225 v230 
            v231
    let _v1 = v232 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v233 : string = null |> unbox<string>
    let _v1 = v233 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v236 : string = null |> unbox<string>
    let _v1 = v236 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v239 : string = null |> unbox<string>
    let _v1 = v239 
    #endif
#if FABLE_COMPILER_PYTHON
    let v242 : string = null |> unbox<string>
    let _v1 = v242 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v245 : string = null |> unbox<string>
    let _v1 = v245 
    #endif
#else
    let v248 : (string -> string) = System.IO.Path.GetFullPath
    let v249 : string = v248 v0
    let _v1 = v249 
    #endif
    let v250 : string = _v1 
    v250
and method145 (v0 : string) : string =
    let v1 : string = method146(v0)
    method147(v1)
and method144 (v0 : string) : string =
    let v1 : string = method39()
    let v2 : string = method28(v1, v0)
    method145(v2)
and closure68 () (v0 : std_string_String) : string =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    method144(v2)
and method143 () : (std_string_String -> string) =
    closure68()
and method168 () : string =
    let v0 : string = "retries"
    v0
and method169 () : string =
    let v0 : string = "working-directory"
    v0
and method172 (v0 : int32, v1 : string, v2 : string) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v4, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = "exit_code"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v4, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v23 : string = " = "
    let v24 : string = $"{v23}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v4, v24)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v32 : string = $"{v0}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : string = "; "
    let v41 : string = $"{v40}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v4, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v49 : string = "repl_result"
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v58 : string = $"{v23}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v4, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v66 : string = $"{v1}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v4, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v74 : string = $"{v40}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = "retry"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = $"{v23}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v4, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v99 : string = $"{v2}"
    let v102 : unit = ()
    let v103 : (unit -> unit) = closure7(v4, v99)
    let v104 : unit = (fun () -> v103 (); v102) ()
    let v107 : string = " }"
    let v108 : string = $"{v107}"
    let v111 : unit = ()
    let v112 : (unit -> unit) = closure7(v4, v108)
    let v113 : unit = (fun () -> v112 (); v111) ()
    let v116 : string = v4.l0
    v116
and method171 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string) : string =
    let v11 : string = method172(v8, v9, v10)
    let v12 : int64 = v0.l0
    let v13 : string = "spiral_builder.run / repl error"
    let v14 : string = $"{v6} {v7} #{v12} %s{v13} / {v11}"
    method18(v14)
and closure77 (v0 : uint8, v1 : uint8, v2 : string, v3 : int32) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method12()
        let v42 : string = $"{v1}/{v0}"
        let v43 : string = method171(v22, v23, v24, v25, v26, v27, v40, v41, v3, v2, v42)
        method19(v43)
and method170 (v0 : US5, v1 : uint8, v2 : string, v3 : uint8) : struct (int32 * string) =
    let v4 : System.Threading.CancellationToken option = None
    let v5 : (struct (string * string) []) = [||]
    let v6 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v7 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v8 : string option = None
    let v9 : string = $"dotnet repl --exit-after-run --run \"{v2}\" --output-path \"{v2}.ipynb\""
    let v10 : string = "TRACE_LEVEL"
    let v11 : string = "Verbose"
    let v12 : string = "AUTOMATION"
    let v13 : string = "True"
    let v14 : (struct (string * string) []) = [|struct (v10, v11); struct (v12, v13)|]
    let v21 : string option =
        match v0 with
        | US5_1 -> (* None *)
            let v19 : string option = None
            v19
        | US5_0(v15) -> (* Some *)
            let v16 : string option = Some v15 
            v16
    let v22 : bool = false
    let struct (v23 : int32, v24 : string) = method68(v9, v4, v14, v6, v7, v22, v21)
    let v25 : bool = v23 = 0
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v3 >= v1
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure77(v1, v3, v24, v23)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v71 : uint8 = v3 + 1uy
        method170(v0, v1, v2, v71)
and method174 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "jupyter_result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method173 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method174(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / dib / jupyter nbconvert"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure78 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method173(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method176 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "pwsh_replace_html_result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method175 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method176(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / dib / html cell ids"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure79 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method175(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method178 (v0 : int32, v1 : int32) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "result_length"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method177 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : int32) : string =
    let v10 : string = method178(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / dib"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure80 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : int32 = v0.Length
        let v41 : string = method177(v20, v21, v22, v23, v24, v25, v38, v39, v1, v40)
        method19(v41)
and method179 () : string =
    let v0 : string = "cleanup"
    v0
and method180 () : string =
    let v0 : string = "wasm"
    v0
and method181 () : string =
    let v0 : string = "contract"
    v0
and method182 (v0 : string, v1 : string, v2 : US35) : string =
    let v3 : string = method14()
    let v4 : Mut3 = {l0 = v3} : Mut3
    let v5 : string = "{ "
    let v6 : string = $"{v5}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v4, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = "extension"
    let v15 : string = $"{v14}"
    let v18 : unit = ()
    let v19 : (unit -> unit) = closure7(v4, v15)
    let v20 : unit = (fun () -> v19 (); v18) ()
    let v23 : string = " = "
    let v24 : string = $"{v23}"
    let v27 : unit = ()
    let v28 : (unit -> unit) = closure7(v4, v24)
    let v29 : unit = (fun () -> v28 (); v27) ()
    let v32 : string = $"{v0}"
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure7(v4, v32)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v40 : string = "; "
    let v41 : string = $"{v40}"
    let v44 : unit = ()
    let v45 : (unit -> unit) = closure7(v4, v41)
    let v46 : unit = (fun () -> v45 (); v44) ()
    let v49 : string = "code"
    let v50 : string = $"{v49}"
    let v53 : unit = ()
    let v54 : (unit -> unit) = closure7(v4, v50)
    let v55 : unit = (fun () -> v54 (); v53) ()
    let v58 : string = $"{v23}"
    let v61 : unit = ()
    let v62 : (unit -> unit) = closure7(v4, v58)
    let v63 : unit = (fun () -> v62 (); v61) ()
    let v66 : string = $"{v1}"
    let v69 : unit = ()
    let v70 : (unit -> unit) = closure7(v4, v66)
    let v71 : unit = (fun () -> v70 (); v69) ()
    let v74 : string = $"{v40}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v4, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = "runtime"
    let v83 : string = $"{v82}"
    let v86 : unit = ()
    let v87 : (unit -> unit) = closure7(v4, v83)
    let v88 : unit = (fun () -> v87 (); v86) ()
    let v91 : string = $"{v23}"
    let v94 : unit = ()
    let v95 : (unit -> unit) = closure7(v4, v91)
    let v96 : unit = (fun () -> v95 (); v94) ()
    let v99 : string = $"%A{v2}"
    let v102 : string = $"{v99}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v4, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v110 : string = " }"
    let v111 : string = $"{v110}"
    let v114 : unit = ()
    let v115 : (unit -> unit) = closure7(v4, v111)
    let v116 : unit = (fun () -> v115 (); v114) ()
    let v119 : string = v4.l0
    v119
and method184 () : string =
    let v0 : string = ""
    v0
and method185 () : string =
    let v0 : string = ""
    v0
and method183 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v3 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v4 : (string -> (uint8 [])) = v3 v2
    let v5 : (uint8 []) = v4 v0
    let v6 : string = "$0.to_vec()"
    let v7 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v5 v6 
    let v8 : string = "std::io::Cursor::new(v7)"
    let v9 : std_io_Cursor<Vec<uint8>> = Fable.Core.RustInterop.emitRustExpr () v8 
    let v10 : string = "std::io::BufReader::new($0)"
    let v11 : std_io_BufReader<std_io_Cursor<Vec<uint8>>> = Fable.Core.RustInterop.emitRustExpr v9 v10 
    let v12 : string = "true; let mut v11 = v11"
    let v13 : bool = Fable.Core.RustInterop.emitRustExpr () v12 
    let v14 : string = "let result : sha2::Sha256 = sha2::Digest::new()"
    Fable.Core.RustInterop.emitRustExpr () v14 
    let v15 : string = "result"
    let v16 : sha2_Sha256 = Fable.Core.RustInterop.emitRustExpr () v15 
    let v17 : string = "true; let mut v16 = v16"
    let v18 : bool = Fable.Core.RustInterop.emitRustExpr () v17 
    let v19 : unativeint = 0 |> unativeint 
    let v22 : string = "[$0; 1024]"
    let v23 : Slice'<uint8> = Fable.Core.RustInterop.emitRustExpr 0uy v22 
    let v24 : string = "true; loop { // rust.loop"
    let v25 : bool = Fable.Core.RustInterop.emitRustExpr () v24 
    let v26 : string = "true; let mut v23 = v23"
    let v27 : bool = Fable.Core.RustInterop.emitRustExpr () v26 
    let v28 : string = "std::io::Read::read(&mut v11, &mut v23)"
    let v29 : Result<unativeint, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v28 
    let v30 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v31 : string = "$0.unwrap()"
    let v32 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v31 
    let _v30 = v32 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v33 : string = "$0.unwrap()"
    let v34 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v33 
    let _v30 = v34 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v35 : string = "$0.unwrap()"
    let v36 : unativeint = Fable.Core.RustInterop.emitRustExpr v29 v35 
    let _v30 = v36 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v37 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v37 
    #endif
#if FABLE_COMPILER_PYTHON
    let v38 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v38 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v39 
    #endif
#else
    let v40 : unativeint = match v29 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v30 = v40 
    #endif
    let v41 : unativeint = _v30 
    let v44 : bool = v41 = v19 
    if v44 then
        let v47 : string = "true; break"
        let v48 : bool = Fable.Core.RustInterop.emitRustExpr () v47 
        ()
    let v49 : unativeint = v41 |> unativeint 
    let v52 : unativeint = v49 |> unbox<unativeint>
    let v55 : string = "v23.len()"
    let v56 : unativeint = Fable.Core.RustInterop.emitRustExpr () v55 
    let v57 : bool = v52 = v56 
    let v64 : Ref<Slice'<uint8>> =
        if v57 then
            let v60 : string = "&v23[v19..]"
            let v61 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr () v60 
            v61
        else
            let v62 : string = "&v23[$0..$1]"
            let v63 : Ref<Slice'<uint8>> = Fable.Core.RustInterop.emitRustExpr struct (v19, v49) v62 
            v63
    let v65 : string = "sha2::Digest::update(&mut v16, v64)"
    Fable.Core.RustInterop.emitRustExpr () v65 
    let v66 : string = "true; } // rust.loop"
    let v67 : bool = Fable.Core.RustInterop.emitRustExpr () v66 
    let v68 : string = "true; } // rust.loop"
    let v69 : bool = Fable.Core.RustInterop.emitRustExpr () v68 
    let v70 : string = "true; } // rust.loop"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "true; { // rust.loop"
    let v73 : bool = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "true; { // rust.loop"
    let v75 : bool = Fable.Core.RustInterop.emitRustExpr () v74 
    let v76 : string = "&sha2::Digest::finalize(v16)"
    let v77 : Ref<Slice<uint8>> = Fable.Core.RustInterop.emitRustExpr () v76 
    let v78 : string = "$0.iter().map(|x| *x).collect::<Vec<_>>()"
    let v79 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v77 v78 
    let v80 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
    let v81 : bool = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "x"
    let v83 : uint8 = Fable.Core.RustInterop.emitRustExpr () v82 
    let v84 : string = "format!(\"{:02x}\", $0)"
    let v85 : std_string_String = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : string = "fable_library_rust::String_::fromString($0)"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v85 v86 
    let v88 : string = "true; $0 }).collect::<Vec<_>>()"
    let v89 : bool = Fable.Core.RustInterop.emitRustExpr v87 v88 
    let v90 : string = "_vec_map"
    let v91 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v90 
    let v92 : string = "fable_library_rust::NativeArray_::array_from($0)"
    let v93 : (string []) = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : unit = ()
    let _v94 =
        seq {
            for i = 0 to v93.Length - 1 do yield v93.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v97 : string seq = _v94 
    let v103 : string = method184()
    let v104 : bool = v103 = "\n"
    let v106 : string =
        if v104 then
            method167(v103)
        else
            v103
    let v107 : (string -> (string seq -> string)) = String.concat
    let v108 : (string seq -> string) = v107 v106
    let v109 : string = v108 v97
    let v112 : Result<string, std_io_Error> = Ok v109 
    let v113 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v114 : string = "$0.unwrap()"
    let v115 : string = Fable.Core.RustInterop.emitRustExpr v112 v114 
    let _v113 = v115 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v116 : string = "$0.unwrap()"
    let v117 : string = Fable.Core.RustInterop.emitRustExpr v112 v116 
    let _v113 = v117 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v118 : string = "$0.unwrap()"
    let v119 : string = Fable.Core.RustInterop.emitRustExpr v112 v118 
    let _v113 = v119 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v120 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v113 = v120 
    #endif
#if FABLE_COMPILER_PYTHON
    let v121 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v113 = v121 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v122 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v113 = v122 
    #endif
#else
    let v123 : string = match v112 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v113 = v123 
    #endif
    let v124 : string = _v113 
    let _v1 = v124 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v127 : string = null |> unbox<string>
    let _v1 = v127 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v130 : string = null |> unbox<string>
    let _v1 = v130 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v133 : string = "crypto"
    let v134 : ICryptoCreateHash = Fable.Core.JsInterop.importAll v133 
    let v135 : string = "v134.createHash($0)"
    let v136 : string = "sha256"
    let v137 : obj = Fable.Core.JsInterop.emitJsExpr v136 v135 
    let v138 : string = "$0.update($1, 'utf8')"
    let v139 : obj = Fable.Core.JsInterop.emitJsExpr struct (v137, v0) v138 
    let v140 : string = "$0.digest($1)"
    let v141 : string = "hex"
    let v142 : string = Fable.Core.JsInterop.emitJsExpr struct (v139, v141) v140 
    let _v1 = v142 
    #endif
#if FABLE_COMPILER_PYTHON
    let v143 : string = "hashlib"
    let v144 : IHashlibSha256 = Fable.Core.PyInterop.importAll v143 
    let v145 : string = "v144.sha256()"
    let v146 : obj = Fable.Core.PyInterop.emitPyExpr () v145 
    let v149 : string = "$0.encode($1)"
    let v150 : string = "utf-8"
    let v151 : string = Fable.Core.PyInterop.emitPyExpr struct (v0, v150) v149 
    let v154 : string = "v146.update($0)"
    Fable.Core.PyInterop.emitPyExpr v151 v154 
    let v155 : string = "v146.hexdigest()"
    let v156 : string = Fable.Core.PyInterop.emitPyExpr () v155 
    let _v1 = v156 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v159 : string = null |> unbox<string>
    let _v1 = v159 
    #endif
#else
    let v162 : (unit -> System.Security.Cryptography.SHA256) = System.Security.Cryptography.SHA256.Create
    let v163 : System.Security.Cryptography.SHA256 = v162 ()
    use v163 = v163 
    let v164 : System.Security.Cryptography.SHA256 = v163 
    let v165 : System.Text.Encoding = System.Text.Encoding.UTF8
    let v166 : (System.Text.Encoding -> (string -> (uint8 []))) = _.GetBytes
    let v167 : (string -> (uint8 [])) = v166 v165
    let v168 : (uint8 []) = v167 v0
    let v169 : ((uint8 []) -> (uint8 [])) = v164.ComputeHash
    let v170 : (uint8 []) = v169 v168
    let v171 : int32 = v170.Length
    let v172 : (string []) = Array.zeroCreate<string> (v171)
    let v173 : Mut5 = {l0 = 0} : Mut5
    while method72(v171, v173) do
        let v175 : int32 = v173.l0
        let v176 : uint8 = v170.[int v175]
        let v177 : (string -> string) = v176.ToString
        let v178 : string = "x2"
        let v179 : string = v177 v178
        v172.[int v175] <- v179
        let v180 : int32 = v175 + 1
        v173.l0 <- v180
        ()
    let v181 : unit = ()
    let _v181 =
        seq {
            for i = 0 to v172.Length - 1 do yield v172.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v184 : string seq = _v181 
    let v190 : string = method185()
    let v191 : bool = v190 = "\n"
    let v193 : string =
        if v191 then
            method167(v190)
        else
            v190
    let v194 : (string -> (string seq -> string)) = String.concat
    let v195 : (string seq -> string) = v194 v193
    let v196 : string = v195 v184
    let _v1 = v196 
    #endif
    let v199 : string = _v1 
    v199
and method186 (v0 : US5, v1 : string, v2 : US38, v3 : string) : string =
    let v4 : string = "target/spiral_builder"
    let v5 : string = method28(v3, v4)
    let v6 : string = method28(v5, v1)
    match v0 with
    | US5_0(v7) -> (* Some *)
        match v2 with
        | US38_0(v8) -> (* Some *)
            let v9 : string = "packages"
            let v10 : string = method28(v6, v9)
            
            
            
            let v11 : bool =
                match v8 with
                | US37_0 -> (* Rust *)
                    true
                | _ ->
                    false
            let v15 : US5 =
                if v11 then
                    let v12 : string = "Rust"
                    US5_0(v12)
                else
                    US5_1
            let v38 : US5 =
                match v15 with
                | US5_1 -> (* None *)
                    let v18 : bool =
                        match v8 with
                        | US37_1 -> (* TypeScript *)
                            true
                        | _ ->
                            false
                    let v22 : US5 =
                        if v18 then
                            let v19 : string = "TypeScript"
                            US5_0(v19)
                        else
                            US5_1
                    match v22 with
                    | US5_1 -> (* None *)
                        let v25 : bool =
                            match v8 with
                            | US37_2 -> (* Python *)
                                true
                            | _ ->
                                false
                        let v29 : US5 =
                            if v25 then
                                let v26 : string = "Python"
                                US5_0(v26)
                            else
                                US5_1
                        match v29 with
                        | US5_1 -> (* None *)
                            US5_1
                        | US5_0(v30) -> (* Some *)
                            US5_0(v30)
                    | US5_0(v23) -> (* Some *)
                        US5_0(v23)
                | US5_0(v16) -> (* Some *)
                    US5_0(v16)
            let v42 : string =
                match v38 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v39) -> (* Some *)
                    v39
            let v43 : string = method28(v10, v42)
            method28(v43, v7)
        | _ ->
            v6
    | _ ->
        v6
and method188 (v0 : string, v1 : UH2, v2 : UH2) : UH2 =
    match v1 with
    | UH2_1(v3, v4) -> (* Cons *)
        let v5 : UH2 = method188(v0, v4, v2)
        let v6 : string = method28(v0, v3)
        let v7 : string = $"<Compile Include=\"{v6}\" />"
        UH2_1(v7, v5)
    | UH2_0 -> (* Nil *)
        v2
and method189 (v0 : UH2, v1 : UH2) : UH2 =
    match v0 with
    | UH2_1(v2, v3) -> (* Cons *)
        let v4 : UH2 = method189(v3, v1)
        let v5 : string = $"<PackageReference Include=\"{v2}\" Version=\"*\" />"
        UH2_1(v5, v4)
    | UH2_0 -> (* Nil *)
        v1
and method187 (v0 : string, v1 : string, v2 : UH2, v3 : UH2, v4 : string, v5 : string) : string =
    let v6 : System.IDisposable = method44(v4)
    let v7 : string = $"{v1}.fs"
    let v8 : string = method28(v4, v7)
    let v9 : string = method147(v8)
    method41(v9, v0)
    let v10 : UH2 = UH2_0
    let v11 : UH2 = method188(v5, v2, v10)
    let v12 : string list = []
    let v13 : string list = method91(v11, v12)
    let v14 : unit = ()
    let _v14 =
        seq {
            for i = 0 to v13.Length - 1 do yield v13.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v17 : string seq = _v14 
    let v23 : (string -> (string seq -> string)) = String.concat
    let v24 : string = "\\n        "
    let v25 : (string seq -> string) = v23 v24
    let v26 : string = v25 v17
    let v29 : UH2 = UH2_0
    let v30 : UH2 = method189(v3, v29)
    let v31 : string list = []
    let v32 : string list = method91(v30, v31)
    let v33 : unit = ()
    let _v33 =
        seq {
            for i = 0 to v32.Length - 1 do yield v32.[i]
            (*
            ()
        *)
        }
        (*
        ()
    *)
    let v36 : string seq = _v33 
    let v42 : (string -> (string seq -> string)) = String.concat
    let v43 : (string seq -> string) = v42 v24
    let v44 : string = v43 v36
    let v47 : string = $"{v1}.fsproj"
    let v48 : string = method28(v4, v47)
    let v49 : string = method147(v48)
    let v50 : string = $"<Project Sdk=\"Microsoft.NET.Sdk\">"
    let v51 : string = $"<PropertyGroup>"
    let v52 : string = "\n"
    let v53 : string = v50 + v52 
    let v54 : string = v53 + v51 
    let v55 : string = $"    <TargetFramework>net9.0</TargetFramework>"
    let v56 : string = v54 + v52 
    let v57 : string = v56 + v55 
    let v58 : string = $"    <LangVersion>preview</LangVersion>"
    let v59 : string = v57 + v52 
    let v60 : string = v59 + v58 
    let v61 : string = $"    <RollForward>Major</RollForward>"
    let v62 : string = v60 + v52 
    let v63 : string = v62 + v61 
    let v64 : string = $"    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>"
    let v65 : string = v63 + v52 
    let v66 : string = v65 + v64 
    let v67 : string = $"    <PublishAot>false</PublishAot>"
    let v68 : string = v66 + v52 
    let v69 : string = v68 + v67 
    let v70 : string = $"    <PublishTrimmed>false</PublishTrimmed>"
    let v71 : string = v69 + v52 
    let v72 : string = v71 + v70 
    let v73 : string = $"    <PublishSingleFile>true</PublishSingleFile>"
    let v74 : string = v72 + v52 
    let v75 : string = v74 + v73 
    let v76 : string = $"    <SelfContained>true</SelfContained>"
    let v77 : string = v75 + v52 
    let v78 : string = v77 + v76 
    let v79 : string = $"    <Version>0.0.1-alpha.1</Version>"
    let v80 : string = v78 + v52 
    let v81 : string = v80 + v79 
    let v82 : string = $"    <OutputType>Exe</OutputType>"
    let v83 : string = v81 + v52 
    let v84 : string = v83 + v82 
    let v85 : string = $"</PropertyGroup>"
    let v86 : string = v84 + v52 
    let v87 : string = v86 + v85 
    let v88 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('FreeBSD'))\">"
    let v89 : string = v87 + v52 
    let v90 : string = v89 + v88 
    let v91 : string = $"    <DefineConstants>_FREEBSD</DefineConstants>"
    let v92 : string = v90 + v52 
    let v93 : string = v92 + v91 
    let v94 : string = $"</PropertyGroup>"
    let v95 : string = v93 + v52 
    let v96 : string = v95 + v94 
    let v97 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">"
    let v98 : string = v96 + v52 
    let v99 : string = v98 + v97 
    let v100 : string = $"    <DefineConstants>_LINUX</DefineConstants>"
    let v101 : string = v99 + v52 
    let v102 : string = v101 + v100 
    let v103 : string = $"</PropertyGroup>"
    let v104 : string = v102 + v52 
    let v105 : string = v104 + v103 
    let v106 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">"
    let v107 : string = v105 + v52 
    let v108 : string = v107 + v106 
    let v109 : string = $"    <DefineConstants>_OSX</DefineConstants>"
    let v110 : string = v108 + v52 
    let v111 : string = v110 + v109 
    let v112 : string = $"</PropertyGroup>"
    let v113 : string = v111 + v52 
    let v114 : string = v113 + v112 
    let v115 : string = $"<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">"
    let v116 : string = v114 + v52 
    let v117 : string = v116 + v115 
    let v118 : string = $"    <DefineConstants>_WINDOWS</DefineConstants>"
    let v119 : string = v117 + v52 
    let v120 : string = v119 + v118 
    let v121 : string = $"</PropertyGroup>"
    let v122 : string = v120 + v52 
    let v123 : string = v122 + v121 
    let v124 : string = $"<ItemGroup>"
    let v125 : string = v123 + v52 
    let v126 : string = v125 + v124 
    let v127 : string = $"    {v26}"
    let v128 : string = v126 + v52 
    let v129 : string = v128 + v127 
    let v130 : string = $"    <Compile Include=\"{v9}\" />"
    let v131 : string = v129 + v52 
    let v132 : string = v131 + v130 
    let v133 : string = $"</ItemGroup>"
    let v134 : string = v132 + v52 
    let v135 : string = v134 + v133 
    let v136 : string = $"<ItemGroup>"
    let v137 : string = v135 + v52 
    let v138 : string = v137 + v136 
    let v139 : string = $"    {v44}"
    let v140 : string = v138 + v52 
    let v141 : string = v140 + v139 
    let v142 : string = $"</ItemGroup>"
    let v143 : string = v141 + v52 
    let v144 : string = v143 + v142 
    let v145 : string = $"</Project>"
    let v146 : string = v144 + v52 
    let v147 : string = v146 + v145 
    method41(v49, v147)
    v49
and closure81 () (v0 : chrono_DateTime<chrono_Utc>) : US39 =
    US39_0(v0)
and method191 () : (chrono_DateTime<chrono_Utc> -> US39) =
    closure81()
and method192 () : string =
    let v0 : string = "hh:mm"
    v0
and method193 () : string =
    let v0 : string = "yyyyMMdd-HHmm-ssff-ffff-f"
    v0
and method194 () : string =
    let v0 : string = "hhmm"
    v0
and method190 (v0 : System.Guid, v1 : System.DateTime) : System.Guid =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : System.DateTime = System.DateTime.UnixEpoch
    let v6 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v7 : System.DateTime = v6 v3
    let v10 : System.DateTimeKind = System.DateTimeKind.Local
    let v11 : System.DateTime = System.DateTime.SpecifyKind (v1, v10)
    let v14 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v15 : System.DateTime = v14 v11
    let v18 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v19 : (System.DateTime -> int64) = _.Ticks
    let v20 : int64 = v19 v15
    let _v18 = v20 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v21 : (System.DateTime -> int64) = _.Ticks
    let v22 : int64 = v21 v15
    let _v18 = v22 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v23 : int64 = null |> unbox<int64>
    let _v18 = v23 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v26 : (System.DateTime -> int64) = _.Ticks
    let v27 : int64 = v26 v15
    let _v18 = v27 
    #endif
#if FABLE_COMPILER_PYTHON
    let v28 : (System.DateTime -> int64) = _.Ticks
    let v29 : int64 = v28 v15
    let _v18 = v29 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v30 : (System.DateTime -> int64) = _.Ticks
    let v31 : int64 = v30 v15
    let _v18 = v31 
    #endif
#else
    let v32 : (System.DateTime -> int64) = _.Ticks
    let v33 : int64 = v32 v15
    let _v18 = v33 
    #endif
    let v34 : int64 = _v18 
    let v51 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v52 : (System.DateTime -> int64) = _.Ticks
    let v53 : int64 = v52 v7
    let _v51 = v53 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v54 : (System.DateTime -> int64) = _.Ticks
    let v55 : int64 = v54 v7
    let _v51 = v55 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v56 : int64 = null |> unbox<int64>
    let _v51 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v59 : (System.DateTime -> int64) = _.Ticks
    let v60 : int64 = v59 v7
    let _v51 = v60 
    #endif
#if FABLE_COMPILER_PYTHON
    let v61 : (System.DateTime -> int64) = _.Ticks
    let v62 : int64 = v61 v7
    let _v51 = v62 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : (System.DateTime -> int64) = _.Ticks
    let v64 : int64 = v63 v7
    let _v51 = v64 
    #endif
#else
    let v65 : (System.DateTime -> int64) = _.Ticks
    let v66 : int64 = v65 v7
    let _v51 = v66 
    #endif
    let v67 : int64 = _v51 
    let v84 : int64 = v34 |> int64 
    let v87 : int64 = v67 |> int64 
    let v90 : int64 = v84 - v87
    let v91 : int64 = v90 / 10L
    let v92 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v93 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v91 v92 
    let v94 : (chrono_DateTime<chrono_Utc> -> US39) = method191()
    let v95 : US39 option = v93 |> Option.map v94 
    let v106 : US39 = US39_1
    let v107 : US39 = v95 |> Option.defaultValue v106 
    let v127 : US5 =
        match v107 with
        | US39_1 -> (* None *)
            US5_1
        | US39_0(v111) -> (* Some *)
            let v112 : string = "$0.naive_utc()"
            let v113 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v111 v112 
            let v114 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v115 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v113 v114 
            let v116 : string = "%Y%m%d-%H%M-%S%f"
            let v117 : string = "r#\"" + v116 + "\"#"
            let v118 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v117 
            let v119 : string = "$0.format($1).to_string()"
            let v120 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v115, v118) v119 
            let v121 : string = "fable_library_rust::String_::fromString($0)"
            let v122 : string = Fable.Core.RustInterop.emitRustExpr v120 v121 
            let v123 : string = $"{v122.[0..17]}-{v122.[18..21]}-{v122.[22]}"
            US5_0(v123)
    let v131 : string =
        match v127 with
        | US5_1 -> (* None *)
            let v129 : string = ""
            v129
        | US5_0(v128) -> (* Some *)
            v128
    let v132 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v133 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v134 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v133 
    let _v132 = v134 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v135 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v135 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v138 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v138 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v141 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v141 
    #endif
#if FABLE_COMPILER_PYTHON
    let v144 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v132 = v144 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v147 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v132 = v147 
    #endif
#else
    let v148 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v132 = v148 
    #endif
    let v149 : System.TimeZoneInfo = _v132 
    let v154 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v155 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v156 : (System.DateTime -> int64) = _.Ticks
    let v157 : int64 = v156 v15
    let _v155 = v157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v158 : (System.DateTime -> int64) = _.Ticks
    let v159 : int64 = v158 v15
    let _v155 = v159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v160 : int64 = null |> unbox<int64>
    let _v155 = v160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v163 : (System.DateTime -> int64) = _.Ticks
    let v164 : int64 = v163 v15
    let _v155 = v164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v165 : (System.DateTime -> int64) = _.Ticks
    let v166 : int64 = v165 v15
    let _v155 = v166 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v167 : (System.DateTime -> int64) = _.Ticks
    let v168 : int64 = v167 v15
    let _v155 = v168 
    #endif
#else
    let v169 : (System.DateTime -> int64) = _.Ticks
    let v170 : int64 = v169 v15
    let _v155 = v170 
    #endif
    let v171 : int64 = _v155 
    let v188 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v189 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v15, v171) v188 
    let v190 : System.TimeSpan = v189 |> System.TimeSpan 
    let _v154 = v190 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v193 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v194 : (System.DateTime -> int64) = _.Ticks
    let v195 : int64 = v194 v15
    let _v193 = v195 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v196 : (System.DateTime -> int64) = _.Ticks
    let v197 : int64 = v196 v15
    let _v193 = v197 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v198 : int64 = null |> unbox<int64>
    let _v193 = v198 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v201 : (System.DateTime -> int64) = _.Ticks
    let v202 : int64 = v201 v15
    let _v193 = v202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v203 : (System.DateTime -> int64) = _.Ticks
    let v204 : int64 = v203 v15
    let _v193 = v204 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v205 : (System.DateTime -> int64) = _.Ticks
    let v206 : int64 = v205 v15
    let _v193 = v206 
    #endif
#else
    let v207 : (System.DateTime -> int64) = _.Ticks
    let v208 : int64 = v207 v15
    let _v193 = v208 
    #endif
    let v209 : int64 = _v193 
    let v226 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v227 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v15, v209) v226 
    let v228 : System.TimeSpan = v227 |> System.TimeSpan 
    let _v154 = v228 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v231 : US3 = US3_2
    let v232 : US4 = US4_2(v231)
    let v233 : string = $"date_time.get_utc_offset / target: {v232}"
    let v234 : System.TimeSpan = failwith<System.TimeSpan> v233
    let _v154 = v234 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v237 : US3 = US3_0
    let v238 : US4 = US4_3(v237)
    let v239 : string = $"date_time.get_utc_offset / target: {v238}"
    let v240 : System.TimeSpan = failwith<System.TimeSpan> v239
    let _v154 = v240 
    #endif
#if FABLE_COMPILER_PYTHON
    let v243 : US3 = US3_0
    let v244 : US4 = US4_4(v243)
    let v245 : string = $"date_time.get_utc_offset / target: {v244}"
    let v246 : System.TimeSpan = failwith<System.TimeSpan> v245
    let _v154 = v246 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v249 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v250 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v251 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v252 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v251 
    let _v250 = v252 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v253 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v253 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v256 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v256 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v259 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v259 
    #endif
#if FABLE_COMPILER_PYTHON
    let v262 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v250 = v262 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v265 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v250 = v265 
    #endif
#else
    let v266 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v250 = v266 
    #endif
    let v267 : System.TimeZoneInfo = _v250 
    let v272 : (System.DateTime -> System.TimeSpan) = v249 v267
    let v273 : System.TimeSpan = v272 v15
    let _v154 = v273 
    #endif
#else
    let v274 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v275 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v276 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v277 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v276 
    let _v275 = v277 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v278 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v278 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v281 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v281 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v284 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v284 
    #endif
#if FABLE_COMPILER_PYTHON
    let v287 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v275 = v287 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v290 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v275 = v290 
    #endif
#else
    let v291 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v275 = v291 
    #endif
    let v292 : System.TimeZoneInfo = _v275 
    let v297 : (System.DateTime -> System.TimeSpan) = v274 v292
    let v298 : System.TimeSpan = v297 v15
    let _v154 = v298 
    #endif
    let v299 : System.TimeSpan = _v154 
    let v307 : (System.TimeSpan -> int32) = _.Hours
    let v308 : int32 = v307 v299
    let v311 : bool = v308 > 0
    let v312 : uint8 =
        if v311 then
            1uy
        else
            0uy
    let v313 : string = method192()
    let v314 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v315 : string = v299.ToString v313 
    let _v314 = v315 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v318 : string = v299.ToString v313 
    let _v314 = v318 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v321 : string = v299.ToString v313 
    let _v314 = v321 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v324 : string = v299.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v314 = v324 
    #endif
#if FABLE_COMPILER_PYTHON
    let v325 : string = v299.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v314 = v325 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v326 : string = v299.ToString v313 
    let _v314 = v326 
    #endif
#else
    let v329 : string = v299.ToString v313 
    let _v314 = v329 
    #endif
    let v332 : string = _v314 
    let v337 : string = $"{v312}{v332.[0..1]}{v332.[3..4]}"
    let v338 : (System.Guid -> string) = _.ToString()
    let v339 : string = v338 v0
    let v342 : int32 = v131.Length
    let v343 : int32 = v337.Length
    let v344 : int32 = v342 + v343
    let v345 : (string -> int32) = String.length
    let v346 : int32 = v345 v339
    let v349 : int32 = v344 |> int32 
    let v356 : int32 = v346 |> int32 
    let v363 : int32 = v356 - 1
    let v364 : string = v339.[int v349..int v363]
    let v368 : string = $"{v131}{v337}{v364}"
    let v369 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v370 : System.Guid = v368 |> System.Guid 
    let _v369 = v370 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v373 : System.Guid = v368 |> System.Guid 
    let _v369 = v373 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v376 : System.Guid = null |> unbox<System.Guid>
    let _v369 = v376 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v379 : System.Guid = v368 |> System.Guid 
    let _v369 = v379 
    #endif
#if FABLE_COMPILER_PYTHON
    let v382 : System.Guid = v368 |> System.Guid 
    let _v369 = v382 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v385 : System.Guid = v368 |> System.Guid 
    let _v369 = v385 
    #endif
#else
    let v388 : System.Guid = v368 |> System.Guid 
    let _v369 = v388 
    #endif
    let v391 : System.Guid = _v369 
    let _v2 = v391 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v396 : System.DateTime = System.DateTime.UnixEpoch
    let v399 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v400 : System.DateTime = v399 v396
    let v403 : System.DateTimeKind = System.DateTimeKind.Local
    let v404 : System.DateTime = System.DateTime.SpecifyKind (v1, v403)
    let v407 : (System.DateTime -> System.DateTime) = _.ToUniversalTime()
    let v408 : System.DateTime = v407 v404
    let v411 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v412 : (System.DateTime -> int64) = _.Ticks
    let v413 : int64 = v412 v408
    let _v411 = v413 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v414 : (System.DateTime -> int64) = _.Ticks
    let v415 : int64 = v414 v408
    let _v411 = v415 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v416 : int64 = null |> unbox<int64>
    let _v411 = v416 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v419 : (System.DateTime -> int64) = _.Ticks
    let v420 : int64 = v419 v408
    let _v411 = v420 
    #endif
#if FABLE_COMPILER_PYTHON
    let v421 : (System.DateTime -> int64) = _.Ticks
    let v422 : int64 = v421 v408
    let _v411 = v422 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v423 : (System.DateTime -> int64) = _.Ticks
    let v424 : int64 = v423 v408
    let _v411 = v424 
    #endif
#else
    let v425 : (System.DateTime -> int64) = _.Ticks
    let v426 : int64 = v425 v408
    let _v411 = v426 
    #endif
    let v427 : int64 = _v411 
    let v444 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v445 : (System.DateTime -> int64) = _.Ticks
    let v446 : int64 = v445 v400
    let _v444 = v446 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v447 : (System.DateTime -> int64) = _.Ticks
    let v448 : int64 = v447 v400
    let _v444 = v448 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v449 : int64 = null |> unbox<int64>
    let _v444 = v449 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v452 : (System.DateTime -> int64) = _.Ticks
    let v453 : int64 = v452 v400
    let _v444 = v453 
    #endif
#if FABLE_COMPILER_PYTHON
    let v454 : (System.DateTime -> int64) = _.Ticks
    let v455 : int64 = v454 v400
    let _v444 = v455 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v456 : (System.DateTime -> int64) = _.Ticks
    let v457 : int64 = v456 v400
    let _v444 = v457 
    #endif
#else
    let v458 : (System.DateTime -> int64) = _.Ticks
    let v459 : int64 = v458 v400
    let _v444 = v459 
    #endif
    let v460 : int64 = _v444 
    let v477 : int64 = v427 |> int64 
    let v480 : int64 = v460 |> int64 
    let v483 : int64 = v477 - v480
    let v484 : int64 = v483 / 10L
    let v485 : string = "chrono::DateTime::from_timestamp_micros($0)"
    let v486 : chrono_DateTime<chrono_Utc> option = Fable.Core.RustInterop.emitRustExpr v484 v485 
    let v487 : (chrono_DateTime<chrono_Utc> -> US39) = method191()
    let v488 : US39 option = v486 |> Option.map v487 
    let v499 : US39 = US39_1
    let v500 : US39 = v488 |> Option.defaultValue v499 
    let v520 : US5 =
        match v500 with
        | US39_1 -> (* None *)
            US5_1
        | US39_0(v504) -> (* Some *)
            let v505 : string = "$0.naive_utc()"
            let v506 : chrono_NaiveDateTime = Fable.Core.RustInterop.emitRustExpr v504 v505 
            let v507 : string = "chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &$0)"
            let v508 : chrono_DateTime<chrono_Local> = Fable.Core.RustInterop.emitRustExpr v506 v507 
            let v509 : string = "%Y%m%d-%H%M-%S%f"
            let v510 : string = "r#\"" + v509 + "\"#"
            let v511 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr () v510 
            let v512 : string = "$0.format($1).to_string()"
            let v513 : std_string_String = Fable.Core.RustInterop.emitRustExpr struct (v508, v511) v512 
            let v514 : string = "fable_library_rust::String_::fromString($0)"
            let v515 : string = Fable.Core.RustInterop.emitRustExpr v513 v514 
            let v516 : string = $"{v515.[0..17]}-{v515.[18..21]}-{v515.[22]}"
            US5_0(v516)
    let v524 : string =
        match v520 with
        | US5_1 -> (* None *)
            let v522 : string = ""
            v522
        | US5_0(v521) -> (* Some *)
            v521
    let v525 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v526 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v527 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v526 
    let _v525 = v527 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v528 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v528 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v531 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v531 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v534 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v534 
    #endif
#if FABLE_COMPILER_PYTHON
    let v537 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v525 = v537 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v540 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v525 = v540 
    #endif
#else
    let v541 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v525 = v541 
    #endif
    let v542 : System.TimeZoneInfo = _v525 
    let v547 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v548 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v549 : (System.DateTime -> int64) = _.Ticks
    let v550 : int64 = v549 v408
    let _v548 = v550 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v551 : (System.DateTime -> int64) = _.Ticks
    let v552 : int64 = v551 v408
    let _v548 = v552 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v553 : int64 = null |> unbox<int64>
    let _v548 = v553 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v556 : (System.DateTime -> int64) = _.Ticks
    let v557 : int64 = v556 v408
    let _v548 = v557 
    #endif
#if FABLE_COMPILER_PYTHON
    let v558 : (System.DateTime -> int64) = _.Ticks
    let v559 : int64 = v558 v408
    let _v548 = v559 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v560 : (System.DateTime -> int64) = _.Ticks
    let v561 : int64 = v560 v408
    let _v548 = v561 
    #endif
#else
    let v562 : (System.DateTime -> int64) = _.Ticks
    let v563 : int64 = v562 v408
    let _v548 = v563 
    #endif
    let v564 : int64 = _v548 
    let v581 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v582 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v408, v564) v581 
    let v583 : System.TimeSpan = v582 |> System.TimeSpan 
    let _v547 = v583 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v586 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v587 : (System.DateTime -> int64) = _.Ticks
    let v588 : int64 = v587 v408
    let _v586 = v588 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v589 : (System.DateTime -> int64) = _.Ticks
    let v590 : int64 = v589 v408
    let _v586 = v590 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v591 : int64 = null |> unbox<int64>
    let _v586 = v591 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v594 : (System.DateTime -> int64) = _.Ticks
    let v595 : int64 = v594 v408
    let _v586 = v595 
    #endif
#if FABLE_COMPILER_PYTHON
    let v596 : (System.DateTime -> int64) = _.Ticks
    let v597 : int64 = v596 v408
    let _v586 = v597 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v598 : (System.DateTime -> int64) = _.Ticks
    let v599 : int64 = v598 v408
    let _v586 = v599 
    #endif
#else
    let v600 : (System.DateTime -> int64) = _.Ticks
    let v601 : int64 = v600 v408
    let _v586 = v601 
    #endif
    let v602 : int64 = _v586 
    let v619 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v620 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v408, v602) v619 
    let v621 : System.TimeSpan = v620 |> System.TimeSpan 
    let _v547 = v621 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v624 : US3 = US3_2
    let v625 : US4 = US4_2(v624)
    let v626 : string = $"date_time.get_utc_offset / target: {v625}"
    let v627 : System.TimeSpan = failwith<System.TimeSpan> v626
    let _v547 = v627 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v630 : US3 = US3_0
    let v631 : US4 = US4_3(v630)
    let v632 : string = $"date_time.get_utc_offset / target: {v631}"
    let v633 : System.TimeSpan = failwith<System.TimeSpan> v632
    let _v547 = v633 
    #endif
#if FABLE_COMPILER_PYTHON
    let v636 : US3 = US3_0
    let v637 : US4 = US4_4(v636)
    let v638 : string = $"date_time.get_utc_offset / target: {v637}"
    let v639 : System.TimeSpan = failwith<System.TimeSpan> v638
    let _v547 = v639 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v642 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v643 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v644 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v645 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v644 
    let _v643 = v645 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v646 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v646 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v649 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v649 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v652 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v652 
    #endif
#if FABLE_COMPILER_PYTHON
    let v655 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v643 = v655 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v658 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v643 = v658 
    #endif
#else
    let v659 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v643 = v659 
    #endif
    let v660 : System.TimeZoneInfo = _v643 
    let v665 : (System.DateTime -> System.TimeSpan) = v642 v660
    let v666 : System.TimeSpan = v665 v408
    let _v547 = v666 
    #endif
#else
    let v667 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v668 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v669 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v670 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v669 
    let _v668 = v670 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v671 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v671 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v674 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v674 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v677 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v677 
    #endif
#if FABLE_COMPILER_PYTHON
    let v680 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v668 = v680 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v683 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v668 = v683 
    #endif
#else
    let v684 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v668 = v684 
    #endif
    let v685 : System.TimeZoneInfo = _v668 
    let v690 : (System.DateTime -> System.TimeSpan) = v667 v685
    let v691 : System.TimeSpan = v690 v408
    let _v547 = v691 
    #endif
    let v692 : System.TimeSpan = _v547 
    let v700 : (System.TimeSpan -> int32) = _.Hours
    let v701 : int32 = v700 v692
    let v704 : bool = v701 > 0
    let v705 : uint8 =
        if v704 then
            1uy
        else
            0uy
    let v706 : string = method192()
    let v707 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v708 : string = v692.ToString v706 
    let _v707 = v708 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v711 : string = v692.ToString v706 
    let _v707 = v711 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v714 : string = v692.ToString v706 
    let _v707 = v714 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v717 : string = v692.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v707 = v717 
    #endif
#if FABLE_COMPILER_PYTHON
    let v718 : string = v692.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v707 = v718 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v719 : string = v692.ToString v706 
    let _v707 = v719 
    #endif
#else
    let v722 : string = v692.ToString v706 
    let _v707 = v722 
    #endif
    let v725 : string = _v707 
    let v730 : string = $"{v705}{v725.[0..1]}{v725.[3..4]}"
    let v731 : (System.Guid -> string) = _.ToString()
    let v732 : string = v731 v0
    let v735 : int32 = v524.Length
    let v736 : int32 = v730.Length
    let v737 : int32 = v735 + v736
    let v738 : (string -> int32) = String.length
    let v739 : int32 = v738 v732
    let v742 : int32 = v737 |> int32 
    let v749 : int32 = v739 |> int32 
    let v756 : int32 = v749 - 1
    let v757 : string = v732.[int v742..int v756]
    let v761 : string = $"{v524}{v730}{v757}"
    let v762 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v763 : System.Guid = v761 |> System.Guid 
    let _v762 = v763 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v766 : System.Guid = v761 |> System.Guid 
    let _v762 = v766 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v769 : System.Guid = null |> unbox<System.Guid>
    let _v762 = v769 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v772 : System.Guid = v761 |> System.Guid 
    let _v762 = v772 
    #endif
#if FABLE_COMPILER_PYTHON
    let v775 : System.Guid = v761 |> System.Guid 
    let _v762 = v775 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v778 : System.Guid = v761 |> System.Guid 
    let _v762 = v778 
    #endif
#else
    let v781 : System.Guid = v761 |> System.Guid 
    let _v762 = v781 
    #endif
    let v784 : System.Guid = _v762 
    let _v2 = v784 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v789 : System.Guid = null |> unbox<System.Guid>
    let _v2 = v789 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v792 : string = method193()
    let v793 : bool = v792 = ""
    let v795 : string =
        if v793 then
            let v794 : string = "M-d-y hh:mm:ss tt"
            v794
        else
            v792
    let v796 : (string -> string) = v1.ToString
    let v797 : string = v796 v795
    let v811 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v812 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v813 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v812 
    let _v811 = v813 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v814 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v814 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v817 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v817 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v820 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v820 
    #endif
#if FABLE_COMPILER_PYTHON
    let v823 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v811 = v823 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v826 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v811 = v826 
    #endif
#else
    let v827 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v811 = v827 
    #endif
    let v828 : System.TimeZoneInfo = _v811 
    let v833 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v834 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v835 : (System.DateTime -> int64) = _.Ticks
    let v836 : int64 = v835 v1
    let _v834 = v836 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v837 : (System.DateTime -> int64) = _.Ticks
    let v838 : int64 = v837 v1
    let _v834 = v838 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v839 : int64 = null |> unbox<int64>
    let _v834 = v839 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v842 : (System.DateTime -> int64) = _.Ticks
    let v843 : int64 = v842 v1
    let _v834 = v843 
    #endif
#if FABLE_COMPILER_PYTHON
    let v844 : (System.DateTime -> int64) = _.Ticks
    let v845 : int64 = v844 v1
    let _v834 = v845 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v846 : (System.DateTime -> int64) = _.Ticks
    let v847 : int64 = v846 v1
    let _v834 = v847 
    #endif
#else
    let v848 : (System.DateTime -> int64) = _.Ticks
    let v849 : int64 = v848 v1
    let _v834 = v849 
    #endif
    let v850 : int64 = _v834 
    let v867 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v868 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v850) v867 
    let v869 : System.TimeSpan = v868 |> System.TimeSpan 
    let _v833 = v869 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v872 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v873 : (System.DateTime -> int64) = _.Ticks
    let v874 : int64 = v873 v1
    let _v872 = v874 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v875 : (System.DateTime -> int64) = _.Ticks
    let v876 : int64 = v875 v1
    let _v872 = v876 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v877 : int64 = null |> unbox<int64>
    let _v872 = v877 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v880 : (System.DateTime -> int64) = _.Ticks
    let v881 : int64 = v880 v1
    let _v872 = v881 
    #endif
#if FABLE_COMPILER_PYTHON
    let v882 : (System.DateTime -> int64) = _.Ticks
    let v883 : int64 = v882 v1
    let _v872 = v883 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v884 : (System.DateTime -> int64) = _.Ticks
    let v885 : int64 = v884 v1
    let _v872 = v885 
    #endif
#else
    let v886 : (System.DateTime -> int64) = _.Ticks
    let v887 : int64 = v886 v1
    let _v872 = v887 
    #endif
    let v888 : int64 = _v872 
    let v905 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v906 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v888) v905 
    let v907 : System.TimeSpan = v906 |> System.TimeSpan 
    let _v833 = v907 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v910 : US3 = US3_2
    let v911 : US4 = US4_2(v910)
    let v912 : string = $"date_time.get_utc_offset / target: {v911}"
    let v913 : System.TimeSpan = failwith<System.TimeSpan> v912
    let _v833 = v913 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v916 : US3 = US3_0
    let v917 : US4 = US4_3(v916)
    let v918 : string = $"date_time.get_utc_offset / target: {v917}"
    let v919 : System.TimeSpan = failwith<System.TimeSpan> v918
    let _v833 = v919 
    #endif
#if FABLE_COMPILER_PYTHON
    let v922 : US3 = US3_0
    let v923 : US4 = US4_4(v922)
    let v924 : string = $"date_time.get_utc_offset / target: {v923}"
    let v925 : System.TimeSpan = failwith<System.TimeSpan> v924
    let _v833 = v925 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v928 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v929 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v930 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v931 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v930 
    let _v929 = v931 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v932 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v932 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v935 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v935 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v938 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v938 
    #endif
#if FABLE_COMPILER_PYTHON
    let v941 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v929 = v941 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v944 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v929 = v944 
    #endif
#else
    let v945 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v929 = v945 
    #endif
    let v946 : System.TimeZoneInfo = _v929 
    let v951 : (System.DateTime -> System.TimeSpan) = v928 v946
    let v952 : System.TimeSpan = v951 v1
    let _v833 = v952 
    #endif
#else
    let v953 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v954 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v955 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v956 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v955 
    let _v954 = v956 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v957 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v957 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v960 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v960 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v963 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v963 
    #endif
#if FABLE_COMPILER_PYTHON
    let v966 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v954 = v966 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v969 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v954 = v969 
    #endif
#else
    let v970 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v954 = v970 
    #endif
    let v971 : System.TimeZoneInfo = _v954 
    let v976 : (System.DateTime -> System.TimeSpan) = v953 v971
    let v977 : System.TimeSpan = v976 v1
    let _v833 = v977 
    #endif
    let v978 : System.TimeSpan = _v833 
    let v986 : (System.TimeSpan -> int32) = _.Hours
    let v987 : int32 = v986 v978
    let v990 : bool = v987 > 0
    let v991 : uint8 =
        if v990 then
            1uy
        else
            0uy
    let v992 : string = method194()
    let v993 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v994 : string = v978.ToString v992 
    let _v993 = v994 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v997 : string = v978.ToString v992 
    let _v993 = v997 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1000 : string = v978.ToString v992 
    let _v993 = v1000 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1003 : string = v978.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v993 = v1003 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1004 : string = v978.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v993 = v1004 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1005 : string = v978.ToString v992 
    let _v993 = v1005 
    #endif
#else
    let v1008 : string = v978.ToString v992 
    let _v993 = v1008 
    #endif
    let v1011 : string = _v993 
    let v1016 : string = $"{v991}{v1011}"
    let v1017 : (System.Guid -> string) = _.ToString()
    let v1018 : string = v1017 v0
    let v1021 : int32 = v797.Length
    let v1022 : int32 = v1016.Length
    let v1023 : int32 = v1021 + v1022
    let v1024 : (string -> int32) = String.length
    let v1025 : int32 = v1024 v1018
    let v1028 : int32 = v1023 |> int32 
    let v1035 : int32 = v1025 |> int32 
    let v1042 : int32 = v1035 - 1
    let v1043 : string = v1018.[int v1028..int v1042]
    let v1047 : string = $"{v797}{v1016}{v1043}"
    let v1048 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1049 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1049 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1052 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1052 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1055 : System.Guid = null |> unbox<System.Guid>
    let _v1048 = v1055 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1058 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1058 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1061 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1061 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1064 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1064 
    #endif
#else
    let v1067 : System.Guid = v1047 |> System.Guid 
    let _v1048 = v1067 
    #endif
    let v1070 : System.Guid = _v1048 
    let _v2 = v1070 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1075 : string = method193()
    let v1076 : bool = v1075 = ""
    let v1078 : string =
        if v1076 then
            let v1077 : string = "M-d-y hh:mm:ss tt"
            v1077
        else
            v1075
    let v1079 : (string -> string) = v1.ToString
    let v1080 : string = v1079 v1078
    let v1094 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1095 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1096 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1095 
    let _v1094 = v1096 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1097 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1097 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1100 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1100 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1103 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1103 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1106 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1094 = v1106 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1109 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1094 = v1109 
    #endif
#else
    let v1110 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1094 = v1110 
    #endif
    let v1111 : System.TimeZoneInfo = _v1094 
    let v1116 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1117 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1118 : (System.DateTime -> int64) = _.Ticks
    let v1119 : int64 = v1118 v1
    let _v1117 = v1119 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1120 : (System.DateTime -> int64) = _.Ticks
    let v1121 : int64 = v1120 v1
    let _v1117 = v1121 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1122 : int64 = null |> unbox<int64>
    let _v1117 = v1122 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1125 : (System.DateTime -> int64) = _.Ticks
    let v1126 : int64 = v1125 v1
    let _v1117 = v1126 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1127 : (System.DateTime -> int64) = _.Ticks
    let v1128 : int64 = v1127 v1
    let _v1117 = v1128 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1129 : (System.DateTime -> int64) = _.Ticks
    let v1130 : int64 = v1129 v1
    let _v1117 = v1130 
    #endif
#else
    let v1131 : (System.DateTime -> int64) = _.Ticks
    let v1132 : int64 = v1131 v1
    let _v1117 = v1132 
    #endif
    let v1133 : int64 = _v1117 
    let v1150 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1151 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1133) v1150 
    let v1152 : System.TimeSpan = v1151 |> System.TimeSpan 
    let _v1116 = v1152 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1155 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1156 : (System.DateTime -> int64) = _.Ticks
    let v1157 : int64 = v1156 v1
    let _v1155 = v1157 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1158 : (System.DateTime -> int64) = _.Ticks
    let v1159 : int64 = v1158 v1
    let _v1155 = v1159 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1160 : int64 = null |> unbox<int64>
    let _v1155 = v1160 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1163 : (System.DateTime -> int64) = _.Ticks
    let v1164 : int64 = v1163 v1
    let _v1155 = v1164 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1165 : (System.DateTime -> int64) = _.Ticks
    let v1166 : int64 = v1165 v1
    let _v1155 = v1166 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1167 : (System.DateTime -> int64) = _.Ticks
    let v1168 : int64 = v1167 v1
    let _v1155 = v1168 
    #endif
#else
    let v1169 : (System.DateTime -> int64) = _.Ticks
    let v1170 : int64 = v1169 v1
    let _v1155 = v1170 
    #endif
    let v1171 : int64 = _v1155 
    let v1188 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1189 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1171) v1188 
    let v1190 : System.TimeSpan = v1189 |> System.TimeSpan 
    let _v1116 = v1190 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1193 : US3 = US3_2
    let v1194 : US4 = US4_2(v1193)
    let v1195 : string = $"date_time.get_utc_offset / target: {v1194}"
    let v1196 : System.TimeSpan = failwith<System.TimeSpan> v1195
    let _v1116 = v1196 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1199 : US3 = US3_0
    let v1200 : US4 = US4_3(v1199)
    let v1201 : string = $"date_time.get_utc_offset / target: {v1200}"
    let v1202 : System.TimeSpan = failwith<System.TimeSpan> v1201
    let _v1116 = v1202 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1205 : US3 = US3_0
    let v1206 : US4 = US4_4(v1205)
    let v1207 : string = $"date_time.get_utc_offset / target: {v1206}"
    let v1208 : System.TimeSpan = failwith<System.TimeSpan> v1207
    let _v1116 = v1208 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1211 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1212 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1213 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1214 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1213 
    let _v1212 = v1214 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1215 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1215 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1218 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1218 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1221 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1221 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1224 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1212 = v1224 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1227 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1212 = v1227 
    #endif
#else
    let v1228 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1212 = v1228 
    #endif
    let v1229 : System.TimeZoneInfo = _v1212 
    let v1234 : (System.DateTime -> System.TimeSpan) = v1211 v1229
    let v1235 : System.TimeSpan = v1234 v1
    let _v1116 = v1235 
    #endif
#else
    let v1236 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1237 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1238 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1239 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1238 
    let _v1237 = v1239 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1240 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1240 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1243 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1243 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1246 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1246 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1249 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1237 = v1249 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1252 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1237 = v1252 
    #endif
#else
    let v1253 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1237 = v1253 
    #endif
    let v1254 : System.TimeZoneInfo = _v1237 
    let v1259 : (System.DateTime -> System.TimeSpan) = v1236 v1254
    let v1260 : System.TimeSpan = v1259 v1
    let _v1116 = v1260 
    #endif
    let v1261 : System.TimeSpan = _v1116 
    let v1269 : (System.TimeSpan -> int32) = _.Hours
    let v1270 : int32 = v1269 v1261
    let v1273 : bool = v1270 > 0
    let v1274 : uint8 =
        if v1273 then
            1uy
        else
            0uy
    let v1275 : string = method194()
    let v1276 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1277 : string = v1261.ToString v1275 
    let _v1276 = v1277 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1280 : string = v1261.ToString v1275 
    let _v1276 = v1280 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1283 : string = v1261.ToString v1275 
    let _v1276 = v1283 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1286 : string = v1261.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1276 = v1286 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1287 : string = v1261.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1276 = v1287 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1288 : string = v1261.ToString v1275 
    let _v1276 = v1288 
    #endif
#else
    let v1291 : string = v1261.ToString v1275 
    let _v1276 = v1291 
    #endif
    let v1294 : string = _v1276 
    let v1299 : string = $"{v1274}{v1294}"
    let v1300 : (System.Guid -> string) = _.ToString()
    let v1301 : string = v1300 v0
    let v1304 : int32 = v1080.Length
    let v1305 : int32 = v1299.Length
    let v1306 : int32 = v1304 + v1305
    let v1307 : (string -> int32) = String.length
    let v1308 : int32 = v1307 v1301
    let v1311 : int32 = v1306 |> int32 
    let v1318 : int32 = v1308 |> int32 
    let v1325 : int32 = v1318 - 1
    let v1326 : string = v1301.[int v1311..int v1325]
    let v1330 : string = $"{v1080}{v1299}{v1326}"
    let v1331 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1332 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1332 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1335 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1335 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1338 : System.Guid = null |> unbox<System.Guid>
    let _v1331 = v1338 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1341 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1341 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1344 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1344 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1347 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1347 
    #endif
#else
    let v1350 : System.Guid = v1330 |> System.Guid 
    let _v1331 = v1350 
    #endif
    let v1353 : System.Guid = _v1331 
    let _v2 = v1353 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1358 : string = method193()
    let v1359 : bool = v1358 = ""
    let v1361 : string =
        if v1359 then
            let v1360 : string = "M-d-y hh:mm:ss tt"
            v1360
        else
            v1358
    let v1362 : (string -> string) = v1.ToString
    let v1363 : string = v1362 v1361
    let v1377 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1378 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1379 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1378 
    let _v1377 = v1379 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1380 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1380 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1383 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1383 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1386 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1386 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1389 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1377 = v1389 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1392 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1377 = v1392 
    #endif
#else
    let v1393 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1377 = v1393 
    #endif
    let v1394 : System.TimeZoneInfo = _v1377 
    let v1399 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1400 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1401 : (System.DateTime -> int64) = _.Ticks
    let v1402 : int64 = v1401 v1
    let _v1400 = v1402 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1403 : (System.DateTime -> int64) = _.Ticks
    let v1404 : int64 = v1403 v1
    let _v1400 = v1404 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1405 : int64 = null |> unbox<int64>
    let _v1400 = v1405 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1408 : (System.DateTime -> int64) = _.Ticks
    let v1409 : int64 = v1408 v1
    let _v1400 = v1409 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1410 : (System.DateTime -> int64) = _.Ticks
    let v1411 : int64 = v1410 v1
    let _v1400 = v1411 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1412 : (System.DateTime -> int64) = _.Ticks
    let v1413 : int64 = v1412 v1
    let _v1400 = v1413 
    #endif
#else
    let v1414 : (System.DateTime -> int64) = _.Ticks
    let v1415 : int64 = v1414 v1
    let _v1400 = v1415 
    #endif
    let v1416 : int64 = _v1400 
    let v1433 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1434 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1416) v1433 
    let v1435 : System.TimeSpan = v1434 |> System.TimeSpan 
    let _v1399 = v1435 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1438 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1439 : (System.DateTime -> int64) = _.Ticks
    let v1440 : int64 = v1439 v1
    let _v1438 = v1440 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1441 : (System.DateTime -> int64) = _.Ticks
    let v1442 : int64 = v1441 v1
    let _v1438 = v1442 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1443 : int64 = null |> unbox<int64>
    let _v1438 = v1443 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1446 : (System.DateTime -> int64) = _.Ticks
    let v1447 : int64 = v1446 v1
    let _v1438 = v1447 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1448 : (System.DateTime -> int64) = _.Ticks
    let v1449 : int64 = v1448 v1
    let _v1438 = v1449 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1450 : (System.DateTime -> int64) = _.Ticks
    let v1451 : int64 = v1450 v1
    let _v1438 = v1451 
    #endif
#else
    let v1452 : (System.DateTime -> int64) = _.Ticks
    let v1453 : int64 = v1452 v1
    let _v1438 = v1453 
    #endif
    let v1454 : int64 = _v1438 
    let v1471 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1472 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1454) v1471 
    let v1473 : System.TimeSpan = v1472 |> System.TimeSpan 
    let _v1399 = v1473 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1476 : US3 = US3_2
    let v1477 : US4 = US4_2(v1476)
    let v1478 : string = $"date_time.get_utc_offset / target: {v1477}"
    let v1479 : System.TimeSpan = failwith<System.TimeSpan> v1478
    let _v1399 = v1479 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1482 : US3 = US3_0
    let v1483 : US4 = US4_3(v1482)
    let v1484 : string = $"date_time.get_utc_offset / target: {v1483}"
    let v1485 : System.TimeSpan = failwith<System.TimeSpan> v1484
    let _v1399 = v1485 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1488 : US3 = US3_0
    let v1489 : US4 = US4_4(v1488)
    let v1490 : string = $"date_time.get_utc_offset / target: {v1489}"
    let v1491 : System.TimeSpan = failwith<System.TimeSpan> v1490
    let _v1399 = v1491 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1494 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1495 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1496 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1497 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1496 
    let _v1495 = v1497 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1498 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1498 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1501 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1501 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1504 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1504 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1507 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1495 = v1507 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1510 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1495 = v1510 
    #endif
#else
    let v1511 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1495 = v1511 
    #endif
    let v1512 : System.TimeZoneInfo = _v1495 
    let v1517 : (System.DateTime -> System.TimeSpan) = v1494 v1512
    let v1518 : System.TimeSpan = v1517 v1
    let _v1399 = v1518 
    #endif
#else
    let v1519 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1520 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1521 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1522 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1521 
    let _v1520 = v1522 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1523 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1523 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1526 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1526 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1529 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1529 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1532 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1520 = v1532 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1535 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1520 = v1535 
    #endif
#else
    let v1536 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1520 = v1536 
    #endif
    let v1537 : System.TimeZoneInfo = _v1520 
    let v1542 : (System.DateTime -> System.TimeSpan) = v1519 v1537
    let v1543 : System.TimeSpan = v1542 v1
    let _v1399 = v1543 
    #endif
    let v1544 : System.TimeSpan = _v1399 
    let v1552 : (System.TimeSpan -> int32) = _.Hours
    let v1553 : int32 = v1552 v1544
    let v1556 : bool = v1553 > 0
    let v1557 : uint8 =
        if v1556 then
            1uy
        else
            0uy
    let v1558 : string = method194()
    let v1559 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1560 : string = v1544.ToString v1558 
    let _v1559 = v1560 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1563 : string = v1544.ToString v1558 
    let _v1559 = v1563 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1566 : string = v1544.ToString v1558 
    let _v1559 = v1566 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1569 : string = v1544.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1559 = v1569 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1570 : string = v1544.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1559 = v1570 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1571 : string = v1544.ToString v1558 
    let _v1559 = v1571 
    #endif
#else
    let v1574 : string = v1544.ToString v1558 
    let _v1559 = v1574 
    #endif
    let v1577 : string = _v1559 
    let v1582 : string = $"{v1557}{v1577}"
    let v1583 : (System.Guid -> string) = _.ToString()
    let v1584 : string = v1583 v0
    let v1587 : int32 = v1363.Length
    let v1588 : int32 = v1582.Length
    let v1589 : int32 = v1587 + v1588
    let v1590 : (string -> int32) = String.length
    let v1591 : int32 = v1590 v1584
    let v1594 : int32 = v1589 |> int32 
    let v1601 : int32 = v1591 |> int32 
    let v1608 : int32 = v1601 - 1
    let v1609 : string = v1584.[int v1594..int v1608]
    let v1613 : string = $"{v1363}{v1582}{v1609}"
    let v1614 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1615 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1615 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1618 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1618 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1621 : System.Guid = null |> unbox<System.Guid>
    let _v1614 = v1621 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1624 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1624 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1627 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1627 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1630 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1630 
    #endif
#else
    let v1633 : System.Guid = v1613 |> System.Guid 
    let _v1614 = v1633 
    #endif
    let v1636 : System.Guid = _v1614 
    let _v2 = v1636 
    #endif
#else
    let v1641 : string = method193()
    let v1642 : bool = v1641 = ""
    let v1644 : string =
        if v1642 then
            let v1643 : string = "M-d-y hh:mm:ss tt"
            v1643
        else
            v1641
    let v1645 : (string -> string) = v1.ToString
    let v1646 : string = v1645 v1644
    let v1660 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1661 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1662 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1661 
    let _v1660 = v1662 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1663 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1663 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1666 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1666 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1669 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1669 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1672 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1660 = v1672 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1675 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1660 = v1675 
    #endif
#else
    let v1676 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1660 = v1676 
    #endif
    let v1677 : System.TimeZoneInfo = _v1660 
    let v1682 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1683 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1684 : (System.DateTime -> int64) = _.Ticks
    let v1685 : int64 = v1684 v1
    let _v1683 = v1685 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1686 : (System.DateTime -> int64) = _.Ticks
    let v1687 : int64 = v1686 v1
    let _v1683 = v1687 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1688 : int64 = null |> unbox<int64>
    let _v1683 = v1688 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1691 : (System.DateTime -> int64) = _.Ticks
    let v1692 : int64 = v1691 v1
    let _v1683 = v1692 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1693 : (System.DateTime -> int64) = _.Ticks
    let v1694 : int64 = v1693 v1
    let _v1683 = v1694 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1695 : (System.DateTime -> int64) = _.Ticks
    let v1696 : int64 = v1695 v1
    let _v1683 = v1696 
    #endif
#else
    let v1697 : (System.DateTime -> int64) = _.Ticks
    let v1698 : int64 = v1697 v1
    let _v1683 = v1698 
    #endif
    let v1699 : int64 = _v1683 
    let v1716 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1717 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1699) v1716 
    let v1718 : System.TimeSpan = v1717 |> System.TimeSpan 
    let _v1682 = v1718 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1721 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1722 : (System.DateTime -> int64) = _.Ticks
    let v1723 : int64 = v1722 v1
    let _v1721 = v1723 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1724 : (System.DateTime -> int64) = _.Ticks
    let v1725 : int64 = v1724 v1
    let _v1721 = v1725 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1726 : int64 = null |> unbox<int64>
    let _v1721 = v1726 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1729 : (System.DateTime -> int64) = _.Ticks
    let v1730 : int64 = v1729 v1
    let _v1721 = v1730 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1731 : (System.DateTime -> int64) = _.Ticks
    let v1732 : int64 = v1731 v1
    let _v1721 = v1732 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1733 : (System.DateTime -> int64) = _.Ticks
    let v1734 : int64 = v1733 v1
    let _v1721 = v1734 
    #endif
#else
    let v1735 : (System.DateTime -> int64) = _.Ticks
    let v1736 : int64 = v1735 v1
    let _v1721 = v1736 
    #endif
    let v1737 : int64 = _v1721 
    let v1754 : string = "chrono::FixedOffset::local_minus_utc(&chrono::DateTime::timezone(&chrono::DateTime::fixed_offset(&chrono::DateTime::from_timestamp_nanos($1))))"
    let v1755 : int32 = Fable.Core.RustInterop.emitRustExpr struct (v1, v1737) v1754 
    let v1756 : System.TimeSpan = v1755 |> System.TimeSpan 
    let _v1682 = v1756 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1759 : US3 = US3_2
    let v1760 : US4 = US4_2(v1759)
    let v1761 : string = $"date_time.get_utc_offset / target: {v1760}"
    let v1762 : System.TimeSpan = failwith<System.TimeSpan> v1761
    let _v1682 = v1762 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1765 : US3 = US3_0
    let v1766 : US4 = US4_3(v1765)
    let v1767 : string = $"date_time.get_utc_offset / target: {v1766}"
    let v1768 : System.TimeSpan = failwith<System.TimeSpan> v1767
    let _v1682 = v1768 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1771 : US3 = US3_0
    let v1772 : US4 = US4_4(v1771)
    let v1773 : string = $"date_time.get_utc_offset / target: {v1772}"
    let v1774 : System.TimeSpan = failwith<System.TimeSpan> v1773
    let _v1682 = v1774 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1777 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1778 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1779 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1780 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1779 
    let _v1778 = v1780 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1781 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1781 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1784 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1784 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1787 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1787 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1790 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1778 = v1790 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1793 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1778 = v1793 
    #endif
#else
    let v1794 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1778 = v1794 
    #endif
    let v1795 : System.TimeZoneInfo = _v1778 
    let v1800 : (System.DateTime -> System.TimeSpan) = v1777 v1795
    let v1801 : System.TimeSpan = v1800 v1
    let _v1682 = v1801 
    #endif
#else
    let v1802 : (System.TimeZoneInfo -> (System.DateTime -> System.TimeSpan)) = _.GetUtcOffset
    let v1803 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1804 : string = "std::sync::Arc::new(chrono::FixedOffset::local_minus_utc(chrono::Local::now().offset()) as i64)"
    let v1805 : System.TimeZoneInfo = Fable.Core.RustInterop.emitRustExpr () v1804 
    let _v1803 = v1805 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1806 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1806 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1809 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1809 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1812 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1812 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1815 : System.TimeZoneInfo = null |> unbox<System.TimeZoneInfo>
    let _v1803 = v1815 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1818 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1803 = v1818 
    #endif
#else
    let v1819 : System.TimeZoneInfo = System.TimeZoneInfo.Local
    let _v1803 = v1819 
    #endif
    let v1820 : System.TimeZoneInfo = _v1803 
    let v1825 : (System.DateTime -> System.TimeSpan) = v1802 v1820
    let v1826 : System.TimeSpan = v1825 v1
    let _v1682 = v1826 
    #endif
    let v1827 : System.TimeSpan = _v1682 
    let v1835 : (System.TimeSpan -> int32) = _.Hours
    let v1836 : int32 = v1835 v1827
    let v1839 : bool = v1836 > 0
    let v1840 : uint8 =
        if v1839 then
            1uy
        else
            0uy
    let v1841 : string = method194()
    let v1842 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1843 : string = v1827.ToString v1841 
    let _v1842 = v1843 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1846 : string = v1827.ToString v1841 
    let _v1842 = v1846 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1849 : string = v1827.ToString v1841 
    let _v1842 = v1849 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1852 : string = v1827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1842 = v1852 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1853 : string = v1827.ToString ("c", System.Globalization.CultureInfo.InvariantCulture)
    let _v1842 = v1853 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1854 : string = v1827.ToString v1841 
    let _v1842 = v1854 
    #endif
#else
    let v1857 : string = v1827.ToString v1841 
    let _v1842 = v1857 
    #endif
    let v1860 : string = _v1842 
    let v1865 : string = $"{v1840}{v1860}"
    let v1866 : (System.Guid -> string) = _.ToString()
    let v1867 : string = v1866 v0
    let v1870 : int32 = v1646.Length
    let v1871 : int32 = v1865.Length
    let v1872 : int32 = v1870 + v1871
    let v1873 : (string -> int32) = String.length
    let v1874 : int32 = v1873 v1867
    let v1877 : int32 = v1872 |> int32 
    let v1884 : int32 = v1874 |> int32 
    let v1891 : int32 = v1884 - 1
    let v1892 : string = v1867.[int v1877..int v1891]
    let v1896 : string = $"{v1646}{v1865}{v1892}"
    let v1897 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v1898 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1898 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v1901 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1901 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v1904 : System.Guid = null |> unbox<System.Guid>
    let _v1897 = v1904 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v1907 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1907 
    #endif
#if FABLE_COMPILER_PYTHON
    let v1910 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1910 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v1913 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1913 
    #endif
#else
    let v1916 : System.Guid = v1896 |> System.Guid 
    let _v1897 = v1916 
    #endif
    let v1919 : System.Guid = _v1897 
    let _v2 = v1919 
    #endif
    let v1924 : System.Guid = _v2 
    v1924
and method195 (v0 : string, v1 : string) : unit =
    let v2 : bool = method32(v0)
    let v3 : bool = v2 = false
    if v3 then
        let v4 : System.IDisposable = method44(v0)
        ()
    let v5 : string option = method34(v1)
    let v6 : string = ""
    let v7 : string = v5 |> Option.defaultValue v6 
    let v10 : bool = method32(v7)
    let v11 : bool = v10 = false
    if v11 then
        let v12 : System.IDisposable = method44(v7)
        ()
    let v13 : bool = method32(v1)
    let v24 : bool =
        if v13 then
            let v14 : Result<std_path_PathBuf, std_io_Error> = method148(v1)
            let v15 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v16 : string = "$0.is_err()"
            let v17 : bool = Fable.Core.RustInterop.emitRustExpr v14 v16 
            let _v15 = v17 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v18 : string = "$0.is_err()"
            let v19 : bool = Fable.Core.RustInterop.emitRustExpr v14 v18 
            let _v15 = v19 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v20 : string = "$0.is_err()"
            let v21 : bool = Fable.Core.RustInterop.emitRustExpr v14 v20 
            let _v15 = v21 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let _v15 = true 
            #endif
#if FABLE_COMPILER_PYTHON
            let _v15 = true 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let _v15 = true 
            #endif
#else
            let _v15 = true 
            #endif
            let v22 : bool = _v15 
            v22
        else
            false
    if v24 then
        let v25 : bool = true
        method56(v25, v1)
    let v26 : bool = method32(v1)
    let v27 : bool = v26 = false
    if v27 then
        let v28 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v29 : string = "true; #[cfg(windows)] std::os::windows::fs::symlink_dir(&*$0, &*$1).unwrap()"
        let v30 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v29 
        let v31 : string = "true; #[cfg(unix)] std::os::unix::fs::symlink(&*$0, &*$1).unwrap()"
        let v32 : bool = Fable.Core.RustInterop.emitRustExpr struct (v0, v1) v31 
        let _v28 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v28 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v28 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v28 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v28 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v28 = () 
        #endif
#else
        let v33 : System.IO.FileSystemInfo = System.IO.Directory.CreateSymbolicLink (v1, v0)
        let _v28 = () 
        #endif
        _v28 
        ()
and method197 () : string =
    let v0 : string = "("
    v0
and method198 () : string =
    let v0 : string = " "
    v0
and method199 (v0 : US36) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = $"%A{v0}"
    let v6 : string = $"{v3}"
    let v9 : unit = ()
    let v10 : (unit -> unit) = closure7(v2, v6)
    let v11 : unit = (fun () -> v10 (); v9) ()
    let v14 : string = v2.l0
    v14
and method203 (v0 : bool, v1 : string, v2 : int32, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "is_error"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v35 : string =
        if v0 then
            let v33 : string = "true"
            v33
        else
            let v34 : string = "false"
            v34
    let v36 : string = $"{v35}"
    let v39 : unit = ()
    let v40 : (unit -> unit) = closure7(v5, v36)
    let v41 : unit = (fun () -> v40 (); v39) ()
    let v44 : string = "; "
    let v45 : string = $"{v44}"
    let v48 : unit = ()
    let v49 : (unit -> unit) = closure7(v5, v45)
    let v50 : unit = (fun () -> v49 (); v48) ()
    let v53 : string = "retry"
    let v54 : string = $"{v53}"
    let v57 : unit = ()
    let v58 : (unit -> unit) = closure7(v5, v54)
    let v59 : unit = (fun () -> v58 (); v57) ()
    let v62 : string = $"{v24}"
    let v65 : unit = ()
    let v66 : (unit -> unit) = closure7(v5, v62)
    let v67 : unit = (fun () -> v66 (); v65) ()
    let v70 : string = $"{v1}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v5, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = $"{v44}"
    let v81 : unit = ()
    let v82 : (unit -> unit) = closure7(v5, v78)
    let v83 : unit = (fun () -> v82 (); v81) ()
    let v86 : string = "result"
    let v87 : string = $"{v86}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v5, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : string = $"{v24}"
    let v98 : unit = ()
    let v99 : (unit -> unit) = closure7(v5, v95)
    let v100 : unit = (fun () -> v99 (); v98) ()
    let v103 : string = $"{v2}"
    let v106 : unit = ()
    let v107 : (unit -> unit) = closure7(v5, v103)
    let v108 : unit = (fun () -> v107 (); v106) ()
    let v111 : string = ", "
    let v112 : string = $"{v111}"
    let v115 : unit = ()
    let v116 : (unit -> unit) = closure7(v5, v112)
    let v117 : unit = (fun () -> v116 (); v115) ()
    let v120 : string = $"{v3}"
    let v123 : unit = ()
    let v124 : (unit -> unit) = closure7(v5, v120)
    let v125 : unit = (fun () -> v124 (); v123) ()
    let v128 : string = " }"
    let v129 : string = $"{v128}"
    let v132 : unit = ()
    let v133 : (unit -> unit) = closure7(v5, v129)
    let v134 : unit = (fun () -> v133 (); v132) ()
    let v137 : string = v5.l0
    v137
and method202 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : bool, v9 : string, v10 : int32, v11 : string) : string =
    let v12 : string = method203(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "common.retry_fn' / loop"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure82 (v0 : uint8, v1 : uint8, v2 : int32, v3 : string, v4 : bool) () : unit =
    let v5 : US0 = US0_1
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method12()
        let v43 : string = $"{v1}/{v0}"
        let v44 : string = method202(v23, v24, v25, v26, v27, v28, v41, v42, v4, v43, v2, v3)
        method19(v44)
and method201 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option, v8 : uint8) : struct (int32 * string) =
    let struct (v9 : int32, v10 : string) = method68(v1, v2, v3, v4, v5, v6, v7)
    let v11 : bool = v9 = 0
    let v14 : US40 =
        if v11 then
            US40_0(v9, v10)
        else
            US40_1(v9, v10)
    let struct (v22 : bool, v23 : int32, v24 : string) =
        match v14 with
        | US40_1(v17, v18) -> (* Error *)
            struct (true, v17, v18)
        | US40_0(v15, v16) -> (* Ok *)
            struct (false, v15, v16)
    let v25 : bool = v22 = false
    let v27 : bool =
        if v25 then
            true
        else
            let v26 : bool = v8 >= v0
            v26
    if v27 then
        struct (v23, v24)
    else
        let v28 : unit = ()
        let v29 : (unit -> unit) = closure82(v0, v8, v23, v24, v22)
        let v30 : unit = (fun () -> v29 (); v28) ()
        let v71 : uint8 = v8 + 1uy
        method201(v0, v1, v2, v3, v4, v5, v6, v7, v71)
and method200 (v0 : uint8, v1 : string, v2 : System.Threading.CancellationToken option, v3 : (struct (string * string) []), v4 : (struct (int32 * string * bool) -> Async<unit>) option, v5 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option, v6 : bool, v7 : string option) : struct (int32 * string) =
    let v8 : uint8 = 1uy
    method201(v0, v1, v2, v3, v4, v5, v6, v7, v8)
and method196 (v0 : US35, v1 : string, v2 : string, v3 : string, v4 : US12) : struct (int32 * string) =
    let v5 : System.Threading.CancellationToken option = None
    let v6 : (struct (string * string) []) = [||]
    let v7 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v8 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v9 : string option = None
    let v10 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v11 : string = "cfg!(windows)"
    let v12 : bool = Fable.Core.RustInterop.emitRustExpr () v11 
    let _v10 = v12 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v13 : string = "cfg!(windows)"
    let v14 : bool = Fable.Core.RustInterop.emitRustExpr () v13 
    let _v10 = v14 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v15 : string = "cfg!(windows)"
    let v16 : bool = Fable.Core.RustInterop.emitRustExpr () v15 
    let _v10 = v16 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v17 : US3 = US3_0
    let v18 : US4 = US4_3(v17)
    let v19 : string = $"platform.is_windows / target: {v18}"
    let v20 : bool = failwith<bool> v19
    let _v10 = v20 
    #endif
#if FABLE_COMPILER_PYTHON
    let v21 : US3 = US3_0
    let v22 : US4 = US4_4(v21)
    let v23 : string = $"platform.is_windows / target: {v22}"
    let v24 : bool = failwith<bool> v23
    let _v10 = v24 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v25 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v26 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v27 : bool = v26 v25
    let _v10 = v27 
    #endif
#else
    let v28 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
    let v29 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
    let v30 : bool = v29 v28
    let _v10 = v30 
    #endif
    let v31 : bool = _v10 
    let v39 : string =
        if v31 then
            let v37 : string = "_WINDOWS"
            v37
        else
            let v38 : string = "_LINUX"
            v38
    let v40 : string = $" --define {v39}"
    let v136 : string =
        match v0 with
        | US35_1 -> (* None *)
            let v134 : string = ""
            v134
        | US35_0(v41) -> (* Some *)
            let v42 : string = Unchecked.defaultof<_>
            let v45 : string = Unchecked.defaultof<_>
            let v50 : bool =
                match v41 with
                | US36_0(v48) -> (* Wasm *)
                    let v49 : bool = v42 = v48
                    v49
                | _ ->
                    false
            let v82 : US5 =
                if v50 then
                    let v51 : string = "Wasm"
                    US5_0(v51)
                else
                    let v53 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v54 : string = method197()
                    let _v53 = v54 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v55 : string = method197()
                    let _v53 = v55 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v56 : string = method197()
                    let _v53 = v56 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v57 : string = method198()
                    let _v53 = v57 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v58 : string = method198()
                    let _v53 = v58 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v59 : string = method198()
                    let _v53 = v59 
                    #endif
#else
                    let v60 : string = method198()
                    let _v53 = v60 
                    #endif
                    let v61 : string = _v53 
                    let v66 : US36 = US36_0(v42)
                    let v67 : string = method199(v66)
                    let v68 : (string []) = v67.Split v61 
                    let v71 : string = v68.[int 0]
                    let v74 : string = method199(v41)
                    let v75 : bool = v74.StartsWith (v71, false, null)
                    if v75 then
                        let v78 : string = "Wasm"
                        US5_0(v78)
                    else
                        US5_1
            let v126 : US5 =
                match v82 with
                | US5_1 -> (* None *)
                    let v87 : bool =
                        match v41 with
                        | US36_1(v85) -> (* Contract *)
                            let v86 : bool = v45 = v85
                            v86
                        | _ ->
                            false
                    let v119 : US5 =
                        if v87 then
                            let v88 : string = "Contract"
                            US5_0(v88)
                        else
                            let v90 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v91 : string = method197()
                            let _v90 = v91 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v92 : string = method197()
                            let _v90 = v92 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v93 : string = method197()
                            let _v90 = v93 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v94 : string = method198()
                            let _v90 = v94 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v95 : string = method198()
                            let _v90 = v95 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v96 : string = method198()
                            let _v90 = v96 
                            #endif
#else
                            let v97 : string = method198()
                            let _v90 = v97 
                            #endif
                            let v98 : string = _v90 
                            let v103 : US36 = US36_1(v45)
                            let v104 : string = method199(v103)
                            let v105 : (string []) = v104.Split v98 
                            let v108 : string = v105.[int 0]
                            let v111 : string = method199(v41)
                            let v112 : bool = v111.StartsWith (v108, false, null)
                            if v112 then
                                let v115 : string = "Contract"
                                US5_0(v115)
                            else
                                US5_1
                    match v119 with
                    | US5_1 -> (* None *)
                        US5_1
                    | US5_0(v120) -> (* Some *)
                        US5_0(v120)
                | US5_0(v83) -> (* Some *)
                    US5_0(v83)
            let v130 : string =
                match v126 with
                | US5_1 -> (* None *)
                    failwith<string> "Option does not have a value."
                | US5_0(v127) -> (* Some *)
                    v127
            let v131 : (unit -> string) = v130.ToUpper
            let v132 : string = v131 ()
            let v133 : string = $" --define {v132}"
            v133
    let v137 : string = $"dotnet fable \"{v3}\" --optimize --lang {v2} --extension .{v2} --outDir \"{v1}\"{v40}{v136}"
    let v143 : Result<string, string> =
        match v4 with
        | US12_1(v140) -> (* Error *)
            let v141 : Result<string, string> = Error v140 
            v141
        | US12_0(v138) -> (* Ok *)
            let v139 : Result<string, string> = Ok v138 
            v139
    let v144 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v145 : string = "$0.ok()"
    let v146 : string option = Fable.Core.RustInterop.emitRustExpr v143 v145 
    let _v144 = v146 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v147 : string = "$0.ok()"
    let v148 : string option = Fable.Core.RustInterop.emitRustExpr v143 v147 
    let _v144 = v148 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v149 : string = "$0.ok()"
    let v150 : string option = Fable.Core.RustInterop.emitRustExpr v143 v149 
    let _v144 = v150 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v151 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v151 
    #endif
#if FABLE_COMPILER_PYTHON
    let v152 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v152 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v153 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v153 
    #endif
#else
    let v154 : string option = match v143 with Ok x -> Some x | Error _ -> None
    let _v144 = v154 
    #endif
    let v155 : string option = _v144 
    let v158 : uint8 = 3uy
    let v159 : bool = true
    method200(v158, v137, v5, v6, v7, v8, v159, v155)
and method205 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "dotnet_fable_result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method204 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method205(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_rust / dotnet fable error"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure83 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method204(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and closure84 () (v0 : std_string_String) : bool =
    let v1 : string = "fable_library_rust::String_::fromString($0)"
    let v2 : string = Fable.Core.RustInterop.emitRustExpr v0 v1 
    let v3 : string = "near-sdk"
    let v4 : bool = v2.Contains v3 
    v4
and method206 () : (std_string_String -> bool) =
    closure84()
and method207 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method208 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method209 (v0 : Vec<std_string_String>) : Vec<std_string_String> =
    v0
and method210 () : string =
    let v0 : string = "("
    v0
and method211 () : string =
    let v0 : string = "("
    v0
and method213 (v0 : string, v1 : regex_Regex) : Vec<std_collections_HashMap<string, string>> =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : string = "true; let _capture_move = (move || { //"
    let v51 : bool = Fable.Core.RustInterop.emitRustExpr () v50 
    let v52 : string = "Box::new($0)"
    let v53 : Box<std_string_String> = Fable.Core.RustInterop.emitRustExpr v45 v52 
    let v54 : string = "Box::leak($0)"
    let v55 : Ref<Lifetime<StaticLifetime, Mut<std_string_String>>> = Fable.Core.RustInterop.emitRustExpr v53 v54 
    let v56 : string = "$0"
    let v57 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v1 v56 
    let v58 : string = $"$0.captures_iter(v55)"
    let v59 : regex_CaptureMatches = Fable.Core.RustInterop.emitRustExpr v57 v58 
    let v60 : string = "true; let _regex_captures : Vec<_> = v59.map(|x| { //"
    let v61 : bool = Fable.Core.RustInterop.emitRustExpr () v60 
    let v62 : string = $"x"
    let v63 : regex_Captures<StaticLifetime> = Fable.Core.RustInterop.emitRustExpr () v62 
    let v64 : string = "Box::new($0)"
    let v65 : Box<regex_Captures<StaticLifetime>> = Fable.Core.RustInterop.emitRustExpr v63 v64 
    let v66 : string = "Box::leak($0)"
    let v67 : Ref<Lifetime<StaticLifetime, Mut<regex_Captures<StaticLifetime>>>> = Fable.Core.RustInterop.emitRustExpr v65 v66 
    let v68 : string = $"$0.capture_names()"
    let v69 : regex_CaptureNames = Fable.Core.RustInterop.emitRustExpr v1 v68 
    let v70 : string = "true; let _regex_captures : std::collections::HashMap<_, _> = v69.map(|x| { //"
    let v71 : bool = Fable.Core.RustInterop.emitRustExpr () v70 
    let v72 : string = "x.unwrap_or(\"\").to_string().into()"
    let v73 : string = Fable.Core.RustInterop.emitRustExpr () v72 
    let v74 : string = "$0.clone()"
    let v75 : string = Fable.Core.RustInterop.emitRustExpr v73 v74 
    let v76 : string = $"v67.name(&$0).map(|x| x.as_str()).unwrap_or(\"\").to_string().into()"
    let v77 : string = Fable.Core.RustInterop.emitRustExpr v73 v76 
    let v78 : (string * string) = v75, v77 
    let v79 : string = "true; $0 }).map(|x| std::sync::Arc::try_unwrap(x).unwrap_or_else(|x| (*x).clone())).collect()"
    let v80 : bool = Fable.Core.RustInterop.emitRustExpr v78 v79 
    let v81 : string = "_regex_captures"
    let v82 : std_collections_HashMap<string, string> = Fable.Core.RustInterop.emitRustExpr () v81 
    let v83 : string = "true; $0 }).collect::<Vec<_>>()"
    let v84 : bool = Fable.Core.RustInterop.emitRustExpr v82 v83 
    let v85 : string = "_regex_captures"
    let v86 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v85 
    let v87 : string = "true; $0 })()"
    let v88 : bool = Fable.Core.RustInterop.emitRustExpr v86 v87 
    let v89 : string = "_capture_move"
    let v90 : Vec<std_collections_HashMap<string, string>> = Fable.Core.RustInterop.emitRustExpr () v89 
    v90
and closure85 () (v0 : std_collections_HashMap<string, string>) : US41 =
    US41_0(v0)
and method214 () : (std_collections_HashMap<string, string> -> US41) =
    closure85()
and method215 () : string =
    let v0 : string = "a"
    v0
and closure86 (v0 : uint8, v1 : int32, v2 : string, v3 : bool) () : unit =
    let v4 : US0 = US0_1
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method12()
        let v42 : string = $"{v0}/{3uy}"
        let v43 : string = method202(v22, v23, v24, v25, v26, v27, v40, v41, v3, v42, v1, v2)
        method19(v43)
and method212 (v0 : US12, v1 : string, v2 : uint8) : struct (int32 * string) =
    let v3 : System.Threading.CancellationToken option = None
    let v4 : (struct (string * string) []) = [||]
    let v5 : (struct (int32 * string * bool) -> Async<unit>) option = None
    let v6 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
    let v7 : string option = None
    let v8 : string = $"cargo fmt --manifest-path \"{v1}\" --"
    let v14 : Result<string, string> =
        match v0 with
        | US12_1(v11) -> (* Error *)
            let v12 : Result<string, string> = Error v11 
            v12
        | US12_0(v9) -> (* Ok *)
            let v10 : Result<string, string> = Ok v9 
            v10
    let v15 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v16 : string = "$0.ok()"
    let v17 : string option = Fable.Core.RustInterop.emitRustExpr v14 v16 
    let _v15 = v17 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v18 : string = "$0.ok()"
    let v19 : string option = Fable.Core.RustInterop.emitRustExpr v14 v18 
    let _v15 = v19 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v20 : string = "$0.ok()"
    let v21 : string option = Fable.Core.RustInterop.emitRustExpr v14 v20 
    let _v15 = v21 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v22 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v22 
    #endif
#if FABLE_COMPILER_PYTHON
    let v23 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v23 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v24 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v24 
    #endif
#else
    let v25 : string option = match v14 with Ok x -> Some x | Error _ -> None
    let _v15 = v25 
    #endif
    let v26 : string option = _v15 
    let v29 : bool = true
    let struct (v30 : int32, v31 : string) = method68(v8, v3, v4, v5, v6, v29, v26)
    let v32 : string = "failed to load manifest for workspace member"
    let v33 : bool = v31.Contains v32 
    let v36 : bool = v33 = false
    let v177 : US40 =
        if v36 then
            let v37 : bool = v30 = 0
            if v37 then
                US40_0(v30, v31)
            else
                US40_1(v30, v31)
        else
            let v41 : string = $"regex::Regex::new(&$0)"
            let v42 : string = "failed to read `(?<a>.*?Cargo.toml)`"
            let v43 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v42 v41 
            let v44 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v45 : string = "$0.unwrap()"
            let v46 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v45 
            let _v44 = v46 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v47 : string = "$0.unwrap()"
            let v48 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v47 
            let _v44 = v48 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v49 : string = "$0.unwrap()"
            let v50 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v43 v49 
            let _v44 = v50 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v51 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v51 
            #endif
#if FABLE_COMPILER_PYTHON
            let v52 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v52 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v53 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v53 
            #endif
#else
            let v54 : regex_Regex = match v43 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v44 = v54 
            #endif
            let v55 : regex_Regex = _v44 
            let v58 : Vec<std_collections_HashMap<string, string>> = method213(v31, v55)
            let v59 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v60 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v58 v59 
            let v61 : std_collections_HashMap<string, string> option = v60 |> Array.tryItem 0 
            let v62 : (std_collections_HashMap<string, string> -> US41) = method214()
            let v63 : US41 option = v61 |> Option.map v62 
            let v74 : US41 = US41_1
            let v75 : US41 = v63 |> Option.defaultValue v74 
            let v103 : US42 =
                match v75 with
                | US41_1 -> (* None *)
                    US42_1
                | US41_0(v79) -> (* Some *)
                    let v80 : string = method215()
                    let v81 : string = "std::collections::HashMap::get(&$0, &v80).map(|x| x).cloned()"
                    let v82 : string option = Fable.Core.RustInterop.emitRustExpr v79 v81 
                    let v83 : (string -> US5) = method6()
                    let v84 : US5 option = v82 |> Option.map v83 
                    let v95 : US5 = US5_1
                    let v96 : US5 = v84 |> Option.defaultValue v95 
                    US42_0(v96)
            let v110 : US5 =
                match v103 with
                | US42_0(v104) -> (* Some *)
                    match v104 with
                    | US5_0(v105) -> (* Some *)
                        US5_0(v105)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v110 with
            | US5_1 -> (* None *)
                US40_1(v30, v31)
            | US5_0(v112) -> (* Some *)
                let v113 : bool = method43(v112)
                let v114 : bool = v113 = false
                if v114 then
                    let v115 : string option = method34(v112)
                    let v116 : string = ""
                    let v117 : string = v115 |> Option.defaultValue v116 
                    let v120 : System.IDisposable = method44(v117)
                    let v121 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v122 : System.DateTime = System.DateTime.Now
                    let _v121 = v122 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v123 : System.DateTime = System.DateTime.Now
                    let _v121 = v123 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v124 : System.DateTime = null |> unbox<System.DateTime>
                    let _v121 = v124 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v127 : System.DateTime = System.DateTime.Now
                    let _v121 = v127 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v128 : System.DateTime = System.DateTime.Now
                    let _v121 = v128 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v129 : System.DateTime = System.DateTime.Now
                    let _v121 = v129 
                    #endif
#else
                    let v130 : System.DateTime = System.DateTime.Now
                    let _v121 = v130 
                    #endif
                    let v131 : System.DateTime = _v121 
                    let v136 : (unit -> System.Guid) = System.Guid.NewGuid
                    let v137 : System.Guid = v136 ()
                    let v140 : System.Guid = method190(v137, v131)
                    let v141 : (System.Guid -> string) = _.ToString()
                    let v142 : string = v141 v140
                    let v145 : string = $"[package]"
                    let v146 : string = $"name = \"spiral_builder_{v142}\""
                    let v147 : string = "\n"
                    let v148 : string = v145 + v147 
                    let v149 : string = v148 + v146 
                    let v150 : string = $"version = \"0.0.1\""
                    let v151 : string = v149 + v147 
                    let v152 : string = v151 + v150 
                    let v153 : string = $"edition = \"2021\""
                    let v154 : string = v152 + v147 
                    let v155 : string = v154 + v153 
                    let v156 : string = $""
                    let v157 : string = v155 + v147 
                    let v158 : string = v157 + v156 
                    let v159 : string = $"[[bin]]"
                    let v160 : string = v158 + v147 
                    let v161 : string = v160 + v159 
                    let v162 : string = $"name = \"spiral_builder_{v142}\""
                    let v163 : string = v161 + v147 
                    let v164 : string = v163 + v162 
                    let v165 : string = $"path = \"spiral_builder.rs\""
                    let v166 : string = v164 + v147 
                    let v167 : string = v166 + v165 
                    let v168 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v169 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                    Fable.Core.RustInterop.emitRustExpr struct (v112, v167) v169 
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let _v168 = () 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let _v168 = () 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let _v168 = () 
                    #endif
#else
                    let v170 : string = method67(v167)
                    System.IO.File.WriteAllText (v112, v170)
                    let _v168 = () 
                    #endif
                    _v168 
                    ()
                let v171 : bool = v30 = 0
                if v171 then
                    US40_0(v30, v31)
                else
                    US40_1(v30, v31)
    let struct (v185 : bool, v186 : int32, v187 : string) =
        match v177 with
        | US40_1(v180, v181) -> (* Error *)
            struct (true, v180, v181)
        | US40_0(v178, v179) -> (* Ok *)
            struct (false, v178, v179)
    let v188 : bool = v185 = false
    let v190 : bool =
        if v188 then
            true
        else
            let v189 : bool = v2 >= 3uy
            v189
    if v190 then
        struct (v186, v187)
    else
        let v191 : unit = ()
        let v192 : (unit -> unit) = closure86(v2, v186, v187, v185)
        let v193 : unit = (fun () -> v192 (); v191) ()
        let v234 : uint8 = v2 + 1uy
        method212(v0, v1, v234)
and method217 (v0 : int32, v1 : string) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "exit_code"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "cargo_fmt_result"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"{v1}"
    let v68 : unit = ()
    let v69 : (unit -> unit) = closure7(v3, v65)
    let v70 : unit = (fun () -> v69 (); v68) ()
    let v73 : string = " }"
    let v74 : string = $"{v73}"
    let v77 : unit = ()
    let v78 : (unit -> unit) = closure7(v3, v74)
    let v79 : unit = (fun () -> v78 (); v77) ()
    let v82 : string = v3.l0
    v82
and method216 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method217(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_rust / cargo fmt error"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure87 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method216(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method218 () : string =
    let v0 : string = "{"
    v0
and closure88 () (v0 : string) : string =
    v0
and closure89 (v0 : string, v1 : string) (v2 : string) : string =
    let v3 : string = v2.Replace (v0, v1)
    v3
and closure90 (v0 : string) (v1 : string) : string =
    let v2 : string = "type DateTime = ();"
    let v3 : string = v1.Replace (v0, v2)
    v3
and method220 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v6, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v6, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v6, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v6, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "new_code_path"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v25}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v6, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = $"{v1}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v6, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = $"{v42}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v84 : string = "external_command"
    let v85 : string = $"{v84}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v93 : string = $"{v25}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v6, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = $"{v2}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v109 : string = $"{v42}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v6, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v117 : string = "cleanup"
    let v118 : string = $"{v117}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v6, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v126 : string = $"{v25}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v6, v126)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v136 : string =
        if v3 then
            let v134 : string = "true"
            v134
        else
            let v135 : string = "false"
            v135
    let v137 : string = $"{v136}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v6, v137)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v145 : string = $"{v42}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = "cargo_result"
    let v154 : string = $"{v153}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v6, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v162 : string = $"{v25}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v170 : string = $"{v4}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v6, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v178 : string = " }"
    let v179 : string = $"{v178}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v6, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = v6.l0
    v187
and method219 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method220(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v15 : string = "spiral_builder.process_rust / error"
    let v16 : string = $"{v6} {v7} #{v14} %s{v15} / {v13}"
    method18(v16)
and closure91 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method49()
        let v43 : string = method219(v23, v24, v25, v26, v27, v28, v41, v42, v3, v1, v4, v0, v2)
        method19(v43)
and closure93 () (v0 : string) : bool =
    let v1 : string = "profile [optimized] target"
    let v2 : bool = v0.Contains v1 
    let v5 : bool = v2 = false
    if v5 then
        let v6 : string = "profile [unoptimized] target"
        let v7 : bool = v0.Contains v6 
        let v10 : bool = v7 = false
        if v10 then
            let v11 : string = "profile [unoptimized + debuginfo] target"
            let v12 : bool = v0.Contains v11 
            let v15 : bool = v12 = false
            v15
        else
            false
    else
        false
and closure92 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : (string -> bool) = closure93()
    let v6 : (string []) = v2 |> Array.skipWhile v5 
    let v7 : (string []) = v6 |> Array.skip 2 
    let v8 : string seq = v7 |> Seq.ofArray
    let v11 : string = method40()
    let v12 : (string -> (string seq -> string)) = String.concat
    let v13 : (string seq -> string) = v12 v11
    v13 v8
and method222 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _v33 = v55 
    #endif
    let v58 : string = _v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "new_code_path"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "external_command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "cargo_result"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method221 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method222(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_rust / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure95 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method221(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure94 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure95(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method224 (v0 : int32, v1 : string, v2 : string, v3 : bool, v4 : string) : string =
    let v5 : string = method14()
    let v6 : Mut3 = {l0 = v5} : Mut3
    let v7 : string = "{ "
    let v8 : string = $"{v7}"
    let v11 : unit = ()
    let v12 : (unit -> unit) = closure7(v6, v8)
    let v13 : unit = (fun () -> v12 (); v11) ()
    let v16 : string = "exit_code"
    let v17 : string = $"{v16}"
    let v20 : unit = ()
    let v21 : (unit -> unit) = closure7(v6, v17)
    let v22 : unit = (fun () -> v21 (); v20) ()
    let v25 : string = " = "
    let v26 : string = $"{v25}"
    let v29 : unit = ()
    let v30 : (unit -> unit) = closure7(v6, v26)
    let v31 : unit = (fun () -> v30 (); v29) ()
    let v34 : string = $"{v0}"
    let v37 : unit = ()
    let v38 : (unit -> unit) = closure7(v6, v34)
    let v39 : unit = (fun () -> v38 (); v37) ()
    let v42 : string = "; "
    let v43 : string = $"{v42}"
    let v46 : unit = ()
    let v47 : (unit -> unit) = closure7(v6, v43)
    let v48 : unit = (fun () -> v47 (); v46) ()
    let v51 : string = "new_code_path"
    let v52 : string = $"{v51}"
    let v55 : unit = ()
    let v56 : (unit -> unit) = closure7(v6, v52)
    let v57 : unit = (fun () -> v56 (); v55) ()
    let v60 : string = $"{v25}"
    let v63 : unit = ()
    let v64 : (unit -> unit) = closure7(v6, v60)
    let v65 : unit = (fun () -> v64 (); v63) ()
    let v68 : string = $"{v1}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v6, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = $"{v42}"
    let v79 : unit = ()
    let v80 : (unit -> unit) = closure7(v6, v76)
    let v81 : unit = (fun () -> v80 (); v79) ()
    let v84 : string = "cargo_result"
    let v85 : string = $"{v84}"
    let v88 : unit = ()
    let v89 : (unit -> unit) = closure7(v6, v85)
    let v90 : unit = (fun () -> v89 (); v88) ()
    let v93 : string = $"{v25}"
    let v96 : unit = ()
    let v97 : (unit -> unit) = closure7(v6, v93)
    let v98 : unit = (fun () -> v97 (); v96) ()
    let v101 : string = $"{v2}"
    let v104 : unit = ()
    let v105 : (unit -> unit) = closure7(v6, v101)
    let v106 : unit = (fun () -> v105 (); v104) ()
    let v109 : string = $"{v42}"
    let v112 : unit = ()
    let v113 : (unit -> unit) = closure7(v6, v109)
    let v114 : unit = (fun () -> v113 (); v112) ()
    let v117 : string = "cleanup"
    let v118 : string = $"{v117}"
    let v121 : unit = ()
    let v122 : (unit -> unit) = closure7(v6, v118)
    let v123 : unit = (fun () -> v122 (); v121) ()
    let v126 : string = $"{v25}"
    let v129 : unit = ()
    let v130 : (unit -> unit) = closure7(v6, v126)
    let v131 : unit = (fun () -> v130 (); v129) ()
    let v136 : string =
        if v3 then
            let v134 : string = "true"
            v134
        else
            let v135 : string = "false"
            v135
    let v137 : string = $"{v136}"
    let v140 : unit = ()
    let v141 : (unit -> unit) = closure7(v6, v137)
    let v142 : unit = (fun () -> v141 (); v140) ()
    let v145 : string = $"{v42}"
    let v148 : unit = ()
    let v149 : (unit -> unit) = closure7(v6, v145)
    let v150 : unit = (fun () -> v149 (); v148) ()
    let v153 : string = "spiral_wasm_result"
    let v154 : string = $"{v153}"
    let v157 : unit = ()
    let v158 : (unit -> unit) = closure7(v6, v154)
    let v159 : unit = (fun () -> v158 (); v157) ()
    let v162 : string = $"{v25}"
    let v165 : unit = ()
    let v166 : (unit -> unit) = closure7(v6, v162)
    let v167 : unit = (fun () -> v166 (); v165) ()
    let v170 : string = $"{v4}"
    let v173 : unit = ()
    let v174 : (unit -> unit) = closure7(v6, v170)
    let v175 : unit = (fun () -> v174 (); v173) ()
    let v178 : string = " }"
    let v179 : string = $"{v178}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v6, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = v6.l0
    v187
and method223 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : bool, v12 : string) : string =
    let v13 : string = method224(v8, v9, v10, v11, v12)
    let v14 : int64 = v0.l0
    let v15 : string = "spiral_builder.process_rust / wasm error"
    let v16 : string = $"{v6} {v7} #{v14} %s{v15} / {v13}"
    method18(v16)
and closure96 (v0 : bool, v1 : string, v2 : string, v3 : string, v4 : int32) () : unit =
    let v5 : US0 = US0_4
    let v6 : bool = method7(v5)
    if v6 then
        let v7 : unit = ()
        let v8 : (unit -> unit) = closure2()
        let v9 : unit = (fun () -> v8 (); v7) ()
        let struct (v23 : Mut0, v24 : Mut1, v25 : Mut2, v26 : Mut3, v27 : Mut4, v28 : int64 option) = TraceState.trace_state.Value
        let v41 : string = method8(v23, v24, v25, v26, v27, v28)
        let v42 : string = method49()
        let v43 : string = $"\n{v3}"
        let v44 : string = method223(v23, v24, v25, v26, v27, v28, v41, v42, v4, v1, v2, v0, v43)
        method19(v44)
and method226 (v0 : int32, v1 : string, v2 : string, v3 : string, v4 : bool, v5 : string) : string =
    let v6 : string = method14()
    let v7 : Mut3 = {l0 = v6} : Mut3
    let v8 : string = "{ "
    let v9 : string = $"{v8}"
    let v12 : unit = ()
    let v13 : (unit -> unit) = closure7(v7, v9)
    let v14 : unit = (fun () -> v13 (); v12) ()
    let v17 : string = "exit_code"
    let v18 : string = $"{v17}"
    let v21 : unit = ()
    let v22 : (unit -> unit) = closure7(v7, v18)
    let v23 : unit = (fun () -> v22 (); v21) ()
    let v26 : string = " = "
    let v27 : string = $"{v26}"
    let v30 : unit = ()
    let v31 : (unit -> unit) = closure7(v7, v27)
    let v32 : unit = (fun () -> v31 (); v30) ()
    let v35 : string = $"{v0}"
    let v38 : unit = ()
    let v39 : (unit -> unit) = closure7(v7, v35)
    let v40 : unit = (fun () -> v39 (); v38) ()
    let v43 : string = "; "
    let v44 : string = $"{v43}"
    let v47 : unit = ()
    let v48 : (unit -> unit) = closure7(v7, v44)
    let v49 : unit = (fun () -> v48 (); v47) ()
    let v52 : string = "new_code_path"
    let v53 : string = $"{v52}"
    let v56 : unit = ()
    let v57 : (unit -> unit) = closure7(v7, v53)
    let v58 : unit = (fun () -> v57 (); v56) ()
    let v61 : string = $"{v26}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v7, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v69 : string = $"{v1}"
    let v72 : unit = ()
    let v73 : (unit -> unit) = closure7(v7, v69)
    let v74 : unit = (fun () -> v73 (); v72) ()
    let v77 : string = $"{v43}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v7, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v85 : string = "wasm_path"
    let v86 : string = $"{v85}"
    let v89 : unit = ()
    let v90 : (unit -> unit) = closure7(v7, v86)
    let v91 : unit = (fun () -> v90 (); v89) ()
    let v94 : string = $"{v26}"
    let v97 : unit = ()
    let v98 : (unit -> unit) = closure7(v7, v94)
    let v99 : unit = (fun () -> v98 (); v97) ()
    let v102 : string = $"{v2}"
    let v105 : unit = ()
    let v106 : (unit -> unit) = closure7(v7, v102)
    let v107 : unit = (fun () -> v106 (); v105) ()
    let v110 : string = $"{v43}"
    let v113 : unit = ()
    let v114 : (unit -> unit) = closure7(v7, v110)
    let v115 : unit = (fun () -> v114 (); v113) ()
    let v118 : string = "command"
    let v119 : string = $"{v118}"
    let v122 : unit = ()
    let v123 : (unit -> unit) = closure7(v7, v119)
    let v124 : unit = (fun () -> v123 (); v122) ()
    let v127 : string = $"{v26}"
    let v130 : unit = ()
    let v131 : (unit -> unit) = closure7(v7, v127)
    let v132 : unit = (fun () -> v131 (); v130) ()
    let v135 : string = $"{v3}"
    let v138 : unit = ()
    let v139 : (unit -> unit) = closure7(v7, v135)
    let v140 : unit = (fun () -> v139 (); v138) ()
    let v143 : string = $"{v43}"
    let v146 : unit = ()
    let v147 : (unit -> unit) = closure7(v7, v143)
    let v148 : unit = (fun () -> v147 (); v146) ()
    let v151 : string = "cleanup"
    let v152 : string = $"{v151}"
    let v155 : unit = ()
    let v156 : (unit -> unit) = closure7(v7, v152)
    let v157 : unit = (fun () -> v156 (); v155) ()
    let v160 : string = $"{v26}"
    let v163 : unit = ()
    let v164 : (unit -> unit) = closure7(v7, v160)
    let v165 : unit = (fun () -> v164 (); v163) ()
    let v170 : string =
        if v4 then
            let v168 : string = "true"
            v168
        else
            let v169 : string = "false"
            v169
    let v171 : string = $"{v170}"
    let v174 : unit = ()
    let v175 : (unit -> unit) = closure7(v7, v171)
    let v176 : unit = (fun () -> v175 (); v174) ()
    let v179 : string = $"{v43}"
    let v182 : unit = ()
    let v183 : (unit -> unit) = closure7(v7, v179)
    let v184 : unit = (fun () -> v183 (); v182) ()
    let v187 : string = "cargo_result"
    let v188 : string = $"{v187}"
    let v191 : unit = ()
    let v192 : (unit -> unit) = closure7(v7, v188)
    let v193 : unit = (fun () -> v192 (); v191) ()
    let v196 : string = $"{v26}"
    let v199 : unit = ()
    let v200 : (unit -> unit) = closure7(v7, v196)
    let v201 : unit = (fun () -> v200 (); v199) ()
    let v204 : string = $"{v5}"
    let v207 : unit = ()
    let v208 : (unit -> unit) = closure7(v7, v204)
    let v209 : unit = (fun () -> v208 (); v207) ()
    let v212 : string = " }"
    let v213 : string = $"{v212}"
    let v216 : unit = ()
    let v217 : (unit -> unit) = closure7(v7, v213)
    let v218 : unit = (fun () -> v217 (); v216) ()
    let v221 : string = v7.l0
    v221
and method225 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string, v12 : bool, v13 : string) : string =
    let v14 : string = method226(v8, v9, v10, v11, v12, v13)
    let v15 : int64 = v0.l0
    let v16 : string = "spiral_builder.process_rust / cargo error"
    let v17 : string = $"{v6} {v7} #{v15} %s{v16} / {v14}"
    method18(v17)
and closure97 (v0 : bool, v1 : string, v2 : string, v3 : int32, v4 : string, v5 : string) () : unit =
    let v6 : US0 = US0_4
    let v7 : bool = method7(v6)
    if v7 then
        let v8 : unit = ()
        let v9 : (unit -> unit) = closure2()
        let v10 : unit = (fun () -> v9 (); v8) ()
        let struct (v24 : Mut0, v25 : Mut1, v26 : Mut2, v27 : Mut3, v28 : Mut4, v29 : int64 option) = TraceState.trace_state.Value
        let v42 : string = method8(v24, v25, v26, v27, v28, v29)
        let v43 : string = method49()
        let v44 : string = $"\n{v2}"
        let v45 : string = method225(v24, v25, v26, v27, v28, v29, v42, v43, v3, v1, v4, v5, v0, v44)
        method19(v45)
and method228 (v0 : string, v1 : UH4) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "new_code_path"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : string = $"{v0}"
    let v34 : unit = ()
    let v35 : (unit -> unit) = closure7(v3, v31)
    let v36 : unit = (fun () -> v35 (); v34) ()
    let v39 : string = "; "
    let v40 : string = $"{v39}"
    let v43 : unit = ()
    let v44 : (unit -> unit) = closure7(v3, v40)
    let v45 : unit = (fun () -> v44 (); v43) ()
    let v48 : string = "cleanup"
    let v49 : string = $"{v48}"
    let v52 : unit = ()
    let v53 : (unit -> unit) = closure7(v3, v49)
    let v54 : unit = (fun () -> v53 (); v52) ()
    let v57 : string = $"{v22}"
    let v60 : unit = ()
    let v61 : (unit -> unit) = closure7(v3, v57)
    let v62 : unit = (fun () -> v61 (); v60) ()
    let v65 : string = $"%A{v1}"
    let v68 : string = $"{v65}"
    let v71 : unit = ()
    let v72 : (unit -> unit) = closure7(v3, v68)
    let v73 : unit = (fun () -> v72 (); v71) ()
    let v76 : string = " }"
    let v77 : string = $"{v76}"
    let v80 : unit = ()
    let v81 : (unit -> unit) = closure7(v3, v77)
    let v82 : unit = (fun () -> v81 (); v80) ()
    let v85 : string = v3.l0
    v85
and method227 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string, v9 : string, v10 : bool, v11 : string, v12 : bool, v13 : string, v14 : bool, v15 : string, v16 : bool, v17 : string, v18 : bool) : string =
    let v19 : UH4 = UH4_0
    let v20 : UH4 = UH4_1(v17, v18, v19)
    let v21 : UH4 = UH4_1(v15, v16, v20)
    let v22 : UH4 = UH4_1(v13, v14, v21)
    let v23 : UH4 = UH4_1(v11, v12, v22)
    let v24 : UH4 = UH4_1(v9, v10, v23)
    let v25 : string = method228(v8, v24)
    let v26 : int64 = v0.l0
    let v27 : string = "spiral_builder.process_rust / cleanup"
    let v28 : string = $"{v6} {v7} #{v26} %s{v27} / {v25}"
    method18(v28)
and closure98 (v0 : string, v1 : string, v2 : bool, v3 : string, v4 : bool, v5 : string, v6 : bool, v7 : string, v8 : bool, v9 : string, v10 : bool) () : unit =
    let v11 : US0 = US0_0
    let v12 : bool = method7(v11)
    if v12 then
        let v13 : unit = ()
        let v14 : (unit -> unit) = closure2()
        let v15 : unit = (fun () -> v14 (); v13) ()
        let struct (v29 : Mut0, v30 : Mut1, v31 : Mut2, v32 : Mut3, v33 : Mut4, v34 : int64 option) = TraceState.trace_state.Value
        let v47 : string = method8(v29, v30, v31, v32, v33, v34)
        let v48 : string = method52()
        let v49 : string = method227(v29, v30, v31, v32, v33, v34, v47, v48, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
        method19(v49)
and method229 (v0 : UH4) : unit =
    match v0 with
    | UH4_1(v1, v2, v3) -> (* Cons *)
        let v4 : unit = ()
        
#if FABLE_COMPILER || WASM || CONTRACT
        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
        let v5 : string = "std::fs::remove_file(&*$0).unwrap()"
        Fable.Core.RustInterop.emitRustExpr v1 v5 
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && WASM
        let _v4 = () 
        #endif
#if FABLE_COMPILER_RUST && CONTRACT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_TYPESCRIPT
        let _v4 = () 
        #endif
#if FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
        let _v4 = () 
        #endif
#else
        let v6 : (string -> unit) = System.IO.File.Delete
        v6 v1
        let _v4 = () 
        #endif
        _v4 
        method229(v3)
    | UH4_0 -> (* Nil *)
        ()
and method230 (v0 : string) : string =
    v0
and method231 (v0 : async_walkdir_DirEntry) : async_walkdir_DirEntry =
    v0
and closure100 () (v0 : std_fs_FileType) : US43 =
    US43_0(v0)
and method232 () : (std_fs_FileType -> US43) =
    closure100()
and closure101 () (v0 : std_string_String) : US43 =
    US43_1(v0)
and method233 () : (std_string_String -> US43) =
    closure101()
and method234 (v0 : std_fs_FileType) : std_fs_FileType =
    v0
and method235 (v0 : string) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "std::path::PathBuf::from($0)"
    let v52 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "std::path::PathBuf::from($0)"
    let v54 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "std::path::PathBuf::from($0)"
    let v56 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v45 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v63 
    #endif
#else
    let v66 : std_path_PathBuf = v45 |> unbox<std_path_PathBuf>
    let _v50 = v66 
    #endif
    let v69 : std_path_PathBuf = _v50 
    let v74 : string = "$0.file_name()"
    let v75 : Ref<std_ffi_OsStr> option = Fable.Core.RustInterop.emitRustExpr v69 v74 
    let v76 : string = "true; let _optionm_map_ = $0.map(|x| { //"
    let v77 : bool = Fable.Core.RustInterop.emitRustExpr v75 v76 
    let v78 : string = "x"
    let v79 : Ref<std_ffi_OsStr> = Fable.Core.RustInterop.emitRustExpr () v78 
    let v80 : string = "$0.to_os_string()"
    let v81 : std_ffi_OsString = Fable.Core.RustInterop.emitRustExpr v79 v80 
    let v82 : string = "$0.to_str()"
    let v83 : Ref<Str> option = Fable.Core.RustInterop.emitRustExpr v81 v82 
    let v84 : string = "$0.unwrap()"
    let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v83 v84 
    let v86 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v87 : string = "String::from($0)"
    let v88 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v87 
    let _v86 = v88 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v89 : string = "String::from($0)"
    let v90 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v89 
    let _v86 = v90 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v91 : string = "String::from($0)"
    let v92 : std_string_String = Fable.Core.RustInterop.emitRustExpr v85 v91 
    let _v86 = v92 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v93 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v93 
    #endif
#if FABLE_COMPILER_PYTHON
    let v96 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v96 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v99 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v99 
    #endif
#else
    let v102 : std_string_String = v85 |> unbox<std_string_String>
    let _v86 = v102 
    #endif
    let v105 : std_string_String = _v86 
    let v110 : string = "fable_library_rust::String_::fromString($0)"
    let v111 : string = Fable.Core.RustInterop.emitRustExpr v105 v110 
    let v112 : string = "true; $0 })"
    let v113 : bool = Fable.Core.RustInterop.emitRustExpr v111 v112 
    let v114 : string = "_optionm_map_"
    let v115 : string option = Fable.Core.RustInterop.emitRustExpr () v114 
    let v116 : (string -> US5) = method6()
    let v117 : US5 option = v115 |> Option.map v116 
    let v128 : US5 = US5_1
    let v129 : US5 = v117 |> Option.defaultValue v128 
    let v136 : string =
        match v129 with
        | US5_1 -> (* None *)
            let v134 : string = ""
            v134
        | US5_0(v133) -> (* Some *)
            v133
    let _v1 = v136 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v137 : string = null |> unbox<string>
    let _v1 = v137 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v140 : string = null |> unbox<string>
    let _v1 = v140 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v143 : string = null |> unbox<string>
    let _v1 = v143 
    #endif
#if FABLE_COMPILER_PYTHON
    let v146 : string = null |> unbox<string>
    let _v1 = v146 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v149 : (string -> string) = System.IO.Path.GetDirectoryName
    let v150 : string = v149 v0
    let _v1 = v150 
    #endif
#else
    let v151 : (string -> string) = System.IO.Path.GetDirectoryName
    let v152 : string = v151 v0
    let _v1 = v152 
    #endif
    let v153 : string = _v1 
    v153
and method236 (v0 : US44) : US44 =
    v0
and method237 (v0 : async_walkdir_Filtering) : async_walkdir_Filtering =
    v0
and closure99 (v0 : string) (v1 : async_walkdir_DirEntry) : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "true; let __future_init = Box::pin(async move { //"
    let v5 : bool = Fable.Core.RustInterop.emitRustExpr () v4 
    let v6 : async_walkdir_DirEntry = method231(v1)
    let v7 : string = "Box::pin(async_walkdir::DirEntry::file_type(&v6))"
    let v8 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>, Send<Dyn<std_future_Future<Result<std_fs_FileType, std_io_Error>>>>>>> = Fable.Core.RustInterop.emitRustExpr () v7 
    let v9 : string = "v8.await"
    let v10 : Result<std_fs_FileType, std_io_Error> = Fable.Core.RustInterop.emitRustExpr () v9 
    let v11 : (std_io_Error -> std_string_String) = method46()
    let v12 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v13 : string = "$0.map_err(|x| $1(x))"
    let v14 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v10, v11) v13 
    let _v12 = v14 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v15 : string = "$0.map_err(|x| $1(x))"
    let v16 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v10, v11) v15 
    let _v12 = v16 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v17 : string = "$0.map_err(|x| $1(x))"
    let v18 : Result<std_fs_FileType, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v10, v11) v17 
    let _v12 = v18 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v19 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v19 
    #endif
#if FABLE_COMPILER_PYTHON
    let v20 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v20 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v21 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v21 
    #endif
#else
    let v22 : Result<std_fs_FileType, std_string_String> = match v10 with Ok x -> Ok x | Error x -> Error (v11 x)
    let _v12 = v22 
    #endif
    let v23 : Result<std_fs_FileType, std_string_String> = _v12 
    let v26 : (std_fs_FileType -> US43) = method232()
    let v27 : (std_string_String -> US43) = method233()
    let v28 : US43 = match v23 with Ok x -> v26 x | Error x -> v27 x
    let v210 : US44 =
        match v28 with
        | US43_0(v29) -> (* Ok *)
            let v30 : std_fs_FileType = method234(v29)
            let v31 : string = "std::fs::FileType::is_dir(&v30)"
            let v32 : bool = Fable.Core.RustInterop.emitRustExpr () v31 
            let v33 : bool = v32 = false
            if v33 then
                US44_0
            else
                let v35 : string = "async_walkdir::DirEntry::path(&$0)"
                let v36 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v35 
                let v37 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v38 : string = "$0.display()"
                let v39 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v36 v38 
                let _v37 = v39 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v40 : string = "$0.display()"
                let v41 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v36 v40 
                let _v37 = v41 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v42 : string = "$0.display()"
                let v43 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v36 v42 
                let _v37 = v43 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v44 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v44 
                #endif
#if FABLE_COMPILER_PYTHON
                let v47 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v47 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v50 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v50 
                #endif
#else
                let v53 : std_path_Display = v36 |> unbox<std_path_Display>
                let _v37 = v53 
                #endif
                let v56 : std_path_Display = _v37 
                let v61 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v62 : string = "format!(\"{}\", $0)"
                let v63 : std_string_String = Fable.Core.RustInterop.emitRustExpr v56 v62 
                let _v61 = v63 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v64 : string = "format!(\"{}\", $0)"
                let v65 : std_string_String = Fable.Core.RustInterop.emitRustExpr v56 v64 
                let _v61 = v65 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v66 : string = "format!(\"{}\", $0)"
                let v67 : std_string_String = Fable.Core.RustInterop.emitRustExpr v56 v66 
                let _v61 = v67 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v68 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v68 
                #endif
#if FABLE_COMPILER_PYTHON
                let v71 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v71 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v74 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v74 
                #endif
#else
                let v77 : std_string_String = null |> unbox<std_string_String>
                let _v61 = v77 
                #endif
                let v80 : std_string_String = _v61 
                let v85 : string = "fable_library_rust::String_::fromString($0)"
                let v86 : string = Fable.Core.RustInterop.emitRustExpr v80 v85 
                let v87 : string = method235(v86)
                let v88 : bool = v87.StartsWith (v0, false, null)
                let v91 : bool = v88 = false
                if v91 then
                    US44_1
                else
                    let v93 : string option = method34(v86)
                    let v94 : (string -> US5) = method6()
                    let v95 : US5 option = v93 |> Option.map v94 
                    let v106 : US5 = US5_1
                    let v107 : US5 = v95 |> Option.defaultValue v106 
                    match v107 with
                    | US5_0(v111) -> (* Some *)
                        let v112 : bool = v111.Contains v0 
                        let v115 : bool = v112 = false
                        if v115 then
                            US44_2
                        else
                            US44_1
                    | _ ->
                        US44_1
        | _ ->
            let v123 : string = "async_walkdir::DirEntry::path(&$0)"
            let v124 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v1 v123 
            let v125 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v126 : string = "$0.display()"
            let v127 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v126 
            let _v125 = v127 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v128 : string = "$0.display()"
            let v129 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v128 
            let _v125 = v129 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v130 : string = "$0.display()"
            let v131 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v124 v130 
            let _v125 = v131 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v132 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v132 
            #endif
#if FABLE_COMPILER_PYTHON
            let v135 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v135 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v138 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v138 
            #endif
#else
            let v141 : std_path_Display = v124 |> unbox<std_path_Display>
            let _v125 = v141 
            #endif
            let v144 : std_path_Display = _v125 
            let v149 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v150 : string = "format!(\"{}\", $0)"
            let v151 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v150 
            let _v149 = v151 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v152 : string = "format!(\"{}\", $0)"
            let v153 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v152 
            let _v149 = v153 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v154 : string = "format!(\"{}\", $0)"
            let v155 : std_string_String = Fable.Core.RustInterop.emitRustExpr v144 v154 
            let _v149 = v155 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v156 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v156 
            #endif
#if FABLE_COMPILER_PYTHON
            let v159 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v159 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v162 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v162 
            #endif
#else
            let v165 : std_string_String = null |> unbox<std_string_String>
            let _v149 = v165 
            #endif
            let v168 : std_string_String = _v149 
            let v173 : string = "fable_library_rust::String_::fromString($0)"
            let v174 : string = Fable.Core.RustInterop.emitRustExpr v168 v173 
            let v175 : string = method235(v174)
            let v176 : bool = v175.StartsWith (v0, false, null)
            let v179 : bool = v176 = false
            if v179 then
                US44_1
            else
                let v181 : string option = method34(v174)
                let v182 : (string -> US5) = method6()
                let v183 : US5 option = v181 |> Option.map v182 
                let v194 : US5 = US5_1
                let v195 : US5 = v183 |> Option.defaultValue v194 
                match v195 with
                | US5_0(v199) -> (* Some *)
                    let v200 : bool = v199.Contains v0 
                    let v203 : bool = v200 = false
                    if v203 then
                        US44_2
                    else
                        US44_1
                | _ ->
                    US44_1
    let v211 : US44 = method236(v210)
    let v212 : string = ""
    let v213 : string = "}"
    let v214 : string = v212 + v213 
    let v215 : _ = v211 
    let v216 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v217 : string = $"true; let v215 = $0"
    let v218 : bool = Fable.Core.RustInterop.emitRustExpr v215 v217 
    let _v216 = v218 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v219 : string = $"true; let v215 = $0"
    let v220 : bool = Fable.Core.RustInterop.emitRustExpr v215 v219 
    let _v216 = v220 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v221 : string = $"true; let v215 = $0"
    let v222 : bool = Fable.Core.RustInterop.emitRustExpr v215 v221 
    let _v216 = v222 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v223 : bool = true
    let _v216 = v223 
    #endif
#if FABLE_COMPILER_PYTHON
    let v224 : bool = true
    let _v216 = v224 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v225 : bool = true
    let _v216 = v225 
    #endif
#else
    let v226 : bool = true
    let _v216 = v226 
    #endif
    let v227 : bool = _v216 
    let v230 : string = $"true; v215 " + v214 + "); " + v212 + " // rust.fix_closure'"
    let v231 : bool = Fable.Core.RustInterop.emitRustExpr () v230 
    let v232 : string = "__future_init"
    let v233 : _ = Fable.Core.RustInterop.emitRustExpr () v232 
    let v234 : string = "v233"
    let v235 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<US44>>, Send<Dyn<std_future_Future<US44>>>>>> = Fable.Core.RustInterop.emitRustExpr () v234 
    let v236 : string = "v235.await"
    let v237 : US44 = Fable.Core.RustInterop.emitRustExpr () v236 
    let v246 : async_walkdir_Filtering =
        match v237 with
        | US44_2 -> (* Continue *)
            let v242 : string = "async_walkdir::Filtering::Continue"
            let v243 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v242 
            v243
        | US44_0 -> (* Ignore *)
            let v238 : string = "async_walkdir::Filtering::Ignore"
            let v239 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v238 
            v239
        | US44_1 -> (* IgnoreDir *)
            let v240 : string = "async_walkdir::Filtering::IgnoreDir"
            let v241 : async_walkdir_Filtering = Fable.Core.RustInterop.emitRustExpr () v240 
            v241
    let v247 : async_walkdir_Filtering = method237(v246)
    let v248 : string = v212 + v213 
    let v249 : _ = v247 
    let v250 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v251 : string = $"true; let v249 = $0"
    let v252 : bool = Fable.Core.RustInterop.emitRustExpr v249 v251 
    let _v250 = v252 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v253 : string = $"true; let v249 = $0"
    let v254 : bool = Fable.Core.RustInterop.emitRustExpr v249 v253 
    let _v250 = v254 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v255 : string = $"true; let v249 = $0"
    let v256 : bool = Fable.Core.RustInterop.emitRustExpr v249 v255 
    let _v250 = v256 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v257 : bool = true
    let _v250 = v257 
    #endif
#if FABLE_COMPILER_PYTHON
    let v258 : bool = true
    let _v250 = v258 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v259 : bool = true
    let _v250 = v259 
    #endif
#else
    let v260 : bool = true
    let _v250 = v260 
    #endif
    let v261 : bool = _v250 
    let v264 : string = $"true; v249 " + v248 + "); " + v212 + " // rust.fix_closure'"
    let v265 : bool = Fable.Core.RustInterop.emitRustExpr () v264 
    let v266 : string = "__future_init"
    let v267 : _ = Fable.Core.RustInterop.emitRustExpr () v266 
    let v268 : string = "v267"
    let v269 : std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>> = Fable.Core.RustInterop.emitRustExpr () v268 
    v269
and closure103 () (v0 : async_walkdir_Error) : std_string_String =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    v20
and method239 () : (async_walkdir_Error -> std_string_String) =
    closure103()
and closure104 () (v0 : async_walkdir_DirEntry) : US45 =
    US45_0(v0)
and method240 () : (async_walkdir_DirEntry -> US45) =
    closure104()
and closure105 () (v0 : std_string_String) : US45 =
    US45_1(v0)
and method241 () : (std_string_String -> US45) =
    closure105()
and method242 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String) : string =
    let v9 : string = method99(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_typescript / stream_filter_map"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure106 (v0 : std_string_String) () : unit =
    let v1 : US0 = US0_4
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method49()
        let v39 : string = method242(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure102 (v0 : string) (v1 : Result<async_walkdir_DirEntry, async_walkdir_Error>) : struct (string * string) option =
    let v2 : (async_walkdir_Error -> std_string_String) = method239()
    let v3 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4 : string = "$0.map_err(|x| $1(x))"
    let v5 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v4 
    let _v3 = v5 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v6 : string = "$0.map_err(|x| $1(x))"
    let v7 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v6 
    let _v3 = v7 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v8 : string = "$0.map_err(|x| $1(x))"
    let v9 : Result<async_walkdir_DirEntry, std_string_String> = Fable.Core.RustInterop.emitRustExpr struct (v1, v2) v8 
    let _v3 = v9 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v10 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v10 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v12 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v12 
    #endif
#else
    let v13 : Result<async_walkdir_DirEntry, std_string_String> = match v1 with Ok x -> Ok x | Error x -> Error (v2 x)
    let _v3 = v13 
    #endif
    let v14 : Result<async_walkdir_DirEntry, std_string_String> = _v3 
    let v17 : (async_walkdir_DirEntry -> US45) = method240()
    let v18 : (std_string_String -> US45) = method241()
    let v19 : US45 = match v14 with Ok x -> v17 x | Error x -> v18 x
    let v193 : US46 =
        match v19 with
        | US45_1(v148) -> (* Error *)
            let v149 : unit = ()
            let v150 : (unit -> unit) = closure106(v148)
            let v151 : unit = (fun () -> v150 (); v149) ()
            US46_1
        | US45_0(v20) -> (* Ok *)
            let v21 : string = "async_walkdir::DirEntry::path(&$0)"
            let v22 : std_path_PathBuf = Fable.Core.RustInterop.emitRustExpr v20 v21 
            let v23 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v24 : string = "$0.display()"
            let v25 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v24 
            let _v23 = v25 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v26 : string = "$0.display()"
            let v27 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v26 
            let _v23 = v27 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v28 : string = "$0.display()"
            let v29 : std_path_Display = Fable.Core.RustInterop.emitRustExpr v22 v28 
            let _v23 = v29 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v30 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v30 
            #endif
#if FABLE_COMPILER_PYTHON
            let v33 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v33 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v36 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v36 
            #endif
#else
            let v39 : std_path_Display = v22 |> unbox<std_path_Display>
            let _v23 = v39 
            #endif
            let v42 : std_path_Display = _v23 
            let v47 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v48 : string = "format!(\"{}\", $0)"
            let v49 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v48 
            let _v47 = v49 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v50 : string = "format!(\"{}\", $0)"
            let v51 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v50 
            let _v47 = v51 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v52 : string = "format!(\"{}\", $0)"
            let v53 : std_string_String = Fable.Core.RustInterop.emitRustExpr v42 v52 
            let _v47 = v53 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v54 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v54 
            #endif
#if FABLE_COMPILER_PYTHON
            let v57 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v57 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v60 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v60 
            #endif
#else
            let v63 : std_string_String = null |> unbox<std_string_String>
            let _v47 = v63 
            #endif
            let v66 : std_string_String = _v47 
            let v71 : string = "fable_library_rust::String_::fromString($0)"
            let v72 : string = Fable.Core.RustInterop.emitRustExpr v66 v71 
            let v73 : string = $"{v0}\.(?<a>[-\d\w.]+)$"
            let v74 : string = $"regex::Regex::new(&$0)"
            let v75 : Result<regex_Regex, regex_Error> = Fable.Core.RustInterop.emitRustExpr v73 v74 
            let v76 : unit = ()
            
#if FABLE_COMPILER || WASM || CONTRACT
            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
            let v77 : string = "$0.unwrap()"
            let v78 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v77 
            let _v76 = v78 
            #endif
#if FABLE_COMPILER_RUST && WASM
            let v79 : string = "$0.unwrap()"
            let v80 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v79 
            let _v76 = v80 
            #endif
#if FABLE_COMPILER_RUST && CONTRACT
            let v81 : string = "$0.unwrap()"
            let v82 : regex_Regex = Fable.Core.RustInterop.emitRustExpr v75 v81 
            let _v76 = v82 
            #endif
#if FABLE_COMPILER_TYPESCRIPT
            let v83 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v83 
            #endif
#if FABLE_COMPILER_PYTHON
            let v84 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v84 
            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
            let v85 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v85 
            #endif
#else
            let v86 : regex_Regex = match v75 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
            let _v76 = v86 
            #endif
            let v87 : regex_Regex = _v76 
            let v90 : Vec<std_collections_HashMap<string, string>> = method213(v72, v87)
            let v91 : string = "fable_library_rust::NativeArray_::array_from($0)"
            let v92 : (std_collections_HashMap<string, string> []) = Fable.Core.RustInterop.emitRustExpr v90 v91 
            let v93 : std_collections_HashMap<string, string> option = v92 |> Array.tryItem 0 
            let v94 : (std_collections_HashMap<string, string> -> US41) = method214()
            let v95 : US41 option = v93 |> Option.map v94 
            let v106 : US41 = US41_1
            let v107 : US41 = v95 |> Option.defaultValue v106 
            let v135 : US42 =
                match v107 with
                | US41_1 -> (* None *)
                    US42_1
                | US41_0(v111) -> (* Some *)
                    let v112 : string = method215()
                    let v113 : string = "std::collections::HashMap::get(&$0, &v112).map(|x| x).cloned()"
                    let v114 : string option = Fable.Core.RustInterop.emitRustExpr v111 v113 
                    let v115 : (string -> US5) = method6()
                    let v116 : US5 option = v114 |> Option.map v115 
                    let v127 : US5 = US5_1
                    let v128 : US5 = v116 |> Option.defaultValue v127 
                    US42_0(v128)
            let v142 : US5 =
                match v135 with
                | US42_0(v136) -> (* Some *)
                    match v136 with
                    | US5_0(v137) -> (* Some *)
                        US5_0(v137)
                    | _ ->
                        US5_1
                | _ ->
                    US5_1
            match v142 with
            | US5_1 -> (* None *)
                US46_1
            | US5_0(v143) -> (* Some *)
                US46_0(v72, v143)
    match v193 with
    | US46_1 -> (* None *)
        let v199 : struct (string * string) option = None
        v199
    | US46_0(v194, v195) -> (* Some *)
        let v196 : struct (string * string) option = Some struct (v194, v195) 
        v196
and method238 (v0 : string) : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) =
    closure102(v0)
and closure107 () struct (v0 : string, v1 : string) : struct (string * string) =
    struct (v0, v1)
and closure108 () struct (v0 : string, v1 : string) : US46 =
    US46_0(v0, v1)
and method243 () : (struct (string * string) -> US46) =
    closure108()
and method245 (v0 : US46) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "version"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"%A{v0}"
    let v33 : string = $"{v30}"
    let v36 : unit = ()
    let v37 : (unit -> unit) = closure7(v2, v33)
    let v38 : unit = (fun () -> v37 (); v36) ()
    let v41 : string = " }"
    let v42 : string = $"{v41}"
    let v45 : unit = ()
    let v46 : (unit -> unit) = closure7(v2, v42)
    let v47 : unit = (fun () -> v46 (); v45) ()
    let v50 : string = v2.l0
    v50
and method244 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : US46) : string =
    let v9 : string = method245(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_typescript"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure109 (v0 : US46) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method244(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method246 (v0 : string, v1 : string, v2 : US46) : unit =
    match v2 with
    | US46_1 -> (* None *)
        let v10 : string = $"spiral_builder.process_typescript / fable library not found / lib_path: {v1}"
        failwith<unit> v10
    | US46_0(v3, v4) -> (* Some *)
        let v5 : string = "ts"
        let v6 : string = $"fable-library-{v5}.{v4}"
        let v7 : string = method28(v1, v6)
        let v8 : string = $"fable_modules/fable-library-{v5}.{v4}"
        let v9 : string = method28(v0, v8)
        method195(v7, v9)
and method247 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method205(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_typescript"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure110 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method247(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method249 (v0 : string) : string =
    let v1 : string = method14()
    let v2 : Mut3 = {l0 = v1} : Mut3
    let v3 : string = "{ "
    let v4 : string = $"{v3}"
    let v7 : unit = ()
    let v8 : (unit -> unit) = closure7(v2, v4)
    let v9 : unit = (fun () -> v8 (); v7) ()
    let v12 : string = "new_code_path"
    let v13 : string = $"{v12}"
    let v16 : unit = ()
    let v17 : (unit -> unit) = closure7(v2, v13)
    let v18 : unit = (fun () -> v17 (); v16) ()
    let v21 : string = " = "
    let v22 : string = $"{v21}"
    let v25 : unit = ()
    let v26 : (unit -> unit) = closure7(v2, v22)
    let v27 : unit = (fun () -> v26 (); v25) ()
    let v30 : string = $"{v0}"
    let v33 : unit = ()
    let v34 : (unit -> unit) = closure7(v2, v30)
    let v35 : unit = (fun () -> v34 (); v33) ()
    let v38 : string = " }"
    let v39 : string = $"{v38}"
    let v42 : unit = ()
    let v43 : (unit -> unit) = closure7(v2, v39)
    let v44 : unit = (fun () -> v43 (); v42) ()
    let v47 : string = v2.l0
    v47
and method248 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method249(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_typescript"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure111 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method248(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and method250 (v0 : UH5, v1 : UH5) : UH5 =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : UH5 = method250(v4, v1)
        UH5_1(v2, v3, v5)
    | UH5_0 -> (* Nil *)
        v1
and method251 (v0 : UH5, v1 : struct (string * string) list) : struct (string * string) list =
    match v0 with
    | UH5_1(v2, v3, v4) -> (* Cons *)
        let v5 : struct (string * string) list = method251(v4, v1)
        let v6 : struct (string * string) list = struct (v2, v3) :: v5 
        v6
    | UH5_0 -> (* Nil *)
        v1
and closure112 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method40()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method253 (v0 : exn, v1 : string, v2 : string, v3 : string) : string =
    let v4 : string = method14()
    let v5 : Mut3 = {l0 = v4} : Mut3
    let v6 : string = "{ "
    let v7 : string = $"{v6}"
    let v10 : unit = ()
    let v11 : (unit -> unit) = closure7(v5, v7)
    let v12 : unit = (fun () -> v11 (); v10) ()
    let v15 : string = "ex"
    let v16 : string = $"{v15}"
    let v19 : unit = ()
    let v20 : (unit -> unit) = closure7(v5, v16)
    let v21 : unit = (fun () -> v20 (); v19) ()
    let v24 : string = " = "
    let v25 : string = $"{v24}"
    let v28 : unit = ()
    let v29 : (unit -> unit) = closure7(v5, v25)
    let v30 : unit = (fun () -> v29 (); v28) ()
    let v33 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v34 : string = "format!(\"{:#?}\", $0)"
    let v35 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v34 
    let v36 : string = "fable_library_rust::String_::fromString($0)"
    let v37 : string = Fable.Core.RustInterop.emitRustExpr v35 v36 
    let _v33 = v37 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v38 : string = "format!(\"{:#?}\", $0)"
    let v39 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v38 
    let v40 : string = "fable_library_rust::String_::fromString($0)"
    let v41 : string = Fable.Core.RustInterop.emitRustExpr v39 v40 
    let _v33 = v41 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v42 : string = "format!(\"{:#?}\", $0)"
    let v43 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v42 
    let v44 : string = "fable_library_rust::String_::fromString($0)"
    let v45 : string = Fable.Core.RustInterop.emitRustExpr v43 v44 
    let _v33 = v45 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v46 : string = $"%A{v0}"
    let _v33 = v46 
    #endif
#if FABLE_COMPILER_PYTHON
    let v49 : string = $"%A{v0}"
    let _v33 = v49 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v52 : string = $"%A{v0}"
    let _v33 = v52 
    #endif
#else
    let v55 : string = $"%A{v0}"
    let _v33 = v55 
    #endif
    let v58 : string = _v33 
    let v63 : string = $"{v58}"
    let v66 : unit = ()
    let v67 : (unit -> unit) = closure7(v5, v63)
    let v68 : unit = (fun () -> v67 (); v66) ()
    let v71 : string = "; "
    let v72 : string = $"{v71}"
    let v75 : unit = ()
    let v76 : (unit -> unit) = closure7(v5, v72)
    let v77 : unit = (fun () -> v76 (); v75) ()
    let v80 : string = "new_code_path"
    let v81 : string = $"{v80}"
    let v84 : unit = ()
    let v85 : (unit -> unit) = closure7(v5, v81)
    let v86 : unit = (fun () -> v85 (); v84) ()
    let v89 : string = $"{v24}"
    let v92 : unit = ()
    let v93 : (unit -> unit) = closure7(v5, v89)
    let v94 : unit = (fun () -> v93 (); v92) ()
    let v97 : string = $"{v1}"
    let v100 : unit = ()
    let v101 : (unit -> unit) = closure7(v5, v97)
    let v102 : unit = (fun () -> v101 (); v100) ()
    let v105 : string = $"{v71}"
    let v108 : unit = ()
    let v109 : (unit -> unit) = closure7(v5, v105)
    let v110 : unit = (fun () -> v109 (); v108) ()
    let v113 : string = "external_command"
    let v114 : string = $"{v113}"
    let v117 : unit = ()
    let v118 : (unit -> unit) = closure7(v5, v114)
    let v119 : unit = (fun () -> v118 (); v117) ()
    let v122 : string = $"{v24}"
    let v125 : unit = ()
    let v126 : (unit -> unit) = closure7(v5, v122)
    let v127 : unit = (fun () -> v126 (); v125) ()
    let v130 : string = $"{v2}"
    let v133 : unit = ()
    let v134 : (unit -> unit) = closure7(v5, v130)
    let v135 : unit = (fun () -> v134 (); v133) ()
    let v138 : string = $"{v71}"
    let v141 : unit = ()
    let v142 : (unit -> unit) = closure7(v5, v138)
    let v143 : unit = (fun () -> v142 (); v141) ()
    let v146 : string = "run_result"
    let v147 : string = $"{v146}"
    let v150 : unit = ()
    let v151 : (unit -> unit) = closure7(v5, v147)
    let v152 : unit = (fun () -> v151 (); v150) ()
    let v155 : string = $"{v24}"
    let v158 : unit = ()
    let v159 : (unit -> unit) = closure7(v5, v155)
    let v160 : unit = (fun () -> v159 (); v158) ()
    let v163 : string = $"{v3}"
    let v166 : unit = ()
    let v167 : (unit -> unit) = closure7(v5, v163)
    let v168 : unit = (fun () -> v167 (); v166) ()
    let v171 : string = " }"
    let v172 : string = $"{v171}"
    let v175 : unit = ()
    let v176 : (unit -> unit) = closure7(v5, v172)
    let v177 : unit = (fun () -> v176 (); v175) ()
    let v180 : string = v5.l0
    v180
and method252 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method253(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_typescript / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure114 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method252(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure113 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure114(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method254 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method139(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_typescript / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure115 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method254(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and method255 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string) : string =
    let v10 : string = method205(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.process_python"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure116 (v0 : string, v1 : int32) () : unit =
    let v2 : US0 = US0_4
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method49()
        let v40 : string = method255(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and method256 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : string) : string =
    let v9 : string = method249(v8)
    let v10 : int64 = v0.l0
    let v11 : string = "spiral_builder.process_python"
    let v12 : string = $"{v6} {v7} #{v10} %s{v11} / {v9}"
    method18(v12)
and closure117 (v0 : string) () : unit =
    let v1 : US0 = US0_1
    let v2 : bool = method7(v1)
    if v2 then
        let v3 : unit = ()
        let v4 : (unit -> unit) = closure2()
        let v5 : unit = (fun () -> v4 (); v3) ()
        let struct (v19 : Mut0, v20 : Mut1, v21 : Mut2, v22 : Mut3, v23 : Mut4, v24 : int64 option) = TraceState.trace_state.Value
        let v37 : string = method8(v19, v20, v21, v22, v23, v24)
        let v38 : string = method12()
        let v39 : string = method256(v19, v20, v21, v22, v23, v24, v37, v38, v0)
        method19(v39)
and closure118 (v0 : string) () : string =
    let v1 : string = "\n"
    let v2 : (string []) = v0.Split v1 
    let v5 : string seq = v2 |> Seq.ofArray
    let v8 : string = method40()
    let v9 : (string -> (string seq -> string)) = String.concat
    let v10 : (string seq -> string) = v9 v8
    v10 v5
and method257 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : exn, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method253(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_python / Exception"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure120 (v0 : string, v1 : string, v2 : string, v3 : exn) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method257(v22, v23, v24, v25, v26, v27, v40, v41, v3, v0, v2, v1)
        method19(v42)
and closure119 (v0 : string, v1 : string, v2 : string) (v3 : exn) : US5 =
    let v4 : unit = ()
    let v5 : (unit -> unit) = closure120(v0, v1, v2, v3)
    let v6 : unit = (fun () -> v5 (); v4) ()
    US5_1
and method258 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : int32, v9 : string, v10 : string, v11 : string) : string =
    let v12 : string = method139(v8, v9, v10, v11)
    let v13 : int64 = v0.l0
    let v14 : string = "spiral_builder.process_python / error"
    let v15 : string = $"{v6} {v7} #{v13} %s{v14} / {v12}"
    method18(v15)
and closure121 (v0 : string, v1 : string, v2 : int32, v3 : string) () : unit =
    let v4 : US0 = US0_4
    let v5 : bool = method7(v4)
    if v5 then
        let v6 : unit = ()
        let v7 : (unit -> unit) = closure2()
        let v8 : unit = (fun () -> v7 (); v6) ()
        let struct (v22 : Mut0, v23 : Mut1, v24 : Mut2, v25 : Mut3, v26 : Mut4, v27 : int64 option) = TraceState.trace_state.Value
        let v40 : string = method8(v22, v23, v24, v25, v26, v27)
        let v41 : string = method49()
        let v42 : string = method258(v22, v23, v24, v25, v26, v27, v40, v41, v2, v1, v0, v3)
        method19(v42)
and method260 (v0 : std_string_String, v1 : clap_ArgMatches) : string =
    let v2 : string = method14()
    let v3 : Mut3 = {l0 = v2} : Mut3
    let v4 : string = "{ "
    let v5 : string = $"{v4}"
    let v8 : unit = ()
    let v9 : (unit -> unit) = closure7(v3, v5)
    let v10 : unit = (fun () -> v9 (); v8) ()
    let v13 : string = "subcommand"
    let v14 : string = $"{v13}"
    let v17 : unit = ()
    let v18 : (unit -> unit) = closure7(v3, v14)
    let v19 : unit = (fun () -> v18 (); v17) ()
    let v22 : string = " = "
    let v23 : string = $"{v22}"
    let v26 : unit = ()
    let v27 : (unit -> unit) = closure7(v3, v23)
    let v28 : unit = (fun () -> v27 (); v26) ()
    let v31 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v32 : string = "format!(\"{:#?}\", $0)"
    let v33 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v32 
    let v34 : string = "fable_library_rust::String_::fromString($0)"
    let v35 : string = Fable.Core.RustInterop.emitRustExpr v33 v34 
    let _v31 = v35 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v36 : string = "format!(\"{:#?}\", $0)"
    let v37 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v36 
    let v38 : string = "fable_library_rust::String_::fromString($0)"
    let v39 : string = Fable.Core.RustInterop.emitRustExpr v37 v38 
    let _v31 = v39 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v40 : string = "format!(\"{:#?}\", $0)"
    let v41 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v40 
    let v42 : string = "fable_library_rust::String_::fromString($0)"
    let v43 : string = Fable.Core.RustInterop.emitRustExpr v41 v42 
    let _v31 = v43 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v44 : string = $"%A{v0}"
    let _v31 = v44 
    #endif
#if FABLE_COMPILER_PYTHON
    let v47 : string = $"%A{v0}"
    let _v31 = v47 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v50 : string = $"%A{v0}"
    let _v31 = v50 
    #endif
#else
    let v53 : string = $"%A{v0}"
    let _v31 = v53 
    #endif
    let v56 : string = _v31 
    let v61 : string = $"{v56}"
    let v64 : unit = ()
    let v65 : (unit -> unit) = closure7(v3, v61)
    let v66 : unit = (fun () -> v65 (); v64) ()
    let v69 : string = "; "
    let v70 : string = $"{v69}"
    let v73 : unit = ()
    let v74 : (unit -> unit) = closure7(v3, v70)
    let v75 : unit = (fun () -> v74 (); v73) ()
    let v78 : string = "arg_matches"
    let v79 : string = $"{v78}"
    let v82 : unit = ()
    let v83 : (unit -> unit) = closure7(v3, v79)
    let v84 : unit = (fun () -> v83 (); v82) ()
    let v87 : string = $"{v22}"
    let v90 : unit = ()
    let v91 : (unit -> unit) = closure7(v3, v87)
    let v92 : unit = (fun () -> v91 (); v90) ()
    let v95 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v96 : string = "format!(\"{:#?}\", $0)"
    let v97 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v96 
    let v98 : string = "fable_library_rust::String_::fromString($0)"
    let v99 : string = Fable.Core.RustInterop.emitRustExpr v97 v98 
    let _v95 = v99 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v100 : string = "format!(\"{:#?}\", $0)"
    let v101 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v100 
    let v102 : string = "fable_library_rust::String_::fromString($0)"
    let v103 : string = Fable.Core.RustInterop.emitRustExpr v101 v102 
    let _v95 = v103 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v104 : string = "format!(\"{:#?}\", $0)"
    let v105 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1 v104 
    let v106 : string = "fable_library_rust::String_::fromString($0)"
    let v107 : string = Fable.Core.RustInterop.emitRustExpr v105 v106 
    let _v95 = v107 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v108 : string = $"%A{v1}"
    let _v95 = v108 
    #endif
#if FABLE_COMPILER_PYTHON
    let v111 : string = $"%A{v1}"
    let _v95 = v111 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v114 : string = $"%A{v1}"
    let _v95 = v114 
    #endif
#else
    let v117 : string = $"%A{v1}"
    let _v95 = v117 
    #endif
    let v120 : string = _v95 
    let v125 : string = $"{v120}"
    let v128 : unit = ()
    let v129 : (unit -> unit) = closure7(v3, v125)
    let v130 : unit = (fun () -> v129 (); v128) ()
    let v133 : string = " }"
    let v134 : string = $"{v133}"
    let v137 : unit = ()
    let v138 : (unit -> unit) = closure7(v3, v134)
    let v139 : unit = (fun () -> v138 (); v137) ()
    let v142 : string = v3.l0
    v142
and method259 (v0 : Mut0, v1 : Mut1, v2 : Mut2, v3 : Mut3, v4 : Mut4, v5 : int64 option, v6 : string, v7 : string, v8 : std_string_String, v9 : clap_ArgMatches) : string =
    let v10 : string = method260(v8, v9)
    let v11 : int64 = v0.l0
    let v12 : string = "spiral_builder.run / invalid subcommand"
    let v13 : string = $"{v6} {v7} #{v11} %s{v12} / {v10}"
    method18(v13)
and closure122 (v0 : clap_ArgMatches, v1 : std_string_String) () : unit =
    let v2 : US0 = US0_1
    let v3 : bool = method7(v2)
    if v3 then
        let v4 : unit = ()
        let v5 : (unit -> unit) = closure2()
        let v6 : unit = (fun () -> v5 (); v4) ()
        let struct (v20 : Mut0, v21 : Mut1, v22 : Mut2, v23 : Mut3, v24 : Mut4, v25 : int64 option) = TraceState.trace_state.Value
        let v38 : string = method8(v20, v21, v22, v23, v24, v25)
        let v39 : string = method12()
        let v40 : string = method259(v20, v21, v22, v23, v24, v25, v38, v39, v1, v0)
        method19(v40)
and closure123 () struct (v0 : string, v1 : string) : (std_string_String * std_string_String) =
    let v2 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v3 : string = "&*$0"
    let v4 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v3 
    let _v2 = v4 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v5 : string = "&*$0"
    let v6 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v5 
    let _v2 = v6 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v7 : string = "&*$0"
    let v8 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v0 v7 
    let _v2 = v8 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v9 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v9 
    #endif
#if FABLE_COMPILER_PYTHON
    let v12 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v12 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v15 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v15 
    #endif
#else
    let v18 : Ref<Str> = v0 |> unbox<Ref<Str>>
    let _v2 = v18 
    #endif
    let v21 : Ref<Str> = _v2 
    let v26 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v27 : string = "String::from($0)"
    let v28 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v27 
    let _v26 = v28 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v29 : string = "String::from($0)"
    let v30 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v29 
    let _v26 = v30 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v31 : string = "String::from($0)"
    let v32 : std_string_String = Fable.Core.RustInterop.emitRustExpr v21 v31 
    let _v26 = v32 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v33 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v33 
    #endif
#if FABLE_COMPILER_PYTHON
    let v36 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v36 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v39 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v39 
    #endif
#else
    let v42 : std_string_String = v21 |> unbox<std_string_String>
    let _v26 = v42 
    #endif
    let v45 : std_string_String = _v26 
    let v50 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v51 : string = "&*$0"
    let v52 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v51 
    let _v50 = v52 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v53 : string = "&*$0"
    let v54 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v53 
    let _v50 = v54 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v55 : string = "&*$0"
    let v56 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1 v55 
    let _v50 = v56 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v57 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v57 
    #endif
#if FABLE_COMPILER_PYTHON
    let v60 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v60 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v63 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v63 
    #endif
#else
    let v66 : Ref<Str> = v1 |> unbox<Ref<Str>>
    let _v50 = v66 
    #endif
    let v69 : Ref<Str> = _v50 
    let v74 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v75 : string = "String::from($0)"
    let v76 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v75 
    let _v74 = v76 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v77 : string = "String::from($0)"
    let v78 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v77 
    let _v74 = v78 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v79 : string = "String::from($0)"
    let v80 : std_string_String = Fable.Core.RustInterop.emitRustExpr v69 v79 
    let _v74 = v80 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v81 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v81 
    #endif
#if FABLE_COMPILER_PYTHON
    let v84 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v84 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v87 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v87 
    #endif
#else
    let v90 : std_string_String = v69 |> unbox<std_string_String>
    let _v74 = v90 
    #endif
    let v93 : std_string_String = _v74 
    let v98 : (std_string_String * std_string_String) = v45, v93 
    v98
and closure124 () (v0 : serde_json_Error) : string =
    let v1 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v2 : string = "format!(\"{}\", $0)"
    let v3 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v2 
    let _v1 = v3 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4 : string = "format!(\"{}\", $0)"
    let v5 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v4 
    let _v1 = v5 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v6 : string = "format!(\"{}\", $0)"
    let v7 : std_string_String = Fable.Core.RustInterop.emitRustExpr v0 v6 
    let _v1 = v7 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v8 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v8 
    #endif
#if FABLE_COMPILER_PYTHON
    let v11 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v11 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v14 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v14 
    #endif
#else
    let v17 : std_string_String = null |> unbox<std_string_String>
    let _v1 = v17 
    #endif
    let v20 : std_string_String = _v1 
    let v25 : string = "fable_library_rust::String_::fromString($0)"
    let v26 : string = Fable.Core.RustInterop.emitRustExpr v20 v25 
    v26
and method261 () : (serde_json_Error -> string) =
    closure124()
and method262 (v0 : Result<string, string>) : Result<string, string> =
    v0
and method20 (v0 : US0, v1 : clap_ArgMatches) : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> =
    let v2 : string = "true; let __future_init = Box::pin(async move { //"
    let v3 : bool = Fable.Core.RustInterop.emitRustExpr () v2 
    let v4 : string = "clap::ArgMatches::subcommand(Box::leak(Box::new($0))).map(|(a, b)| ($1(a), b.clone()))"
    let v5 : (Ref<Str> -> std_string_String) = closure11()
    let v6 : struct (std_string_String * clap_ArgMatches) option = Fable.Core.RustInterop.emitRustExpr struct (v1, v5) v4 
    let v7 : (struct (std_string_String * clap_ArgMatches) -> US6) = method21()
    let v8 : US6 option = v6 |> Option.map v7 
    let v20 : US6 = US6_1
    let v21 : US6 = v8 |> Option.defaultValue v20 
    let v4799 : (struct (string * string) []) =
        match v21 with
        | US6_0(v25, v26) -> (* Some *)
            let v27 : string = "fable_library_rust::String_::fromString($0)"
            let v28 : string = Fable.Core.RustInterop.emitRustExpr v25 v27 
            let v29 : bool = v28 = "cuda"
            if v29 then
                let v30 : string = method22()
                let v31 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v32 : string = "&*$0"
                let v33 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v32 
                let _v31 = v33 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v34 : string = "&*$0"
                let v35 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v34 
                let _v31 = v35 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v36 : string = "&*$0"
                let v37 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v30 v36 
                let _v31 = v37 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v38 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v38 
                #endif
#if FABLE_COMPILER_PYTHON
                let v41 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v41 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v44 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v44 
                #endif
#else
                let v47 : Ref<Str> = v30 |> unbox<Ref<Str>>
                let _v31 = v47 
                #endif
                let v50 : Ref<Str> = _v31 
                let v55 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v56 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v50) v55 
                let v57 : (std_string_String -> US7) = method23()
                let v58 : US7 option = v56 |> Option.map v57 
                let v69 : US7 = US7_1
                let v70 : US7 = v58 |> Option.defaultValue v69 
                let v77 : std_string_String =
                    match v70 with
                    | US7_1 -> (* None *)
                        failwith<std_string_String> "Option does not have a value."
                    | US7_0(v74) -> (* Some *)
                        v74
                let v78 : string = "fable_library_rust::String_::fromString($0)"
                let v79 : string = Fable.Core.RustInterop.emitRustExpr v77 v78 
                let v80 : string = method24()
                let v81 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v82 : string = "&*$0"
                let v83 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v82 
                let _v81 = v83 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v84 : string = "&*$0"
                let v85 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v84 
                let _v81 = v85 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v86 : string = "&*$0"
                let v87 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v80 v86 
                let _v81 = v87 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v88 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v88 
                #endif
#if FABLE_COMPILER_PYTHON
                let v91 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v91 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v94 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v94 
                #endif
#else
                let v97 : Ref<Str> = v80 |> unbox<Ref<Str>>
                let _v81 = v97 
                #endif
                let v100 : Ref<Str> = _v81 
                let v105 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                let v106 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v100) v105 
                let v107 : (std_string_String -> US7) = method23()
                let v108 : US7 option = v106 |> Option.map v107 
                let v119 : US7 = US7_1
                let v120 : US7 = v108 |> Option.defaultValue v119 
                let v149 : US8 =
                    match v120 with
                    | US7_1 -> (* None *)
                        US8_1
                    | US7_0(v124) -> (* Some *)
                        let v125 : string = "fable_library_rust::String_::fromString($0)"
                        let v126 : string = Fable.Core.RustInterop.emitRustExpr v124 v125 
                        
                        
                        let v127 : bool = "Pip" = v126
                        let v131 : US9 =
                            if v127 then
                                let v128 : US10 = US10_0
                                US9_0(v128)
                            else
                                US9_1
                        let v145 : US9 =
                            match v131 with
                            | US9_1 -> (* None *)
                                let v134 : bool = "Poetry" = v126
                                let v138 : US9 =
                                    if v134 then
                                        let v135 : US10 = US10_1
                                        US9_0(v135)
                                    else
                                        US9_1
                                match v138 with
                                | US9_1 -> (* None *)
                                    US9_1
                                | US9_0(v139) -> (* Some *)
                                    US9_0(v139)
                            | US9_0(v132) -> (* Some *)
                                US9_0(v132)
                        US8_0(v145)
                let v156 : US9 =
                    match v149 with
                    | US8_0(v150) -> (* Some *)
                        match v150 with
                        | US9_0(v151) -> (* Some *)
                            US9_0(v151)
                        | _ ->
                            US9_1
                    | _ ->
                        US9_1
                let v160 : US10 =
                    match v156 with
                    | US9_1 -> (* None *)
                        US10_0
                    | US9_0(v157) -> (* Some *)
                        v157
                let v161 : string = method25()
                let v162 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v163 : string = "&*$0"
                let v164 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v161 v163 
                let _v162 = v164 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v165 : string = "&*$0"
                let v166 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v161 v165 
                let _v162 = v166 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v167 : string = "&*$0"
                let v168 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v161 v167 
                let _v162 = v168 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v169 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v169 
                #endif
#if FABLE_COMPILER_PYTHON
                let v172 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v172 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v175 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v175 
                #endif
#else
                let v178 : Ref<Str> = v161 |> unbox<Ref<Str>>
                let _v162 = v178 
                #endif
                let v181 : Ref<Str> = _v162 
                let v186 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                let v187 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v181) v186 
                let v188 : (Vec<std_string_String> -> US11) = method26()
                let v189 : US11 option = v187 |> Option.map v188 
                let v200 : US11 = US11_1
                let v201 : US11 = v189 |> Option.defaultValue v200 
                let v205 : (std_string_String []) = [||]
                let v206 : string = "$0.to_vec()"
                let v207 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v205 v206 
                let v210 : Vec<std_string_String> =
                    match v201 with
                    | US11_1 -> (* None *)
                        v207
                    | US11_0(v208) -> (* Some *)
                        v208
                let v211 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v212 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v213 : string = "std::fs::read(&*$0)"
                let v214 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v79 v213 
                let v215 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v216 : string = "$0.unwrap()"
                let v217 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v214 v216 
                let _v215 = v217 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v218 : string = "$0.unwrap()"
                let v219 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v214 v218 
                let _v215 = v219 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v220 : string = "$0.unwrap()"
                let v221 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v214 v220 
                let _v215 = v221 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v222 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v222 
                #endif
#if FABLE_COMPILER_PYTHON
                let v223 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v223 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v224 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v224 
                #endif
#else
                let v225 : Vec<uint8> = match v214 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v215 = v225 
                #endif
                let v226 : Vec<uint8> = _v215 
                let _v212 = v226 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v229 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v229 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v232 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v232 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v235 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v235 
                #endif
#if FABLE_COMPILER_PYTHON
                let v238 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v238 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v241 : Vec<uint8> = null |> unbox<Vec<uint8>>
                let _v212 = v241 
                #endif
#else
                let v244 : (uint8 []) = v79 |> System.IO.File.ReadAllBytes
                let v245 : string = "$0.to_vec()"
                let v246 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v244 v245 
                let _v212 = v246 
                #endif
                let v247 : Vec<uint8> = _v212 
                let v252 : Vec<uint8> = method27(v247)
                let v253 : string = "std::string::String::from_utf8($0)"
                let v254 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v252 v253 
                let v255 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v256 : string = "$0.unwrap()"
                let v257 : std_string_String = Fable.Core.RustInterop.emitRustExpr v254 v256 
                let _v255 = v257 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v258 : string = "$0.unwrap()"
                let v259 : std_string_String = Fable.Core.RustInterop.emitRustExpr v254 v258 
                let _v255 = v259 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v260 : string = "$0.unwrap()"
                let v261 : std_string_String = Fable.Core.RustInterop.emitRustExpr v254 v260 
                let _v255 = v261 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v262 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v262 
                #endif
#if FABLE_COMPILER_PYTHON
                let v263 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v263 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v264 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v264 
                #endif
#else
                let v265 : std_string_String = match v254 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v255 = v265 
                #endif
                let v266 : std_string_String = _v255 
                let v269 : string = "fable_library_rust::String_::fromString($0)"
                let v270 : string = Fable.Core.RustInterop.emitRustExpr v266 v269 
                let _v211 = v270 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v271 : string = null |> unbox<string>
                let _v211 = v271 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v274 : string = null |> unbox<string>
                let _v211 = v274 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v277 : string = null |> unbox<string>
                let _v211 = v277 
                #endif
#if FABLE_COMPILER_PYTHON
                let v280 : string = null |> unbox<string>
                let _v211 = v280 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v283 : string = null |> unbox<string>
                let _v211 = v283 
                #endif
#else
                let v286 : string = v79 |> System.IO.File.ReadAllText
                let _v211 = v286 
                #endif
                let v287 : string = _v211 
                let v292 : string = __SOURCE_DIRECTORY__
                let v293 : string = "polyglot"
                let v294 : string = ".devcontainer"
                let v295 : string = method28(v293, v294)
                let v296 : US12 = method31(v295, v292)
                let v344 : US5 =
                    match v296 with
                    | US12_1(v299) -> (* Error *)
                        let v300 : unit = ()
                        let v301 : (unit -> unit) = closure16(v299)
                        let v302 : unit = (fun () -> v301 (); v300) ()
                        US5_1
                    | US12_0(v297) -> (* Ok *)
                        US5_0(v297)
                let v399 : US5 =
                    match v344 with
                    | US5_1 -> (* None *)
                        let v347 : string = method39()
                        let v348 : string = method28(v293, v294)
                        let v349 : US12 = method31(v348, v347)
                        match v349 with
                        | US12_1(v352) -> (* Error *)
                            let v353 : unit = ()
                            let v354 : (unit -> unit) = closure16(v352)
                            let v355 : unit = (fun () -> v354 (); v353) ()
                            US5_1
                        | US12_0(v350) -> (* Ok *)
                            US5_0(v350)
                    | US5_0(v345) -> (* Some *)
                        US5_0(v345)
                let v403 : string =
                    match v399 with
                    | US5_1 -> (* None *)
                        failwith<string> "Option does not have a value."
                    | US5_0(v400) -> (* Some *)
                        v400
                let v404 : string = method28(v403, v293)
                let v405 : string = method39()
                let v406 : (unit -> string) = v405.ToLower
                let v407 : string = v406 ()
                let v410 : (unit -> string) = v404.ToLower
                let v411 : string = v410 ()
                let v414 : bool = v407.StartsWith (v411, false, null)
                let v419 : US12 =
                    if v414 then
                        US12_1(v411)
                    else
                        US12_0(v411)
                let v425 : Result<string, string> =
                    match v419 with
                    | US12_1(v422) -> (* Error *)
                        let v423 : Result<string, string> = Error v422 
                        v423
                    | US12_0(v420) -> (* Ok *)
                        let v421 : Result<string, string> = Ok v420 
                        v421
                let v426 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                let v427 : bool = Fable.Core.RustInterop.emitRustExpr v425 v426 
                let v428 : string = "x"
                let v429 : string = Fable.Core.RustInterop.emitRustExpr () v428 
                let v430 : string = "true; $0 })"
                let v431 : bool = Fable.Core.RustInterop.emitRustExpr v429 v430 
                let v432 : string = "_result_unwrap_or_else"
                let v433 : string = Fable.Core.RustInterop.emitRustExpr () v432 
                let v434 : string option = method34(v79)
                let v435 : string = ""
                let v436 : string = v434 |> Option.defaultValue v435 
                let v444 : string =
                    match v160 with
                    | US10_0 -> (* Pip *)
                        let v439 : string = "requirements.txt"
                        method28(v436, v439)
                    | US10_1 -> (* Poetry *)
                        let v441 : string = "pyproject.toml"
                        method28(v436, v441)
                let v445 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                let v446 : bool = Fable.Core.RustInterop.emitRustExpr v210 v445 
                let v447 : string = "x"
                let v448 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v447 
                let v449 : string = "fable_library_rust::String_::fromString($0)"
                let v450 : string = Fable.Core.RustInterop.emitRustExpr v448 v449 
                let v451 : string = "="
                let v452 : bool = v450.Contains v451 
                let v465 : string =
                    if v452 then
                        v450
                    else
                        let v455 : string = "]"
                        let v456 : bool = v450.EndsWith (v455, false, null)
                        if v456 then
                            let v459 : string = $"={{version='*',features=["
                            let v460 : string = "["
                            let v461 : string = v450.Replace (v460, v459)
                            let v462 : string = $"{v461}}}"
                            v462
                        else
                            let v463 : string = $"{v450}='*'"
                            v463
                let v466 : string = "true; $0 }).collect::<Vec<_>>()"
                let v467 : bool = Fable.Core.RustInterop.emitRustExpr v465 v466 
                let v468 : string = "_vec_map"
                let v469 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v468 
                let v470 : string = "fable_library_rust::NativeArray_::array_from($0)"
                let v471 : (string []) = Fable.Core.RustInterop.emitRustExpr v469 v470 
                let v472 : unit = ()
                let _v472 =
                    seq {
                        for i = 0 to v471.Length - 1 do yield v471.[i]
                        (*
                        ()
                    *)
                    }
                    (*
                    ()
                *)
                let v475 : string seq = _v472 
                let v481 : string = method40()
                let v482 : (string -> (string seq -> string)) = String.concat
                let v483 : (string seq -> string) = v482 v481
                let v484 : string = v483 v475
                let v488 : bool = v484 = ""
                let struct (v544 : int32, v545 : string) =
                    if v488 then
                        struct (0, v435)
                    else
                        let v528 : string =
                            match v160 with
                            | US10_0 -> (* Pip *)
                                v484
                            | US10_1 -> (* Poetry *)
                                let v489 : string = $"[tool.poetry]"
                                let v490 : string = $"name = \"test\""
                                let v491 : string = "\n"
                                let v492 : string = v489 + v491 
                                let v493 : string = v492 + v490 
                                let v494 : string = $"version = \"0.0.1\""
                                let v495 : string = v493 + v491 
                                let v496 : string = v495 + v494 
                                let v497 : string = $"description = \"\""
                                let v498 : string = v496 + v491 
                                let v499 : string = v498 + v497 
                                let v500 : string = $"authors = []"
                                let v501 : string = v499 + v491 
                                let v502 : string = v501 + v500 
                                let v503 : string = $""
                                let v504 : string = v502 + v491 
                                let v505 : string = v504 + v503 
                                let v506 : string = $"[tool.poetry.dependencies]"
                                let v507 : string = v505 + v491 
                                let v508 : string = v507 + v506 
                                let v509 : string = $"python=\"~3.12\""
                                let v510 : string = v508 + v491 
                                let v511 : string = v510 + v509 
                                let v512 : string = $"{v484}"
                                let v513 : string = v511 + v491 
                                let v514 : string = v513 + v512 
                                let v515 : string = $""
                                let v516 : string = v514 + v491 
                                let v517 : string = v516 + v515 
                                let v518 : string = $"[build-system]"
                                let v519 : string = v517 + v491 
                                let v520 : string = v519 + v518 
                                let v521 : string = $"requires = [\"poetry-core\"]"
                                let v522 : string = v520 + v491 
                                let v523 : string = v522 + v521 
                                let v524 : string = $"build-backend = \"poetry.core.masonry.api\""
                                let v525 : string = v523 + v491 
                                let v526 : string = v525 + v524 
                                v526
                        method41(v444, v528)
                        let v529 : System.Threading.CancellationToken option = None
                        let v530 : (struct (string * string) []) = [||]
                        let v531 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v532 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v533 : string option = None
                        let v537 : string =
                            match v160 with
                            | US10_0 -> (* Pip *)
                                let v534 : string = $"pip install -r requirements.txt"
                                v534
                            | US10_1 -> (* Poetry *)
                                let v535 : string = $"poetry install"
                                v535
                        let v538 : string option = Some v436 
                        let v541 : bool = true
                        method68(v537, v529, v530, v531, v532, v541, v538)
                let v546 : bool = v544 <> 0 
                let struct (v712 : US5, v713 : US5, v714 : US5, v715 : US5) =
                    if v546 then
                        let v549 : unit = ()
                        let v550 : (unit -> unit) = closure61(v160, v79, v545, v544)
                        let v551 : unit = (fun () -> v550 (); v549) ()
                        let v591 : string = "py"
                        let v592 : US5 = US5_0(v591)
                        let v593 : US5 = US5_1
                        let v594 : US5 = US5_1
                        let v595 : US5 = US5_1
                        struct (v592, v593, v594, v595)
                    else
                        let v599 : string =
                            match v160 with
                            | US10_0 -> (* Pip *)
                                let v596 : string = $"python \"{v79}\""
                                v596
                            | US10_1 -> (* Poetry *)
                                let v597 : string = $"poetry run python \"{v79}\""
                                v597
                        let v600 : string = "TRACE_LEVEL"
                        let v601 : string = "Verbose"
                        let v602 : (struct (string * string) []) = [|struct (v600, v601)|]
                        let v603 : System.Threading.CancellationToken option = None
                        let v604 : (struct (string * string) []) = [||]
                        let v605 : (struct (int32 * string * bool) -> Async<unit>) option = None
                        let v606 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                        let v607 : string option = None
                        let v608 : string option = Some v436 
                        let v611 : bool = true
                        let struct (v612 : int32, v613 : string) = method68(v599, v603, v602, v605, v606, v611, v608)
                        let v614 : int32 = v602.Length
                        let v615 : (string []) = Array.zeroCreate<string> (v614)
                        let v616 : Mut5 = {l0 = 0} : Mut5
                        while method72(v614, v616) do
                            let v618 : int32 = v616.l0
                            let struct (v619 : string, v620 : string) = v602.[int v618]
                            let v621 : string = $"$env:{v619}=''{v620}''"
                            v615.[int v618] <- v621
                            let v622 : int32 = v618 + 1
                            v616.l0 <- v622
                            ()
                        let v623 : string seq = v615 |> Seq.ofArray
                        let v626 : (string -> (string seq -> string)) = String.concat
                        let v627 : string = ";"
                        let v628 : (string seq -> string) = v626 v627
                        let v629 : string = v628 v623
                        let v632 : string = $"pwsh -c '{v629}; {v599}'"
                        let v633 : bool = v612 = 0
                        let v638 : bool =
                            if v633 then
                                true
                            else
                                let v634 : string = "cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"
                                let v635 : bool = v613.Contains v634 
                                v635
                        let struct (v708 : US5, v709 : US5, v710 : US5, v711 : US5) =
                            if v638 then
                                let v639 : (string -> US5) = closure62()
                                let v640 : (unit -> string) = closure63(v613)
                                let v641 : (exn -> US5) = closure64(v79, v613, v632)
                                let v642 : US5 = US5_1
                                let result = ref v642
                                try
                                    result.Value <- v640 () |> v639 
                                with ex ->
                                    result.Value <- v641 ex 
                                let v643 : US5 = result.Value
                                let v653 : string option =
                                    match v643 with
                                    | US5_1 -> (* None *)
                                        let v651 : string option = None
                                        v651
                                    | US5_0(v647) -> (* Some *)
                                        let v648 : string option = Some v647 
                                        v648
                                let v654 : string = "$0.unwrap()"
                                let v655 : string = Fable.Core.RustInterop.emitRustExpr v653 v654 
                                let v656 : string = "py"
                                let v657 : US5 = US5_0(v656)
                                let v658 : US5 = US5_0(v287)
                                let v659 : US5 = US5_0(v79)
                                let v660 : US5 = US5_0(v655)
                                struct (v657, v658, v659, v660)
                            else
                                let v661 : unit = ()
                                let v662 : (unit -> unit) = closure66(v79, v613, v612, v632)
                                let v663 : unit = (fun () -> v662 (); v661) ()
                                let v703 : string = "py"
                                let v704 : US5 = US5_0(v703)
                                let v705 : US5 = US5_1
                                let v706 : US5 = US5_1
                                let v707 : US5 = US5_1
                                struct (v704, v705, v706, v707)
                        struct (v708, v709, v710, v711)
                let v718 : string =
                    match v712 with
                    | US5_1 -> (* None *)
                        v435
                    | US5_0(v716) -> (* Some *)
                        v716
                let v719 : string = "extension"
                let v722 : string =
                    match v713 with
                    | US5_1 -> (* None *)
                        v435
                    | US5_0(v720) -> (* Some *)
                        v720
                let v723 : string = "code"
                let v726 : string =
                    match v715 with
                    | US5_1 -> (* None *)
                        v435
                    | US5_0(v724) -> (* Some *)
                        v724
                let v727 : string = "output"
                let v728 : (struct (string * string) []) = [|struct (v719, v718); struct (v723, v722); struct (v727, v726)|]
                let v729 : string = "$0.to_vec()"
                let v730 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v728 v729 
                let v731 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
                let v732 : (struct (string * string) -> (std_string_String * std_string_String)) = closure67()
                let v733 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v730, v732) v731 
                let v734 : string = "std::collections::BTreeMap::from_iter(v733.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
                let v735 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v734 
                let v736 : string = "serde_json::to_string(&v735)"
                let v737 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v736 
                let v738 : unit = ()
                
#if FABLE_COMPILER || WASM || CONTRACT
                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                let v739 : string = "$0.unwrap()"
                let v740 : std_string_String = Fable.Core.RustInterop.emitRustExpr v737 v739 
                let _v738 = v740 
                #endif
#if FABLE_COMPILER_RUST && WASM
                let v741 : string = "$0.unwrap()"
                let v742 : std_string_String = Fable.Core.RustInterop.emitRustExpr v737 v741 
                let _v738 = v742 
                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                let v743 : string = "$0.unwrap()"
                let v744 : std_string_String = Fable.Core.RustInterop.emitRustExpr v737 v743 
                let _v738 = v744 
                #endif
#if FABLE_COMPILER_TYPESCRIPT
                let v745 : std_string_String = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v738 = v745 
                #endif
#if FABLE_COMPILER_PYTHON
                let v746 : std_string_String = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v738 = v746 
                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                let v747 : std_string_String = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v738 = v747 
                #endif
#else
                let v748 : std_string_String = match v737 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                let _v738 = v748 
                #endif
                let v749 : std_string_String = _v738 
                let v752 : string = "fable_library_rust::String_::fromString($0)"
                let v753 : string = Fable.Core.RustInterop.emitRustExpr v749 v752 
                let v754 : string = "command_result"
                [|struct (v754, v753)|]
            else
                let v756 : string = "fable_library_rust::String_::fromString($0)"
                let v757 : string = Fable.Core.RustInterop.emitRustExpr v25 v756 
                let v758 : bool = v757 = "fable"
                if v758 then
                    let v759 : string = method140()
                    let v760 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v761 : string = "&*$0"
                    let v762 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v761 
                    let _v760 = v762 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v763 : string = "&*$0"
                    let v764 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v763 
                    let _v760 = v764 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v765 : string = "&*$0"
                    let v766 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v759 v765 
                    let _v760 = v766 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v767 : Ref<Str> = v759 |> unbox<Ref<Str>>
                    let _v760 = v767 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v770 : Ref<Str> = v759 |> unbox<Ref<Str>>
                    let _v760 = v770 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v773 : Ref<Str> = v759 |> unbox<Ref<Str>>
                    let _v760 = v773 
                    #endif
#else
                    let v776 : Ref<Str> = v759 |> unbox<Ref<Str>>
                    let _v760 = v776 
                    #endif
                    let v779 : Ref<Str> = _v760 
                    let v784 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v785 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v779) v784 
                    let v786 : (std_string_String -> US7) = method23()
                    let v787 : US7 option = v785 |> Option.map v786 
                    let v798 : US7 = US7_1
                    let v799 : US7 = v787 |> Option.defaultValue v798 
                    let v806 : std_string_String =
                        match v799 with
                        | US7_1 -> (* None *)
                            failwith<std_string_String> "Option does not have a value."
                        | US7_0(v803) -> (* Some *)
                            v803
                    let v807 : string = "fable_library_rust::String_::fromString($0)"
                    let v808 : string = Fable.Core.RustInterop.emitRustExpr v806 v807 
                    let v809 : string = method141()
                    let v810 : unit = ()
                    
#if FABLE_COMPILER || WASM || CONTRACT
                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                    let v811 : string = "&*$0"
                    let v812 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v809 v811 
                    let _v810 = v812 
                    #endif
#if FABLE_COMPILER_RUST && WASM
                    let v813 : string = "&*$0"
                    let v814 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v809 v813 
                    let _v810 = v814 
                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                    let v815 : string = "&*$0"
                    let v816 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v809 v815 
                    let _v810 = v816 
                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                    let v817 : Ref<Str> = v809 |> unbox<Ref<Str>>
                    let _v810 = v817 
                    #endif
#if FABLE_COMPILER_PYTHON
                    let v820 : Ref<Str> = v809 |> unbox<Ref<Str>>
                    let _v810 = v820 
                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                    let v823 : Ref<Str> = v809 |> unbox<Ref<Str>>
                    let _v810 = v823 
                    #endif
#else
                    let v826 : Ref<Str> = v809 |> unbox<Ref<Str>>
                    let _v810 = v826 
                    #endif
                    let v829 : Ref<Str> = _v810 
                    let v834 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                    let v835 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v829) v834 
                    let v836 : (std_string_String -> US7) = method23()
                    let v837 : US7 option = v835 |> Option.map v836 
                    let v848 : US7 = US7_1
                    let v849 : US7 = v837 |> Option.defaultValue v848 
                    let v859 : US5 =
                        match v849 with
                        | US7_1 -> (* None *)
                            US5_1
                        | US7_0(v853) -> (* Some *)
                            let v854 : string = "fable_library_rust::String_::fromString($0)"
                            let v855 : string = Fable.Core.RustInterop.emitRustExpr v853 v854 
                            US5_0(v855)
                    let v951 : string =
                        match v859 with
                        | US5_1 -> (* None *)
                            let v949 : string = "{}"
                            v949
                        | US5_0(v860) -> (* Some *)
                            let v861 : clap_Command = method0()
                            let v862 : string = $"_ {v860} --fs-path \"{v808}\""
                            let v863 : US22 = method83(v862)
                            let v871 : (string []) =
                                match v863 with
                                | US22_1(v865) -> (* Error *)
                                    let v866 : string = $"resultm.get / Result value was Error: {v865}"
                                    failwith<(string [])> v866
                                | US22_0(v864) -> (* Ok *)
                                    v864
                            let v872 : string = "$0.to_vec()"
                            let v873 : Vec<string> = Fable.Core.RustInterop.emitRustExpr v871 v872 
                            let v874 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                            let v875 : bool = Fable.Core.RustInterop.emitRustExpr v873 v874 
                            let v876 : string = "x"
                            let v877 : string = Fable.Core.RustInterop.emitRustExpr () v876 
                            let v878 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v879 : string = "&*$0"
                            let v880 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v877 v879 
                            let _v878 = v880 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v881 : string = "&*$0"
                            let v882 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v877 v881 
                            let _v878 = v882 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v883 : string = "&*$0"
                            let v884 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v877 v883 
                            let _v878 = v884 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v885 : Ref<Str> = v877 |> unbox<Ref<Str>>
                            let _v878 = v885 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v888 : Ref<Str> = v877 |> unbox<Ref<Str>>
                            let _v878 = v888 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v891 : Ref<Str> = v877 |> unbox<Ref<Str>>
                            let _v878 = v891 
                            #endif
#else
                            let v894 : Ref<Str> = v877 |> unbox<Ref<Str>>
                            let _v878 = v894 
                            #endif
                            let v897 : Ref<Str> = _v878 
                            let v902 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v903 : string = "String::from($0)"
                            let v904 : std_string_String = Fable.Core.RustInterop.emitRustExpr v897 v903 
                            let _v902 = v904 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v905 : string = "String::from($0)"
                            let v906 : std_string_String = Fable.Core.RustInterop.emitRustExpr v897 v905 
                            let _v902 = v906 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v907 : string = "String::from($0)"
                            let v908 : std_string_String = Fable.Core.RustInterop.emitRustExpr v897 v907 
                            let _v902 = v908 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v909 : std_string_String = v897 |> unbox<std_string_String>
                            let _v902 = v909 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v912 : std_string_String = v897 |> unbox<std_string_String>
                            let _v902 = v912 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v915 : std_string_String = v897 |> unbox<std_string_String>
                            let _v902 = v915 
                            #endif
#else
                            let v918 : std_string_String = v897 |> unbox<std_string_String>
                            let _v902 = v918 
                            #endif
                            let v921 : std_string_String = _v902 
                            let v926 : string = "true; $0 }).collect::<Vec<_>>()"
                            let v927 : bool = Fable.Core.RustInterop.emitRustExpr v921 v926 
                            let v928 : string = "_vec_map"
                            let v929 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v928 
                            let v930 : string = "clap::Command::get_matches_from($0, v929)"
                            let v931 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v861 v930 
                            let v932 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v0, v931)
                            let v933 : string = "v932.await"
                            let v934 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v933 
                            let v935 : unit = ()
                            
#if FABLE_COMPILER || WASM || CONTRACT
                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                            let v936 : string = "$0.unwrap()"
                            let v937 : string = Fable.Core.RustInterop.emitRustExpr v934 v936 
                            let _v935 = v937 
                            #endif
#if FABLE_COMPILER_RUST && WASM
                            let v938 : string = "$0.unwrap()"
                            let v939 : string = Fable.Core.RustInterop.emitRustExpr v934 v938 
                            let _v935 = v939 
                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                            let v940 : string = "$0.unwrap()"
                            let v941 : string = Fable.Core.RustInterop.emitRustExpr v934 v940 
                            let _v935 = v941 
                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                            let v942 : string = match v934 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v935 = v942 
                            #endif
#if FABLE_COMPILER_PYTHON
                            let v943 : string = match v934 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v935 = v943 
                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                            let v944 : string = match v934 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v935 = v944 
                            #endif
#else
                            let v945 : string = match v934 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                            let _v935 = v945 
                            #endif
                            let v946 : string = _v935 
                            v946
                    let v952 : string = "command_result"
                    [|struct (v952, v951)|]
                else
                    let v954 : string = "fable_library_rust::String_::fromString($0)"
                    let v955 : string = Fable.Core.RustInterop.emitRustExpr v25 v954 
                    let v956 : bool = v955 = "dib"
                    if v956 then
                        let v957 : string = method142()
                        let v958 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v959 : string = "&*$0"
                        let v960 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v957 v959 
                        let _v958 = v960 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v961 : string = "&*$0"
                        let v962 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v957 v961 
                        let _v958 = v962 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v963 : string = "&*$0"
                        let v964 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v957 v963 
                        let _v958 = v964 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v965 : Ref<Str> = v957 |> unbox<Ref<Str>>
                        let _v958 = v965 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v968 : Ref<Str> = v957 |> unbox<Ref<Str>>
                        let _v958 = v968 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v971 : Ref<Str> = v957 |> unbox<Ref<Str>>
                        let _v958 = v971 
                        #endif
#else
                        let v974 : Ref<Str> = v957 |> unbox<Ref<Str>>
                        let _v958 = v974 
                        #endif
                        let v977 : Ref<Str> = _v958 
                        let v982 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v983 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v977) v982 
                        let v984 : (std_string_String -> string) = method143()
                        let v985 : string option = v983 |> Option.map v984 
                        let v998 : string = "$0.unwrap()"
                        let v999 : string = Fable.Core.RustInterop.emitRustExpr v985 v998 
                        let v1000 : string = method168()
                        let v1001 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1002 : string = "&*$0"
                        let v1003 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1000 v1002 
                        let _v1001 = v1003 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1004 : string = "&*$0"
                        let v1005 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1000 v1004 
                        let _v1001 = v1005 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1006 : string = "&*$0"
                        let v1007 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1000 v1006 
                        let _v1001 = v1007 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1008 : Ref<Str> = v1000 |> unbox<Ref<Str>>
                        let _v1001 = v1008 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1011 : Ref<Str> = v1000 |> unbox<Ref<Str>>
                        let _v1001 = v1011 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1014 : Ref<Str> = v1000 |> unbox<Ref<Str>>
                        let _v1001 = v1014 
                        #endif
#else
                        let v1017 : Ref<Str> = v1000 |> unbox<Ref<Str>>
                        let _v1001 = v1017 
                        #endif
                        let v1020 : Ref<Str> = _v1001 
                        let v1025 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1026 : uint8 option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1020) v1025 
                        let v1027 : uint8 = v1026 |> Option.defaultValue 1uy 
                        let v1030 : string = method169()
                        let v1031 : unit = ()
                        
#if FABLE_COMPILER || WASM || CONTRACT
                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                        let v1032 : string = "&*$0"
                        let v1033 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1030 v1032 
                        let _v1031 = v1033 
                        #endif
#if FABLE_COMPILER_RUST && WASM
                        let v1034 : string = "&*$0"
                        let v1035 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1030 v1034 
                        let _v1031 = v1035 
                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                        let v1036 : string = "&*$0"
                        let v1037 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1030 v1036 
                        let _v1031 = v1037 
                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                        let v1038 : Ref<Str> = v1030 |> unbox<Ref<Str>>
                        let _v1031 = v1038 
                        #endif
#if FABLE_COMPILER_PYTHON
                        let v1041 : Ref<Str> = v1030 |> unbox<Ref<Str>>
                        let _v1031 = v1041 
                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                        let v1044 : Ref<Str> = v1030 |> unbox<Ref<Str>>
                        let _v1031 = v1044 
                        #endif
#else
                        let v1047 : Ref<Str> = v1030 |> unbox<Ref<Str>>
                        let _v1031 = v1047 
                        #endif
                        let v1050 : Ref<Str> = _v1031 
                        let v1055 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                        let v1056 : string option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1050) v1055 
                        let v1057 : (string -> US5) = method6()
                        let v1058 : US5 option = v1056 |> Option.map v1057 
                        let v1069 : US5 = US5_1
                        let v1070 : US5 = v1058 |> Option.defaultValue v1069 
                        let v1074 : uint8 = 1uy
                        let struct (v1075 : int32, v1076 : string) = method170(v1070, v1027, v999, v1074)
                        let v1077 : bool = v1075 <> 0 
                        let struct (v1373 : int32, v1374 : string) =
                            if v1077 then
                                struct (v1075, v1076)
                            else
                                let v1080 : System.Threading.CancellationToken option = None
                                let v1081 : (struct (string * string) []) = [||]
                                let v1082 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                let v1083 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                let v1084 : string option = None
                                let v1085 : string = $"jupyter nbconvert \"{v999}.ipynb\" --to html --HTMLExporter.theme=dark"
                                let v1086 : bool = true
                                let struct (v1087 : int32, v1088 : string) = method68(v1085, v1080, v1081, v1082, v1083, v1086, v1084)
                                let v1089 : unit = ()
                                let v1090 : (unit -> unit) = closure78(v1088, v1087)
                                let v1091 : unit = (fun () -> v1090 (); v1089) ()
                                let v1132 : bool = v1087 <> 0 
                                if v1132 then
                                    let v1135 : string = $"repl_result: {v1076}

jupyter_result: {v1088}"
                                    struct (v1087, v1135)
                                else
                                    let v1136 : string = "'"
                                    let v1137 : string = "''"
                                    let v1138 : string = v999.Replace (v1136, v1137)
                                    let v1139 : System.Threading.CancellationToken option = None
                                    let v1140 : (struct (string * string) []) = [||]
                                    let v1141 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                    let v1142 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                    let v1143 : string option = None
                                    let v1144 : string = $"pwsh -c \"$counter = 1; $path = '{v1138}.html'; (Get-Content $path -Raw) -replace '(id=\\\"cell-id=)[a-fA-F0-9]{{8}}', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\""
                                    let v1145 : bool = true
                                    let struct (v1146 : int32, v1147 : string) = method68(v1144, v1139, v1140, v1141, v1142, v1145, v1143)
                                    let v1148 : unit = ()
                                    let v1149 : (unit -> unit) = closure79(v1147, v1146)
                                    let v1150 : unit = (fun () -> v1149 (); v1148) ()
                                    let v1191 : string = $"{v999}.html"
                                    let v1192 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1193 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1194 : string = "std::fs::read(&*$0)"
                                    let v1195 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1191 v1194 
                                    let v1196 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1197 : string = "$0.unwrap()"
                                    let v1198 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1195 v1197 
                                    let _v1196 = v1198 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1199 : string = "$0.unwrap()"
                                    let v1200 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1195 v1199 
                                    let _v1196 = v1200 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1201 : string = "$0.unwrap()"
                                    let v1202 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1195 v1201 
                                    let _v1196 = v1202 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1203 : Vec<uint8> = match v1195 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1196 = v1203 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1204 : Vec<uint8> = match v1195 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1196 = v1204 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1205 : Vec<uint8> = match v1195 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1196 = v1205 
                                    #endif
#else
                                    let v1206 : Vec<uint8> = match v1195 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1196 = v1206 
                                    #endif
                                    let v1207 : Vec<uint8> = _v1196 
                                    let _v1193 = v1207 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1210 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1193 = v1210 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1213 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1193 = v1213 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1216 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1193 = v1216 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1219 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1193 = v1219 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1222 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1193 = v1222 
                                    #endif
#else
                                    let v1225 : (uint8 []) = v1191 |> System.IO.File.ReadAllBytes
                                    let v1226 : string = "$0.to_vec()"
                                    let v1227 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1225 v1226 
                                    let _v1193 = v1227 
                                    #endif
                                    let v1228 : Vec<uint8> = _v1193 
                                    let v1233 : Vec<uint8> = method27(v1228)
                                    let v1234 : string = "std::string::String::from_utf8($0)"
                                    let v1235 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1233 v1234 
                                    let v1236 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1237 : string = "$0.unwrap()"
                                    let v1238 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1235 v1237 
                                    let _v1236 = v1238 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1239 : string = "$0.unwrap()"
                                    let v1240 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1235 v1239 
                                    let _v1236 = v1240 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1241 : string = "$0.unwrap()"
                                    let v1242 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1235 v1241 
                                    let _v1236 = v1242 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1243 : std_string_String = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1236 = v1243 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1244 : std_string_String = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1236 = v1244 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1245 : std_string_String = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1236 = v1245 
                                    #endif
#else
                                    let v1246 : std_string_String = match v1235 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1236 = v1246 
                                    #endif
                                    let v1247 : std_string_String = _v1236 
                                    let v1250 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1251 : string = Fable.Core.RustInterop.emitRustExpr v1247 v1250 
                                    let _v1192 = v1251 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1252 : string = null |> unbox<string>
                                    let _v1192 = v1252 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1255 : string = null |> unbox<string>
                                    let _v1192 = v1255 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1258 : string = null |> unbox<string>
                                    let _v1192 = v1258 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1261 : string = null |> unbox<string>
                                    let _v1192 = v1261 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1264 : string = null |> unbox<string>
                                    let _v1192 = v1264 
                                    #endif
#else
                                    let v1267 : string = v1191 |> System.IO.File.ReadAllText
                                    let _v1192 = v1267 
                                    #endif
                                    let v1268 : string = _v1192 
                                    let v1273 : string = "\r\n"
                                    let v1274 : string = "\n"
                                    let v1275 : string = v1268.Replace (v1273, v1274)
                                    let v1276 : string = $"{v999}.html"
                                    let v1277 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1278 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1276, v1275) v1278 
                                    let _v1277 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v1277 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v1277 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v1277 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v1277 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v1277 = () 
                                    #endif
#else
                                    let v1279 : string = method67(v1275)
                                    System.IO.File.WriteAllText (v1276, v1279)
                                    let _v1277 = () 
                                    #endif
                                    _v1277 
                                    let v1280 : string = $"{v999}.ipynb"
                                    let v1281 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1282 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1283 : string = "std::fs::read(&*$0)"
                                    let v1284 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1280 v1283 
                                    let v1285 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1286 : string = "$0.unwrap()"
                                    let v1287 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1284 v1286 
                                    let _v1285 = v1287 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1288 : string = "$0.unwrap()"
                                    let v1289 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1284 v1288 
                                    let _v1285 = v1289 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1290 : string = "$0.unwrap()"
                                    let v1291 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1284 v1290 
                                    let _v1285 = v1291 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1292 : Vec<uint8> = match v1284 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1285 = v1292 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1293 : Vec<uint8> = match v1284 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1285 = v1293 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1294 : Vec<uint8> = match v1284 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1285 = v1294 
                                    #endif
#else
                                    let v1295 : Vec<uint8> = match v1284 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1285 = v1295 
                                    #endif
                                    let v1296 : Vec<uint8> = _v1285 
                                    let _v1282 = v1296 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1299 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1282 = v1299 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1302 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1282 = v1302 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1305 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1282 = v1305 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1308 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1282 = v1308 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1311 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                    let _v1282 = v1311 
                                    #endif
#else
                                    let v1314 : (uint8 []) = v1280 |> System.IO.File.ReadAllBytes
                                    let v1315 : string = "$0.to_vec()"
                                    let v1316 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1314 v1315 
                                    let _v1282 = v1316 
                                    #endif
                                    let v1317 : Vec<uint8> = _v1282 
                                    let v1322 : Vec<uint8> = method27(v1317)
                                    let v1323 : string = "std::string::String::from_utf8($0)"
                                    let v1324 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1322 v1323 
                                    let v1325 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1326 : string = "$0.unwrap()"
                                    let v1327 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1324 v1326 
                                    let _v1325 = v1327 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1328 : string = "$0.unwrap()"
                                    let v1329 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1324 v1328 
                                    let _v1325 = v1329 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1330 : string = "$0.unwrap()"
                                    let v1331 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1324 v1330 
                                    let _v1325 = v1331 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1332 : std_string_String = match v1324 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1325 = v1332 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1333 : std_string_String = match v1324 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1325 = v1333 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1334 : std_string_String = match v1324 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1325 = v1334 
                                    #endif
#else
                                    let v1335 : std_string_String = match v1324 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                    let _v1325 = v1335 
                                    #endif
                                    let v1336 : std_string_String = _v1325 
                                    let v1339 : string = "fable_library_rust::String_::fromString($0)"
                                    let v1340 : string = Fable.Core.RustInterop.emitRustExpr v1336 v1339 
                                    let _v1281 = v1340 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1341 : string = null |> unbox<string>
                                    let _v1281 = v1341 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1344 : string = null |> unbox<string>
                                    let _v1281 = v1344 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1347 : string = null |> unbox<string>
                                    let _v1281 = v1347 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1350 : string = null |> unbox<string>
                                    let _v1281 = v1350 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1353 : string = null |> unbox<string>
                                    let _v1281 = v1353 
                                    #endif
#else
                                    let v1356 : string = v1280 |> System.IO.File.ReadAllText
                                    let _v1281 = v1356 
                                    #endif
                                    let v1357 : string = _v1281 
                                    let v1362 : string = v1357.Replace (v1273, v1274)
                                    let v1363 : string = "\\r\\n"
                                    let v1364 : string = "\\n"
                                    let v1365 : string = v1362.Replace (v1363, v1364)
                                    let v1366 : string = $"{v999}.ipynb"
                                    let v1367 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1368 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1366, v1365) v1368 
                                    let _v1367 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v1367 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v1367 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v1367 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v1367 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v1367 = () 
                                    #endif
#else
                                    let v1369 : string = method67(v1365)
                                    System.IO.File.WriteAllText (v1366, v1369)
                                    let _v1367 = () 
                                    #endif
                                    _v1367 
                                    let v1370 : string = $"repl_result: {v1076}

jupyter_result: {v1088}

pwsh_replace_html_result: {v1147}"
                                    struct (v1146, v1370)
                        let v1375 : unit = ()
                        let v1376 : (unit -> unit) = closure80(v1374, v1373)
                        let v1377 : unit = (fun () -> v1376 (); v1375) ()
                        let v1418 : bool = v1373 <> 0 
                        if v1418 then
                            let v1421 : string = $"spiral_builder.run / dib / exit_code: {v1373} / result: {v1374}"
                            failwith<unit> v1421
                        let v1422 : string = "stdio"
                        [|struct (v1422, v1374)|]
                    else
                        let v1424 : string = "fable_library_rust::String_::fromString($0)"
                        let v1425 : string = Fable.Core.RustInterop.emitRustExpr v25 v1424 
                        let v1426 : bool = v1425 = "rust"
                        let struct (v4765 : US5, v4766 : US5, v4767 : US5, v4768 : US5) =
                            if v1426 then
                                let v1427 : string = method140()
                                let v1428 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1429 : string = "&*$0"
                                let v1430 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1427 v1429 
                                let _v1428 = v1430 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1431 : string = "&*$0"
                                let v1432 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1427 v1431 
                                let _v1428 = v1432 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1433 : string = "&*$0"
                                let v1434 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1427 v1433 
                                let _v1428 = v1434 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1435 : Ref<Str> = v1427 |> unbox<Ref<Str>>
                                let _v1428 = v1435 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1438 : Ref<Str> = v1427 |> unbox<Ref<Str>>
                                let _v1428 = v1438 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1441 : Ref<Str> = v1427 |> unbox<Ref<Str>>
                                let _v1428 = v1441 
                                #endif
#else
                                let v1444 : Ref<Str> = v1427 |> unbox<Ref<Str>>
                                let _v1428 = v1444 
                                #endif
                                let v1447 : Ref<Str> = _v1428 
                                let v1452 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1453 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1447) v1452 
                                let v1454 : (std_string_String -> US7) = method23()
                                let v1455 : US7 option = v1453 |> Option.map v1454 
                                let v1466 : US7 = US7_1
                                let v1467 : US7 = v1455 |> Option.defaultValue v1466 
                                let v1474 : std_string_String =
                                    match v1467 with
                                    | US7_1 -> (* None *)
                                        failwith<std_string_String> "Option does not have a value."
                                    | US7_0(v1471) -> (* Some *)
                                        v1471
                                let v1475 : string = "fable_library_rust::String_::fromString($0)"
                                let v1476 : string = Fable.Core.RustInterop.emitRustExpr v1474 v1475 
                                let v1477 : string = method25()
                                let v1478 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1479 : string = "&*$0"
                                let v1480 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1477 v1479 
                                let _v1478 = v1480 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1481 : string = "&*$0"
                                let v1482 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1477 v1481 
                                let _v1478 = v1482 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1483 : string = "&*$0"
                                let v1484 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1477 v1483 
                                let _v1478 = v1484 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1485 : Ref<Str> = v1477 |> unbox<Ref<Str>>
                                let _v1478 = v1485 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1488 : Ref<Str> = v1477 |> unbox<Ref<Str>>
                                let _v1478 = v1488 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1491 : Ref<Str> = v1477 |> unbox<Ref<Str>>
                                let _v1478 = v1491 
                                #endif
#else
                                let v1494 : Ref<Str> = v1477 |> unbox<Ref<Str>>
                                let _v1478 = v1494 
                                #endif
                                let v1497 : Ref<Str> = _v1478 
                                let v1502 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                let v1503 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1497) v1502 
                                let v1504 : (Vec<std_string_String> -> US11) = method26()
                                let v1505 : US11 option = v1503 |> Option.map v1504 
                                let v1516 : US11 = US11_1
                                let v1517 : US11 = v1505 |> Option.defaultValue v1516 
                                let v1521 : (std_string_String []) = [||]
                                let v1522 : string = "$0.to_vec()"
                                let v1523 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v1521 v1522 
                                let v1526 : Vec<std_string_String> =
                                    match v1517 with
                                    | US11_1 -> (* None *)
                                        v1523
                                    | US11_0(v1524) -> (* Some *)
                                        v1524
                                let v1527 : string = method179()
                                let v1528 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1529 : string = "&*$0"
                                let v1530 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1527 v1529 
                                let _v1528 = v1530 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1531 : string = "&*$0"
                                let v1532 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1527 v1531 
                                let _v1528 = v1532 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1533 : string = "&*$0"
                                let v1534 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1527 v1533 
                                let _v1528 = v1534 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1535 : Ref<Str> = v1527 |> unbox<Ref<Str>>
                                let _v1528 = v1535 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1538 : Ref<Str> = v1527 |> unbox<Ref<Str>>
                                let _v1528 = v1538 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1541 : Ref<Str> = v1527 |> unbox<Ref<Str>>
                                let _v1528 = v1541 
                                #endif
#else
                                let v1544 : Ref<Str> = v1527 |> unbox<Ref<Str>>
                                let _v1528 = v1544 
                                #endif
                                let v1547 : Ref<Str> = _v1528 
                                let v1552 : string = "clap::ArgMatches::get_flag(&$0, $1)"
                                let v1553 : bool = Fable.Core.RustInterop.emitRustExpr struct (v26, v1547) v1552 
                                let v1554 : string = method180()
                                let v1555 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1556 : string = "&*$0"
                                let v1557 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1554 v1556 
                                let _v1555 = v1557 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1558 : string = "&*$0"
                                let v1559 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1554 v1558 
                                let _v1555 = v1559 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1560 : string = "&*$0"
                                let v1561 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1554 v1560 
                                let _v1555 = v1561 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1562 : Ref<Str> = v1554 |> unbox<Ref<Str>>
                                let _v1555 = v1562 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1565 : Ref<Str> = v1554 |> unbox<Ref<Str>>
                                let _v1555 = v1565 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1568 : Ref<Str> = v1554 |> unbox<Ref<Str>>
                                let _v1555 = v1568 
                                #endif
#else
                                let v1571 : Ref<Str> = v1554 |> unbox<Ref<Str>>
                                let _v1555 = v1571 
                                #endif
                                let v1574 : Ref<Str> = _v1555 
                                let v1579 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1580 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1574) v1579 
                                let v1581 : (std_string_String -> US7) = method23()
                                let v1582 : US7 option = v1580 |> Option.map v1581 
                                let v1593 : US7 = US7_1
                                let v1594 : US7 = v1582 |> Option.defaultValue v1593 
                                let v1604 : US5 =
                                    match v1594 with
                                    | US7_1 -> (* None *)
                                        US5_1
                                    | US7_0(v1598) -> (* Some *)
                                        let v1599 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1600 : string = Fable.Core.RustInterop.emitRustExpr v1598 v1599 
                                        US5_0(v1600)
                                let v1605 : string = method181()
                                let v1606 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1607 : string = "&*$0"
                                let v1608 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1605 v1607 
                                let _v1606 = v1608 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1609 : string = "&*$0"
                                let v1610 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1605 v1609 
                                let _v1606 = v1610 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1611 : string = "&*$0"
                                let v1612 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v1605 v1611 
                                let _v1606 = v1612 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1613 : Ref<Str> = v1605 |> unbox<Ref<Str>>
                                let _v1606 = v1613 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1616 : Ref<Str> = v1605 |> unbox<Ref<Str>>
                                let _v1606 = v1616 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1619 : Ref<Str> = v1605 |> unbox<Ref<Str>>
                                let _v1606 = v1619 
                                #endif
#else
                                let v1622 : Ref<Str> = v1605 |> unbox<Ref<Str>>
                                let _v1606 = v1622 
                                #endif
                                let v1625 : Ref<Str> = _v1606 
                                let v1630 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                let v1631 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v1625) v1630 
                                let v1632 : (std_string_String -> US7) = method23()
                                let v1633 : US7 option = v1631 |> Option.map v1632 
                                let v1644 : US7 = US7_1
                                let v1645 : US7 = v1633 |> Option.defaultValue v1644 
                                let v1655 : US5 =
                                    match v1645 with
                                    | US7_1 -> (* None *)
                                        US5_1
                                    | US7_0(v1649) -> (* Some *)
                                        let v1650 : string = "fable_library_rust::String_::fromString($0)"
                                        let v1651 : string = Fable.Core.RustInterop.emitRustExpr v1649 v1650 
                                        US5_0(v1651)
                                let v1664 : US35 =
                                    match v1604 with
                                    | US5_0(v1656) -> (* Some *)
                                        let v1657 : US36 = US36_0(v1656)
                                        US35_0(v1657)
                                    | _ ->
                                        match v1655 with
                                        | US5_0(v1659) -> (* Some *)
                                            let v1660 : US36 = US36_1(v1659)
                                            US35_0(v1660)
                                        | _ ->
                                            US35_1
                                let v1665 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1666 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1667 : string = "std::fs::read(&*$0)"
                                let v1668 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v1476 v1667 
                                let v1669 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1670 : string = "$0.unwrap()"
                                let v1671 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1668 v1670 
                                let _v1669 = v1671 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1672 : string = "$0.unwrap()"
                                let v1673 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1668 v1672 
                                let _v1669 = v1673 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1674 : string = "$0.unwrap()"
                                let v1675 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1668 v1674 
                                let _v1669 = v1675 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1676 : Vec<uint8> = match v1668 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1669 = v1676 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1677 : Vec<uint8> = match v1668 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1669 = v1677 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1678 : Vec<uint8> = match v1668 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1669 = v1678 
                                #endif
#else
                                let v1679 : Vec<uint8> = match v1668 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1669 = v1679 
                                #endif
                                let v1680 : Vec<uint8> = _v1669 
                                let _v1666 = v1680 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1683 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1666 = v1683 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1686 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1666 = v1686 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1689 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1666 = v1689 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1692 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1666 = v1692 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1695 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                let _v1666 = v1695 
                                #endif
#else
                                let v1698 : (uint8 []) = v1476 |> System.IO.File.ReadAllBytes
                                let v1699 : string = "$0.to_vec()"
                                let v1700 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v1698 v1699 
                                let _v1666 = v1700 
                                #endif
                                let v1701 : Vec<uint8> = _v1666 
                                let v1706 : Vec<uint8> = method27(v1701)
                                let v1707 : string = "std::string::String::from_utf8($0)"
                                let v1708 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v1706 v1707 
                                let v1709 : unit = ()
                                
#if FABLE_COMPILER || WASM || CONTRACT
                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                let v1710 : string = "$0.unwrap()"
                                let v1711 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1708 v1710 
                                let _v1709 = v1711 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1712 : string = "$0.unwrap()"
                                let v1713 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1708 v1712 
                                let _v1709 = v1713 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1714 : string = "$0.unwrap()"
                                let v1715 : std_string_String = Fable.Core.RustInterop.emitRustExpr v1708 v1714 
                                let _v1709 = v1715 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1716 : std_string_String = match v1708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1709 = v1716 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1717 : std_string_String = match v1708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1709 = v1717 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1718 : std_string_String = match v1708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1709 = v1718 
                                #endif
#else
                                let v1719 : std_string_String = match v1708 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                let _v1709 = v1719 
                                #endif
                                let v1720 : std_string_String = _v1709 
                                let v1723 : string = "fable_library_rust::String_::fromString($0)"
                                let v1724 : string = Fable.Core.RustInterop.emitRustExpr v1720 v1723 
                                let _v1665 = v1724 
                                #endif
#if FABLE_COMPILER_RUST && WASM
                                let v1725 : string = null |> unbox<string>
                                let _v1665 = v1725 
                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                let v1728 : string = null |> unbox<string>
                                let _v1665 = v1728 
                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                let v1731 : string = null |> unbox<string>
                                let _v1665 = v1731 
                                #endif
#if FABLE_COMPILER_PYTHON
                                let v1734 : string = null |> unbox<string>
                                let _v1665 = v1734 
                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                let v1737 : string = null |> unbox<string>
                                let _v1665 = v1737 
                                #endif
#else
                                let v1740 : string = v1476 |> System.IO.File.ReadAllText
                                let _v1665 = v1740 
                                #endif
                                let v1741 : string = _v1665 
                                let v1746 : string = "rs"
                                let v1747 : string = method182(v1746, v1741, v1664)
                                let v1748 : string = method183(v1747)
                                let v1749 : string = __SOURCE_DIRECTORY__
                                let v1750 : string = "polyglot"
                                let v1751 : string = ".devcontainer"
                                let v1752 : string = method28(v1750, v1751)
                                let v1753 : US12 = method31(v1752, v1749)
                                let v1801 : US5 =
                                    match v1753 with
                                    | US12_1(v1756) -> (* Error *)
                                        let v1757 : unit = ()
                                        let v1758 : (unit -> unit) = closure16(v1756)
                                        let v1759 : unit = (fun () -> v1758 (); v1757) ()
                                        US5_1
                                    | US12_0(v1754) -> (* Ok *)
                                        US5_0(v1754)
                                let v1856 : US5 =
                                    match v1801 with
                                    | US5_1 -> (* None *)
                                        let v1804 : string = method39()
                                        let v1805 : string = method28(v1750, v1751)
                                        let v1806 : US12 = method31(v1805, v1804)
                                        match v1806 with
                                        | US12_1(v1809) -> (* Error *)
                                            let v1810 : unit = ()
                                            let v1811 : (unit -> unit) = closure16(v1809)
                                            let v1812 : unit = (fun () -> v1811 (); v1810) ()
                                            US5_1
                                        | US12_0(v1807) -> (* Ok *)
                                            US5_0(v1807)
                                    | US5_0(v1802) -> (* Some *)
                                        US5_0(v1802)
                                let v1860 : string =
                                    match v1856 with
                                    | US5_1 -> (* None *)
                                        failwith<string> "Option does not have a value."
                                    | US5_0(v1857) -> (* Some *)
                                        v1857
                                let v1861 : string = method28(v1860, v1750)
                                let v1862 : string = method39()
                                let v1863 : (unit -> string) = v1862.ToLower
                                let v1864 : string = v1863 ()
                                let v1867 : (unit -> string) = v1861.ToLower
                                let v1868 : string = v1867 ()
                                let v1871 : bool = v1864.StartsWith (v1868, false, null)
                                let v1876 : US12 =
                                    if v1871 then
                                        US12_1(v1868)
                                    else
                                        US12_0(v1868)
                                let v1882 : Result<string, string> =
                                    match v1876 with
                                    | US12_1(v1879) -> (* Error *)
                                        let v1880 : Result<string, string> = Error v1879 
                                        v1880
                                    | US12_0(v1877) -> (* Ok *)
                                        let v1878 : Result<string, string> = Ok v1877 
                                        v1878
                                let v1883 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                let v1884 : bool = Fable.Core.RustInterop.emitRustExpr v1882 v1883 
                                let v1885 : string = "x"
                                let v1886 : string = Fable.Core.RustInterop.emitRustExpr () v1885 
                                let v1887 : string = "true; $0 })"
                                let v1888 : bool = Fable.Core.RustInterop.emitRustExpr v1886 v1887 
                                let v1889 : string = "_result_unwrap_or_else"
                                let v1890 : string = Fable.Core.RustInterop.emitRustExpr () v1889 
                                let v1891 : string = "spiral_builder"
                                let v1892 : US37 = US37_0
                                let v1893 : US38 = US38_0(v1892)
                                let v1894 : US5 = US5_0(v1748)
                                let v1895 : string = method186(v1894, v1891, v1893, v1890)
                                let v1896 : string = "Fable.Core"
                                let v1897 : UH2 = UH2_0
                                let v1898 : UH2 = UH2_1(v1896, v1897)
                                let v1899 : UH2 = UH2_0
                                let v1900 : string = method187(v1741, v1891, v1899, v1898, v1895, v1890)
                                let v1901 : string = "../../.."
                                let v1902 : string = method28(v1895, v1901)
                                let v1903 : string = "Cargo.toml"
                                let v1904 : string = method28(v1902, v1903)
                                let v1905 : bool = method43(v1904)
                                let v1906 : bool = v1905 = false
                                if v1906 then
                                    let v1907 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1908 : System.DateTime = System.DateTime.Now
                                    let _v1907 = v1908 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1909 : System.DateTime = System.DateTime.Now
                                    let _v1907 = v1909 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1910 : System.DateTime = null |> unbox<System.DateTime>
                                    let _v1907 = v1910 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1913 : System.DateTime = System.DateTime.Now
                                    let _v1907 = v1913 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1914 : System.DateTime = System.DateTime.Now
                                    let _v1907 = v1914 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1915 : System.DateTime = System.DateTime.Now
                                    let _v1907 = v1915 
                                    #endif
#else
                                    let v1916 : System.DateTime = System.DateTime.Now
                                    let _v1907 = v1916 
                                    #endif
                                    let v1917 : System.DateTime = _v1907 
                                    let v1922 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1923 : System.Guid = v1922 ()
                                    let v1926 : System.Guid = method190(v1923, v1917)
                                    let v1927 : (System.Guid -> string) = _.ToString()
                                    let v1928 : string = v1927 v1926
                                    let v1931 : string = $"[package]"
                                    let v1932 : string = $"name = \"spiral_builder_{v1928}\""
                                    let v1933 : string = "\n"
                                    let v1934 : string = v1931 + v1933 
                                    let v1935 : string = v1934 + v1932 
                                    let v1936 : string = $"version = \"0.0.1\""
                                    let v1937 : string = v1935 + v1933 
                                    let v1938 : string = v1937 + v1936 
                                    let v1939 : string = $"edition = \"2021\""
                                    let v1940 : string = v1938 + v1933 
                                    let v1941 : string = v1940 + v1939 
                                    let v1942 : string = $""
                                    let v1943 : string = v1941 + v1933 
                                    let v1944 : string = v1943 + v1942 
                                    let v1945 : string = $"[[bin]]"
                                    let v1946 : string = v1944 + v1933 
                                    let v1947 : string = v1946 + v1945 
                                    let v1948 : string = $"name = \"spiral_builder_{v1928}\""
                                    let v1949 : string = v1947 + v1933 
                                    let v1950 : string = v1949 + v1948 
                                    let v1951 : string = $"path = \"spiral_builder.rs\""
                                    let v1952 : string = v1950 + v1933 
                                    let v1953 : string = v1952 + v1951 
                                    let v1954 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1955 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1904, v1953) v1955 
                                    let _v1954 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v1954 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v1954 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v1954 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v1954 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v1954 = () 
                                    #endif
#else
                                    let v1956 : string = method67(v1953)
                                    System.IO.File.WriteAllText (v1904, v1956)
                                    let _v1954 = () 
                                    #endif
                                    _v1954 
                                    ()
                                let v1957 : string = method28(v1895, v1903)
                                let v1958 : bool = method43(v1957)
                                let v1959 : bool = v1958 = false
                                if v1959 then
                                    let v1960 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v1961 : System.DateTime = System.DateTime.Now
                                    let _v1960 = v1961 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let v1962 : System.DateTime = System.DateTime.Now
                                    let _v1960 = v1962 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let v1963 : System.DateTime = null |> unbox<System.DateTime>
                                    let _v1960 = v1963 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let v1966 : System.DateTime = System.DateTime.Now
                                    let _v1960 = v1966 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let v1967 : System.DateTime = System.DateTime.Now
                                    let _v1960 = v1967 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let v1968 : System.DateTime = System.DateTime.Now
                                    let _v1960 = v1968 
                                    #endif
#else
                                    let v1969 : System.DateTime = System.DateTime.Now
                                    let _v1960 = v1969 
                                    #endif
                                    let v1970 : System.DateTime = _v1960 
                                    let v1975 : (unit -> System.Guid) = System.Guid.NewGuid
                                    let v1976 : System.Guid = v1975 ()
                                    let v1979 : System.Guid = method190(v1976, v1970)
                                    let v1980 : (System.Guid -> string) = _.ToString()
                                    let v1981 : string = v1980 v1979
                                    let v1984 : string = $"[package]"
                                    let v1985 : string = $"name = \"spiral_builder_{v1981}\""
                                    let v1986 : string = "\n"
                                    let v1987 : string = v1984 + v1986 
                                    let v1988 : string = v1987 + v1985 
                                    let v1989 : string = $"version = \"0.0.1\""
                                    let v1990 : string = v1988 + v1986 
                                    let v1991 : string = v1990 + v1989 
                                    let v1992 : string = $"edition = \"2021\""
                                    let v1993 : string = v1991 + v1986 
                                    let v1994 : string = v1993 + v1992 
                                    let v1995 : string = $""
                                    let v1996 : string = v1994 + v1986 
                                    let v1997 : string = v1996 + v1995 
                                    let v1998 : string = $"[[bin]]"
                                    let v1999 : string = v1997 + v1986 
                                    let v2000 : string = v1999 + v1998 
                                    let v2001 : string = $"name = \"spiral_builder_{v1981}\""
                                    let v2002 : string = v2000 + v1986 
                                    let v2003 : string = v2002 + v2001 
                                    let v2004 : string = $"path = \"spiral_builder.rs\""
                                    let v2005 : string = v2003 + v1986 
                                    let v2006 : string = v2005 + v2004 
                                    let v2007 : unit = ()
                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                    let v2008 : string = "std::fs::write(&*$0, &*$1).unwrap()"
                                    Fable.Core.RustInterop.emitRustExpr struct (v1957, v2006) v2008 
                                    let _v2007 = () 
                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                    let _v2007 = () 
                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                    let _v2007 = () 
                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                    let _v2007 = () 
                                    #endif
#if FABLE_COMPILER_PYTHON
                                    let _v2007 = () 
                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                    let _v2007 = () 
                                    #endif
#else
                                    let v2009 : string = method67(v2006)
                                    System.IO.File.WriteAllText (v1957, v2009)
                                    let _v2007 = () 
                                    #endif
                                    _v2007 
                                    ()
                                let v2010 : string = "lib/rust/fable/fable_modules/fable-library-rust"
                                let v2011 : string = method28(v1890, v2010)
                                let v2012 : string = "fable_modules/fable-library-rust"
                                let v2013 : string = method28(v1895, v2012)
                                method195(v2011, v2013)
                                let struct (v2014 : int32, v2015 : string) = method196(v1664, v1895, v1746, v1900, v1876)
                                let v2016 : bool = v2014 <> 0 
                                let struct (v3137 : US5, v3138 : US5, v3139 : US5, v3140 : US5) =
                                    if v2016 then
                                        let v2019 : unit = ()
                                        let v2020 : (unit -> unit) = closure83(v2015, v2014)
                                        let v2021 : unit = (fun () -> v2020 (); v2019) ()
                                        let v2061 : US5 = US5_0(v1746)
                                        let v2062 : US5 = US5_1
                                        let v2063 : US5 = US5_1
                                        let v2064 : US5 = US5_0(v2015)
                                        struct (v2061, v2062, v2063, v2064)
                                    else
                                        let v2065 : bool =
                                            match v1664 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2141 : Vec<std_string_String> =
                                            if v2065 then
                                                v1526
                                            else
                                                let v2066 : (std_string_String -> bool) = method206()
                                                let v2067 : Vec<std_string_String> = method207(v1526)
                                                let v2068 : string = "v2067.into_iter().filter(|x| v2066(x.clone().clone())).collect::<Vec<_>>()"
                                                let v2069 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2068 
                                                let v2070 : string = "$0.len()"
                                                let v2071 : unativeint = Fable.Core.RustInterop.emitRustExpr v2069 v2070 
                                                let v2072 : int32 = v2071 |> int32 
                                                let v2079 : bool = v2072 > 0
                                                if v2079 then
                                                    v1526
                                                else
                                                    let v2080 : string = "near-sdk"
                                                    let v2081 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v2082 : string = "&*$0"
                                                    let v2083 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2080 v2082 
                                                    let _v2081 = v2083 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v2084 : string = "&*$0"
                                                    let v2085 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2080 v2084 
                                                    let _v2081 = v2085 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v2086 : string = "&*$0"
                                                    let v2087 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v2080 v2086 
                                                    let _v2081 = v2087 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v2088 : Ref<Str> = v2080 |> unbox<Ref<Str>>
                                                    let _v2081 = v2088 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v2091 : Ref<Str> = v2080 |> unbox<Ref<Str>>
                                                    let _v2081 = v2091 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v2094 : Ref<Str> = v2080 |> unbox<Ref<Str>>
                                                    let _v2081 = v2094 
                                                    #endif
#else
                                                    let v2097 : Ref<Str> = v2080 |> unbox<Ref<Str>>
                                                    let _v2081 = v2097 
                                                    #endif
                                                    let v2100 : Ref<Str> = _v2081 
                                                    let v2105 : unit = ()
                                                    
#if FABLE_COMPILER || WASM || CONTRACT
                                                    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                    let v2106 : string = "String::from($0)"
                                                    let v2107 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2100 v2106 
                                                    let _v2105 = v2107 
                                                    #endif
#if FABLE_COMPILER_RUST && WASM
                                                    let v2108 : string = "String::from($0)"
                                                    let v2109 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2100 v2108 
                                                    let _v2105 = v2109 
                                                    #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                    let v2110 : string = "String::from($0)"
                                                    let v2111 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2100 v2110 
                                                    let _v2105 = v2111 
                                                    #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                    let v2112 : std_string_String = v2100 |> unbox<std_string_String>
                                                    let _v2105 = v2112 
                                                    #endif
#if FABLE_COMPILER_PYTHON
                                                    let v2115 : std_string_String = v2100 |> unbox<std_string_String>
                                                    let _v2105 = v2115 
                                                    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                    let v2118 : std_string_String = v2100 |> unbox<std_string_String>
                                                    let _v2105 = v2118 
                                                    #endif
#else
                                                    let v2121 : std_string_String = v2100 |> unbox<std_string_String>
                                                    let _v2105 = v2121 
                                                    #endif
                                                    let v2124 : std_string_String = _v2105 
                                                    let v2129 : (std_string_String []) = [|v2124|]
                                                    let v2130 : string = "$0.to_vec()"
                                                    let v2131 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v2129 v2130 
                                                    let v2132 : Vec<std_string_String> = method208(v2131)
                                                    let v2133 : Vec<std_string_String> = method209(v1526)
                                                    let v2134 : string = "true; let mut v2133 = v2133"
                                                    let v2135 : bool = Fable.Core.RustInterop.emitRustExpr () v2134 
                                                    let v2136 : string = "true; v2133.extend(v2132)"
                                                    let v2137 : bool = Fable.Core.RustInterop.emitRustExpr () v2136 
                                                    let v2138 : string = "v2133"
                                                    let v2139 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr () v2138 
                                                    v2139
                                        let v2142 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                        let v2143 : bool = Fable.Core.RustInterop.emitRustExpr v2141 v2142 
                                        let v2144 : string = "x"
                                        let v2145 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v2144 
                                        let v2146 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2147 : string = Fable.Core.RustInterop.emitRustExpr v2145 v2146 
                                        let v2148 : string = "="
                                        let v2149 : bool = v2147.Contains v2148 
                                        let v2162 : string =
                                            if v2149 then
                                                v2147
                                            else
                                                let v2152 : string = "]"
                                                let v2153 : bool = v2147.EndsWith (v2152, false, null)
                                                if v2153 then
                                                    let v2156 : string = $"={{version='*',features=["
                                                    let v2157 : string = "["
                                                    let v2158 : string = v2147.Replace (v2157, v2156)
                                                    let v2159 : string = $"{v2158}}}"
                                                    v2159
                                                else
                                                    let v2160 : string = $"{v2147}='*'"
                                                    v2160
                                        let v2163 : string = "true; $0 }).collect::<Vec<_>>()"
                                        let v2164 : bool = Fable.Core.RustInterop.emitRustExpr v2162 v2163 
                                        let v2165 : string = "_vec_map"
                                        let v2166 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v2165 
                                        let v2167 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v2168 : (string []) = Fable.Core.RustInterop.emitRustExpr v2166 v2167 
                                        let v2169 : unit = ()
                                        let _v2169 =
                                            seq {
                                                for i = 0 to v2168.Length - 1 do yield v2168.[i]
                                                (*
                                                ()
                                            *)
                                            }
                                            (*
                                            ()
                                        *)
                                        let v2172 : string seq = _v2169 
                                        let v2178 : string = method40()
                                        let v2179 : (string -> (string seq -> string)) = String.concat
                                        let v2180 : (string seq -> string) = v2179 v2178
                                        let v2181 : string = v2180 v2172
                                        let v2185 : string = $"{v1891}.{v1746}"
                                        let v2186 : string = method28(v1895, v2185)
                                        let v2187 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2188 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2189 : string = "std::fs::read(&*$0)"
                                        let v2190 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2186 v2189 
                                        let v2191 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2192 : string = "$0.unwrap()"
                                        let v2193 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2190 v2192 
                                        let _v2191 = v2193 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2194 : string = "$0.unwrap()"
                                        let v2195 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2190 v2194 
                                        let _v2191 = v2195 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2196 : string = "$0.unwrap()"
                                        let v2197 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2190 v2196 
                                        let _v2191 = v2197 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2198 : Vec<uint8> = match v2190 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2191 = v2198 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2199 : Vec<uint8> = match v2190 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2191 = v2199 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2200 : Vec<uint8> = match v2190 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2191 = v2200 
                                        #endif
#else
                                        let v2201 : Vec<uint8> = match v2190 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2191 = v2201 
                                        #endif
                                        let v2202 : Vec<uint8> = _v2191 
                                        let _v2188 = v2202 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2205 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2188 = v2205 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2208 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2188 = v2208 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2211 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2188 = v2211 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2214 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2188 = v2214 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2217 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2188 = v2217 
                                        #endif
#else
                                        let v2220 : (uint8 []) = v2186 |> System.IO.File.ReadAllBytes
                                        let v2221 : string = "$0.to_vec()"
                                        let v2222 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2220 v2221 
                                        let _v2188 = v2222 
                                        #endif
                                        let v2223 : Vec<uint8> = _v2188 
                                        let v2228 : Vec<uint8> = method27(v2223)
                                        let v2229 : string = "std::string::String::from_utf8($0)"
                                        let v2230 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2228 v2229 
                                        let v2231 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2232 : string = "$0.unwrap()"
                                        let v2233 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2230 v2232 
                                        let _v2231 = v2233 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2234 : string = "$0.unwrap()"
                                        let v2235 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2230 v2234 
                                        let _v2231 = v2235 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2236 : string = "$0.unwrap()"
                                        let v2237 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2230 v2236 
                                        let _v2231 = v2237 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2238 : std_string_String = match v2230 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2231 = v2238 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2239 : std_string_String = match v2230 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2231 = v2239 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2240 : std_string_String = match v2230 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2231 = v2240 
                                        #endif
#else
                                        let v2241 : std_string_String = match v2230 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2231 = v2241 
                                        #endif
                                        let v2242 : std_string_String = _v2231 
                                        let v2245 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2246 : string = Fable.Core.RustInterop.emitRustExpr v2242 v2245 
                                        let _v2187 = v2246 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2247 : string = null |> unbox<string>
                                        let _v2187 = v2247 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2250 : string = null |> unbox<string>
                                        let _v2187 = v2250 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2253 : string = null |> unbox<string>
                                        let _v2187 = v2253 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2256 : string = null |> unbox<string>
                                        let _v2187 = v2256 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2259 : string = null |> unbox<string>
                                        let _v2187 = v2259 
                                        #endif
#else
                                        let v2262 : string = v2186 |> System.IO.File.ReadAllText
                                        let _v2187 = v2262 
                                        #endif
                                        let v2263 : string = _v2187 
                                        let v2268 : string = method210()
                                        let v2269 : string = "on_startup!"
                                        let v2270 : string = v2269 + v2268 
                                        let v2271 : string = method211()
                                        let v2272 : string = " method0"
                                        let v2273 : string = v2272 + v2271 
                                        let v2274 : bool = v2263.Contains v2270 
                                        let v2281 : bool =
                                            if v2274 then
                                                let v2277 : bool = v2263.Contains v2273 
                                                let v2280 : bool = v2277 = false
                                                v2280
                                            else
                                                false
                                        let v2282 : string = $"[package]"
                                        let v2283 : string = $"name = \"spiral_builder_{v1748}\""
                                        let v2284 : string = "\n"
                                        let v2285 : string = v2282 + v2284 
                                        let v2286 : string = v2285 + v2283 
                                        let v2287 : string = $"version = \"0.0.1\""
                                        let v2288 : string = v2286 + v2284 
                                        let v2289 : string = v2288 + v2287 
                                        let v2290 : string = $"edition = \"2021\""
                                        let v2291 : string = v2289 + v2284 
                                        let v2292 : string = v2291 + v2290 
                                        let v2293 : string = $""
                                        let v2294 : string = v2292 + v2284 
                                        let v2295 : string = v2294 + v2293 
                                        let v2296 : string = $"[dependencies]"
                                        let v2297 : string = v2295 + v2284 
                                        let v2298 : string = v2297 + v2296 
                                        let v2299 : US35 = US35_1
                                        let v2300 : bool = v1664 <> v2299 
                                        let v2318 : string =
                                            if v2300 then
                                                let v2304 : string = $"fable_library_rust = {{ workspace = true }}"
                                                v2304
                                            else
                                                let v2305 : string = $"fable_library_rust = {{"
                                                let v2306 : string = $" workspace = true,"
                                                let v2307 : string = v2305 + v2306 
                                                let v2308 : string = $" features = ["
                                                let v2309 : string = v2307 + v2308 
                                                let v2312 : string =
                                                    if v2281 then
                                                        let v2310 : string = $"\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\""
                                                        v2310
                                                    else
                                                        let v2311 : string = $"\"datetime\", \"guid\", \"threaded\""
                                                        v2311
                                                let v2313 : string = v2309 + v2312 
                                                let v2314 : string = $"]"
                                                let v2315 : string = v2313 + v2314 
                                                let v2316 : string = $"}}"
                                                let v2317 : string = v2315 + v2316 
                                                v2317
                                        let v2319 : string = v2298 + v2284 
                                        let v2320 : string = v2319 + v2318 
                                        let v2321 : string = $"inline_colorization = {{ workspace = true }}"
                                        let v2322 : string = v2320 + v2284 
                                        let v2323 : string = v2322 + v2321 
                                        let v2324 : string = $"{v2181}"
                                        let v2325 : string = v2323 + v2284 
                                        let v2326 : string = v2325 + v2324 
                                        let v2327 : string = $""
                                        let v2328 : string = v2326 + v2284 
                                        let v2329 : string = v2328 + v2327 
                                        let v2330 : bool =
                                            match v1664 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2339 : string =
                                            if v2330 then
                                                let v2331 : string = $"[[bin]]"
                                                let v2332 : string = $"name = \"spiral_builder_{v1748}\""
                                                let v2333 : string = v2331 + v2284 
                                                let v2334 : string = v2333 + v2332 
                                                v2334
                                            else
                                                let v2335 : string = $"[lib]"
                                                let v2336 : string = $"crate-type = [\"cdylib\"]"
                                                let v2337 : string = v2335 + v2284 
                                                let v2338 : string = v2337 + v2336 
                                                v2338
                                        let v2340 : string = v2329 + v2284 
                                        let v2341 : string = v2340 + v2339 
                                        let v2342 : string = $"path = \"spiral_builder.rs\""
                                        let v2343 : string = v2341 + v2284 
                                        let v2344 : string = v2343 + v2342 
                                        let v2345 : string = method147(v1890)
                                        let v2346 : string = $"cargo-features = [\"profile-rustflags\"]"
                                        let v2347 : string = $""
                                        let v2348 : string = v2346 + v2284 
                                        let v2349 : string = v2348 + v2347 
                                        let v2350 : string = $"[workspace]"
                                        let v2351 : string = v2349 + v2284 
                                        let v2352 : string = v2351 + v2350 
                                        let v2353 : string = $"resolver = \"2\""
                                        let v2354 : string = v2352 + v2284 
                                        let v2355 : string = v2354 + v2353 
                                        let v2356 : string = $"members = [\"packages/Rust/*\"]"
                                        let v2357 : string = v2355 + v2284 
                                        let v2358 : string = v2357 + v2356 
                                        let v2359 : string = $""
                                        let v2360 : string = v2358 + v2284 
                                        let v2361 : string = v2360 + v2359 
                                        let v2362 : string = $"[workspace.dependencies.fable_library_rust]"
                                        let v2363 : string = v2361 + v2284 
                                        let v2364 : string = v2363 + v2362 
                                        let v2365 : string = $"path = \"{v2345}/lib/rust/fable/fable_modules/fable-library-rust\""
                                        let v2366 : string = v2364 + v2284 
                                        let v2367 : string = v2366 + v2365 
                                        let v2368 : string = $"default-features = false"
                                        let v2369 : string = v2367 + v2284 
                                        let v2370 : string = v2369 + v2368 
                                        let v2371 : string = $"features = []"
                                        let v2372 : string = v2370 + v2284 
                                        let v2373 : string = v2372 + v2371 
                                        let v2374 : string = $""
                                        let v2375 : string = v2373 + v2284 
                                        let v2376 : string = v2375 + v2374 
                                        let v2377 : string = $"[workspace.dependencies]"
                                        let v2378 : string = v2376 + v2284 
                                        let v2379 : string = v2378 + v2377 
                                        let v2380 : string = $"inline_colorization = \"~0.1\""
                                        let v2381 : string = v2379 + v2284 
                                        let v2382 : string = v2381 + v2380 
                                        let v2383 : string = $""
                                        let v2384 : string = v2382 + v2284 
                                        let v2385 : string = v2384 + v2383 
                                        let v2386 : string = $"[profile.release]"
                                        let v2387 : string = v2385 + v2284 
                                        let v2388 : string = v2387 + v2386 
                                        let v2389 : string = $"codegen-units = 1"
                                        let v2390 : string = v2388 + v2284 
                                        let v2391 : string = v2390 + v2389 
                                        let v2392 : string = $"opt-level = \"z\""
                                        let v2393 : string = v2391 + v2284 
                                        let v2394 : string = v2393 + v2392 
                                        let v2395 : string = $"lto = true"
                                        let v2396 : string = v2394 + v2284 
                                        let v2397 : string = v2396 + v2395 
                                        let v2398 : string = $"debug = false"
                                        let v2399 : string = v2397 + v2284 
                                        let v2400 : string = v2399 + v2398 
                                        let v2401 : string = $"panic = \"abort\""
                                        let v2402 : string = v2400 + v2284 
                                        let v2403 : string = v2402 + v2401 
                                        let v2404 : string = $"overflow-checks = true"
                                        let v2405 : string = v2403 + v2284 
                                        let v2406 : string = v2405 + v2404 
                                        let v2407 : string = $"rustflags = [\"-C\", \"link-arg=-s\"]"
                                        let v2408 : string = v2406 + v2284 
                                        let v2409 : string = v2408 + v2407 
                                        method41(v1957, v2344)
                                        method41(v1904, v2409)
                                        let v2410 : string = "src/Range.rs"
                                        let v2411 : string = method28(v2013, v2410)
                                        let v2412 : bool = method43(v2411)
                                        if v2412 then
                                            let v2413 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2414 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2415 : string = "std::fs::read(&*$0)"
                                            let v2416 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2411 v2415 
                                            let v2417 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2418 : string = "$0.unwrap()"
                                            let v2419 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2416 v2418 
                                            let _v2417 = v2419 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2420 : string = "$0.unwrap()"
                                            let v2421 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2416 v2420 
                                            let _v2417 = v2421 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2422 : string = "$0.unwrap()"
                                            let v2423 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2416 v2422 
                                            let _v2417 = v2423 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2424 : Vec<uint8> = match v2416 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2417 = v2424 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2425 : Vec<uint8> = match v2416 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2417 = v2425 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2426 : Vec<uint8> = match v2416 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2417 = v2426 
                                            #endif
#else
                                            let v2427 : Vec<uint8> = match v2416 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2417 = v2427 
                                            #endif
                                            let v2428 : Vec<uint8> = _v2417 
                                            let _v2414 = v2428 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2431 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2414 = v2431 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2434 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2414 = v2434 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2437 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2414 = v2437 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2440 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2414 = v2440 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2443 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                            let _v2414 = v2443 
                                            #endif
#else
                                            let v2446 : (uint8 []) = v2411 |> System.IO.File.ReadAllBytes
                                            let v2447 : string = "$0.to_vec()"
                                            let v2448 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2446 v2447 
                                            let _v2414 = v2448 
                                            #endif
                                            let v2449 : Vec<uint8> = _v2414 
                                            let v2454 : Vec<uint8> = method27(v2449)
                                            let v2455 : string = "std::string::String::from_utf8($0)"
                                            let v2456 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2454 v2455 
                                            let v2457 : unit = ()
                                            
#if FABLE_COMPILER || WASM || CONTRACT
                                            
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                            let v2458 : string = "$0.unwrap()"
                                            let v2459 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2456 v2458 
                                            let _v2457 = v2459 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2460 : string = "$0.unwrap()"
                                            let v2461 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2456 v2460 
                                            let _v2457 = v2461 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2462 : string = "$0.unwrap()"
                                            let v2463 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2456 v2462 
                                            let _v2457 = v2463 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2464 : std_string_String = match v2456 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2457 = v2464 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2465 : std_string_String = match v2456 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2457 = v2465 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2466 : std_string_String = match v2456 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2457 = v2466 
                                            #endif
#else
                                            let v2467 : std_string_String = match v2456 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                            let _v2457 = v2467 
                                            #endif
                                            let v2468 : std_string_String = _v2457 
                                            let v2471 : string = "fable_library_rust::String_::fromString($0)"
                                            let v2472 : string = Fable.Core.RustInterop.emitRustExpr v2468 v2471 
                                            let _v2413 = v2472 
                                            #endif
#if FABLE_COMPILER_RUST && WASM
                                            let v2473 : string = null |> unbox<string>
                                            let _v2413 = v2473 
                                            #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                            let v2476 : string = null |> unbox<string>
                                            let _v2413 = v2476 
                                            #endif
#if FABLE_COMPILER_TYPESCRIPT
                                            let v2479 : string = null |> unbox<string>
                                            let _v2413 = v2479 
                                            #endif
#if FABLE_COMPILER_PYTHON
                                            let v2482 : string = null |> unbox<string>
                                            let _v2413 = v2482 
                                            #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                            let v2485 : string = null |> unbox<string>
                                            let _v2413 = v2485 
                                            #endif
#else
                                            let v2488 : string = v2411 |> System.IO.File.ReadAllText
                                            let _v2413 = v2488 
                                            #endif
                                            let v2489 : string = _v2413 
                                            let v2494 : string = "use crate::String_::fromCharCode;"
                                            let v2495 : string = "use crate::String_::fromChar;"
                                            let v2496 : string = v2489.Replace (v2494, v2495)
                                            let v2497 : string = "fromCharCode(c)"
                                            let v2498 : string = "std::char::from_u32(c).unwrap()"
                                            let v2499 : string = v2496.Replace (v2497, v2498)
                                            method41(v2411, v2499)
                                        let v2500 : uint8 = 1uy
                                        let struct (v2501 : int32, v2502 : string) = method212(v1876, v1957, v2500)
                                        let v2503 : bool = v2501 <> 0 
                                        if v2503 then
                                            let v2506 : unit = ()
                                            let v2507 : (unit -> unit) = closure87(v2502, v2501)
                                            let v2508 : unit = (fun () -> v2507 (); v2506) ()
                                            ()
                                        let v2548 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2549 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2550 : string = "std::fs::read(&*$0)"
                                        let v2551 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v2186 v2550 
                                        let v2552 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2553 : string = "$0.unwrap()"
                                        let v2554 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2551 v2553 
                                        let _v2552 = v2554 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2555 : string = "$0.unwrap()"
                                        let v2556 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2551 v2555 
                                        let _v2552 = v2556 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2557 : string = "$0.unwrap()"
                                        let v2558 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2551 v2557 
                                        let _v2552 = v2558 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2559 : Vec<uint8> = match v2551 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2552 = v2559 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2560 : Vec<uint8> = match v2551 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2552 = v2560 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2561 : Vec<uint8> = match v2551 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2552 = v2561 
                                        #endif
#else
                                        let v2562 : Vec<uint8> = match v2551 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2552 = v2562 
                                        #endif
                                        let v2563 : Vec<uint8> = _v2552 
                                        let _v2549 = v2563 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2566 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2549 = v2566 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2569 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2549 = v2569 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2572 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2549 = v2572 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2575 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2549 = v2575 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2578 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v2549 = v2578 
                                        #endif
#else
                                        let v2581 : (uint8 []) = v2186 |> System.IO.File.ReadAllBytes
                                        let v2582 : string = "$0.to_vec()"
                                        let v2583 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v2581 v2582 
                                        let _v2549 = v2583 
                                        #endif
                                        let v2584 : Vec<uint8> = _v2549 
                                        let v2589 : Vec<uint8> = method27(v2584)
                                        let v2590 : string = "std::string::String::from_utf8($0)"
                                        let v2591 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v2589 v2590 
                                        let v2592 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2593 : string = "$0.unwrap()"
                                        let v2594 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2591 v2593 
                                        let _v2592 = v2594 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2595 : string = "$0.unwrap()"
                                        let v2596 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2591 v2595 
                                        let _v2592 = v2596 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2597 : string = "$0.unwrap()"
                                        let v2598 : std_string_String = Fable.Core.RustInterop.emitRustExpr v2591 v2597 
                                        let _v2592 = v2598 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2599 : std_string_String = match v2591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2592 = v2599 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2600 : std_string_String = match v2591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2592 = v2600 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2601 : std_string_String = match v2591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2592 = v2601 
                                        #endif
#else
                                        let v2602 : std_string_String = match v2591 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v2592 = v2602 
                                        #endif
                                        let v2603 : std_string_String = _v2592 
                                        let v2606 : string = "fable_library_rust::String_::fromString($0)"
                                        let v2607 : string = Fable.Core.RustInterop.emitRustExpr v2603 v2606 
                                        let _v2548 = v2607 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2608 : string = null |> unbox<string>
                                        let _v2548 = v2608 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2611 : string = null |> unbox<string>
                                        let _v2548 = v2611 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2614 : string = null |> unbox<string>
                                        let _v2548 = v2614 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2617 : string = null |> unbox<string>
                                        let _v2548 = v2617 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2620 : string = null |> unbox<string>
                                        let _v2548 = v2620 
                                        #endif
#else
                                        let v2623 : string = v2186 |> System.IO.File.ReadAllText
                                        let _v2548 = v2623 
                                        #endif
                                        let v2624 : string = _v2548 
                                        let v2629 : string = method218()
                                        let v2630 : string = "pub fn main() -> Result<(), String> "
                                        let v2631 : string = v2630 + v2629 
                                        let v2632 : bool =
                                            match v1664 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2665 : string =
                                            if v2632 then
                                                let v2633 : string = ""
                                                v2633
                                            else
                                                let v2634 : string = $"#[near_sdk::near_bindgen]"
                                                let v2635 : string = $"#[derive(near_sdk::PanicOnDefault)]"
                                                let v2636 : string = v2634 + v2284 
                                                let v2637 : string = v2636 + v2635 
                                                let v2638 : string = $"pub struct MainState {{"
                                                let v2639 : string = v2637 + v2284 
                                                let v2640 : string = v2639 + v2638 
                                                let v2641 : string = $"}}"
                                                let v2642 : string = v2640 + v2284 
                                                let v2643 : string = v2642 + v2641 
                                                let v2644 : string = $""
                                                let v2645 : string = v2643 + v2284 
                                                let v2646 : string = v2645 + v2644 
                                                let v2647 : string = $"#[near_sdk::near_bindgen]"
                                                let v2648 : string = v2646 + v2284 
                                                let v2649 : string = v2648 + v2647 
                                                let v2650 : string = $"impl MainState {{"
                                                let v2651 : string = v2649 + v2284 
                                                let v2652 : string = v2651 + v2650 
                                                let v2653 : string = $"    pub fn state_main() {{"
                                                let v2654 : string = v2652 + v2284 
                                                let v2655 : string = v2654 + v2653 
                                                let v2656 : string = $"        Spiral_builder::method0();"
                                                let v2657 : string = v2655 + v2284 
                                                let v2658 : string = v2657 + v2656 
                                                let v2659 : string = $"    }}"
                                                let v2660 : string = v2658 + v2284 
                                                let v2661 : string = v2660 + v2659 
                                                let v2662 : string = $"}}"
                                                let v2663 : string = v2661 + v2284 
                                                let v2664 : string = v2663 + v2662 
                                                v2664
                                        let v2666 : bool =
                                            match v1664 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2672 : bool =
                                            if v2666 then
                                                let v2667 : string = "Spiral_builder::method0()"
                                                let v2668 : string = v2270 + v2667 
                                                let v2669 : bool = v2624.Contains v2668 
                                                v2669
                                            else
                                                false
                                        let v2675 : string =
                                            if v2672 then
                                                let v2673 : string = $"{v2631} Ok(Spiral_builder::method0()) }}"
                                                v2673
                                            else
                                                let v2674 : string = $"{v2631} Ok(()) }}"
                                                v2674
                                        let v2676 : string = v2665 + v2284 
                                        let v2677 : string = v2676 + v2675 
                                        let v2678 : bool = v2624.Contains v2631 
                                        let v2681 : string = $"{v2624}\n\n{v2677}\n"
                                        let v2771 : string =
                                            if v2678 then
                                                v2624
                                            else
                                                let v2685 : bool =
                                                    match v1664 with
                                                    | US35_0(v2682) -> (* Some *)
                                                        match v2682 with
                                                        | US36_1(v2683) -> (* Contract *)
                                                            true
                                                        | _ ->
                                                            false
                                                    | _ ->
                                                        false
                                                let v2686 : string = "\";\".into()"
                                                let v2687 : string = Fable.Core.RustInterop.emitRustExpr () v2686 
                                                let v2688 : string = "),)"
                                                let v2689 : string = v2688 + v2687 
                                                let v2690 : string = "));"
                                                let v2691 : string = v2681.Replace (v2689, v2690)
                                                let v2692 : string = "\";\".into()"
                                                let v2693 : string = Fable.Core.RustInterop.emitRustExpr () v2692 
                                                let v2694 : string = "},)"
                                                let v2695 : string = v2694 + v2693 
                                                let v2696 : string = "});"
                                                let v2697 : string = v2691.Replace (v2695, v2696)
                                                let v2698 : string = "\\s\\sdefaultOf\\(\\);"
                                                let v2699 : string = " defaultOf::<()>();"
                                                let v2700 : string = method163(v2698, v2699, v2697)
                                                let v2701 : string = "\\s\\sgetZero\\(\\);"
                                                let v2702 : string = " getZero::<()>();"
                                                let v2703 : string = method163(v2701, v2702, v2700)
                                                let v2704 : string = "::Slice'_"
                                                let v2705 : string = "::Slice__"
                                                let v2706 : string = v2703.Replace (v2704, v2705)
                                                let v2707 : string = " Slice'_"
                                                let v2708 : string = " Slice__"
                                                let v2709 : string = v2706.Replace (v2707, v2708)
                                                let v2710 : string = "\",\".into()"
                                                let v2711 : string = Fable.Core.RustInterop.emitRustExpr () v2710 
                                                let v2712 : string = "defaultOf()"
                                                let v2713 : string = v2712 + v2711 
                                                let v2714 : string = "defaultOf::<std::sync::Arc<dyn IDisposable>>(),"
                                                let v2715 : string = v2709.Replace (v2713, v2714)
                                                let v2716 : string = "\"__.\".into()"
                                                let v2717 : string = Fable.Core.RustInterop.emitRustExpr () v2716 
                                                let v2718 : string = "__self"
                                                let v2719 : string = v2718 + v2717 
                                                let v2720 : string = "self."
                                                let v2721 : string = v2715.Replace (v2719, v2720)
                                                let v2722 : string = "\"_.\".into()"
                                                let v2723 : string = Fable.Core.RustInterop.emitRustExpr () v2722 
                                                let v2724 : string = "_self"
                                                let v2725 : string = v2724 + v2723 
                                                let v2726 : string = v2721.Replace (v2725, v2720)
                                                let v2727 : string = "\"h\".into()"
                                                let v2728 : string = Fable.Core.RustInterop.emitRustExpr () v2727 
                                                let v2729 : string = "get_or_insert_wit"
                                                let v2730 : string = v2729 + v2728 
                                                let v2731 : string = "get_or_init"
                                                let v2732 : string = v2726.Replace (v2730, v2731)
                                                let v2733 : string = "\";\".into()"
                                                let v2734 : string = Fable.Core.RustInterop.emitRustExpr () v2733 
                                                let v2735 : string = "use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"
                                                let v2736 : string = v2735 + v2734 
                                                let v2737 : string = "type ConcurrentStack_1<T> = T;"
                                                let v2738 : string = v2732.Replace (v2736, v2737)
                                                let v2739 : string = "\";\".into()"
                                                let v2740 : string = Fable.Core.RustInterop.emitRustExpr () v2739 
                                                let v2741 : string = "use fable_library_rust::System::Threading::CancellationToken"
                                                let v2742 : string = v2741 + v2740 
                                                let v2743 : string = "type CancellationToken = ();"
                                                let v2744 : string = v2738.Replace (v2742, v2743)
                                                let v2745 : string = "\";\".into()"
                                                let v2746 : string = Fable.Core.RustInterop.emitRustExpr () v2745 
                                                let v2747 : string = "use fable_library_rust::System::TimeZoneInfo"
                                                let v2748 : string = v2747 + v2746 
                                                let v2749 : string = "type TimeZoneInfo = i64;"
                                                let v2750 : string = v2744.Replace (v2748, v2749)
                                                let v2751 : string = "\";\".into()"
                                                let v2752 : string = Fable.Core.RustInterop.emitRustExpr () v2751 
                                                let v2753 : string = "use fable_library_rust::System::Threading::Tasks::TaskCanceledException"
                                                let v2754 : string = v2753 + v2752 
                                                let v2755 : string = "type TaskCanceledException = ();"
                                                let v2756 : string = v2750.Replace (v2754, v2755)
                                                let v2761 : (string -> string) =
                                                    if v2281 then
                                                        closure88()
                                                    else
                                                        let v2758 : string = "// "
                                                        let v2759 : string = v2758 + v2270 
                                                        closure89(v2270, v2759)
                                                let v2762 : string = v2761 v2756
                                                let v2763 : bool = v2685 = false
                                                let v2769 : (string -> string) =
                                                    if v2763 then
                                                        closure88()
                                                    else
                                                        let v2765 : string = "use fable_library_rust::DateTime_::DateTime"
                                                        let v2766 : string = ";"
                                                        let v2767 : string = v2765 + v2766 
                                                        closure90(v2767)
                                                v2769 v2762
                                        let v2772 : bool = v2678 = false
                                        if v2772 then
                                            method41(v2186, v2771)
                                        let v2773 : bool =
                                            match v1664 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2774 : bool = v2773 <> true
                                        let v2777 : string =
                                            if v2774 then
                                                let v2775 : string = $"cargo +nightly-2024-07-14 build --release --target wasm32-unknown-unknown --manifest-path \"{v1957}\""
                                                v2775
                                            else
                                                let v2776 : string = $"cargo run --manifest-path \"{v1957}\""
                                                v2776
                                        let v2778 : bool =
                                            match v1664 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let v2779 : bool = v2778 <> true
                                        let v2790 : (struct (string * string) []) =
                                            if v2779 then
                                                [||]
                                            else
                                                let v2781 : string = "TRACE_LEVEL"
                                                let v2782 : string = "Verbose"
                                                let v2783 : string = "RUSTC_WRAPPER"
                                                let v2784 : string = "sccache"
                                                let v2785 : string = "RUST_BACKTRACE"
                                                let v2786 : string = "full"
                                                let v2787 : string = "RUSTFLAGS"
                                                let v2788 : string = "-C prefer-dynamic"
                                                [|struct (v2781, v2782); struct (v2783, v2784); struct (v2785, v2786); struct (v2787, v2788)|]
                                        let v2791 : System.Threading.CancellationToken option = None
                                        let v2792 : (struct (string * string) []) = [||]
                                        let v2793 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                        let v2794 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                        let v2795 : string option = None
                                        let v2801 : Result<string, string> =
                                            match v1876 with
                                            | US12_1(v2798) -> (* Error *)
                                                let v2799 : Result<string, string> = Error v2798 
                                                v2799
                                            | US12_0(v2796) -> (* Ok *)
                                                let v2797 : Result<string, string> = Ok v2796 
                                                v2797
                                        let v2802 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v2803 : string = "$0.ok()"
                                        let v2804 : string option = Fable.Core.RustInterop.emitRustExpr v2801 v2803 
                                        let _v2802 = v2804 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v2805 : string = "$0.ok()"
                                        let v2806 : string option = Fable.Core.RustInterop.emitRustExpr v2801 v2805 
                                        let _v2802 = v2806 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v2807 : string = "$0.ok()"
                                        let v2808 : string option = Fable.Core.RustInterop.emitRustExpr v2801 v2807 
                                        let _v2802 = v2808 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v2809 : string option = match v2801 with Ok x -> Some x | Error _ -> None
                                        let _v2802 = v2809 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v2810 : string option = match v2801 with Ok x -> Some x | Error _ -> None
                                        let _v2802 = v2810 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v2811 : string option = match v2801 with Ok x -> Some x | Error _ -> None
                                        let _v2802 = v2811 
                                        #endif
#else
                                        let v2812 : string option = match v2801 with Ok x -> Some x | Error _ -> None
                                        let _v2802 = v2812 
                                        #endif
                                        let v2813 : string option = _v2802 
                                        let v2816 : bool = true
                                        let struct (v2817 : int32, v2818 : string) = method68(v2777, v2791, v2790, v2793, v2794, v2816, v2813)
                                        let v2819 : bool =
                                            match v1664 with
                                            | US35_1 -> (* None *)
                                                true
                                            | _ ->
                                                false
                                        let struct (v3054 : US5, v3055 : US5, v3056 : US5, v3057 : US5) =
                                            if v2819 then
                                                let v2820 : int32 = v2790.Length
                                                let v2821 : (string []) = Array.zeroCreate<string> (v2820)
                                                let v2822 : Mut5 = {l0 = 0} : Mut5
                                                while method72(v2820, v2822) do
                                                    let v2824 : int32 = v2822.l0
                                                    let struct (v2825 : string, v2826 : string) = v2790.[int v2824]
                                                    let v2827 : string = $"$env:{v2825}=''{v2826}''"
                                                    v2821.[int v2824] <- v2827
                                                    let v2828 : int32 = v2824 + 1
                                                    v2822.l0 <- v2828
                                                    ()
                                                let v2829 : string seq = v2821 |> Seq.ofArray
                                                let v2832 : (string -> (string seq -> string)) = String.concat
                                                let v2833 : string = ";"
                                                let v2834 : (string seq -> string) = v2832 v2833
                                                let v2835 : string = v2834 v2829
                                                let v2838 : (string []) = [|v2835; v2777|]
                                                let v2839 : string seq = v2838 |> Seq.ofArray
                                                let v2842 : (string -> (string seq -> string)) = String.concat
                                                let v2843 : (string seq -> string) = v2842 v2833
                                                let v2844 : string = v2843 v2839
                                                let v2847 : string = $"pwsh -c '{v2844}'"
                                                let v2848 : bool = v2817 <> 0 
                                                let struct (v2918 : US5, v2919 : US5, v2920 : US5, v2921 : US5) =
                                                    if v2848 then
                                                        let v2851 : unit = ()
                                                        let v2852 : (unit -> unit) = closure91(v1553, v2186, v2818, v2817, v2847)
                                                        let v2853 : unit = (fun () -> v2852 (); v2851) ()
                                                        let v2893 : US5 = US5_0(v1746)
                                                        let v2894 : US5 = US5_1
                                                        let v2895 : US5 = US5_1
                                                        let v2896 : US5 = US5_1
                                                        struct (v2893, v2894, v2895, v2896)
                                                    else
                                                        let v2897 : (string -> US5) = closure62()
                                                        let v2898 : (unit -> string) = closure92(v2818)
                                                        let v2899 : (exn -> US5) = closure94(v2186, v2818, v2847)
                                                        let v2900 : US5 = US5_1
                                                        let result = ref v2900
                                                        try
                                                            result.Value <- v2898 () |> v2897 
                                                        with ex ->
                                                            result.Value <- v2899 ex 
                                                        let v2901 : US5 = result.Value
                                                        let v2911 : string option =
                                                            match v2901 with
                                                            | US5_1 -> (* None *)
                                                                let v2909 : string option = None
                                                                v2909
                                                            | US5_0(v2905) -> (* Some *)
                                                                let v2906 : string option = Some v2905 
                                                                v2906
                                                        let v2912 : string = "$0.unwrap()"
                                                        let v2913 : string = Fable.Core.RustInterop.emitRustExpr v2911 v2912 
                                                        let v2914 : US5 = US5_0(v1746)
                                                        let v2915 : US5 = US5_0(v2771)
                                                        let v2916 : US5 = US5_0(v2186)
                                                        let v2917 : US5 = US5_0(v2913)
                                                        struct (v2914, v2915, v2916, v2917)
                                                struct (v2918, v2919, v2920, v2921)
                                            else
                                                let v2922 : string = $"target/spiral_builder/{v1891}/target/wasm32-unknown-unknown/release/spiral_builder_{v1748}.wasm"
                                                let v2929 : string =
                                                    match v1664 with
                                                    | US35_0(v2923) -> (* Some *)
                                                        match v2923 with
                                                        | US36_1(v2925) -> (* Contract *)
                                                            v2925
                                                        | US36_0(v2924) -> (* Wasm *)
                                                            v2924
                                                    | _ ->
                                                        let v2928 : string = ""
                                                        v2928
                                                let v2930 : string = $"'workspace/target/release/spiral_wasm -w {v2922} -t Debug {v2929}'"
                                                let v2931 : string = "AUTOMATION"
                                                let v2932 : string = method3(v2931)
                                                let v2933 : string = "scripts/invoke-block.ps1"
                                                let v2934 : string = $"pwsh -c \"pwsh {v2933} {v2930} -Linux -EnvironmentVariables AUTOMATION={v2932}`nNEAR_RPC_TIMEOUT_SECS=100\""
                                                let v2935 : bool = v2817 = 0
                                                let struct (v3050 : US5, v3051 : US5, v3052 : US5, v3053 : US5) =
                                                    if v2935 then
                                                        let v2936 : System.Threading.CancellationToken option = None
                                                        let v2937 : (struct (string * string) []) = [||]
                                                        let v2938 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v2939 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v2940 : string option = None
                                                        let v2941 : string option = Some v1890 
                                                        let v2944 : bool = true
                                                        let struct (v2945 : int32, v2946 : string) = method68(v2934, v2936, v2937, v2938, v2939, v2944, v2941)
                                                        let v2947 : bool = v2945 = 0
                                                        let struct (v2999 : US5, v3000 : US5, v3001 : US5, v3002 : US5) =
                                                            if v2947 then
                                                                let v2948 : US5 = US5_0(v1746)
                                                                let v2949 : US5 = US5_0(v2771)
                                                                let v2950 : US5 = US5_0(v2186)
                                                                let v2951 : US5 = US5_0(v2946)
                                                                struct (v2948, v2949, v2950, v2951)
                                                            else
                                                                let v2952 : unit = ()
                                                                let v2953 : (unit -> unit) = closure96(v1553, v2186, v2818, v2946, v2945)
                                                                let v2954 : unit = (fun () -> v2953 (); v2952) ()
                                                                let v2995 : US5 = US5_0(v1746)
                                                                let v2996 : US5 = US5_1
                                                                let v2997 : US5 = US5_1
                                                                let v2998 : US5 = US5_1
                                                                struct (v2995, v2996, v2997, v2998)
                                                        struct (v2999, v3000, v3001, v3002)
                                                    else
                                                        let v3003 : unit = ()
                                                        let v3004 : (unit -> unit) = closure97(v1553, v2186, v2818, v2817, v2922, v2934)
                                                        let v3005 : unit = (fun () -> v3004 (); v3003) ()
                                                        let v3046 : US5 = US5_0(v1746)
                                                        let v3047 : US5 = US5_1
                                                        let v3048 : US5 = US5_1
                                                        let v3049 : US5 = US5_1
                                                        struct (v3046, v3047, v3048, v3049)
                                                struct (v3050, v3051, v3052, v3053)
                                        if v1553 then
                                            let v3058 : bool =
                                                match v1664 with
                                                | US35_1 -> (* None *)
                                                    true
                                                | _ ->
                                                    false
                                            let v3059 : bool = v3058 <> true
                                            let v3062 : string =
                                                if v3059 then
                                                    let v3060 : string = "wasm32-unknown-unknown/release"
                                                    v3060
                                                else
                                                    let v3061 : string = "debug"
                                                    v3061
                                            let v3063 : string = ""
                                            let v3064 : string = $"target/{v3062}/spiral_builder_{v1748}{v3063}"
                                            let v3065 : string = method28(v1902, v3064)
                                            let v3066 : string = ".wasm"
                                            let v3067 : string = $"target/{v3062}/spiral_builder_{v1748}{v3066}"
                                            let v3068 : string = method28(v1902, v3067)
                                            let v3069 : string = ".pdb"
                                            let v3070 : string = $"target/{v3062}/spiral_builder_{v1748}{v3069}"
                                            let v3071 : string = method28(v1902, v3070)
                                            let v3072 : string = ".exe"
                                            let v3073 : string = $"target/{v3062}/spiral_builder_{v1748}{v3072}"
                                            let v3074 : string = method28(v1902, v3073)
                                            let v3075 : string = ".d"
                                            let v3076 : string = $"target/{v3062}/spiral_builder_{v1748}{v3075}"
                                            let v3077 : string = method28(v1902, v3076)
                                            let v3078 : bool = method43(v3065)
                                            let v3079 : bool = method43(v3068)
                                            let v3080 : bool = method43(v3071)
                                            let v3081 : bool = method43(v3074)
                                            let v3082 : bool = method43(v3077)
                                            let v3083 : unit = ()
                                            let v3084 : (unit -> unit) = closure98(v2186, v3077, v3082, v3074, v3081, v3071, v3080, v3068, v3079, v3065, v3078)
                                            let v3085 : unit = (fun () -> v3084 (); v3083) ()
                                            let v3128 : UH4 =
                                                if v3078 then
                                                    let v3125 : UH4 = UH4_0
                                                    UH4_1(v3065, v3078, v3125)
                                                else
                                                    UH4_0
                                            let v3130 : UH4 =
                                                if v3079 then
                                                    UH4_1(v3068, v3079, v3128)
                                                else
                                                    v3128
                                            let v3132 : UH4 =
                                                if v3080 then
                                                    UH4_1(v3071, v3080, v3130)
                                                else
                                                    v3130
                                            let v3134 : UH4 =
                                                if v3081 then
                                                    UH4_1(v3074, v3081, v3132)
                                                else
                                                    v3132
                                            let v3136 : UH4 =
                                                if v3082 then
                                                    UH4_1(v3077, v3082, v3134)
                                                else
                                                    v3134
                                            method229(v3136)
                                        struct (v3054, v3055, v3056, v3057)
                                struct (v3137, v3138, v3139, v3140)
                            else
                                let v3141 : string = "fable_library_rust::String_::fromString($0)"
                                let v3142 : string = Fable.Core.RustInterop.emitRustExpr v25 v3141 
                                let v3143 : bool = v3142 = "typescript"
                                let struct (v4761 : US5, v4762 : US5, v4763 : US5, v4764 : US5) =
                                    if v3143 then
                                        let v3144 : string = method140()
                                        let v3145 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3146 : string = "&*$0"
                                        let v3147 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3144 v3146 
                                        let _v3145 = v3147 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3148 : string = "&*$0"
                                        let v3149 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3144 v3148 
                                        let _v3145 = v3149 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3150 : string = "&*$0"
                                        let v3151 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3144 v3150 
                                        let _v3145 = v3151 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3152 : Ref<Str> = v3144 |> unbox<Ref<Str>>
                                        let _v3145 = v3152 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3155 : Ref<Str> = v3144 |> unbox<Ref<Str>>
                                        let _v3145 = v3155 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3158 : Ref<Str> = v3144 |> unbox<Ref<Str>>
                                        let _v3145 = v3158 
                                        #endif
#else
                                        let v3161 : Ref<Str> = v3144 |> unbox<Ref<Str>>
                                        let _v3145 = v3161 
                                        #endif
                                        let v3164 : Ref<Str> = _v3145 
                                        let v3169 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                        let v3170 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v3164) v3169 
                                        let v3171 : (std_string_String -> US7) = method23()
                                        let v3172 : US7 option = v3170 |> Option.map v3171 
                                        let v3183 : US7 = US7_1
                                        let v3184 : US7 = v3172 |> Option.defaultValue v3183 
                                        let v3191 : std_string_String =
                                            match v3184 with
                                            | US7_1 -> (* None *)
                                                failwith<std_string_String> "Option does not have a value."
                                            | US7_0(v3188) -> (* Some *)
                                                v3188
                                        let v3192 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3193 : string = Fable.Core.RustInterop.emitRustExpr v3191 v3192 
                                        let v3194 : string = method25()
                                        let v3195 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3196 : string = "&*$0"
                                        let v3197 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3194 v3196 
                                        let _v3195 = v3197 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3198 : string = "&*$0"
                                        let v3199 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3194 v3198 
                                        let _v3195 = v3199 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3200 : string = "&*$0"
                                        let v3201 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3194 v3200 
                                        let _v3195 = v3201 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3202 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                                        let _v3195 = v3202 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3205 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                                        let _v3195 = v3205 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3208 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                                        let _v3195 = v3208 
                                        #endif
#else
                                        let v3211 : Ref<Str> = v3194 |> unbox<Ref<Str>>
                                        let _v3195 = v3211 
                                        #endif
                                        let v3214 : Ref<Str> = _v3195 
                                        let v3219 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                        let v3220 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v3214) v3219 
                                        let v3221 : (Vec<std_string_String> -> US11) = method26()
                                        let v3222 : US11 option = v3220 |> Option.map v3221 
                                        let v3233 : US11 = US11_1
                                        let v3234 : US11 = v3222 |> Option.defaultValue v3233 
                                        let v3238 : (std_string_String []) = [||]
                                        let v3239 : string = "$0.to_vec()"
                                        let v3240 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v3238 v3239 
                                        let v3243 : Vec<std_string_String> =
                                            match v3234 with
                                            | US11_1 -> (* None *)
                                                v3240
                                            | US11_0(v3241) -> (* Some *)
                                                v3241
                                        let v3244 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3245 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3246 : string = "std::fs::read(&*$0)"
                                        let v3247 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3193 v3246 
                                        let v3248 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3249 : string = "$0.unwrap()"
                                        let v3250 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3247 v3249 
                                        let _v3248 = v3250 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3251 : string = "$0.unwrap()"
                                        let v3252 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3247 v3251 
                                        let _v3248 = v3252 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3253 : string = "$0.unwrap()"
                                        let v3254 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3247 v3253 
                                        let _v3248 = v3254 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3255 : Vec<uint8> = match v3247 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3248 = v3255 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3256 : Vec<uint8> = match v3247 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3248 = v3256 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3257 : Vec<uint8> = match v3247 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3248 = v3257 
                                        #endif
#else
                                        let v3258 : Vec<uint8> = match v3247 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3248 = v3258 
                                        #endif
                                        let v3259 : Vec<uint8> = _v3248 
                                        let _v3245 = v3259 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3262 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3245 = v3262 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3265 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3245 = v3265 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3268 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3245 = v3268 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3271 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3245 = v3271 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3274 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                        let _v3245 = v3274 
                                        #endif
#else
                                        let v3277 : (uint8 []) = v3193 |> System.IO.File.ReadAllBytes
                                        let v3278 : string = "$0.to_vec()"
                                        let v3279 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3277 v3278 
                                        let _v3245 = v3279 
                                        #endif
                                        let v3280 : Vec<uint8> = _v3245 
                                        let v3285 : Vec<uint8> = method27(v3280)
                                        let v3286 : string = "std::string::String::from_utf8($0)"
                                        let v3287 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3285 v3286 
                                        let v3288 : unit = ()
                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                        let v3289 : string = "$0.unwrap()"
                                        let v3290 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3287 v3289 
                                        let _v3288 = v3290 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3291 : string = "$0.unwrap()"
                                        let v3292 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3287 v3291 
                                        let _v3288 = v3292 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3293 : string = "$0.unwrap()"
                                        let v3294 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3287 v3293 
                                        let _v3288 = v3294 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3295 : std_string_String = match v3287 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3288 = v3295 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3296 : std_string_String = match v3287 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3288 = v3296 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3297 : std_string_String = match v3287 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3288 = v3297 
                                        #endif
#else
                                        let v3298 : std_string_String = match v3287 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                        let _v3288 = v3298 
                                        #endif
                                        let v3299 : std_string_String = _v3288 
                                        let v3302 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3303 : string = Fable.Core.RustInterop.emitRustExpr v3299 v3302 
                                        let _v3244 = v3303 
                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                        let v3304 : string = null |> unbox<string>
                                        let _v3244 = v3304 
                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                        let v3307 : string = null |> unbox<string>
                                        let _v3244 = v3307 
                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                        let v3310 : string = null |> unbox<string>
                                        let _v3244 = v3310 
                                        #endif
#if FABLE_COMPILER_PYTHON
                                        let v3313 : string = null |> unbox<string>
                                        let _v3244 = v3313 
                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                        let v3316 : string = null |> unbox<string>
                                        let _v3244 = v3316 
                                        #endif
#else
                                        let v3319 : string = v3193 |> System.IO.File.ReadAllText
                                        let _v3244 = v3319 
                                        #endif
                                        let v3320 : string = _v3244 
                                        let v3325 : string = "ts"
                                        let v3326 : string = $"%A{struct (v3325, v3320)}"
                                        let v3329 : string = method183(v3326)
                                        let v3330 : string = __SOURCE_DIRECTORY__
                                        let v3331 : string = "polyglot"
                                        let v3332 : string = ".devcontainer"
                                        let v3333 : string = method28(v3331, v3332)
                                        let v3334 : US12 = method31(v3333, v3330)
                                        let v3382 : US5 =
                                            match v3334 with
                                            | US12_1(v3337) -> (* Error *)
                                                let v3338 : unit = ()
                                                let v3339 : (unit -> unit) = closure16(v3337)
                                                let v3340 : unit = (fun () -> v3339 (); v3338) ()
                                                US5_1
                                            | US12_0(v3335) -> (* Ok *)
                                                US5_0(v3335)
                                        let v3437 : US5 =
                                            match v3382 with
                                            | US5_1 -> (* None *)
                                                let v3385 : string = method39()
                                                let v3386 : string = method28(v3331, v3332)
                                                let v3387 : US12 = method31(v3386, v3385)
                                                match v3387 with
                                                | US12_1(v3390) -> (* Error *)
                                                    let v3391 : unit = ()
                                                    let v3392 : (unit -> unit) = closure16(v3390)
                                                    let v3393 : unit = (fun () -> v3392 (); v3391) ()
                                                    US5_1
                                                | US12_0(v3388) -> (* Ok *)
                                                    US5_0(v3388)
                                            | US5_0(v3383) -> (* Some *)
                                                US5_0(v3383)
                                        let v3441 : string =
                                            match v3437 with
                                            | US5_1 -> (* None *)
                                                failwith<string> "Option does not have a value."
                                            | US5_0(v3438) -> (* Some *)
                                                v3438
                                        let v3442 : string = method28(v3441, v3331)
                                        let v3443 : string = method39()
                                        let v3444 : (unit -> string) = v3443.ToLower
                                        let v3445 : string = v3444 ()
                                        let v3448 : (unit -> string) = v3442.ToLower
                                        let v3449 : string = v3448 ()
                                        let v3452 : bool = v3445.StartsWith (v3449, false, null)
                                        let v3457 : US12 =
                                            if v3452 then
                                                US12_1(v3449)
                                            else
                                                US12_0(v3449)
                                        let v3463 : Result<string, string> =
                                            match v3457 with
                                            | US12_1(v3460) -> (* Error *)
                                                let v3461 : Result<string, string> = Error v3460 
                                                v3461
                                            | US12_0(v3458) -> (* Ok *)
                                                let v3459 : Result<string, string> = Ok v3458 
                                                v3459
                                        let v3464 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                        let v3465 : bool = Fable.Core.RustInterop.emitRustExpr v3463 v3464 
                                        let v3466 : string = "x"
                                        let v3467 : string = Fable.Core.RustInterop.emitRustExpr () v3466 
                                        let v3468 : string = "true; $0 })"
                                        let v3469 : bool = Fable.Core.RustInterop.emitRustExpr v3467 v3468 
                                        let v3470 : string = "_result_unwrap_or_else"
                                        let v3471 : string = Fable.Core.RustInterop.emitRustExpr () v3470 
                                        let v3472 : string = "spiral_builder"
                                        let v3473 : US37 = US37_1
                                        let v3474 : US38 = US38_0(v3473)
                                        let v3475 : US5 = US5_0(v3329)
                                        let v3476 : string = method186(v3475, v3472, v3474, v3471)
                                        let v3477 : string = "Fable.Core"
                                        let v3478 : UH2 = UH2_0
                                        let v3479 : UH2 = UH2_1(v3477, v3478)
                                        let v3480 : UH2 = UH2_0
                                        let v3481 : string = method187(v3320, v3472, v3480, v3479, v3476, v3471)
                                        let v3482 : string = "lib/typescript/fable/fable_modules"
                                        let v3483 : string = method28(v3471, v3482)
                                        let v3484 : string = $"fable-library-{v3325}"
                                        let v3485 : string = method230(v3484)
                                        let v3486 : string = "async_walkdir::WalkDir::new(&*$0)"
                                        let v3487 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr v3483 v3486 
                                        let v3488 : string = "async_walkdir::WalkDir::filter($0, move |x| $1(x))"
                                        let v3489 : (async_walkdir_DirEntry -> std_pin_Pin<Box<LifetimeJoin<Dyn<std_future_Future<async_walkdir_Filtering>>, Send<Dyn<std_future_Future<async_walkdir_Filtering>>>>>>) = closure99(v3484)
                                        let v3490 : async_walkdir_WalkDir = Fable.Core.RustInterop.emitRustExpr struct (v3487, v3489) v3488 
                                        let v3491 : (Result<async_walkdir_DirEntry, async_walkdir_Error> -> struct (string * string) option) = method238(v3485)
                                        let v3492 : string = "futures::stream::StreamExt::filter_map(v3490, |x| async { v3491(x) })"
                                        let v3493 : _ = Fable.Core.RustInterop.emitRustExpr () v3492 
                                        let v3494 : string = "Box::pin(futures::stream::StreamExt::collect(v3493))"
                                        let v3495 : std_pin_Pin<Box<Dyn<std_future_Future<Vec<struct (string * string)>>>>> = Fable.Core.RustInterop.emitRustExpr () v3494 
                                        let v3496 : string = "v3495.await"
                                        let v3497 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr () v3496 
                                        let v3498 : string = "rayon::iter::IntoParallelIterator::into_par_iter($0)"
                                        let v3499 : rayon_vec_IntoIter<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3497 v3498 
                                        let v3500 : string = "rayon::iter::ParallelIterator::map($0, |x| $1(x))"
                                        let v3501 : (struct (string * string) -> struct (string * string)) = closure107()
                                        let v3502 : rayon_iter_Map<rayon_vec_IntoIter<struct (string * string)>> = Fable.Core.RustInterop.emitRustExpr struct (v3499, v3501) v3500 
                                        let v3503 : string = "rayon::iter::ParallelIterator::collect($0)"
                                        let v3504 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v3502 v3503 
                                        let v3505 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                        let v3506 : (struct (string * string) []) = Fable.Core.RustInterop.emitRustExpr v3504 v3505 
                                        let v3507 : struct (string * string) option = v3506 |> Array.tryItem 0 
                                        let v3508 : (struct (string * string) -> US46) = method243()
                                        let v3509 : US46 option = v3507 |> Option.map v3508 
                                        let v3521 : US46 = US46_1
                                        let v3522 : US46 = v3509 |> Option.defaultValue v3521 
                                        let v3526 : unit = ()
                                        let v3527 : (unit -> unit) = closure109(v3522)
                                        let v3528 : unit = (fun () -> v3527 (); v3526) ()
                                        method246(v3476, v3483, v3522)
                                        let v3568 : US35 = US35_1
                                        let struct (v3569 : int32, v3570 : string) = method196(v3568, v3476, v3325, v3481, v3457)
                                        method246(v3476, v3483, v3522)
                                        let v3571 : bool = v3569 <> 0 
                                        let struct (v3986 : US5, v3987 : US5, v3988 : US5, v3989 : US5) =
                                            if v3571 then
                                                let v3574 : unit = ()
                                                let v3575 : (unit -> unit) = closure110(v3570, v3569)
                                                let v3576 : unit = (fun () -> v3575 (); v3574) ()
                                                let v3616 : US5 = US5_0(v3325)
                                                let v3617 : US5 = US5_1
                                                let v3618 : US5 = US5_1
                                                let v3619 : US5 = US5_0(v3570)
                                                struct (v3616, v3617, v3618, v3619)
                                            else
                                                let v3620 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                let v3621 : bool = Fable.Core.RustInterop.emitRustExpr v3243 v3620 
                                                let v3622 : string = "x"
                                                let v3623 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v3622 
                                                let v3624 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3625 : string = Fable.Core.RustInterop.emitRustExpr v3623 v3624 
                                                let v3626 : string = "="
                                                let v3627 : bool = v3625.Contains v3626 
                                                let v3631 : string =
                                                    if v3627 then
                                                        v3625
                                                    else
                                                        let v3630 : string = $"\"{v3625}\":\"*\""
                                                        v3630
                                                let v3632 : string = "true; $0 }).collect::<Vec<_>>()"
                                                let v3633 : bool = Fable.Core.RustInterop.emitRustExpr v3631 v3632 
                                                let v3634 : string = "_vec_map"
                                                let v3635 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v3634 
                                                let v3636 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                let v3637 : (string []) = Fable.Core.RustInterop.emitRustExpr v3635 v3636 
                                                let v3638 : unit = ()
                                                let _v3638 =
                                                    seq {
                                                        for i = 0 to v3637.Length - 1 do yield v3637.[i]
                                                        (*
                                                        ()
                                                    *)
                                                    }
                                                    (*
                                                    ()
                                                *)
                                                let v3641 : string seq = _v3638 
                                                let v3647 : (string -> (string seq -> string)) = String.concat
                                                let v3648 : string = ",\n"
                                                let v3649 : (string seq -> string) = v3647 v3648
                                                let v3650 : string = v3649 v3641
                                                let v3653 : string = $"{{"
                                                let v3654 : string = $"  \"name\": \"spiral_builder_{v3329}\","
                                                let v3655 : string = v3653 + v3654 
                                                let v3656 : string = $"  \"dependencies\": {{"
                                                let v3657 : string = v3655 + v3656 
                                                let v3658 : string = v3657 + v3650 
                                                let v3659 : string = $"  }},"
                                                let v3660 : string = v3658 + v3659 
                                                let v3661 : string = $"    \"devDependencies\": {{"
                                                let v3662 : string = v3660 + v3661 
                                                let v3663 : string = $"  }},"
                                                let v3664 : string = v3662 + v3663 
                                                let v3665 : string = $"}}"
                                                let v3666 : string = v3664 + v3665 
                                                let v3667 : string = "package.json"
                                                let v3668 : string = method28(v3476, v3667)
                                                let v3669 : string = "../.."
                                                let v3670 : string = method28(v3476, v3669)
                                                let v3671 : string = method28(v3670, v3667)
                                                method41(v3668, v3666)
                                                let v3672 : string = ""
                                                method41(v3671, v3672)
                                                let v3673 : string = $"{v3472}.{v3325}"
                                                let v3674 : string = method28(v3476, v3673)
                                                let v3675 : unit = ()
                                                let v3676 : (unit -> unit) = closure111(v3674)
                                                let v3677 : unit = (fun () -> v3676 (); v3675) ()
                                                let v3717 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3718 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3719 : string = "std::fs::read(&*$0)"
                                                let v3720 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v3674 v3719 
                                                let v3721 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3722 : string = "$0.unwrap()"
                                                let v3723 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3720 v3722 
                                                let _v3721 = v3723 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3724 : string = "$0.unwrap()"
                                                let v3725 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3720 v3724 
                                                let _v3721 = v3725 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3726 : string = "$0.unwrap()"
                                                let v3727 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3720 v3726 
                                                let _v3721 = v3727 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3728 : Vec<uint8> = match v3720 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3721 = v3728 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3729 : Vec<uint8> = match v3720 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3721 = v3729 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3730 : Vec<uint8> = match v3720 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3721 = v3730 
                                                #endif
#else
                                                let v3731 : Vec<uint8> = match v3720 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3721 = v3731 
                                                #endif
                                                let v3732 : Vec<uint8> = _v3721 
                                                let _v3718 = v3732 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3735 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3718 = v3735 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3738 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3718 = v3738 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3741 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3718 = v3741 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3744 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3718 = v3744 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3747 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v3718 = v3747 
                                                #endif
#else
                                                let v3750 : (uint8 []) = v3674 |> System.IO.File.ReadAllBytes
                                                let v3751 : string = "$0.to_vec()"
                                                let v3752 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v3750 v3751 
                                                let _v3718 = v3752 
                                                #endif
                                                let v3753 : Vec<uint8> = _v3718 
                                                let v3758 : Vec<uint8> = method27(v3753)
                                                let v3759 : string = "std::string::String::from_utf8($0)"
                                                let v3760 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v3758 v3759 
                                                let v3761 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3762 : string = "$0.unwrap()"
                                                let v3763 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3760 v3762 
                                                let _v3761 = v3763 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3764 : string = "$0.unwrap()"
                                                let v3765 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3760 v3764 
                                                let _v3761 = v3765 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3766 : string = "$0.unwrap()"
                                                let v3767 : std_string_String = Fable.Core.RustInterop.emitRustExpr v3760 v3766 
                                                let _v3761 = v3767 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3768 : std_string_String = match v3760 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3761 = v3768 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3769 : std_string_String = match v3760 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3761 = v3769 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3770 : std_string_String = match v3760 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3761 = v3770 
                                                #endif
#else
                                                let v3771 : std_string_String = match v3760 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v3761 = v3771 
                                                #endif
                                                let v3772 : std_string_String = _v3761 
                                                let v3775 : string = "fable_library_rust::String_::fromString($0)"
                                                let v3776 : string = Fable.Core.RustInterop.emitRustExpr v3772 v3775 
                                                let _v3717 = v3776 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3777 : string = null |> unbox<string>
                                                let _v3717 = v3777 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3780 : string = null |> unbox<string>
                                                let _v3717 = v3780 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3783 : string = null |> unbox<string>
                                                let _v3717 = v3783 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3786 : string = null |> unbox<string>
                                                let _v3717 = v3786 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3789 : string = null |> unbox<string>
                                                let _v3717 = v3789 
                                                #endif
#else
                                                let v3792 : string = v3674 |> System.IO.File.ReadAllText
                                                let _v3717 = v3792 
                                                #endif
                                                let v3793 : string = _v3717 
                                                let v3798 : string = "// spiral_builder.process_typescript"
                                                let v3799 : bool = v3793.Contains v3798 
                                                let v3808 : string =
                                                    if v3799 then
                                                        v3793
                                                    else
                                                        let v3802 : string = $"\"./fable_modules/fable-library-ts.{v3522}/"
                                                        let v3803 : string = $"\"{v3471}/lib/typescript/fable/fable_modules/fable-library-ts.{v3522}/"
                                                        let v3804 : string = v3793.Replace (v3802, v3803)
                                                        let v3805 : string = "\\s\\sdefaultOf\\(\\);"
                                                        let v3806 : string = " defaultOf::<()>();"
                                                        method163(v3805, v3806, v3804)
                                                let v3809 : bool = v3799 = false
                                                if v3809 then
                                                    let v3810 : string = $"{v3808}\n\n{v3798}\n"
                                                    method41(v3674, v3810)
                                                let v3811 : string = $"bun run \"{v3674}\""
                                                let v3812 : string = "PATH"
                                                let v3813 : string = method3(v3812)
                                                let v3814 : bool = v3813 = ""
                                                let v3849 : US5 =
                                                    if v3814 then
                                                        US5_1
                                                    else
                                                        let v3816 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v3817 : string = "cfg!(windows)"
                                                        let v3818 : bool = Fable.Core.RustInterop.emitRustExpr () v3817 
                                                        let _v3816 = v3818 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v3819 : string = "cfg!(windows)"
                                                        let v3820 : bool = Fable.Core.RustInterop.emitRustExpr () v3819 
                                                        let _v3816 = v3820 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v3821 : string = "cfg!(windows)"
                                                        let v3822 : bool = Fable.Core.RustInterop.emitRustExpr () v3821 
                                                        let _v3816 = v3822 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v3823 : US3 = US3_0
                                                        let v3824 : US4 = US4_3(v3823)
                                                        let v3825 : string = $"platform.is_windows / target: {v3824}"
                                                        let v3826 : bool = failwith<bool> v3825
                                                        let _v3816 = v3826 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v3827 : US3 = US3_0
                                                        let v3828 : US4 = US4_4(v3827)
                                                        let v3829 : string = $"platform.is_windows / target: {v3828}"
                                                        let v3830 : bool = failwith<bool> v3829
                                                        let _v3816 = v3830 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v3831 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3832 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3833 : bool = v3832 v3831
                                                        let _v3816 = v3833 
                                                        #endif
#else
                                                        let v3834 : System.Runtime.InteropServices.OSPlatform = System.Runtime.InteropServices.OSPlatform.Windows
                                                        let v3835 : (System.Runtime.InteropServices.OSPlatform -> bool) = System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform
                                                        let v3836 : bool = v3835 v3834
                                                        let _v3816 = v3836 
                                                        #endif
                                                        let v3837 : bool = _v3816 
                                                        let v3845 : string =
                                                            if v3837 then
                                                                let v3843 : string = ";"
                                                                v3843
                                                            else
                                                                let v3844 : string = ":"
                                                                v3844
                                                        let v3846 : string = "~/.bun/bin"
                                                        let v3847 : string = $"{v3846}{v3845}{v3813}"
                                                        US5_0(v3847)
                                                let v3855 : UH5 =
                                                    match v3849 with
                                                    | US5_1 -> (* None *)
                                                        UH5_0
                                                    | US5_0(v3850) -> (* Some *)
                                                        let v3851 : UH5 = UH5_0
                                                        UH5_1(v3812, v3850, v3851)
                                                let v3856 : string = "TRACE_LEVEL"
                                                let v3857 : string = "Verbose"
                                                let v3858 : UH5 = UH5_0
                                                let v3859 : UH5 = UH5_1(v3856, v3857, v3858)
                                                let v3860 : UH5 = method250(v3855, v3859)
                                                let v3861 : struct (string * string) list = []
                                                let v3862 : struct (string * string) list = method251(v3860, v3861)
                                                let v3863 : (struct (string * string) list -> (struct (string * string) [])) = List.toArray
                                                let v3864 : (struct (string * string) []) = v3863 v3862
                                                let v3867 : System.Threading.CancellationToken option = None
                                                let v3868 : (struct (string * string) []) = [||]
                                                let v3869 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                let v3870 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                let v3871 : string option = None
                                                let v3877 : Result<string, string> =
                                                    match v3457 with
                                                    | US12_1(v3874) -> (* Error *)
                                                        let v3875 : Result<string, string> = Error v3874 
                                                        v3875
                                                    | US12_0(v3872) -> (* Ok *)
                                                        let v3873 : Result<string, string> = Ok v3872 
                                                        v3873
                                                let v3878 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3879 : string = "$0.ok()"
                                                let v3880 : string option = Fable.Core.RustInterop.emitRustExpr v3877 v3879 
                                                let _v3878 = v3880 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3881 : string = "$0.ok()"
                                                let v3882 : string option = Fable.Core.RustInterop.emitRustExpr v3877 v3881 
                                                let _v3878 = v3882 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3883 : string = "$0.ok()"
                                                let v3884 : string option = Fable.Core.RustInterop.emitRustExpr v3877 v3883 
                                                let _v3878 = v3884 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v3885 : string option = match v3877 with Ok x -> Some x | Error _ -> None
                                                let _v3878 = v3885 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v3886 : string option = match v3877 with Ok x -> Some x | Error _ -> None
                                                let _v3878 = v3886 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v3887 : string option = match v3877 with Ok x -> Some x | Error _ -> None
                                                let _v3878 = v3887 
                                                #endif
#else
                                                let v3888 : string option = match v3877 with Ok x -> Some x | Error _ -> None
                                                let _v3878 = v3888 
                                                #endif
                                                let v3889 : string option = _v3878 
                                                let v3892 : bool = true
                                                let struct (v3893 : int32, v3894 : string) = method68(v3811, v3867, v3864, v3869, v3870, v3892, v3889)
                                                let v3895 : int32 = v3864.Length
                                                let v3896 : (string []) = Array.zeroCreate<string> (v3895)
                                                let v3897 : Mut5 = {l0 = 0} : Mut5
                                                while method72(v3895, v3897) do
                                                    let v3899 : int32 = v3897.l0
                                                    let struct (v3900 : string, v3901 : string) = v3864.[int v3899]
                                                    let v3902 : string = $"$env:{v3900}=''{v3901}''"
                                                    v3896.[int v3899] <- v3902
                                                    let v3903 : int32 = v3899 + 1
                                                    v3897.l0 <- v3903
                                                    ()
                                                let v3904 : string seq = v3896 |> Seq.ofArray
                                                let v3907 : (string -> (string seq -> string)) = String.concat
                                                let v3908 : string = ";"
                                                let v3909 : (string seq -> string) = v3907 v3908
                                                let v3910 : string = v3909 v3904
                                                let v3913 : string = $"pwsh -c '{v3910}; {v3811}'"
                                                let v3914 : bool = v3893 = 0
                                                let struct (v3982 : US5, v3983 : US5, v3984 : US5, v3985 : US5) =
                                                    if v3914 then
                                                        let v3915 : (string -> US5) = closure62()
                                                        let v3916 : (unit -> string) = closure112(v3894)
                                                        let v3917 : (exn -> US5) = closure113(v3674, v3894, v3913)
                                                        let v3918 : US5 = US5_1
                                                        let result = ref v3918
                                                        try
                                                            result.Value <- v3916 () |> v3915 
                                                        with ex ->
                                                            result.Value <- v3917 ex 
                                                        let v3919 : US5 = result.Value
                                                        let v3929 : string option =
                                                            match v3919 with
                                                            | US5_1 -> (* None *)
                                                                let v3927 : string option = None
                                                                v3927
                                                            | US5_0(v3923) -> (* Some *)
                                                                let v3924 : string option = Some v3923 
                                                                v3924
                                                        let v3930 : string = "$0.unwrap()"
                                                        let v3931 : string = Fable.Core.RustInterop.emitRustExpr v3929 v3930 
                                                        let v3932 : US5 = US5_0(v3325)
                                                        let v3933 : US5 = US5_0(v3808)
                                                        let v3934 : US5 = US5_0(v3674)
                                                        let v3935 : US5 = US5_0(v3931)
                                                        struct (v3932, v3933, v3934, v3935)
                                                    else
                                                        let v3936 : unit = ()
                                                        let v3937 : (unit -> unit) = closure115(v3674, v3894, v3893, v3913)
                                                        let v3938 : unit = (fun () -> v3937 (); v3936) ()
                                                        let v3978 : US5 = US5_0(v3325)
                                                        let v3979 : US5 = US5_1
                                                        let v3980 : US5 = US5_1
                                                        let v3981 : US5 = US5_1
                                                        struct (v3978, v3979, v3980, v3981)
                                                struct (v3982, v3983, v3984, v3985)
                                        struct (v3986, v3987, v3988, v3989)
                                    else
                                        let v3990 : string = "fable_library_rust::String_::fromString($0)"
                                        let v3991 : string = Fable.Core.RustInterop.emitRustExpr v25 v3990 
                                        let v3992 : bool = v3991 = "python"
                                        let struct (v4757 : US5, v4758 : US5, v4759 : US5, v4760 : US5) =
                                            if v3992 then
                                                let v3993 : string = method140()
                                                let v3994 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v3995 : string = "&*$0"
                                                let v3996 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3993 v3995 
                                                let _v3994 = v3996 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v3997 : string = "&*$0"
                                                let v3998 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3993 v3997 
                                                let _v3994 = v3998 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v3999 : string = "&*$0"
                                                let v4000 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v3993 v3999 
                                                let _v3994 = v4000 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4001 : Ref<Str> = v3993 |> unbox<Ref<Str>>
                                                let _v3994 = v4001 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4004 : Ref<Str> = v3993 |> unbox<Ref<Str>>
                                                let _v3994 = v4004 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4007 : Ref<Str> = v3993 |> unbox<Ref<Str>>
                                                let _v3994 = v4007 
                                                #endif
#else
                                                let v4010 : Ref<Str> = v3993 |> unbox<Ref<Str>>
                                                let _v3994 = v4010 
                                                #endif
                                                let v4013 : Ref<Str> = _v3994 
                                                let v4018 : string = "clap::ArgMatches::get_one(&$0, $1).cloned()"
                                                let v4019 : std_string_String option = Fable.Core.RustInterop.emitRustExpr struct (v26, v4013) v4018 
                                                let v4020 : (std_string_String -> US7) = method23()
                                                let v4021 : US7 option = v4019 |> Option.map v4020 
                                                let v4032 : US7 = US7_1
                                                let v4033 : US7 = v4021 |> Option.defaultValue v4032 
                                                let v4040 : std_string_String =
                                                    match v4033 with
                                                    | US7_1 -> (* None *)
                                                        failwith<std_string_String> "Option does not have a value."
                                                    | US7_0(v4037) -> (* Some *)
                                                        v4037
                                                let v4041 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4042 : string = Fable.Core.RustInterop.emitRustExpr v4040 v4041 
                                                let v4043 : string = method25()
                                                let v4044 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4045 : string = "&*$0"
                                                let v4046 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4043 v4045 
                                                let _v4044 = v4046 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4047 : string = "&*$0"
                                                let v4048 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4043 v4047 
                                                let _v4044 = v4048 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4049 : string = "&*$0"
                                                let v4050 : Ref<Str> = Fable.Core.RustInterop.emitRustExpr v4043 v4049 
                                                let _v4044 = v4050 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4051 : Ref<Str> = v4043 |> unbox<Ref<Str>>
                                                let _v4044 = v4051 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4054 : Ref<Str> = v4043 |> unbox<Ref<Str>>
                                                let _v4044 = v4054 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4057 : Ref<Str> = v4043 |> unbox<Ref<Str>>
                                                let _v4044 = v4057 
                                                #endif
#else
                                                let v4060 : Ref<Str> = v4043 |> unbox<Ref<Str>>
                                                let _v4044 = v4060 
                                                #endif
                                                let v4063 : Ref<Str> = _v4044 
                                                let v4068 : string = "clap::ArgMatches::get_many(&$0, $1).map(|x| x.cloned().into_iter().collect())"
                                                let v4069 : Vec<std_string_String> option = Fable.Core.RustInterop.emitRustExpr struct (v26, v4063) v4068 
                                                let v4070 : (Vec<std_string_String> -> US11) = method26()
                                                let v4071 : US11 option = v4069 |> Option.map v4070 
                                                let v4082 : US11 = US11_1
                                                let v4083 : US11 = v4071 |> Option.defaultValue v4082 
                                                let v4087 : (std_string_String []) = [||]
                                                let v4088 : string = "$0.to_vec()"
                                                let v4089 : Vec<std_string_String> = Fable.Core.RustInterop.emitRustExpr v4087 v4088 
                                                let v4092 : Vec<std_string_String> =
                                                    match v4083 with
                                                    | US11_1 -> (* None *)
                                                        v4089
                                                    | US11_0(v4090) -> (* Some *)
                                                        v4090
                                                let v4093 : bool =
                                                    match v0 with
                                                    | US0_0 -> (* Verbose *)
                                                        true
                                                    | _ ->
                                                        false
                                                let v4094 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4095 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4096 : string = "std::fs::read(&*$0)"
                                                let v4097 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4042 v4096 
                                                let v4098 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4099 : string = "$0.unwrap()"
                                                let v4100 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4097 v4099 
                                                let _v4098 = v4100 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4101 : string = "$0.unwrap()"
                                                let v4102 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4097 v4101 
                                                let _v4098 = v4102 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4103 : string = "$0.unwrap()"
                                                let v4104 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4097 v4103 
                                                let _v4098 = v4104 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4105 : Vec<uint8> = match v4097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4098 = v4105 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4106 : Vec<uint8> = match v4097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4098 = v4106 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4107 : Vec<uint8> = match v4097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4098 = v4107 
                                                #endif
#else
                                                let v4108 : Vec<uint8> = match v4097 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4098 = v4108 
                                                #endif
                                                let v4109 : Vec<uint8> = _v4098 
                                                let _v4095 = v4109 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4112 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4095 = v4112 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4115 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4095 = v4115 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4118 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4095 = v4118 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4121 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4095 = v4121 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4124 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                let _v4095 = v4124 
                                                #endif
#else
                                                let v4127 : (uint8 []) = v4042 |> System.IO.File.ReadAllBytes
                                                let v4128 : string = "$0.to_vec()"
                                                let v4129 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4127 v4128 
                                                let _v4095 = v4129 
                                                #endif
                                                let v4130 : Vec<uint8> = _v4095 
                                                let v4135 : Vec<uint8> = method27(v4130)
                                                let v4136 : string = "std::string::String::from_utf8($0)"
                                                let v4137 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4135 v4136 
                                                let v4138 : unit = ()
                                                
#if FABLE_COMPILER || WASM || CONTRACT
                                                
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                let v4139 : string = "$0.unwrap()"
                                                let v4140 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4137 v4139 
                                                let _v4138 = v4140 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4141 : string = "$0.unwrap()"
                                                let v4142 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4137 v4141 
                                                let _v4138 = v4142 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4143 : string = "$0.unwrap()"
                                                let v4144 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4137 v4143 
                                                let _v4138 = v4144 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4145 : std_string_String = match v4137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4138 = v4145 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4146 : std_string_String = match v4137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4138 = v4146 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4147 : std_string_String = match v4137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4138 = v4147 
                                                #endif
#else
                                                let v4148 : std_string_String = match v4137 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                let _v4138 = v4148 
                                                #endif
                                                let v4149 : std_string_String = _v4138 
                                                let v4152 : string = "fable_library_rust::String_::fromString($0)"
                                                let v4153 : string = Fable.Core.RustInterop.emitRustExpr v4149 v4152 
                                                let _v4094 = v4153 
                                                #endif
#if FABLE_COMPILER_RUST && WASM
                                                let v4154 : string = null |> unbox<string>
                                                let _v4094 = v4154 
                                                #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                let v4157 : string = null |> unbox<string>
                                                let _v4094 = v4157 
                                                #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                let v4160 : string = null |> unbox<string>
                                                let _v4094 = v4160 
                                                #endif
#if FABLE_COMPILER_PYTHON
                                                let v4163 : string = null |> unbox<string>
                                                let _v4094 = v4163 
                                                #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                let v4166 : string = null |> unbox<string>
                                                let _v4094 = v4166 
                                                #endif
#else
                                                let v4169 : string = v4042 |> System.IO.File.ReadAllText
                                                let _v4094 = v4169 
                                                #endif
                                                let v4170 : string = _v4094 
                                                let v4175 : string = "py"
                                                let v4176 : string = $"%A{struct (v4175, v4170)}"
                                                let v4179 : string = method183(v4176)
                                                let v4180 : string = __SOURCE_DIRECTORY__
                                                let v4181 : string = "polyglot"
                                                let v4182 : string = ".devcontainer"
                                                let v4183 : string = method28(v4181, v4182)
                                                let v4184 : US12 = method31(v4183, v4180)
                                                let v4232 : US5 =
                                                    match v4184 with
                                                    | US12_1(v4187) -> (* Error *)
                                                        let v4188 : unit = ()
                                                        let v4189 : (unit -> unit) = closure16(v4187)
                                                        let v4190 : unit = (fun () -> v4189 (); v4188) ()
                                                        US5_1
                                                    | US12_0(v4185) -> (* Ok *)
                                                        US5_0(v4185)
                                                let v4287 : US5 =
                                                    match v4232 with
                                                    | US5_1 -> (* None *)
                                                        let v4235 : string = method39()
                                                        let v4236 : string = method28(v4181, v4182)
                                                        let v4237 : US12 = method31(v4236, v4235)
                                                        match v4237 with
                                                        | US12_1(v4240) -> (* Error *)
                                                            let v4241 : unit = ()
                                                            let v4242 : (unit -> unit) = closure16(v4240)
                                                            let v4243 : unit = (fun () -> v4242 (); v4241) ()
                                                            US5_1
                                                        | US12_0(v4238) -> (* Ok *)
                                                            US5_0(v4238)
                                                    | US5_0(v4233) -> (* Some *)
                                                        US5_0(v4233)
                                                let v4291 : string =
                                                    match v4287 with
                                                    | US5_1 -> (* None *)
                                                        failwith<string> "Option does not have a value."
                                                    | US5_0(v4288) -> (* Some *)
                                                        v4288
                                                let v4292 : string = method28(v4291, v4181)
                                                let v4293 : string = method39()
                                                let v4294 : (unit -> string) = v4293.ToLower
                                                let v4295 : string = v4294 ()
                                                let v4298 : (unit -> string) = v4292.ToLower
                                                let v4299 : string = v4298 ()
                                                let v4302 : bool = v4295.StartsWith (v4299, false, null)
                                                let v4307 : US12 =
                                                    if v4302 then
                                                        US12_1(v4299)
                                                    else
                                                        US12_0(v4299)
                                                let v4313 : Result<string, string> =
                                                    match v4307 with
                                                    | US12_1(v4310) -> (* Error *)
                                                        let v4311 : Result<string, string> = Error v4310 
                                                        v4311
                                                    | US12_0(v4308) -> (* Ok *)
                                                        let v4309 : Result<string, string> = Ok v4308 
                                                        v4309
                                                let v4314 : string = "true; let _result_unwrap_or_else = $0.unwrap_or_else(|x| { //"
                                                let v4315 : bool = Fable.Core.RustInterop.emitRustExpr v4313 v4314 
                                                let v4316 : string = "x"
                                                let v4317 : string = Fable.Core.RustInterop.emitRustExpr () v4316 
                                                let v4318 : string = "true; $0 })"
                                                let v4319 : bool = Fable.Core.RustInterop.emitRustExpr v4317 v4318 
                                                let v4320 : string = "_result_unwrap_or_else"
                                                let v4321 : string = Fable.Core.RustInterop.emitRustExpr () v4320 
                                                let v4322 : string = "spiral_builder"
                                                let v4323 : US37 = US37_2
                                                let v4324 : US38 = US38_0(v4323)
                                                let v4325 : US5 = US5_0(v4179)
                                                let v4326 : string = method186(v4325, v4322, v4324, v4321)
                                                let v4327 : string = "Fable.Core"
                                                let v4328 : UH2 = UH2_0
                                                let v4329 : UH2 = UH2_1(v4327, v4328)
                                                let v4330 : UH2 = UH2_0
                                                let v4331 : string = method187(v4170, v4322, v4330, v4329, v4326, v4321)
                                                let v4332 : string = "lib/python/fable/fable_modules"
                                                let v4333 : string = method28(v4321, v4332)
                                                let v4334 : string = $"fable_library"
                                                let v4335 : string = method28(v4333, v4334)
                                                let v4336 : string = $"fable_modules/fable_library"
                                                let v4337 : string = method28(v4326, v4336)
                                                method195(v4335, v4337)
                                                let v4338 : US35 = US35_1
                                                let struct (v4339 : int32, v4340 : string) = method196(v4338, v4326, v4175, v4331, v4307)
                                                let v4341 : bool = v4339 <> 0 
                                                let struct (v4707 : US5, v4708 : US5, v4709 : US5, v4710 : US5) =
                                                    if v4341 then
                                                        let v4344 : unit = ()
                                                        let v4345 : (unit -> unit) = closure116(v4340, v4339)
                                                        let v4346 : unit = (fun () -> v4345 (); v4344) ()
                                                        let v4386 : US5 = US5_0(v4175)
                                                        let v4387 : US5 = US5_1
                                                        let v4388 : US5 = US5_1
                                                        let v4389 : US5 = US5_0(v4340)
                                                        struct (v4386, v4387, v4388, v4389)
                                                    else
                                                        let v4390 : string = "true; let _vec_map : Vec<_> = $0.into_iter().map(|x| { //"
                                                        let v4391 : bool = Fable.Core.RustInterop.emitRustExpr v4092 v4390 
                                                        let v4392 : string = "x"
                                                        let v4393 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4392 
                                                        let v4394 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4395 : string = Fable.Core.RustInterop.emitRustExpr v4393 v4394 
                                                        let v4396 : string = "="
                                                        let v4397 : bool = v4395.Contains v4396 
                                                        let v4401 : string =
                                                            if v4397 then
                                                                v4395
                                                            else
                                                                let v4400 : string = $"\"{v4395}\":\"*\""
                                                                v4400
                                                        let v4402 : string = "true; $0 }).collect::<Vec<_>>()"
                                                        let v4403 : bool = Fable.Core.RustInterop.emitRustExpr v4401 v4402 
                                                        let v4404 : string = "_vec_map"
                                                        let v4405 : Vec<string> = Fable.Core.RustInterop.emitRustExpr () v4404 
                                                        let v4406 : string = "fable_library_rust::NativeArray_::array_from($0)"
                                                        let v4407 : (string []) = Fable.Core.RustInterop.emitRustExpr v4405 v4406 
                                                        let v4408 : unit = ()
                                                        let _v4408 =
                                                            seq {
                                                                for i = 0 to v4407.Length - 1 do yield v4407.[i]
                                                                (*
                                                                ()
                                                            *)
                                                            }
                                                            (*
                                                            ()
                                                        *)
                                                        let v4411 : string seq = _v4408 
                                                        let v4417 : (string -> (string seq -> string)) = String.concat
                                                        let v4418 : string = ",\n"
                                                        let v4419 : (string seq -> string) = v4417 v4418
                                                        let v4420 : string = v4419 v4411
                                                        let v4423 : string = $"{{"
                                                        let v4424 : string = $"  \"name\": \"spiral_builder_{v4179}\","
                                                        let v4425 : string = v4423 + v4424 
                                                        let v4426 : string = $"  \"dependencies\": {{"
                                                        let v4427 : string = v4425 + v4426 
                                                        let v4428 : string = v4427 + v4420 
                                                        let v4429 : string = $"  }},"
                                                        let v4430 : string = v4428 + v4429 
                                                        let v4431 : string = $"    \"devDependencies\": {{"
                                                        let v4432 : string = v4430 + v4431 
                                                        let v4433 : string = $"  }},"
                                                        let v4434 : string = v4432 + v4433 
                                                        let v4435 : string = $"}}"
                                                        let v4436 : string = v4434 + v4435 
                                                        let v4437 : string = "package.json"
                                                        let v4438 : string = method28(v4326, v4437)
                                                        let v4439 : string = "../.."
                                                        let v4440 : string = method28(v4326, v4439)
                                                        let v4441 : string = method28(v4440, v4437)
                                                        method41(v4438, v4436)
                                                        let v4442 : string = ""
                                                        method41(v4441, v4442)
                                                        let v4443 : string = $"{v4322}.{v4175}"
                                                        let v4444 : string = method28(v4326, v4443)
                                                        let v4445 : unit = ()
                                                        let v4446 : (unit -> unit) = closure117(v4444)
                                                        let v4447 : unit = (fun () -> v4446 (); v4445) ()
                                                        let v4487 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4488 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4489 : string = "std::fs::read(&*$0)"
                                                        let v4490 : Result<Vec<uint8>, std_io_Error> = Fable.Core.RustInterop.emitRustExpr v4444 v4489 
                                                        let v4491 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4492 : string = "$0.unwrap()"
                                                        let v4493 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4490 v4492 
                                                        let _v4491 = v4493 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4494 : string = "$0.unwrap()"
                                                        let v4495 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4490 v4494 
                                                        let _v4491 = v4495 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4496 : string = "$0.unwrap()"
                                                        let v4497 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4490 v4496 
                                                        let _v4491 = v4497 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4498 : Vec<uint8> = match v4490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4491 = v4498 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4499 : Vec<uint8> = match v4490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4491 = v4499 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4500 : Vec<uint8> = match v4490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4491 = v4500 
                                                        #endif
#else
                                                        let v4501 : Vec<uint8> = match v4490 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4491 = v4501 
                                                        #endif
                                                        let v4502 : Vec<uint8> = _v4491 
                                                        let _v4488 = v4502 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4505 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4488 = v4505 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4508 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4488 = v4508 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4511 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4488 = v4511 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4514 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4488 = v4514 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4517 : Vec<uint8> = null |> unbox<Vec<uint8>>
                                                        let _v4488 = v4517 
                                                        #endif
#else
                                                        let v4520 : (uint8 []) = v4444 |> System.IO.File.ReadAllBytes
                                                        let v4521 : string = "$0.to_vec()"
                                                        let v4522 : Vec<uint8> = Fable.Core.RustInterop.emitRustExpr v4520 v4521 
                                                        let _v4488 = v4522 
                                                        #endif
                                                        let v4523 : Vec<uint8> = _v4488 
                                                        let v4528 : Vec<uint8> = method27(v4523)
                                                        let v4529 : string = "std::string::String::from_utf8($0)"
                                                        let v4530 : Result<std_string_String, std_string_FromUtf8Error> = Fable.Core.RustInterop.emitRustExpr v4528 v4529 
                                                        let v4531 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4532 : string = "$0.unwrap()"
                                                        let v4533 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4530 v4532 
                                                        let _v4531 = v4533 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4534 : string = "$0.unwrap()"
                                                        let v4535 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4530 v4534 
                                                        let _v4531 = v4535 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4536 : string = "$0.unwrap()"
                                                        let v4537 : std_string_String = Fable.Core.RustInterop.emitRustExpr v4530 v4536 
                                                        let _v4531 = v4537 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4538 : std_string_String = match v4530 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4531 = v4538 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4539 : std_string_String = match v4530 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4531 = v4539 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4540 : std_string_String = match v4530 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4531 = v4540 
                                                        #endif
#else
                                                        let v4541 : std_string_String = match v4530 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
                                                        let _v4531 = v4541 
                                                        #endif
                                                        let v4542 : std_string_String = _v4531 
                                                        let v4545 : string = "fable_library_rust::String_::fromString($0)"
                                                        let v4546 : string = Fable.Core.RustInterop.emitRustExpr v4542 v4545 
                                                        let _v4487 = v4546 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4547 : string = null |> unbox<string>
                                                        let _v4487 = v4547 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4550 : string = null |> unbox<string>
                                                        let _v4487 = v4550 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4553 : string = null |> unbox<string>
                                                        let _v4487 = v4553 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4556 : string = null |> unbox<string>
                                                        let _v4487 = v4556 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4559 : string = null |> unbox<string>
                                                        let _v4487 = v4559 
                                                        #endif
#else
                                                        let v4562 : string = v4444 |> System.IO.File.ReadAllText
                                                        let _v4487 = v4562 
                                                        #endif
                                                        let v4563 : string = _v4487 
                                                        let v4568 : string = "# spiral_builder.process_python"
                                                        let v4569 : bool = v4563.Contains v4568 
                                                        let v4581 : string =
                                                            if v4569 then
                                                                v4563
                                                            else
                                                                let v4572 : string = "\";\".into()"
                                                                let v4573 : string = Fable.Core.RustInterop.emitRustExpr () v4572 
                                                                let v4574 : string = "),)"
                                                                let v4575 : string = v4574 + v4573 
                                                                let v4576 : string = "));"
                                                                let v4577 : string = v4563.Replace (v4575, v4576)
                                                                let v4578 : string = "\\s\\sdefaultOf\\(\\);"
                                                                let v4579 : string = " defaultOf::<()>();"
                                                                method163(v4578, v4579, v4577)
                                                        let v4582 : bool = v4569 = false
                                                        if v4582 then
                                                            let v4583 : string = $"{v4581}\n\n{v4568}\n"
                                                            method41(v4444, v4583)
                                                        let v4584 : string = $"python \"{v4444}\""
                                                        let v4585 : string = "TRACE_LEVEL"
                                                        let v4586 : string = "Verbose"
                                                        let v4587 : (struct (string * string) []) = [|struct (v4585, v4586)|]
                                                        let v4588 : System.Threading.CancellationToken option = None
                                                        let v4589 : (struct (string * string) []) = [||]
                                                        let v4590 : (struct (int32 * string * bool) -> Async<unit>) option = None
                                                        let v4591 : (std_sync_Arc<std_sync_Mutex<std_process_ChildStdin>> -> unit) option = None
                                                        let v4592 : string option = None
                                                        let v4598 : Result<string, string> =
                                                            match v4307 with
                                                            | US12_1(v4595) -> (* Error *)
                                                                let v4596 : Result<string, string> = Error v4595 
                                                                v4596
                                                            | US12_0(v4593) -> (* Ok *)
                                                                let v4594 : Result<string, string> = Ok v4593 
                                                                v4594
                                                        let v4599 : unit = ()
                                                        
#if FABLE_COMPILER || WASM || CONTRACT
                                                        
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
                                                        let v4600 : string = "$0.ok()"
                                                        let v4601 : string option = Fable.Core.RustInterop.emitRustExpr v4598 v4600 
                                                        let _v4599 = v4601 
                                                        #endif
#if FABLE_COMPILER_RUST && WASM
                                                        let v4602 : string = "$0.ok()"
                                                        let v4603 : string option = Fable.Core.RustInterop.emitRustExpr v4598 v4602 
                                                        let _v4599 = v4603 
                                                        #endif
#if FABLE_COMPILER_RUST && CONTRACT
                                                        let v4604 : string = "$0.ok()"
                                                        let v4605 : string option = Fable.Core.RustInterop.emitRustExpr v4598 v4604 
                                                        let _v4599 = v4605 
                                                        #endif
#if FABLE_COMPILER_TYPESCRIPT
                                                        let v4606 : string option = match v4598 with Ok x -> Some x | Error _ -> None
                                                        let _v4599 = v4606 
                                                        #endif
#if FABLE_COMPILER_PYTHON
                                                        let v4607 : string option = match v4598 with Ok x -> Some x | Error _ -> None
                                                        let _v4599 = v4607 
                                                        #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
                                                        let v4608 : string option = match v4598 with Ok x -> Some x | Error _ -> None
                                                        let _v4599 = v4608 
                                                        #endif
#else
                                                        let v4609 : string option = match v4598 with Ok x -> Some x | Error _ -> None
                                                        let _v4599 = v4609 
                                                        #endif
                                                        let v4610 : string option = _v4599 
                                                        let v4613 : bool = true
                                                        let struct (v4614 : int32, v4615 : string) = method68(v4584, v4588, v4587, v4590, v4591, v4613, v4610)
                                                        let v4616 : int32 = v4587.Length
                                                        let v4617 : (string []) = Array.zeroCreate<string> (v4616)
                                                        let v4618 : Mut5 = {l0 = 0} : Mut5
                                                        while method72(v4616, v4618) do
                                                            let v4620 : int32 = v4618.l0
                                                            let struct (v4621 : string, v4622 : string) = v4587.[int v4620]
                                                            let v4623 : string = $"$env:{v4621}=''{v4622}''"
                                                            v4617.[int v4620] <- v4623
                                                            let v4624 : int32 = v4620 + 1
                                                            v4618.l0 <- v4624
                                                            ()
                                                        let v4625 : string seq = v4617 |> Seq.ofArray
                                                        let v4628 : (string -> (string seq -> string)) = String.concat
                                                        let v4629 : string = ";"
                                                        let v4630 : (string seq -> string) = v4628 v4629
                                                        let v4631 : string = v4630 v4625
                                                        let v4634 : string = $"pwsh -c '{v4631}; {v4584}'"
                                                        let v4635 : bool = v4614 = 0
                                                        let struct (v4703 : US5, v4704 : US5, v4705 : US5, v4706 : US5) =
                                                            if v4635 then
                                                                let v4636 : (string -> US5) = closure62()
                                                                let v4637 : (unit -> string) = closure118(v4615)
                                                                let v4638 : (exn -> US5) = closure119(v4444, v4615, v4634)
                                                                let v4639 : US5 = US5_1
                                                                let result = ref v4639
                                                                try
                                                                    result.Value <- v4637 () |> v4636 
                                                                with ex ->
                                                                    result.Value <- v4638 ex 
                                                                let v4640 : US5 = result.Value
                                                                let v4650 : string option =
                                                                    match v4640 with
                                                                    | US5_1 -> (* None *)
                                                                        let v4648 : string option = None
                                                                        v4648
                                                                    | US5_0(v4644) -> (* Some *)
                                                                        let v4645 : string option = Some v4644 
                                                                        v4645
                                                                let v4651 : string = "$0.unwrap()"
                                                                let v4652 : string = Fable.Core.RustInterop.emitRustExpr v4650 v4651 
                                                                let v4653 : US5 = US5_0(v4175)
                                                                let v4654 : US5 = US5_0(v4581)
                                                                let v4655 : US5 = US5_0(v4444)
                                                                let v4656 : US5 = US5_0(v4652)
                                                                struct (v4653, v4654, v4655, v4656)
                                                            else
                                                                let v4657 : unit = ()
                                                                let v4658 : (unit -> unit) = closure121(v4444, v4615, v4614, v4634)
                                                                let v4659 : unit = (fun () -> v4658 (); v4657) ()
                                                                let v4699 : US5 = US5_0(v4175)
                                                                let v4700 : US5 = US5_1
                                                                let v4701 : US5 = US5_1
                                                                let v4702 : US5 = US5_1
                                                                struct (v4699, v4700, v4701, v4702)
                                                        struct (v4703, v4704, v4705, v4706)
                                                struct (v4707, v4708, v4709, v4710)
                                            else
                                                let v4711 : unit = ()
                                                let v4712 : (unit -> unit) = closure122(v26, v25)
                                                let v4713 : unit = (fun () -> v4712 (); v4711) ()
                                                let v4753 : US5 = US5_1
                                                let v4754 : US5 = US5_1
                                                let v4755 : US5 = US5_1
                                                let v4756 : US5 = US5_1
                                                struct (v4753, v4754, v4755, v4756)
                                        struct (v4757, v4758, v4759, v4760)
                                struct (v4761, v4762, v4763, v4764)
                        let v4772 : string =
                            match v4765 with
                            | US5_1 -> (* None *)
                                let v4770 : string = ""
                                v4770
                            | US5_0(v4769) -> (* Some *)
                                v4769
                        let v4773 : string = "extension"
                        let v4777 : string =
                            match v4766 with
                            | US5_1 -> (* None *)
                                let v4775 : string = ""
                                v4775
                            | US5_0(v4774) -> (* Some *)
                                v4774
                        let v4778 : string = "code"
                        let v4782 : string =
                            match v4767 with
                            | US5_1 -> (* None *)
                                let v4780 : string = ""
                                v4780
                            | US5_0(v4779) -> (* Some *)
                                v4779
                        let v4783 : string = "code_path"
                        let v4787 : string =
                            match v4768 with
                            | US5_1 -> (* None *)
                                let v4785 : string = ""
                                v4785
                            | US5_0(v4784) -> (* Some *)
                                v4784
                        let v4788 : string = "output"
                        [|struct (v4773, v4772); struct (v4778, v4777); struct (v4783, v4782); struct (v4788, v4787)|]
        | _ ->
            let v4793 : string = "extension"
            let v4794 : string = ""
            let v4795 : string = "code"
            let v4796 : string = "code_path"
            let v4797 : string = "output"
            [|struct (v4793, v4794); struct (v4795, v4794); struct (v4796, v4794); struct (v4797, v4794)|]
    let v4800 : string = "$0.to_vec()"
    let v4801 : Vec<struct (string * string)> = Fable.Core.RustInterop.emitRustExpr v4799 v4800 
    let v4802 : string = "$0.into_iter().map(|x| $1(x.clone())).collect::<Vec<_>>()"
    let v4803 : (struct (string * string) -> (std_string_String * std_string_String)) = closure123()
    let v4804 : Vec<(std_string_String * std_string_String)> = Fable.Core.RustInterop.emitRustExpr struct (v4801, v4803) v4802 
    let v4805 : string = "std::collections::BTreeMap::from_iter(v4804.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))"
    let v4806 : std_collections_BTreeMap<std_string_String, std_string_String> = Fable.Core.RustInterop.emitRustExpr () v4805 
    let v4807 : string = "serde_json::to_string(&v4806)"
    let v4808 : Result<std_string_String, serde_json_Error> = Fable.Core.RustInterop.emitRustExpr () v4807 
    let v4809 : (serde_json_Error -> string) = method261()
    let v4810 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4811 : string = "$0.map_err(|x| $1(x))"
    let v4812 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4808, v4809) v4811 
    let _v4810 = v4812 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4813 : string = "$0.map_err(|x| $1(x))"
    let v4814 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4808, v4809) v4813 
    let _v4810 = v4814 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4815 : string = "$0.map_err(|x| $1(x))"
    let v4816 : Result<std_string_String, string> = Fable.Core.RustInterop.emitRustExpr struct (v4808, v4809) v4815 
    let _v4810 = v4816 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4817 : Result<std_string_String, string> = match v4808 with Ok x -> Ok x | Error x -> Error (v4809 x)
    let _v4810 = v4817 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4818 : Result<std_string_String, string> = match v4808 with Ok x -> Ok x | Error x -> Error (v4809 x)
    let _v4810 = v4818 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4819 : Result<std_string_String, string> = match v4808 with Ok x -> Ok x | Error x -> Error (v4809 x)
    let _v4810 = v4819 
    #endif
#else
    let v4820 : Result<std_string_String, string> = match v4808 with Ok x -> Ok x | Error x -> Error (v4809 x)
    let _v4810 = v4820 
    #endif
    let v4821 : Result<std_string_String, string> = _v4810 
    let v4824 : string = "true; let _result_map_ = $0.map(|x| { //"
    let v4825 : bool = Fable.Core.RustInterop.emitRustExpr v4821 v4824 
    let v4826 : string = "x"
    let v4827 : std_string_String = Fable.Core.RustInterop.emitRustExpr () v4826 
    let v4828 : string = "fable_library_rust::String_::fromString($0)"
    let v4829 : string = Fable.Core.RustInterop.emitRustExpr v4827 v4828 
    let v4830 : string = "true; $0 })"
    let v4831 : bool = Fable.Core.RustInterop.emitRustExpr v4829 v4830 
    let v4832 : string = "_result_map_"
    let v4833 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr () v4832 
    let v4834 : Result<string, string> = method262(v4833)
    let v4835 : string = ""
    let v4836 : string = "}"
    let v4837 : string = v4835 + v4836 
    let v4838 : _ = v4834 
    let v4839 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v4840 : string = $"true; let v4838 = $0"
    let v4841 : bool = Fable.Core.RustInterop.emitRustExpr v4838 v4840 
    let _v4839 = v4841 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v4842 : string = $"true; let v4838 = $0"
    let v4843 : bool = Fable.Core.RustInterop.emitRustExpr v4838 v4842 
    let _v4839 = v4843 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v4844 : string = $"true; let v4838 = $0"
    let v4845 : bool = Fable.Core.RustInterop.emitRustExpr v4838 v4844 
    let _v4839 = v4845 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v4846 : bool = true
    let _v4839 = v4846 
    #endif
#if FABLE_COMPILER_PYTHON
    let v4847 : bool = true
    let _v4839 = v4847 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v4848 : bool = true
    let _v4839 = v4848 
    #endif
#else
    let v4849 : bool = true
    let _v4839 = v4849 
    #endif
    let v4850 : bool = _v4839 
    let v4853 : string = $"true; v4838 " + v4837 + "); " + v4835 + " // rust.fix_closure'"
    let v4854 : bool = Fable.Core.RustInterop.emitRustExpr () v4853 
    let v4855 : string = "__future_init"
    let v4856 : _ = Fable.Core.RustInterop.emitRustExpr () v4855 
    let v4857 : string = "v4856"
    let v4858 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = Fable.Core.RustInterop.emitRustExpr () v4857 
    v4858
and closure1 () (v0 : (string [])) : int32 =
    let v1 : unit = ()
    let v2 : (unit -> unit) = closure2()
    let v3 : unit = (fun () -> v2 (); v1) ()
    let struct (v17 : Mut0, v18 : Mut1, v19 : Mut2, v20 : Mut3, v21 : Mut4, v22 : int64 option) = TraceState.trace_state.Value
    let v35 : unit = ()
    let v36 : (unit -> unit) = closure5(v0)
    let v37 : unit = (fun () -> v36 (); v35) ()
    let v76 : clap_Command = method0()
    let v77 : string = "clap::Command::get_matches($0)"
    let v78 : clap_ArgMatches = Fable.Core.RustInterop.emitRustExpr v76 v77 
    let v79 : US0 = v21.l0
    let v80 : std_pin_Pin<Box<Dyn<std_future_Future<Result<string, string>>>>> = method20(v79, v78)
    let v81 : string = "futures::executor::block_on($0)"
    let v82 : Result<string, string> = Fable.Core.RustInterop.emitRustExpr v80 v81 
    let v83 : unit = ()
    
#if FABLE_COMPILER || WASM || CONTRACT
    
#if FABLE_COMPILER_RUST && !WASM && !CONTRACT
    let v84 : string = "$0.unwrap()"
    let v85 : string = Fable.Core.RustInterop.emitRustExpr v82 v84 
    let _v83 = v85 
    #endif
#if FABLE_COMPILER_RUST && WASM
    let v86 : string = "$0.unwrap()"
    let v87 : string = Fable.Core.RustInterop.emitRustExpr v82 v86 
    let _v83 = v87 
    #endif
#if FABLE_COMPILER_RUST && CONTRACT
    let v88 : string = "$0.unwrap()"
    let v89 : string = Fable.Core.RustInterop.emitRustExpr v82 v88 
    let _v83 = v89 
    #endif
#if FABLE_COMPILER_TYPESCRIPT
    let v90 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v90 
    #endif
#if FABLE_COMPILER_PYTHON
    let v91 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v91 
    #endif
#if !FABLE_COMPILER_RUST && !FABLE_COMPILER_TYPESCRIPT && !FABLE_COMPILER_PYTHON
    let v92 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v92 
    #endif
#else
    let v93 : string = match v82 with Ok x -> x | Error e -> failwith $"resultm.unwrap' / e: {e}"
    let _v83 = v93 
    #endif
    let v94 : string = _v83 
    let v97 : US0 = v21.l0
    let v98 : bool =
        match v97 with
        | US0_2 -> (* Info *)
            true
        | _ ->
            false
    if v98 then
        let v99 : unit = ()
        let v100 : (unit -> unit) = closure10(v94)
        let v101 : unit = (fun () -> v100 (); v99) ()
        ()
    0
let v0 : (unit -> unit) = closure0()
let tests () = v0 ()
let v1 : ((string []) -> int32) = closure1()
let main args = v1 args
()
