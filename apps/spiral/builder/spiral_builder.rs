#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_7e2cd9e0 {
    pub mod Spiral_builder {
        use super::*;
        use fable_library_rust::Array_::skip;
        use fable_library_rust::Array_::skipWhile;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Async_::Async;
        use fable_library_rust::DateTime_::DateTime;
        use fable_library_rust::Encoding_::get_UTF8;
        use fable_library_rust::Encoding_::Encoding;
        use fable_library_rust::Exception_::try_catch;
        use fable_library_rust::Guid_::new_guid;
        use fable_library_rust::Guid_::parse;
        use fable_library_rust::Guid_::Guid;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::Interfaces_::System::IDisposable;
        use fable_library_rust::List_::cons;
        use fable_library_rust::List_::empty;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::item;
        use fable_library_rust::List_::length as length_1;
        use fable_library_rust::List_::ofArray;
        use fable_library_rust::List_::singleton;
        use fable_library_rust::List_::toArray;
        use fable_library_rust::List_::List;
        use fable_library_rust::Map_::find;
        use fable_library_rust::Map_::ofSeq;
        use fable_library_rust::NativeArray_::count as count_2;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::interface_cast;
        use fable_library_rust::Native_::refCell;
        use fable_library_rust::Native_::unbox;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Arc;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::Lrc;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::getValue;
        use fable_library_rust::Option_::map as map_1;
        use fable_library_rust::Range_::rangeNumeric;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::map;
        use fable_library_rust::Seq_::ofArray as ofArray_1;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray as toArray_1;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::endsWith;
        use fable_library_rust::String_::getCharAt;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::indexOf;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofChar;
        use fable_library_rust::String_::padLeft;
        use fable_library_rust::String_::printfn;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::replicate;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toLower;
        use fable_library_rust::String_::toString;
        use fable_library_rust::String_::toUpper;
        use fable_library_rust::String_::trimEndChars;
        use fable_library_rust::String_::trimStartChars;
        use fable_library_rust::TimeSpan_::zero;
        use fable_library_rust::TimeSpan_::TimeSpan;
        type ConcurrentStack_1<T> = T;
        use fable_library_rust::System::Exception;
        use fable_library_rust::System::Text::StringBuilder;
        type CancellationToken = ();
        type TaskCanceledException = ();
        type TimeZoneInfo = i64;
        pub mod State {
            use super::*;
            pub fn trace_state() -> LrcPtr<
                MutCell<
                    Option<(
                        LrcPtr<Spiral_builder::Mut0>,
                        LrcPtr<Spiral_builder::Mut1>,
                        LrcPtr<Spiral_builder::Mut2>,
                        LrcPtr<Spiral_builder::Mut3>,
                        Option<i64>,
                    )>,
                >,
            > {
                static trace_state: OnceInit<
                    LrcPtr<
                        MutCell<
                            Option<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        >,
                    >,
                > = OnceInit::new();
                trace_state
                    .get_or_init(|| {
                        LrcPtr::new(MutCell::new(
                            None::<(
                                LrcPtr<Spiral_builder::Mut0>,
                                LrcPtr<Spiral_builder::Mut1>,
                                LrcPtr<Spiral_builder::Mut2>,
                                LrcPtr<Spiral_builder::Mut3>,
                                Option<i64>,
                            )>,
                        ))
                    })
                    .clone()
            }
        }
        pub trait IOsEnviron {
            fn environ(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IOsEnviron + Clone + 'static> IOsEnviron for LrcPtr<V> {
            #[inline]
            fn environ(&self) -> LrcPtr<dyn Any> {
                (**self).environ()
            }
        }
        pub trait IPathJoin {
            fn join(&self, paths: Array<string>) -> string;
        }
        impl<V: IPathJoin + Clone + 'static> IPathJoin for LrcPtr<V> {
            #[inline]
            fn join(&self, paths: Array<string>) -> string {
                (**self).join(paths)
            }
        }
        pub trait IFsExistsSync {
            fn existsSync(&self, path: string) -> bool;
        }
        impl<V: IFsExistsSync + Clone + 'static> IFsExistsSync for LrcPtr<V> {
            #[inline]
            fn existsSync(&self, path: string) -> bool {
                (**self).existsSync(path)
            }
        }
        pub trait IPathDirname {
            fn dirname(&self, path: string) -> string;
        }
        impl<V: IPathDirname + Clone + 'static> IPathDirname for LrcPtr<V> {
            #[inline]
            fn dirname(&self, path: string) -> string {
                (**self).dirname(path)
            }
        }
        #[derive(Clone, Debug)]
        pub struct Disposable {
            f: Func0<()>,
        }
        impl Spiral_builder::Disposable {
            pub fn _ctor__3A5B6456(f: Func0<()>) -> LrcPtr<Spiral_builder::Disposable> {
                let f_1;
                ();
                f_1 = f;
                ();
                LrcPtr::new(Spiral_builder::Disposable { f: f_1 })
            }
        }
        impl core::fmt::Display for Spiral_builder::Disposable {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        impl IDisposable for Disposable {
            fn Dispose(&self) {
                (self.f)();
            }
        }
        pub trait ICryptoCreateHash {
            fn createHash(&self, x: string) -> LrcPtr<dyn Any>;
        }
        impl<V: ICryptoCreateHash + Clone + 'static> ICryptoCreateHash for LrcPtr<V> {
            #[inline]
            fn createHash(&self, x: string) -> LrcPtr<dyn Any> {
                (**self).createHash(x)
            }
        }
        pub trait IHashlibSha256 {
            fn sha256(&self) -> LrcPtr<dyn Any>;
        }
        impl<V: IHashlibSha256 + Clone + 'static> IHashlibSha256 for LrcPtr<V> {
            #[inline]
            fn sha256(&self) -> LrcPtr<dyn Any> {
                (**self).sha256()
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US0 {
            US0_0,
            US0_1,
            US0_2,
            US0_3,
            US0_4,
        }
        impl core::fmt::Display for Spiral_builder::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i64>,
        }
        impl core::fmt::Display for Spiral_builder::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<Func1<string, ()>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut2 {
            pub l0: MutCell<bool>,
        }
        impl core::fmt::Display for Spiral_builder::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut3 {
            pub l0: MutCell<Spiral_builder::US0>,
        }
        impl core::fmt::Display for Spiral_builder::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US1 {
            US1_0(string),
            US1_1,
        }
        impl core::fmt::Display for Spiral_builder::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0(Spiral_builder::US0),
            US2_1,
        }
        impl core::fmt::Display for Spiral_builder::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US3 {
            US3_0(i64),
            US3_1,
        }
        impl core::fmt::Display for Spiral_builder::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<string>,
        }
        impl core::fmt::Display for Spiral_builder::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::string::String, clap::ArgMatches),
            US4_1,
        }
        impl core::fmt::Display for Spiral_builder::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(std::string::String),
            US5_1,
        }
        impl core::fmt::Display for Spiral_builder::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US8 {
            US8_0,
            US8_1,
        }
        impl core::fmt::Display for Spiral_builder::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US7 {
            US7_0(Spiral_builder::US8),
            US7_1,
        }
        impl core::fmt::Display for Spiral_builder::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US6 {
            US6_0(Spiral_builder::US7),
            US6_1,
        }
        impl core::fmt::Display for Spiral_builder::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Vec<std::string::String>),
            US9_1,
        }
        impl core::fmt::Display for Spiral_builder::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US10 {
            US10_0,
            US10_1,
            US10_2,
        }
        impl core::fmt::Display for Spiral_builder::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US11 {
            US11_0(Spiral_builder::US10),
            US11_1(Spiral_builder::US10),
            US11_2(Spiral_builder::US10),
            US11_3(Spiral_builder::US10),
            US11_4(Spiral_builder::US10),
        }
        impl core::fmt::Display for Spiral_builder::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US12 {
            US12_0(string),
            US12_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0,
            US13_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US14 {
            US14_0(string, Spiral_builder::US1),
            US14_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(char, string, LrcPtr<StringBuilder>, i32, i32),
            US15_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut5 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Spiral_builder::Mut5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH0 {
            UH0_0,
            UH0_1(char, LrcPtr<Spiral_builder::UH0>),
        }
        impl core::fmt::Display for Spiral_builder::UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US15>,
                LrcPtr<Spiral_builder::UH1>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(string, string, LrcPtr<StringBuilder>, i32, i32),
            US16_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US17 {
            US17_0(char),
            US17_1,
        }
        impl core::fmt::Display for Spiral_builder::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US18 {
            US18_0(string, LrcPtr<StringBuilder>, i32, i32),
            US18_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US19 {
            US19_0(
                string,
                Spiral_builder::US1,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US19_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(
                Spiral_builder::US17,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US20_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(Spiral_builder::US1, string, LrcPtr<StringBuilder>, i32, i32),
            US21_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Array<string>),
            US22_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH2 {
            UH2_0,
            UH2_1(string, LrcPtr<Spiral_builder::UH2>),
        }
        impl core::fmt::Display for Spiral_builder::UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(
                LrcPtr<Spiral_builder::UH2>,
                string,
                LrcPtr<StringBuilder>,
                i32,
                i32,
            ),
            US23_1(string),
        }
        impl core::fmt::Display for Spiral_builder::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH3 {
            UH3_0,
            UH3_1(
                Func1<(string, LrcPtr<StringBuilder>, i32, i32), Spiral_builder::US16>,
                LrcPtr<Spiral_builder::UH3>,
            ),
        }
        impl core::fmt::Display for Spiral_builder::UH3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(
                std::sync::Arc<
                    std::sync::Mutex<
                        std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                    >,
                >,
            ),
            US25_1,
        }
        impl core::fmt::Display for Spiral_builder::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(std::string::String),
            US26_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>),
            US27_1,
        }
        impl core::fmt::Display for Spiral_builder::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>),
            US28_1,
        }
        impl core::fmt::Display for Spiral_builder::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(std::process::Output),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US30 {
            US30_0(i32),
            US30_1,
        }
        impl core::fmt::Display for Spiral_builder::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Func1<(i32, string, bool), Arc<Async<()>>>),
            US31_1,
        }
        impl core::fmt::Display for Spiral_builder::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(CancellationToken),
            US32_1,
        }
        impl core::fmt::Display for Spiral_builder::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut6 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<i32>,
            pub l2: MutCell<Array<string>>,
        }
        impl core::fmt::Display for Spiral_builder::Mut6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US34 {
            US34_0,
            US34_1,
        }
        impl core::fmt::Display for Spiral_builder::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US33 {
            US33_0(Spiral_builder::US34),
            US33_1,
        }
        impl core::fmt::Display for Spiral_builder::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(chrono::DateTime<chrono::Utc>),
            US35_1,
        }
        impl core::fmt::Display for Spiral_builder::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US36 {
            US36_0(i32, string),
            US36_1(i32, string),
        }
        impl core::fmt::Display for Spiral_builder::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(std::collections::HashMap<string, string>),
            US37_1,
        }
        impl core::fmt::Display for Spiral_builder::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Spiral_builder::US1),
            US38_1,
        }
        impl core::fmt::Display for Spiral_builder::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH4 {
            UH4_0,
            UH4_1(string, bool, LrcPtr<Spiral_builder::UH4>),
        }
        impl core::fmt::Display for Spiral_builder::UH4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(std::fs::FileType),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US40 {
            US40_0,
            US40_1,
            US40_2,
        }
        impl core::fmt::Display for Spiral_builder::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(async_walkdir::DirEntry),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for Spiral_builder::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US42 {
            US42_0(string, string),
            US42_1,
        }
        impl core::fmt::Display for Spiral_builder::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum UH5 {
            UH5_0,
            UH5_1(string, string, LrcPtr<Spiral_builder::UH5>),
        }
        impl core::fmt::Display for Spiral_builder::UH5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn method0() -> clap::Command {
            let v1_1: string = string("r#\"command\"#");
            let v2: &'static str = r#"command"#;
            let v4: clap::Command = clap::Command::new(v2);
            let v6: clap::Command = clap::Command::subcommand_required(v4, true);
            let v8: string = string("r#\"fsharp\"#");
            let v9: &'static str = r#"fsharp"#;
            let v11: clap::Command = clap::Command::new(v9);
            let v13: string = string("r#\"spi-path\"#");
            let v14: &'static str = r#"spi-path"#;
            let v16: clap::Arg = clap::Arg::new(v14);
            let v18: clap::Arg = v16.short('s');
            let v19: string = string("r#\"spi-path\"#");
            let v20: &'static str = r#"spi-path"#;
            let v22: clap::Arg = v18.long(v20);
            let v24: clap::Arg = v22.required(true);
            let v26: clap::Command = clap::Command::arg(v11, v24);
            let v28: clap::Command = clap::Command::subcommand(v6, v26);
            let v30: string = string("r#\"cuda\"#");
            let v31: &'static str = r#"cuda"#;
            let v33: clap::Command = clap::Command::new(v31);
            let v35: string = string("r#\"py-path\"#");
            let v36: &'static str = r#"py-path"#;
            let v38: clap::Arg = clap::Arg::new(v36);
            let v40: clap::Arg = v38.short('p');
            let v41: string = string("r#\"py-path\"#");
            let v42: &'static str = r#"py-path"#;
            let v44: clap::Arg = v40.long(v42);
            let v46: clap::Arg = v44.required(true);
            let v48: clap::Command = clap::Command::arg(v33, v46);
            let v50: string = string("r#\"env\"#");
            let v51: &'static str = r#"env"#;
            let v53: clap::Arg = clap::Arg::new(v51);
            let v55: clap::Arg = v53.short('e');
            let v56: string = string("r#\"env\"#");
            let v57: &'static str = r#"env"#;
            let v59: clap::Arg = v55.long(v57);
            let v70: Array<string> =
                toArray(ofArray(new_array(&[string("Pip"), string("Poetry")])));
            let v74: Vec<string> = v70.to_vec();
            let v76: bool = true;
            let _result: Vec<_> = v74
                .into_iter()
                .map(|x| {
                    //;
                    let v78: string = x;
                    let v80: &str = &*v78;
                    let v82: std::string::String = String::from(v80);
                    let v84: Box<std::string::String> = Box::new(v82);
                    let v86: &'static mut std::string::String = Box::leak(v84);
                    let v88: clap::builder::PossibleValue =
                        clap::builder::PossibleValue::new(&**v86);
                    let v90: bool = true;
                    v88
                })
                .collect::<Vec<_>>();
            let v92: Vec<clap::builder::PossibleValue> = _result;
            let v94: clap::builder::ValueParser = Into::<clap::builder::ValueParser>::into(
                clap::builder::PossibleValuesParser::new(v92),
            );
            let v96: clap::Arg = v59.value_parser(v94);
            let v98: clap::Command = clap::Command::arg(v48, v96);
            let v100: string = string("r#\"NAME\"#");
            let v103: string = string("r#\"VERSION\"#");
            let v105: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v106: usize = 1_i32 as usize;
            let v109: usize = 0_i32 as usize;
            let v119: clap::builder::ValueRange = if v109 == v109 {
                clap::builder::ValueRange::new(v106..)
            } else {
                clap::builder::ValueRange::new(v106..v109)
            };
            let v121: string = string("r#\"deps\"#");
            let v122: &'static str = r#"deps"#;
            let v124: clap::Arg = clap::Arg::new(v122);
            let v126: clap::Arg = v124.short('d');
            let v127: string = string("r#\"deps\"#");
            let v128: &'static str = r#"deps"#;
            let v130: clap::Arg = v126.long(v128);
            let v132: Vec<&'static str> = v105.to_vec();
            let v134: clap::Arg = v130.value_names(v132);
            let v136: clap::Arg = v134.num_args(v119);
            let v138: clap::ArgAction = clap::ArgAction::Append;
            let v140: clap::Arg = v136.action(v138);
            let v142: clap::Command = clap::Command::arg(v98, v140);
            let v144: clap::Command = clap::Command::subcommand(v28, v142);
            let v146: string = string("r#\"fable\"#");
            let v147: &'static str = r#"fable"#;
            let v149: clap::Command = clap::Command::new(v147);
            let v151: string = string("r#\"fs-path\"#");
            let v152: &'static str = r#"fs-path"#;
            let v154: clap::Arg = clap::Arg::new(v152);
            let v156: clap::Arg = v154.short('f');
            let v157: string = string("r#\"fs-path\"#");
            let v158: &'static str = r#"fs-path"#;
            let v160: clap::Arg = v156.long(v158);
            let v162: clap::Arg = v160.required(true);
            let v164: clap::Command = clap::Command::arg(v149, v162);
            let v165: string = string("r#\"command\"#");
            let v166: &'static str = r#"command"#;
            let v168: clap::Arg = clap::Arg::new(v166);
            let v170: clap::Arg = v168.short('c');
            let v171: string = string("r#\"command\"#");
            let v172: &'static str = r#"command"#;
            let v174: clap::Arg = v170.long(v172);
            let v176: clap::Command = clap::Command::arg(v164, v174);
            let v178: clap::Command = clap::Command::subcommand(v144, v176);
            let v180: string = string("r#\"rust\"#");
            let v181: &'static str = r#"rust"#;
            let v183: clap::Command = clap::Command::new(v181);
            let v184: string = string("r#\"fs-path\"#");
            let v185: &'static str = r#"fs-path"#;
            let v187: clap::Arg = clap::Arg::new(v185);
            let v189: clap::Arg = v187.short('f');
            let v190: string = string("r#\"fs-path\"#");
            let v191: &'static str = r#"fs-path"#;
            let v193: clap::Arg = v189.long(v191);
            let v195: clap::Arg = v193.required(true);
            let v197: clap::Command = clap::Command::arg(v183, v195);
            let v198: string = string("r#\"NAME\"#");
            let v200: string = string("r#\"VERSION\"#");
            let v202: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v203: usize = 1_i32 as usize;
            let v206: usize = 0_i32 as usize;
            let v216: clap::builder::ValueRange = if v206 == v206 {
                clap::builder::ValueRange::new(v203..)
            } else {
                clap::builder::ValueRange::new(v203..v206)
            };
            let v217: string = string("r#\"deps\"#");
            let v218: &'static str = r#"deps"#;
            let v220: clap::Arg = clap::Arg::new(v218);
            let v222: clap::Arg = v220.short('d');
            let v223: string = string("r#\"deps\"#");
            let v224: &'static str = r#"deps"#;
            let v226: clap::Arg = v222.long(v224);
            let v228: Vec<&'static str> = v202.to_vec();
            let v230: clap::Arg = v226.value_names(v228);
            let v232: clap::Arg = v230.num_args(v216);
            let v234: clap::ArgAction = clap::ArgAction::Append;
            let v236: clap::Arg = v232.action(v234);
            let v238: clap::Command = clap::Command::arg(v197, v236);
            let v240: string = string("r#\"wasm\"#");
            let v241: &'static str = r#"wasm"#;
            let v243: clap::Arg = clap::Arg::new(v241);
            let v245: clap::Arg = v243.short('w');
            let v246: string = string("r#\"wasm\"#");
            let v247: &'static str = r#"wasm"#;
            let v249: clap::Arg = v245.long(v247);
            let v251: clap::ArgAction = clap::ArgAction::SetTrue;
            let v253: clap::Arg = v249.action(v251);
            let v255: clap::Command = clap::Command::arg(v238, v253);
            let v257: string = string("r#\"contract\"#");
            let v258: &'static str = r#"contract"#;
            let v260: clap::Arg = clap::Arg::new(v258);
            let v262: clap::Arg = v260.short('c');
            let v263: string = string("r#\"contract\"#");
            let v264: &'static str = r#"contract"#;
            let v266: clap::Arg = v262.long(v264);
            let v268: clap::ArgAction = clap::ArgAction::SetTrue;
            let v270: clap::Arg = v266.action(v268);
            let v272: clap::Command = clap::Command::arg(v255, v270);
            let v274: clap::Command = clap::Command::subcommand(v178, v272);
            let v276: string = string("r#\"typescript\"#");
            let v277: &'static str = r#"typescript"#;
            let v279: clap::Command = clap::Command::new(v277);
            let v280: string = string("r#\"fs-path\"#");
            let v281: &'static str = r#"fs-path"#;
            let v283: clap::Arg = clap::Arg::new(v281);
            let v285: clap::Arg = v283.short('f');
            let v286: string = string("r#\"fs-path\"#");
            let v287: &'static str = r#"fs-path"#;
            let v289: clap::Arg = v285.long(v287);
            let v291: clap::Arg = v289.required(true);
            let v293: clap::Command = clap::Command::arg(v279, v291);
            let v294: string = string("r#\"NAME\"#");
            let v296: string = string("r#\"VERSION\"#");
            let v298: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v299: usize = 1_i32 as usize;
            let v302: usize = 0_i32 as usize;
            let v312: clap::builder::ValueRange = if v302 == v302 {
                clap::builder::ValueRange::new(v299..)
            } else {
                clap::builder::ValueRange::new(v299..v302)
            };
            let v313: string = string("r#\"deps\"#");
            let v314: &'static str = r#"deps"#;
            let v316: clap::Arg = clap::Arg::new(v314);
            let v318: clap::Arg = v316.short('d');
            let v319: string = string("r#\"deps\"#");
            let v320: &'static str = r#"deps"#;
            let v322: clap::Arg = v318.long(v320);
            let v324: Vec<&'static str> = v298.to_vec();
            let v326: clap::Arg = v322.value_names(v324);
            let v328: clap::Arg = v326.num_args(v312);
            let v330: clap::ArgAction = clap::ArgAction::Append;
            let v332: clap::Arg = v328.action(v330);
            let v334: clap::Command = clap::Command::arg(v293, v332);
            let v336: clap::Command = clap::Command::subcommand(v274, v334);
            let v338: string = string("r#\"python\"#");
            let v339: &'static str = r#"python"#;
            let v341: clap::Command = clap::Command::new(v339);
            let v342: string = string("r#\"fs-path\"#");
            let v343: &'static str = r#"fs-path"#;
            let v345: clap::Arg = clap::Arg::new(v343);
            let v347: clap::Arg = v345.short('f');
            let v348: string = string("r#\"fs-path\"#");
            let v349: &'static str = r#"fs-path"#;
            let v351: clap::Arg = v347.long(v349);
            let v353: clap::Arg = v351.required(true);
            let v355: clap::Command = clap::Command::arg(v341, v353);
            let v356: string = string("r#\"NAME\"#");
            let v358: string = string("r#\"VERSION\"#");
            let v360: Array<&'static str> = new_array(&[r#"NAME"#, r#"VERSION"#]);
            let v361: usize = 1_i32 as usize;
            let v364: usize = 0_i32 as usize;
            let v374: clap::builder::ValueRange = if v364 == v364 {
                clap::builder::ValueRange::new(v361..)
            } else {
                clap::builder::ValueRange::new(v361..v364)
            };
            let v375: string = string("r#\"deps\"#");
            let v376: &'static str = r#"deps"#;
            let v378: clap::Arg = clap::Arg::new(v376);
            let v380: clap::Arg = v378.short('d');
            let v381: string = string("r#\"deps\"#");
            let v382: &'static str = r#"deps"#;
            let v384: clap::Arg = v380.long(v382);
            let v386: Vec<&'static str> = v360.to_vec();
            let v388: clap::Arg = v384.value_names(v386);
            let v390: clap::Arg = v388.num_args(v374);
            let v392: clap::ArgAction = clap::ArgAction::Append;
            let v394: clap::Arg = v390.action(v392);
            let v396: clap::Command = clap::Command::arg(v355, v394);
            let v398: clap::Command = clap::Command::subcommand(v336, v396);
            let v400: string = string("r#\"dib\"#");
            let v401: &'static str = r#"dib"#;
            let v403: clap::Command = clap::Command::new(v401);
            let v405: string = string("r#\"path\"#");
            let v406: &'static str = r#"path"#;
            let v408: clap::Arg = clap::Arg::new(v406);
            let v410: clap::Arg = v408.short('p');
            let v411: string = string("r#\"path\"#");
            let v412: &'static str = r#"path"#;
            let v414: clap::Arg = v410.long(v412);
            let v416: clap::Arg = v414.required(true);
            let v418: clap::Command = clap::Command::arg(v403, v416);
            let v420: string = string("clap::value_parser!(u8).into()");
            let v421: clap::builder::ValueParser = clap::value_parser!(u8).into();
            let v423: string = string("r#\"retries\"#");
            let v424: &'static str = r#"retries"#;
            let v426: clap::Arg = clap::Arg::new(v424);
            let v428: clap::Arg = v426.short('r');
            let v429: string = string("r#\"retries\"#");
            let v430: &'static str = r#"retries"#;
            let v432: clap::Arg = v428.long(v430);
            let v434: clap::Arg = v432.value_parser(v421);
            let v436: clap::Command = clap::Command::arg(v418, v434);
            let v438: string = string("r#\"working-directory\"#");
            let v439: &'static str = r#"working-directory"#;
            let v441: clap::Arg = clap::Arg::new(v439);
            let v443: clap::Arg = v441.short('w');
            let v444: string = string("r#\"working-directory\"#");
            let v445: &'static str = r#"working-directory"#;
            let v447: clap::Arg = v443.long(v445);
            let v449: clap::Command = clap::Command::arg(v436, v447);
            clap::Command::subcommand(v398, v449)
        }
        pub fn closure0(unitVar: (), unitVar_1: ()) {
            let v1_1: bool = true;
            () //;
        } /* /*;
          {
              let v4: string = string("*/ #[test] fn verify_app() { //");
              let v5: bool = */
        #[test]
        fn verify_app() {
            //;
            let v6: clap::Command = Spiral_builder::method0();
            clap::Command::debug_assert(v6);
            {
                //;
                ()
            }
        }
        pub fn method2() -> string {
            string("TRACE_LEVEL")
        }
        pub fn method4() -> string {
            string("")
        }
        pub fn closure3(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US1>>>,
            v1_1: Option<Spiral_builder::US1>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US1>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure4(
            v0_1: Option<string>,
            v1_1: Func1<Option<Spiral_builder::US1>, LrcPtr<MutCell<Option<Spiral_builder::US1>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US1>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US1>,
                    Some(v0_1_0_0) => {
                        let x: string = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US1::US1_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method3(v0_1: string) -> string {
            let v3: Result<std::string::String, std::env::VarError> = std::env::var(&*v0_1);
            let v5: bool = true;
            let _result = v3.map(|x| {
                //;
                let v7: std::string::String = x;
                let v9: string = fable_library_rust::String_::fromString(v7);
                let v11: bool = true;
                v9
            });
            let v13: Result<string, std::env::VarError> = _result;
            let v14: string = Spiral_builder::method4();
            v13.unwrap_or(v14)
        }
        pub fn method5() -> string {
            string("AUTOMATION")
        }
        pub fn closure5(unitVar: (), v0_1: string) {
            ();
        }
        pub fn method1(
            v0_1: Spiral_builder::US0,
        ) -> (
            LrcPtr<Spiral_builder::Mut0>,
            LrcPtr<Spiral_builder::Mut1>,
            LrcPtr<Spiral_builder::Mut2>,
            LrcPtr<Spiral_builder::Mut3>,
            Option<i64>,
        ) {
            let v3: string = Spiral_builder::method3(Spiral_builder::method2());
            let v8: Spiral_builder::US2 = if string("Verbose") == v3.clone() {
                Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_0)
            } else {
                Spiral_builder::US2::US2_1
            };
            let _v1: (Spiral_builder::US2, Spiral_builder::US3) = (
                match &v8 {
                    Spiral_builder::US2::US2_0(v8_0_0) => Spiral_builder::US2::US2_0(match &v8 {
                        Spiral_builder::US2::US2_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => {
                        let v15: Spiral_builder::US2 = if string("Debug") == v3.clone() {
                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_1)
                        } else {
                            Spiral_builder::US2::US2_1
                        };
                        match &v15 {
                            Spiral_builder::US2::US2_0(v15_0_0) => {
                                Spiral_builder::US2::US2_0(match &v15 {
                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v22: Spiral_builder::US2 = if string("Info") == v3.clone() {
                                    Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_2)
                                } else {
                                    Spiral_builder::US2::US2_1
                                };
                                match &v22 {
                                    Spiral_builder::US2::US2_0(v22_0_0) => {
                                        Spiral_builder::US2::US2_0(match &v22 {
                                            Spiral_builder::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v29: Spiral_builder::US2 = if string("Warning")
                                            == v3.clone()
                                        {
                                            Spiral_builder::US2::US2_0(Spiral_builder::US0::US0_3)
                                        } else {
                                            Spiral_builder::US2::US2_1
                                        };
                                        match &v29 {
                                            Spiral_builder::US2::US2_0(v29_0_0) => {
                                                Spiral_builder::US2::US2_0(match &v29 {
                                                    Spiral_builder::US2::US2_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v36: Spiral_builder::US2 =
                                                    if string("Critical") == v3.clone() {
                                                        Spiral_builder::US2::US2_0(
                                                            Spiral_builder::US0::US0_4,
                                                        )
                                                    } else {
                                                        Spiral_builder::US2::US2_1
                                                    };
                                                match &v36 {
                                                    Spiral_builder::US2::US2_0(v36_0_0) => {
                                                        Spiral_builder::US2::US2_0(match &v36 {
                                                            Spiral_builder::US2::US2_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        })
                                                    }
                                                    _ => Spiral_builder::US2::US2_1,
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                if Spiral_builder::method3(Spiral_builder::method5()) == string("True") {
                    Spiral_builder::US3::US3_0({
                        let _arg: DateTime = DateTime::now();
                        _arg.ticks()
                    })
                } else {
                    Spiral_builder::US3::US3_1
                },
            );
            let v295: Spiral_builder::US3 = _v1.1.clone();
            let v294: Spiral_builder::US2 = _v1.0.clone();
            (
                LrcPtr::new(Spiral_builder::Mut0 {
                    l0: MutCell::new(0_i64),
                }),
                LrcPtr::new(Spiral_builder::Mut1 {
                    l0: MutCell::new(Func1::new(move |v: string| Spiral_builder::closure5((), v))),
                }),
                LrcPtr::new(Spiral_builder::Mut2 {
                    l0: MutCell::new(true),
                }),
                LrcPtr::new(Spiral_builder::Mut3 {
                    l0: MutCell::new(match &v294 {
                        Spiral_builder::US2::US2_0(v294_0_0) => match &v294 {
                            Spiral_builder::US2::US2_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => v0_1,
                    }),
                }),
                match &v295 {
                    Spiral_builder::US3::US3_0(v295_0_0) => Some(match &v295 {
                        Spiral_builder::US3::US3_0(x) => x.clone(),
                        _ => unreachable!(),
                    }),
                    _ => None::<i64>,
                },
            )
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) {
            if Spiral_builder::State::trace_state().get().clone().is_none() {
                let patternInput: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = Spiral_builder::method1(Spiral_builder::US0::US0_0);
                Spiral_builder::State::trace_state().set(Some((
                    patternInput.0.clone(),
                    patternInput.1.clone(),
                    patternInput.2.clone(),
                    patternInput.3.clone(),
                    patternInput.4.clone(),
                )));
                ()
            };
        }
        pub fn closure7(v0_1: LrcPtr<Spiral_builder::Mut0>, unitVar: ()) {
            let v2: i64 = v0_1.l0.get().clone() + 1_i64;
            v0_1.l0.set(v2);
            ()
        }
        pub fn closure8(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US3>>>,
            v1_1: Option<Spiral_builder::US3>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US3>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure9(
            v0_1: Option<i64>,
            v1_1: Func1<Option<Spiral_builder::US3>, LrcPtr<MutCell<Option<Spiral_builder::US3>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US3>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US3>,
                    Some(v0_1_0_0) => {
                        let x: i64 = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US3::US3_0(x)
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method6() -> string {
            string("hh:mm:ss")
        }
        pub fn method7() -> string {
            string("HH:mm:ss")
        }
        pub fn method8() -> string {
            string("\u{001b}[0m")
        }
        pub fn method9() -> string {
            string("")
        }
        pub fn closure10(v0_1: LrcPtr<Spiral_builder::Mut4>, v1_1: string, unitVar: ()) {
            let v3: string = append(v0_1.l0.get().clone(), v1_1);
            v0_1.l0.set(v3);
            ()
        }
        pub fn closure11(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.main")
        }
        pub fn closure6(v0_1: Array<string>, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_blue;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("args")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v662: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v671: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v674: string = v626.l0.get().clone();
                let v713: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure11((), ()),
                            v674
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v713.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v713)
            }
        }
        pub fn closure12(unitVar: (), v0_1: &str) -> std::string::String {
            String::from(v0_1)
        }
        pub fn closure13(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US4>>>,
            v1_1: Option<Spiral_builder::US4>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US4>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure14(
            v0_1: Option<(std::string::String, clap::ArgMatches)>,
            v1_1: Func1<Option<Spiral_builder::US4>, LrcPtr<MutCell<Option<Spiral_builder::US4>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US4>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US4>,
                    Some(v0_1_0_0) => {
                        let x: (std::string::String, clap::ArgMatches) = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US4::US4_0(x.0.clone(), x.1.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method11() -> string {
            string("py-path")
        }
        pub fn closure15(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US5>>>,
            v1_1: Option<Spiral_builder::US5>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US5>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure16(
            v0_1: Option<std::string::String>,
            v1_1: Func1<Option<Spiral_builder::US5>, LrcPtr<MutCell<Option<Spiral_builder::US5>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US5>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US5>,
                    Some(v0_1_0_0) => {
                        let x: std::string::String = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US5::US5_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method12() -> string {
            string("env")
        }
        pub fn method13() -> string {
            string("deps")
        }
        pub fn closure17(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US9>>>,
            v1_1: Option<Spiral_builder::US9>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US9>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure18(
            v0_1: Option<Vec<std::string::String>>,
            v1_1: Func1<Option<Spiral_builder::US9>, LrcPtr<MutCell<Option<Spiral_builder::US9>>>>,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US9>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US9>,
                    Some(v0_1_0_0) => {
                        let x: Vec<std::string::String> = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US9::US9_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method14(v0_1: Vec<u8>) -> Vec<u8> {
            v0_1
        }
        pub fn method17(v0_1: string) -> string {
            v0_1
        }
        pub fn method16(v0_1: string, v1_1: string) -> (string, string) {
            (v1_1, Spiral_builder::method17(v0_1))
        }
        pub fn method15(v0_1: string, v1_1: string) -> string {
            let v4: &str = &*v0_1;
            let v6: std::string::String = String::from(v4);
            let v8: std::path::PathBuf = std::path::PathBuf::from(v6);
            let v10: &str = &*v1_1;
            let v12: std::string::String = String::from(v10);
            let v14: std::path::PathBuf = v8.join(v12);
            let v16: std::path::Display = v14.display();
            let v19: std::string::String = format!("{}", v16);
            fable_library_rust::String_::fromString(v19)
        }
        pub fn method19(v0_1: string) -> bool {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            if v7.clone().exists() {
                true
            } else {
                if v7.clone().is_dir() {
                    true
                } else {
                    v7.is_symlink()
                }
            }
        }
        pub fn method21(v0_1: string) -> Option<string> {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<std::path::PathBuf> = v7.parent().map(std::path::PathBuf::from);
            let v11: std::path::PathBuf = v9?;
            let v13: std::path::Display = v11.display();
            let v16: std::string::String = format!("{}", v13);
            let v85: Spiral_builder::US1 =
                Spiral_builder::US1::US1_0(fable_library_rust::String_::fromString(v16));
            match &v85 {
                Spiral_builder::US1::US1_0(v85_0_0) => Some(match &v85 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            }
        }
        pub fn closure19(unitVar: (), v0_1: string) -> Option<string> {
            Spiral_builder::method21(v0_1)
        }
        pub fn method20() -> Func1<string, Option<string>> {
            Func1::new(move |v: string| Spiral_builder::closure19((), v))
        }
        pub fn method22(v0_1: string, v1_1: string, v2: string) -> Spiral_builder::US12 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<string> = MutCell::new(v2.clone());
            '_method22: loop {
                break '_method22 (if Spiral_builder::method19(Spiral_builder::method15(
                    v2.get().clone(),
                    v0_1.get().clone(),
                )) {
                    Spiral_builder::US12::US12_0(v2.get().clone())
                } else {
                    let v7: Option<string> = (Spiral_builder::method20())(v2.get().clone());
                    let _v8: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                        refCell(None::<Spiral_builder::US1>);
                    let v13: () = {
                        Spiral_builder::closure4(
                            v7,
                            Func1::new({
                                let _v8 = _v8.clone();
                                move |v: Option<Spiral_builder::US1>| {
                                    Spiral_builder::closure3(_v8.clone(), v)
                                }
                            }),
                            (),
                        );
                        ()
                    };
                    let v28: Spiral_builder::US1 =
                        defaultValue(Spiral_builder::US1::US1_1, _v8.get().clone());
                    match &v28 {
                        Spiral_builder::US1::US1_0(v28_0_0) => {
                            let v0_1_temp: string = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: string = match &v28 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method22;
                        }
                        _ => Spiral_builder::US12::US12_1(sprintf!(
                            "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                            string("dir"),
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone()
                        )),
                    }
                });
            }
        }
        pub fn method18(v0_1: string, v1_1: string) -> Spiral_builder::US12 {
            if Spiral_builder::method19(Spiral_builder::method15(v1_1.clone(), v0_1.clone())) {
                Spiral_builder::US12::US12_0(v1_1.clone())
            } else {
                let v6: Option<string> = (Spiral_builder::method20())(v1_1.clone());
                let _v7: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                    refCell(None::<Spiral_builder::US1>);
                let v12: () = {
                    Spiral_builder::closure4(
                        v6,
                        Func1::new({
                            let _v7 = _v7.clone();
                            move |v: Option<Spiral_builder::US1>| {
                                Spiral_builder::closure3(_v7.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v27: Spiral_builder::US1 =
                    defaultValue(Spiral_builder::US1::US1_1, _v7.get().clone());
                match &v27 {
                    Spiral_builder::US1::US1_0(v27_0_0) => Spiral_builder::method22(
                        v0_1.clone(),
                        v1_1.clone(),
                        match &v27 {
                            Spiral_builder::US1::US1_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    _ => Spiral_builder::US12::US12_1(sprintf!(
                        "No parent for {} \'{}\' at \'{}\' (until \'{}\')",
                        string("dir"),
                        v0_1.clone(),
                        v1_1.clone(),
                        v1_1.clone()
                    )),
                }
            }
        }
        pub fn closure21(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.get_workspace_root")
        }
        pub fn closure20(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_yellow;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v668: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v671: string = v626.l0.get().clone();
                let v710: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure21((), ()),
                            v671
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v710.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v710)
            }
        }
        pub fn method23() -> string {
            let v2: Result<std::path::PathBuf, std::io::Error> = std::env::current_dir();
            let v4: std::path::PathBuf = v2.unwrap();
            let v6: std::path::Display = v4.display();
            let v9: std::string::String = format!("{}", v6);
            fable_library_rust::String_::fromString(v9)
        }
        pub fn method24(v0_1: string) -> string {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<&std::path::Path> = v7.parent();
            let v11: &std::path::Path = v9.unwrap();
            let v13: std::path::Display = v11.display();
            let v16: std::string::String = format!("{}", v13);
            fable_library_rust::String_::fromString(v16)
        }
        pub fn method27(v0_1: string) -> bool {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            if v7.clone().exists() {
                v7.is_file()
            } else {
                false
            }
        }
        pub fn method26(v0_1: string, v1_1: string) -> bool {
            if Spiral_builder::method27(v0_1.clone()) == false {
                false
            } else {
                let v8: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v0_1);
                let v31: Vec<u8> = Spiral_builder::method14(v8.unwrap());
                let v33: Result<std::string::String, std::string::FromUtf8Error> =
                    std::string::String::from_utf8(v31);
                let v35: std::string::String = v33.unwrap();
                v1_1 == fable_library_rust::String_::fromString(v35)
            }
        }
        pub fn method29(v0_1: string) -> string {
            v0_1
        }
        pub fn closure22(unitVar: (), v0_1: std::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method30() -> Func1<std::io::Error, std::string::String> {
            Func1::new(move |v: std::io::Error| Spiral_builder::closure22((), v))
        }
        pub fn closure23(unitVar: (), unitVar_1: ()) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_0
        }
        pub fn closure24(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US13 {
            Spiral_builder::US13::US13_1(v0_1)
        }
        pub fn closure26(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure25(v0_1: string, v1_1: std::string::String, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_red;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v627: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v634: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v643: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("dir")), ());
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v660: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v686: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v691: std::string::String = format!("{:#?}", v1_1);
                let v721: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v691)),
                        (),
                    );
                    ()
                };
                let v730: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v733: string = v627.l0.get().clone();
                let v772: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure26((), ()),
                            v733
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v772.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v772)
            }
        }
        pub fn closure28(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure27(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_black;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("dir")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v668: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v671: string = v626.l0.get().clone();
                let v710: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure28((), ()),
                            v671
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v710.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v710)
            }
        }
        pub fn method33(v0_1: string) -> string {
            v0_1
        }
        pub fn method32(v0_1: bool, v1_1: string) {
            let v3: string = Spiral_builder::method33(v1_1);
            if Spiral_builder::method19(v3.clone()) {
                if v0_1 {
                    std::fs::remove_dir_all(&*v3.clone()).unwrap();
                    ()
                } else {
                    std::fs::remove_dir(&*v3).unwrap();
                    ()
                };
            }
            ();
            ()
        }
        pub fn closure29(v0_1: string, unitVar: ()) {
            Spiral_builder::method32(true, v0_1);
        }
        pub fn method31(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure29(v0_1.clone(), ())
            })
        }
        pub fn method34(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure29(v0_1.clone(), ())
            })
        }
        pub fn closure31(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.create_dir")
        }
        pub fn closure30(v0_1: string, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_blue;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v627: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v634: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v643: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("dir")), ());
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v660: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("result")), ());
                    ()
                };
                let v686: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v694: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v703: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v706: string = v627.l0.get().clone();
                let v745: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure31((), ()),
                            v706
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v745.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v745)
            }
        }
        pub fn method37(v0_1: string) -> string {
            let v3: &str = &*v0_1;
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            let v9: Option<&std::ffi::OsStr> = v7.file_name();
            let v11: &std::ffi::OsStr = v9.unwrap();
            let v13: std::ffi::OsString = v11.to_os_string();
            let v15: Option<&str> = v13.to_str();
            let v17: &str = v15.unwrap();
            let v19: std::string::String = String::from(v17);
            fable_library_rust::String_::fromString(v19)
        }
        pub fn closure34(unitVar: (), unitVar_1: ()) -> string {
            string("file_system.delete_directory_async")
        }
        pub fn closure33(v0_1: string, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_blue;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: string = Spiral_builder::method37(v0_1);
                let v628: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v635: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v644: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v653: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v670: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v679: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("path")), ());
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v626), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v707: string = v628.l0.get().clone();
                let v746: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure34((), ()),
                            v707
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v746.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v746)
            }
        }
        pub fn method36(v0_1: string, v1_1: i64) -> Arc<Async<i64>> {
            defaultOf()
        }
        pub fn closure32(v0_1: string, unitVar: ()) {
            let v2: Arc<Async<i64>> = defaultOf();
            let v25: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn method35(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure32(v0_1.clone(), ())
            })
        }
        pub fn method38(v0_1: string) -> Func0<()> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Spiral_builder::closure32(v0_1.clone(), ())
            })
        }
        pub fn method28(v0_1: string) -> LrcPtr<dyn IDisposable> {
            let v2: string = Spiral_builder::method29(v0_1);
            let v4: Result<(), std::io::Error> = std::fs::create_dir_all(&*v2.clone());
            let v5 = Spiral_builder::method30();
            let v7: Result<(), std::string::String> = v4.map_err(|x| v5(x));
            let v10: Spiral_builder::US13 = match &v7 {
                Err(v7_1_0) => Spiral_builder::closure24((), v7_1_0.clone()),
                _ => Spiral_builder::closure23((), ()),
            };
            match &v10 {
                Spiral_builder::US13::US13_0 => {
                    let v13: () = {
                        Spiral_builder::closure27(v2.clone(), ());
                        ()
                    };
                    ()
                }
                Spiral_builder::US13::US13_1(v10_1_0) => {
                    let v749: () = {
                        Spiral_builder::closure25(
                            v2.clone(),
                            match &v10 {
                                Spiral_builder::US13::US13_1(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            (),
                        );
                        ()
                    };
                    ()
                }
            }
            {
                let v1544 = Spiral_builder::method31(v2.clone());
                interface_cast!(
                    Spiral_builder::Disposable::_ctor__3A5B6456(Func0::new({
                        let v1544 = v1544.clone();
                        move || v1544.clone()()
                    })),
                    Lrc<dyn IDisposable>,
                )
            }
        }
        pub fn method39(v0_1: string) -> string {
            v0_1
        }
        pub fn method25(v0_1: string, v1_1: string) {
            if Spiral_builder::method26(v0_1.clone(), v1_1.clone()) == false {
                let v4: string = Spiral_builder::method24(v0_1.clone());
                if Spiral_builder::method19(v4.clone()) == false {
                    let v7: LrcPtr<dyn IDisposable> = Spiral_builder::method28(v4);
                    ()
                }
                std::fs::write(&*v0_1, &*v1_1).unwrap();
                ();
                ()
            };
        }
        pub fn method41(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> string {
            v0_1
        }
        pub fn method43(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut5>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn closure37(
            v0_1: char,
            v1_1: LrcPtr<Spiral_builder::UH0>,
        ) -> LrcPtr<Spiral_builder::UH0> {
            LrcPtr::new(Spiral_builder::UH0::UH0_1(v0_1, v1_1))
        }
        pub fn closure36(
            unitVar: (),
            v0_1: char,
        ) -> Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Spiral_builder::UH0>| Spiral_builder::closure37(v0_1, v)
            })
        }
        pub fn method44(
        ) -> Func1<char, Func1<LrcPtr<Spiral_builder::UH0>, LrcPtr<Spiral_builder::UH0>>> {
            Func1::new(move |v: char| Spiral_builder::closure36((), v))
        }
        pub fn method45(
            v0_1: LrcPtr<Spiral_builder::UH0>,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
        ) -> (LrcPtr<StringBuilder>, i32, i32) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH0>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            '_method45: loop {
                break '_method45 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH0::UH0_0 => {
                        (v1_1.get().clone(), v2.get().clone(), v3.get().clone())
                    }
                    Spiral_builder::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: char = match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH0::UH0_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v6: bool = '\n' == v4;
                        let patternInput: (i32, i32) = if v6 {
                            (v2.get().clone() + 1_i32, 1_i32)
                        } else {
                            (v2.get().clone(), v3.get().clone() + 1_i32)
                        };
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH0> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH0::UH0_1(_, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            let v1_1_temp: LrcPtr<StringBuilder> = if v6 {
                                let v12: LrcPtr<StringBuilder> = v1_1.get().clone().Clear();
                                v1_1.get().clone()
                            } else {
                                let v18: LrcPtr<StringBuilder> = {
                                    let value: string = ofChar(v4);
                                    v1_1.get().clone().Append_Z721C83C5(value)
                                };
                                v1_1.get().clone()
                            };
                            let v2_temp: i32 = patternInput.0.clone();
                            let v3_temp: i32 = patternInput.1.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method45;
                        }
                    }
                });
            }
        }
        pub fn closure35(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\"' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method43(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method45(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method44())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\"',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn closure38(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US15 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\'' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method43(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method45(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method44())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\'',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            }
        }
        pub fn method46(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v2.clone());
            '_method46: loop {
                break '_method46 (match v2.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v2_1_0, v2_1_1) => {
                        let v7: Spiral_builder::US15 = (match v2.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            1_i32,
                            1_i32,
                        ));
                        match &v7 {
                            Spiral_builder::US15::US15_0(
                                v7_0_0,
                                v7_0_1,
                                v7_0_2,
                                v7_0_3,
                                v7_0_4,
                            ) => v7.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v2.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                continue '_method46;
                            }
                        }
                    }
                });
            }
        }
        pub fn method47(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method47: loop {
                break '_method47 (if v1_1.get().clone() >= 2_i64 {
                    false
                } else {
                    let v11: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            Spiral_builder::US17::US17_1
                        }
                    };
                    if v0_1.get().clone()
                        == match &v11 {
                            Spiral_builder::US17::US17_0(v11_0_0) => match &v11 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method47;
                    }
                });
            }
        }
        pub fn method48(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method48: loop {
                break '_method48 ({
                    let v70: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v19: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v26: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method47(v19, 0_i64) == false {
                            let v31: string = ofChar(v19);
                            let v34: i32 = length(v31.clone());
                            let v35: Array<char> = new_init(&'\u{0000}', v34);
                            let v36: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method43(v34, v36.clone()) {
                                let v38: i32 = v36.l0.get().clone();
                                let v39: char = getCharAt(v31.clone(), v38);
                                v35.get_mut()[v38 as usize] = v39;
                                {
                                    let v40: i32 = v38 + 1_i32;
                                    v36.l0.set(v40);
                                    ()
                                }
                            }
                            {
                                let v41: List<char> = ofArray(v35.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method45(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method44())(b0)(b1)
                                                },
                                            ),
                                            v41,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v19,
                                    v26,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v19,
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v82: Spiral_builder::US15 = match &v70 {
                        Spiral_builder::US15::US15_0(
                            v70_0_0,
                            v70_0_1,
                            v70_0_2,
                            v70_0_3,
                            v70_0_4,
                        ) => {
                            let v71: char = v70_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v71 { '/' } else { v71 },
                                v70_0_1.clone(),
                                v70_0_2.clone(),
                                v70_0_3.clone(),
                                v70_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v70_1_0) => {
                            Spiral_builder::US15::US15_1(v70_1_0.clone())
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method48;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method49(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH1>,
        ) -> Spiral_builder::US15 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH1>> = MutCell::new(v4.clone());
            '_method49: loop {
                break '_method49 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH1::UH1_0 => {
                        Spiral_builder::US15::US15_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH1::UH1_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US15 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH1::UH1_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US15::US15_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH1> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH1::UH1_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method49;
                            }
                        }
                    }
                });
            }
        }
        pub fn method50(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method50: loop {
                break '_method50 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\"')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('\'')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0(' ')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method50;
                    }
                });
            }
        }
        pub fn method51(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method51: loop {
                break '_method51 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method50(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method43(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method45(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method44())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v88: Spiral_builder::US15 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => {
                            let v77: char = v76_0_0.clone();
                            Spiral_builder::US15::US15_0(
                                if '\\' == v77 { '/' } else { v77 },
                                v76_0_1.clone(),
                                v76_0_2.clone(),
                                v76_0_3.clone(),
                                v76_0_4.clone(),
                            )
                        }
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US15::US15_1(v76_1_0.clone())
                        }
                    };
                    match &v88 {
                        Spiral_builder::US15::US15_0(
                            v88_0_0,
                            v88_0_1,
                            v88_0_2,
                            v88_0_3,
                            v88_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v88_0_0.clone()));
                            let v1_1_temp: string = v88_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v88_0_2.clone();
                            let v3_temp: i32 = v88_0_3.clone();
                            let v4_temp: i32 = v88_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method51;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method52(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method52: loop {
                break '_method52 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method52;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method53(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method53: loop {
                break '_method53 ({
                    let v42: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v8: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v15: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        let v17: string = ofChar(v8);
                        let v20: i32 = length(v17.clone());
                        let v21: Array<char> = new_init(&'\u{0000}', v20);
                        let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method43(v20, v22.clone()) {
                            let v24: i32 = v22.l0.get().clone();
                            let v25: char = getCharAt(v17.clone(), v24);
                            v21.get_mut()[v24 as usize] = v25;
                            {
                                let v26: i32 = v24 + 1_i32;
                                v22.l0.set(v26);
                                ()
                            }
                        }
                        {
                            let v27: List<char> = ofArray(v21.clone());
                            let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method45(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method44())(b0)(b1)
                                            },
                                        ),
                                        v27,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v2.get().clone(),
                                    v3.get().clone(),
                                    v4.get().clone(),
                                );
                            Spiral_builder::US15::US15_0(
                                v8,
                                v15,
                                patternInput.0.clone(),
                                patternInput.1.clone(),
                                patternInput.2.clone(),
                            )
                        }
                    };
                    match &v42 {
                        Spiral_builder::US15::US15_0(
                            v42_0_0,
                            v42_0_1,
                            v42_0_2,
                            v42_0_3,
                            v42_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v42_0_0.clone()));
                            let v1_1_temp: string = v42_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v42_0_2.clone();
                            let v3_temp: i32 = v42_0_3.clone();
                            let v4_temp: i32 = v42_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method53;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method42(v0_1: string) -> Spiral_builder::US14 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v7: string = defaultValue(
                    string(""),
                    match &_v0.get().clone() {
                        None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                        Some(_v0_0_0) => _v0_0_0.clone(),
                    },
                );
                let v11: LrcPtr<StringBuilder> = StringBuilder::_ctor__Z721C83C5(string(""));
                fn v12(
                    arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure35((), arg10_0040)
                }
                fn v13(
                    arg10_0040_1: (string, LrcPtr<StringBuilder>, i32, i32),
                ) -> Spiral_builder::US15 {
                    Spiral_builder::closure38((), arg10_0040_1)
                }
                let v17: Spiral_builder::US15 = Spiral_builder::method46(
                    v7.clone(),
                    v11.clone(),
                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                        Func1::from(v12),
                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                            Func1::from(v13),
                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                        )),
                    )),
                );
                let v153: Spiral_builder::US16 = match &v17 {
                    Spiral_builder::US15::US15_0(v17_0_0, v17_0_1, v17_0_2, v17_0_3, v17_0_4) => {
                        let v22: i32 = v17_0_4.clone();
                        let v21: i32 = v17_0_3.clone();
                        let v20: LrcPtr<StringBuilder> = v17_0_2.clone();
                        let v19: string = v17_0_1.clone();
                        let v88: Spiral_builder::US15 = if string("") == v19.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'']))),
                                (v20.clone(), v21, v22)
                            ))
                        } else {
                            let v37: char = getCharAt(v19.clone(), 0_i32);
                            let v44: string =
                                getSlice(v19.clone(), Some(1_i32), Some(length(v19.clone())));
                            if Spiral_builder::method47(v37, 0_i64) == false {
                                let v49: string = ofChar(v37);
                                let v52: i32 = length(v49.clone());
                                let v53: Array<char> = new_init(&'\u{0000}', v52);
                                let v54: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method43(v52, v54.clone()) {
                                    let v56: i32 = v54.l0.get().clone();
                                    let v57: char = getCharAt(v49.clone(), v56);
                                    v53.get_mut()[v56 as usize] = v57;
                                    {
                                        let v58: i32 = v56 + 1_i32;
                                        v54.l0.set(v58);
                                        ()
                                    }
                                }
                                {
                                    let v59: List<char> = ofArray(v53.clone());
                                    let patternInput:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method45(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method44())(b0)(b1)),
                                                                                  v59,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v20.clone(),
                                                                         v21,
                                                                         v22);
                                    Spiral_builder::US15::US15_0(
                                        v37,
                                        v44,
                                        patternInput.0.clone(),
                                        patternInput.1.clone(),
                                        patternInput.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v37,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'']))),
                                                                              (v20.clone(),
                                                                               v21,
                                                                               v22)))
                            }
                        };
                        let v100: Spiral_builder::US15 = match &v88 {
                            Spiral_builder::US15::US15_0(
                                v88_0_0,
                                v88_0_1,
                                v88_0_2,
                                v88_0_3,
                                v88_0_4,
                            ) => {
                                let v89: char = v88_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v89 { '/' } else { v89 },
                                    v88_0_1.clone(),
                                    v88_0_2.clone(),
                                    v88_0_3.clone(),
                                    v88_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v88_1_0) => {
                                Spiral_builder::US15::US15_1(v88_1_0.clone())
                            }
                        };
                        let v114: Spiral_builder::US16 = match &v100 {
                            Spiral_builder::US15::US15_0(
                                v100_0_0,
                                v100_0_1,
                                v100_0_2,
                                v100_0_3,
                                v100_0_4,
                            ) => Spiral_builder::method48(
                                ofChar(v100_0_0.clone()),
                                v100_0_1.clone(),
                                v100_0_2.clone(),
                                v100_0_3.clone(),
                                v100_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v100_1_0) => {
                                Spiral_builder::US16::US16_1(v100_1_0.clone())
                            }
                        };
                        let v124: Spiral_builder::US16 = match &v114 {
                            Spiral_builder::US16::US16_0(
                                v114_0_0,
                                v114_0_1,
                                v114_0_2,
                                v114_0_3,
                                v114_0_4,
                            ) => Spiral_builder::US16::US16_0(
                                v114_0_0.clone(),
                                v114_0_1.clone(),
                                v114_0_2.clone(),
                                v114_0_3.clone(),
                                v114_0_4.clone(),
                            ),
                            _ => Spiral_builder::US16::US16_0(
                                string(""),
                                v19.clone(),
                                v20.clone(),
                                v21,
                                v22,
                            ),
                        };
                        match &v124 {
                            Spiral_builder::US16::US16_0(
                                v124_0_0,
                                v124_0_1,
                                v124_0_2,
                                v124_0_3,
                                v124_0_4,
                            ) => {
                                let v129: i32 = v124_0_4.clone();
                                let v128: i32 = v124_0_3.clone();
                                let v127: LrcPtr<StringBuilder> = v124_0_2.clone();
                                let v126: string = v124_0_1.clone();
                                let v133: Spiral_builder::US15 = Spiral_builder::method49(
                                    v126.clone(),
                                    v127.clone(),
                                    v128,
                                    v129,
                                    LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                        Func1::from(v12),
                                        LrcPtr::new(Spiral_builder::UH1::UH1_1(
                                            Func1::from(v13),
                                            LrcPtr::new(Spiral_builder::UH1::UH1_0),
                                        )),
                                    )),
                                );
                                match &v133 {
                                        Spiral_builder::US15::US15_0(v133_0_0,
                                                                     v133_0_1,
                                                                     v133_0_2,
                                                                     v133_0_3,
                                                                     v133_0_4)
                                        =>
                                        Spiral_builder::US16::US16_0(v124_0_0.clone(),
                                                                     v133_0_1.clone(),
                                                                     v133_0_2.clone(),
                                                                     v133_0_3.clone(),
                                                                     v133_0_4.clone()),
                                        Spiral_builder::US15::US15_1(v133_1_0)
                                        =>
                                        Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                              v133_1_0.clone(),
                                                                              (v7.clone(),
                                                                               v11.clone(),
                                                                               1_i32,
                                                                               1_i32),
                                                                              (v19,
                                                                               v20,
                                                                               v21,
                                                                               v22),
                                                                              (v126,
                                                                               v127,
                                                                               v128,
                                                                               v129))),
                                    }
                            }
                            _ => Spiral_builder::US16::US16_1(string("between / expected content")),
                        }
                    }
                    Spiral_builder::US15::US15_1(v17_1_0) => {
                        Spiral_builder::US16::US16_1(v17_1_0.clone())
                    }
                };
                let v303: Spiral_builder::US16 = match &v153 {
                    Spiral_builder::US16::US16_0(
                        v153_0_0,
                        v153_0_1,
                        v153_0_2,
                        v153_0_3,
                        v153_0_4,
                    ) => v153.clone(),
                    _ => {
                        let v233: Spiral_builder::US15 = if string("") == v7.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                                toArray(ofArray(new_array(&['\"', '\'', ' ']))),
                                (v11.clone(), 1_i32, 1_i32)
                            ))
                        } else {
                            let v177: char = getCharAt(v7.clone(), 0_i32);
                            let v184: string =
                                getSlice(v7.clone(), Some(1_i32), Some(length(v7.clone())));
                            if Spiral_builder::method50(v177, 0_i64) == false {
                                let v189: string = ofChar(v177);
                                let v192: i32 = length(v189.clone());
                                let v193: Array<char> = new_init(&'\u{0000}', v192);
                                let v194: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method43(v192, v194.clone()) {
                                    let v196: i32 = v194.l0.get().clone();
                                    let v197: char = getCharAt(v189.clone(), v196);
                                    v193.get_mut()[v196 as usize] = v197;
                                    {
                                        let v198: i32 = v196 + 1_i32;
                                        v194.l0.set(v198);
                                        ()
                                    }
                                }
                                {
                                    let v199: List<char> = ofArray(v193.clone());
                                    let patternInput_1:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method45(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method44())(b0)(b1)),
                                                                                  v199,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v11.clone(),
                                                                         1_i32,
                                                                         1_i32);
                                    Spiral_builder::US15::US15_0(
                                        v177,
                                        v184,
                                        patternInput_1.0.clone(),
                                        patternInput_1.1.clone(),
                                        patternInput_1.2.clone(),
                                    )
                                }
                            } else {
                                Spiral_builder::US15::US15_1(sprintf!("parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                                                              v177,
                                                                              toArray(ofArray(new_array(&['\"',
                                                                                                          '\'',
                                                                                                          ' ']))),
                                                                              (v11.clone(),
                                                                               1_i32,
                                                                               1_i32)))
                            }
                        };
                        let v245: Spiral_builder::US15 = match &v233 {
                            Spiral_builder::US15::US15_0(
                                v233_0_0,
                                v233_0_1,
                                v233_0_2,
                                v233_0_3,
                                v233_0_4,
                            ) => {
                                let v234: char = v233_0_0.clone();
                                Spiral_builder::US15::US15_0(
                                    if '\\' == v234 { '/' } else { v234 },
                                    v233_0_1.clone(),
                                    v233_0_2.clone(),
                                    v233_0_3.clone(),
                                    v233_0_4.clone(),
                                )
                            }
                            Spiral_builder::US15::US15_1(v233_1_0) => {
                                Spiral_builder::US15::US15_1(v233_1_0.clone())
                            }
                        };
                        let v259: Spiral_builder::US16 = match &v245 {
                            Spiral_builder::US15::US15_0(
                                v245_0_0,
                                v245_0_1,
                                v245_0_2,
                                v245_0_3,
                                v245_0_4,
                            ) => Spiral_builder::method51(
                                ofChar(v245_0_0.clone()),
                                v245_0_1.clone(),
                                v245_0_2.clone(),
                                v245_0_3.clone(),
                                v245_0_4.clone(),
                            ),
                            Spiral_builder::US15::US15_1(v245_1_0) => {
                                Spiral_builder::US16::US16_1(v245_1_0.clone())
                            }
                        };
                        match &v259 {
                            Spiral_builder::US16::US16_0(
                                v259_0_0,
                                v259_0_1,
                                v259_0_2,
                                v259_0_3,
                                v259_0_4,
                            ) => v259.clone(),
                            _ => {
                                let v271: Spiral_builder::US18 = if length(v7.clone()) == 0_i32 {
                                    Spiral_builder::US18::US18_0(
                                        v7.clone(),
                                        v11.clone(),
                                        1_i32,
                                        1_i32,
                                    )
                                } else {
                                    Spiral_builder::US18::US18_1(sprintf!(
                                        "parsing.eof / expected end of input / input: {:?}",
                                        v7.clone()
                                    ))
                                };
                                let v280: Spiral_builder::US16 = match &v271 {
                                    Spiral_builder::US18::US18_0(
                                        v271_0_0,
                                        v271_0_1,
                                        v271_0_2,
                                        v271_0_3,
                                    ) => Spiral_builder::US16::US16_0(
                                        string(""),
                                        v271_0_0.clone(),
                                        v271_0_1.clone(),
                                        v271_0_2.clone(),
                                        v271_0_3.clone(),
                                    ),
                                    Spiral_builder::US18::US18_1(v271_1_0) => {
                                        Spiral_builder::US16::US16_1(v271_1_0.clone())
                                    }
                                };
                                match &v280 {
                                    Spiral_builder::US16::US16_0(
                                        v280_0_0,
                                        v280_0_1,
                                        v280_0_2,
                                        v280_0_3,
                                        v280_0_4,
                                    ) => {
                                        let v282: string = v280_0_1.clone();
                                        Spiral_builder::US16::US16_0(
                                            v280_0_0.clone(),
                                            getSlice(
                                                v282.clone(),
                                                Some(Spiral_builder::method52(v282.clone(), 0_i32)),
                                                Some(length(v282)),
                                            ),
                                            v280_0_2.clone(),
                                            v280_0_3.clone(),
                                            v280_0_4.clone(),
                                        )
                                    }
                                    Spiral_builder::US16::US16_1(v280_1_0) => {
                                        Spiral_builder::US16::US16_1(v280_1_0.clone())
                                    }
                                }
                            }
                        }
                    }
                };
                let v471: Spiral_builder::US19 = match &v303 {
                    Spiral_builder::US16::US16_0(
                        v303_0_0,
                        v303_0_1,
                        v303_0_2,
                        v303_0_3,
                        v303_0_4,
                    ) => {
                        let v308: i32 = v303_0_4.clone();
                        let v307: i32 = v303_0_3.clone();
                        let v306: LrcPtr<StringBuilder> = v303_0_2.clone();
                        let v305: string = v303_0_1.clone();
                        let v372: Spiral_builder::US15 = if string("") == v305.clone() {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.p_char / unexpected end of input / s: {:?}",
                                (v306.clone(), v307, v308)
                            ))
                        } else {
                            let v312: char = getCharAt(v305.clone(), 0_i32);
                            if v312 == ' ' {
                                let v320: string =
                                    getSlice(v305.clone(), Some(1_i32), Some(length(v305.clone())));
                                let v322: string = ofChar(v312);
                                let v325: i32 = length(v322.clone());
                                let v326: Array<char> = new_init(&'\u{0000}', v325);
                                let v327: LrcPtr<Spiral_builder::Mut5> =
                                    LrcPtr::new(Spiral_builder::Mut5 {
                                        l0: MutCell::new(0_i32),
                                    });
                                while Spiral_builder::method43(v325, v327.clone()) {
                                    let v329: i32 = v327.l0.get().clone();
                                    let v330: char = getCharAt(v322.clone(), v329);
                                    v326.get_mut()[v329 as usize] = v330;
                                    {
                                        let v331: i32 = v329 + 1_i32;
                                        v327.l0.set(v331);
                                        ()
                                    }
                                }
                                {
                                    let v332: List<char> = ofArray(v326.clone());
                                    let patternInput_2:
                                                    (LrcPtr<StringBuilder>,
                                                     i32, i32) =
                                                Spiral_builder::method45(foldBack(Func2::new(move
                                                                                                 |b0:
                                                                                                      char,
                                                                                                  b1:
                                                                                                      LrcPtr<Spiral_builder::UH0>|
                                                                                                 (Spiral_builder::method44())(b0)(b1)),
                                                                                  v332,
                                                                                  LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                         v306.clone(),
                                                                         v307,
                                                                         v308);
                                    Spiral_builder::US15::US15_0(
                                        v312,
                                        v320,
                                        patternInput_2.0.clone(),
                                        patternInput_2.1.clone(),
                                        patternInput_2.2.clone(),
                                    )
                                }
                            } else {
                                let v348: i32 = length(v305.clone());
                                let v351: i32 = indexOf(v305.clone(), string("\n")) - 1_i32;
                                Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                              sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                       ' ',
                                                                                       v307,
                                                                                       v308,
                                                                                       v306.clone(),
                                                                                       getSlice(v305.clone(),
                                                                                                Some(0_i32),
                                                                                                Some(if -2_i32
                                                                                                            ==
                                                                                                            v351
                                                                                                        {
                                                                                                         v348
                                                                                                     } else {
                                                                                                         v351
                                                                                                     }))),
                                                                              append(replicate(v308
                                                                                                   -
                                                                                                   1_i32,
                                                                                               string(" ")),
                                                                                     string("^"))))
                            }
                        };
                        let v384: Spiral_builder::US20 = match &v372 {
                            Spiral_builder::US15::US15_0(
                                v372_0_0,
                                v372_0_1,
                                v372_0_2,
                                v372_0_3,
                                v372_0_4,
                            ) => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_0(v372_0_0.clone()),
                                v372_0_1.clone(),
                                v372_0_2.clone(),
                                v372_0_3.clone(),
                                v372_0_4.clone(),
                            ),
                            _ => Spiral_builder::US20::US20_0(
                                Spiral_builder::US17::US17_1,
                                v305.clone(),
                                v306.clone(),
                                v307,
                                v308,
                            ),
                        };
                        let v445: Spiral_builder::US16 = match &v384 {
                            Spiral_builder::US20::US20_0(
                                v384_0_0,
                                v384_0_1,
                                v384_0_2,
                                v384_0_3,
                                v384_0_4,
                            ) => {
                                let v389: i32 = v384_0_4.clone();
                                let v388: i32 = v384_0_3.clone();
                                let v387: LrcPtr<StringBuilder> = v384_0_2.clone();
                                let v386: string = v384_0_1.clone();
                                let v427: Spiral_builder::US15 = if string("") == v386.clone() {
                                    Spiral_builder::US15::US15_1(sprintf!(
                                        "parsing.any_char / unexpected end of input / s: {:?}",
                                        (v387.clone(), v388, v389)
                                    ))
                                } else {
                                    let v393: char = getCharAt(v386.clone(), 0_i32);
                                    let v400: string =
                                        getSlice(v386.clone(), Some(1_i32), Some(length(v386)));
                                    let v402: string = ofChar(v393);
                                    let v405: i32 = length(v402.clone());
                                    let v406: Array<char> = new_init(&'\u{0000}', v405);
                                    let v407: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method43(v405, v407.clone()) {
                                        let v409: i32 = v407.l0.get().clone();
                                        let v410: char = getCharAt(v402.clone(), v409);
                                        v406.get_mut()[v409 as usize] = v410;
                                        {
                                            let v411: i32 = v409 + 1_i32;
                                            v407.l0.set(v411);
                                            ()
                                        }
                                    }
                                    {
                                        let v412: List<char> = ofArray(v406.clone());
                                        let patternInput_3:
                                                            (LrcPtr<StringBuilder>,
                                                             i32, i32) =
                                                        Spiral_builder::method45(foldBack(Func2::new(move
                                                                                                         |b0:
                                                                                                              char,
                                                                                                          b1:
                                                                                                              LrcPtr<Spiral_builder::UH0>|
                                                                                                         (Spiral_builder::method44())(b0)(b1)),
                                                                                          v412,
                                                                                          LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                 v387,
                                                                                 v388,
                                                                                 v389);
                                        Spiral_builder::US15::US15_0(
                                            v393,
                                            v400,
                                            patternInput_3.0.clone(),
                                            patternInput_3.1.clone(),
                                            patternInput_3.2.clone(),
                                        )
                                    }
                                };
                                match &v427 {
                                    Spiral_builder::US15::US15_0(
                                        v427_0_0,
                                        v427_0_1,
                                        v427_0_2,
                                        v427_0_3,
                                        v427_0_4,
                                    ) => Spiral_builder::method53(
                                        ofChar(v427_0_0.clone()),
                                        v427_0_1.clone(),
                                        v427_0_2.clone(),
                                        v427_0_3.clone(),
                                        v427_0_4.clone(),
                                    ),
                                    Spiral_builder::US15::US15_1(v427_1_0) => {
                                        Spiral_builder::US16::US16_1(v427_1_0.clone())
                                    }
                                }
                            }
                            Spiral_builder::US20::US20_1(v384_1_0) => {
                                Spiral_builder::US16::US16_1(v384_1_0.clone())
                            }
                        };
                        let v457: Spiral_builder::US21 = match &v445 {
                            Spiral_builder::US16::US16_0(
                                v445_0_0,
                                v445_0_1,
                                v445_0_2,
                                v445_0_3,
                                v445_0_4,
                            ) => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_0(v445_0_0.clone()),
                                v445_0_1.clone(),
                                v445_0_2.clone(),
                                v445_0_3.clone(),
                                v445_0_4.clone(),
                            ),
                            _ => Spiral_builder::US21::US21_0(
                                Spiral_builder::US1::US1_1,
                                v305,
                                v306,
                                v307,
                                v308,
                            ),
                        };
                        match &v457 {
                            Spiral_builder::US21::US21_0(
                                v457_0_0,
                                v457_0_1,
                                v457_0_2,
                                v457_0_3,
                                v457_0_4,
                            ) => Spiral_builder::US19::US19_0(
                                v303_0_0.clone(),
                                v457_0_0.clone(),
                                v457_0_1.clone(),
                                v457_0_2.clone(),
                                v457_0_3.clone(),
                                v457_0_4.clone(),
                            ),
                            Spiral_builder::US21::US21_1(v457_1_0) => {
                                Spiral_builder::US19::US19_1(v457_1_0.clone())
                            }
                        }
                    }
                    Spiral_builder::US16::US16_1(v303_1_0) => {
                        Spiral_builder::US19::US19_1(v303_1_0.clone())
                    }
                };
                match &v471 {
                    Spiral_builder::US19::US19_0(
                        v471_0_0,
                        v471_0_1,
                        v471_0_2,
                        v471_0_3,
                        v471_0_4,
                        v471_0_5,
                    ) => Spiral_builder::US14::US14_0(v471_0_0.clone(), v471_0_1.clone()),
                    Spiral_builder::US19::US19_1(v471_1_0) => {
                        Spiral_builder::US14::US14_1(v471_1_0.clone())
                    }
                }
            }
        }
        pub fn method56(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method56: loop {
                break '_method56 (if v1_1.get().clone() >= 4_i64 {
                    false
                } else {
                    let v19: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                if v11 == 0_i64 {
                                    Spiral_builder::US17::US17_0(' ')
                                } else {
                                    let v14: i64 = v11 - 1_i64;
                                    Spiral_builder::US17::US17_1
                                }
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v19 {
                            Spiral_builder::US17::US17_0(v19_0_0) => match &v19 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method56;
                    }
                });
            }
        }
        pub fn method57(
            v0_1: string,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method57: loop {
                break '_method57 ({
                    let v82: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method56(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method43(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method45(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method44())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => {
                            let v0_1_temp: string =
                                append(v0_1.get().clone(), ofChar(v82_0_0.clone()));
                            let v1_1_temp: string = v82_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v82_0_2.clone();
                            let v3_temp: i32 = v82_0_3.clone();
                            let v4_temp: i32 = v82_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method57;
                        }
                        _ => Spiral_builder::US16::US16_0(
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method59(v0_1: char, v1_1: i64) -> bool {
            let v0_1: MutCell<char> = MutCell::new(v0_1);
            let v1_1: MutCell<i64> = MutCell::new(v1_1);
            '_method59: loop {
                break '_method59 (if v1_1.get().clone() >= 3_i64 {
                    false
                } else {
                    let v15: Spiral_builder::US17 = if v1_1.get().clone() == 0_i64 {
                        Spiral_builder::US17::US17_0('\\')
                    } else {
                        let v5: i64 = v1_1.get().clone() - 1_i64;
                        if v5 == 0_i64 {
                            Spiral_builder::US17::US17_0('`')
                        } else {
                            let v8: i64 = v5 - 1_i64;
                            if v8 == 0_i64 {
                                Spiral_builder::US17::US17_0('\"')
                            } else {
                                let v11: i64 = v8 - 1_i64;
                                Spiral_builder::US17::US17_1
                            }
                        }
                    };
                    if v0_1.get().clone()
                        == match &v15 {
                            Spiral_builder::US17::US17_0(v15_0_0) => match &v15 {
                                Spiral_builder::US17::US17_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        }
                    {
                        true
                    } else {
                        let v0_1_temp: char = v0_1.get().clone();
                        let v1_1_temp: i64 = v1_1.get().clone() + 1_i64;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method59;
                    }
                });
            }
        }
        pub fn closure39(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '\\' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method43(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method45(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method44())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '\\',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method43(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method45(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method44())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '\\', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn closure40(
            unitVar: (),
            _arg: (string, LrcPtr<StringBuilder>, i32, i32),
        ) -> Spiral_builder::US16 {
            let v3: i32 = _arg.3.clone();
            let v2: i32 = _arg.2.clone();
            let v1_1: LrcPtr<StringBuilder> = _arg.1.clone();
            let v0_1: string = _arg.0.clone();
            let v67: Spiral_builder::US15 = if string("") == v0_1.clone() {
                Spiral_builder::US15::US15_1(sprintf!(
                    "parsing.p_char / unexpected end of input / s: {:?}",
                    (v1_1.clone(), v2, v3)
                ))
            } else {
                let v7: char = getCharAt(v0_1.clone(), 0_i32);
                if v7 == '`' {
                    let v15: string =
                        getSlice(v0_1.clone(), Some(1_i32), Some(length(v0_1.clone())));
                    let v17: string = ofChar(v7);
                    let v20: i32 = length(v17.clone());
                    let v21: Array<char> = new_init(&'\u{0000}', v20);
                    let v22: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                        l0: MutCell::new(0_i32),
                    });
                    while Spiral_builder::method43(v20, v22.clone()) {
                        let v24: i32 = v22.l0.get().clone();
                        let v25: char = getCharAt(v17.clone(), v24);
                        v21.get_mut()[v24 as usize] = v25;
                        {
                            let v26: i32 = v24 + 1_i32;
                            v22.l0.set(v26);
                            ()
                        }
                    }
                    {
                        let v27: List<char> = ofArray(v21.clone());
                        let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                            Spiral_builder::method45(
                                foldBack(
                                    Func2::new(move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                        (Spiral_builder::method44())(b0)(b1)
                                    }),
                                    v27,
                                    LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                ),
                                v1_1.clone(),
                                v2,
                                v3,
                            );
                        Spiral_builder::US15::US15_0(
                            v7,
                            v15,
                            patternInput.0.clone(),
                            patternInput.1.clone(),
                            patternInput.2.clone(),
                        )
                    }
                } else {
                    let v43: i32 = length(v0_1.clone());
                    let v46: i32 = indexOf(v0_1.clone(), string("\n")) - 1_i32;
                    Spiral_builder::US15::US15_1(sprintf!(
                        "{}\n{}\n",
                        sprintf!(
                            "parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                            '`',
                            v2,
                            v3,
                            v1_1,
                            getSlice(
                                v0_1,
                                Some(0_i32),
                                Some(if -2_i32 == v46 { v43 } else { v46 })
                            )
                        ),
                        append(replicate(v3 - 1_i32, string(" ")), string("^"))
                    ))
                }
            };
            let v114: Spiral_builder::US15 = match &v67 {
                Spiral_builder::US15::US15_0(v67_0_0, v67_0_1, v67_0_2, v67_0_3, v67_0_4) => {
                    let v72: i32 = v67_0_4.clone();
                    let v71: i32 = v67_0_3.clone();
                    let v70: LrcPtr<StringBuilder> = v67_0_2.clone();
                    let v69: string = v67_0_1.clone();
                    if string("") == v69.clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.any_char / unexpected end of input / s: {:?}",
                            (v70.clone(), v71, v72)
                        ))
                    } else {
                        let v76: char = getCharAt(v69.clone(), 0_i32);
                        let v83: string = getSlice(v69.clone(), Some(1_i32), Some(length(v69)));
                        let v85: string = ofChar(v76);
                        let v88: i32 = length(v85.clone());
                        let v89: Array<char> = new_init(&'\u{0000}', v88);
                        let v90: LrcPtr<Spiral_builder::Mut5> = LrcPtr::new(Spiral_builder::Mut5 {
                            l0: MutCell::new(0_i32),
                        });
                        while Spiral_builder::method43(v88, v90.clone()) {
                            let v92: i32 = v90.l0.get().clone();
                            let v93: char = getCharAt(v85.clone(), v92);
                            v89.get_mut()[v92 as usize] = v93;
                            {
                                let v94: i32 = v92 + 1_i32;
                                v90.l0.set(v94);
                                ()
                            }
                        }
                        {
                            let v95: List<char> = ofArray(v89.clone());
                            let patternInput_1: (LrcPtr<StringBuilder>, i32, i32) =
                                Spiral_builder::method45(
                                    foldBack(
                                        Func2::new(
                                            move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                (Spiral_builder::method44())(b0)(b1)
                                            },
                                        ),
                                        v95,
                                        LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                    ),
                                    v70,
                                    v71,
                                    v72,
                                );
                            Spiral_builder::US15::US15_0(
                                v76,
                                v83,
                                patternInput_1.0.clone(),
                                patternInput_1.1.clone(),
                                patternInput_1.2.clone(),
                            )
                        }
                    }
                }
                Spiral_builder::US15::US15_1(v67_1_0) => {
                    Spiral_builder::US15::US15_1(v67_1_0.clone())
                }
            };
            match &v114 {
                Spiral_builder::US15::US15_0(v114_0_0, v114_0_1, v114_0_2, v114_0_3, v114_0_4) => {
                    Spiral_builder::US16::US16_0(
                        sprintf!("{}{}", '`', v114_0_0.clone()),
                        v114_0_1.clone(),
                        v114_0_2.clone(),
                        v114_0_3.clone(),
                        v114_0_4.clone(),
                    )
                }
                Spiral_builder::US15::US15_1(v114_1_0) => {
                    Spiral_builder::US16::US16_1(v114_1_0.clone())
                }
            }
        }
        pub fn method60(
            v0_1: string,
            v1_1: LrcPtr<StringBuilder>,
            v2: i32,
            v3: i32,
            v4: LrcPtr<Spiral_builder::UH3>,
        ) -> Spiral_builder::US16 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v1_1.clone());
            let v2: MutCell<i32> = MutCell::new(v2);
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<LrcPtr<Spiral_builder::UH3>> = MutCell::new(v4.clone());
            '_method60: loop {
                break '_method60 (match v4.get().clone().as_ref() {
                    Spiral_builder::UH3::UH3_0 => {
                        Spiral_builder::US16::US16_1(string("choice / no parsers succeeded"))
                    }
                    Spiral_builder::UH3::UH3_1(v4_1_0, v4_1_1) => {
                        let v9: Spiral_builder::US16 = (match v4.get().clone().as_ref() {
                            Spiral_builder::UH3::UH3_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        })((
                            v0_1.get().clone(),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                        ));
                        match &v9 {
                            Spiral_builder::US16::US16_0(
                                v9_0_0,
                                v9_0_1,
                                v9_0_2,
                                v9_0_3,
                                v9_0_4,
                            ) => v9.clone(),
                            _ => {
                                let v0_1_temp: string = v0_1.get().clone();
                                let v1_1_temp: LrcPtr<StringBuilder> = v1_1.get().clone();
                                let v2_temp: i32 = v2.get().clone();
                                let v3_temp: i32 = v3.get().clone();
                                let v4_temp: LrcPtr<Spiral_builder::UH3> =
                                    match v4.get().clone().as_ref() {
                                        Spiral_builder::UH3::UH3_1(_, x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                v0_1.set(v0_1_temp);
                                v1_1.set(v1_1_temp);
                                v2.set(v2_temp);
                                v3.set(v3_temp);
                                v4.set(v4_temp);
                                continue '_method60;
                            }
                        }
                    }
                });
            }
        }
        pub fn method61(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: LrcPtr<Spiral_builder::UH2>,
        ) -> LrcPtr<Spiral_builder::UH2> {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v1_1.clone());
            '_method61: loop {
                break '_method61 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH2::UH2_0 => v1_1.get().clone(),
                    Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                            match v0_1.get().clone().as_ref() {
                                Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            };
                        let v1_1_temp: LrcPtr<Spiral_builder::UH2> =
                            LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                v1_1.get().clone(),
                            ));
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method61;
                    }
                });
            }
        }
        pub fn method58(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method58: loop {
                break '_method58 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method59(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method43(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method45(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method44())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    let v104: Spiral_builder::US16 = match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => v90.clone(),
                        _ => Spiral_builder::method60(
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                            LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                Func1::new(
                                    move |arg10_0040: (string, LrcPtr<StringBuilder>, i32, i32)| {
                                        Spiral_builder::closure39((), arg10_0040)
                                    },
                                ),
                                LrcPtr::new(Spiral_builder::UH3::UH3_1(
                                    Func1::new(
                                        move |arg10_0040_1: (
                                            string,
                                            LrcPtr<StringBuilder>,
                                            i32,
                                            i32,
                                        )| {
                                            Spiral_builder::closure40((), arg10_0040_1)
                                        },
                                    ),
                                    LrcPtr::new(Spiral_builder::UH3::UH3_0),
                                )),
                            )),
                        ),
                    };
                    match &v104 {
                        Spiral_builder::US16::US16_0(
                            v104_0_0,
                            v104_0_1,
                            v104_0_2,
                            v104_0_3,
                            v104_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v104_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v104_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v104_0_2.clone();
                            let v3_temp: i32 = v104_0_3.clone();
                            let v4_temp: i32 = v104_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method58;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method61(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method62(v0_1: LrcPtr<Spiral_builder::UH2>, v1_1: List<string>) -> List<string> {
            match v0_1.as_ref() {
                Spiral_builder::UH2::UH2_0 => v1_1.clone(),
                Spiral_builder::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => cons(
                    match v0_1.as_ref() {
                        Spiral_builder::UH2::UH2_1(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    Spiral_builder::method62(
                        match v0_1.as_ref() {
                            Spiral_builder::UH2::UH2_1(_, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn method63(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method63: loop {
                break '_method63 ({
                    let v76: Spiral_builder::US15 = if string("") == v1_1.get().clone() {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v22: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v29: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method59(v22, 0_i64) == false {
                            let v34: string = ofChar(v22);
                            let v37: i32 = length(v34.clone());
                            let v38: Array<char> = new_init(&'\u{0000}', v37);
                            let v39: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method43(v37, v39.clone()) {
                                let v41: i32 = v39.l0.get().clone();
                                let v42: char = getCharAt(v34.clone(), v41);
                                v38.get_mut()[v41 as usize] = v42;
                                {
                                    let v43: i32 = v41 + 1_i32;
                                    v39.l0.set(v43);
                                    ()
                                }
                            }
                            {
                                let v44: List<char> = ofArray(v38.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method45(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method44())(b0)(b1)
                                                },
                                            ),
                                            v44,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v22,
                                    v29,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v22,
                                toArray(ofArray(new_array(&['\\', '`', '\"']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v90: Spiral_builder::US16 = match &v76 {
                        Spiral_builder::US15::US15_0(
                            v76_0_0,
                            v76_0_1,
                            v76_0_2,
                            v76_0_3,
                            v76_0_4,
                        ) => Spiral_builder::US16::US16_0(
                            ofChar(v76_0_0.clone()),
                            v76_0_1.clone(),
                            v76_0_2.clone(),
                            v76_0_3.clone(),
                            v76_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v76_1_0) => {
                            Spiral_builder::US16::US16_1(v76_1_0.clone())
                        }
                    };
                    match &v90 {
                        Spiral_builder::US16::US16_0(
                            v90_0_0,
                            v90_0_1,
                            v90_0_2,
                            v90_0_3,
                            v90_0_4,
                        ) => {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH2> = LrcPtr::new(
                                Spiral_builder::UH2::UH2_1(v90_0_0.clone(), v0_1.get().clone()),
                            );
                            let v1_1_temp: string = v90_0_1.clone();
                            let v2_temp: LrcPtr<StringBuilder> = v90_0_2.clone();
                            let v3_temp: i32 = v90_0_3.clone();
                            let v4_temp: i32 = v90_0_4.clone();
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            continue '_method63;
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method61(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method64(v0_1: string, v1_1: i32) -> i32 {
            let v0_1: MutCell<string> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<i32> = MutCell::new(v1_1);
            '_method64: loop {
                break '_method64 (if v1_1.get().clone() >= length(v0_1.get().clone()) {
                    v1_1.get().clone()
                } else {
                    if getCharAt(v0_1.get().clone(), v1_1.get().clone()) == ' ' {
                        let v0_1_temp: string = v0_1.get().clone();
                        let v1_1_temp: i32 = v1_1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1_1.set(v1_1_temp);
                        continue '_method64;
                    } else {
                        v1_1.get().clone()
                    }
                });
            }
        }
        pub fn method55(
            v0_1: LrcPtr<Spiral_builder::UH2>,
            v1_1: string,
            v2: LrcPtr<StringBuilder>,
            v3: i32,
            v4: i32,
        ) -> Spiral_builder::US23 {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH2>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<LrcPtr<StringBuilder>> = MutCell::new(v2.clone());
            let v3: MutCell<i32> = MutCell::new(v3);
            let v4: MutCell<i32> = MutCell::new(v4);
            '_method55: loop {
                break '_method55 ({
                    let v5: bool = string("") == v1_1.get().clone();
                    let v82: Spiral_builder::US15 = if v5 {
                        Spiral_builder::US15::US15_1(sprintf!(
                            "parsing.none_of / unexpected end of input / chars: {:?} / s: {:?}",
                            toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                            (v2.get().clone(), v3.get().clone(), v4.get().clone())
                        ))
                    } else {
                        let v25: char = getCharAt(v1_1.get().clone(), 0_i32);
                        let v32: string = getSlice(
                            v1_1.get().clone(),
                            Some(1_i32),
                            Some(length(v1_1.get().clone())),
                        );
                        if Spiral_builder::method56(v25, 0_i64) == false {
                            let v37: string = ofChar(v25);
                            let v40: i32 = length(v37.clone());
                            let v41: Array<char> = new_init(&'\u{0000}', v40);
                            let v42: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method43(v40, v42.clone()) {
                                let v44: i32 = v42.l0.get().clone();
                                let v45: char = getCharAt(v37.clone(), v44);
                                v41.get_mut()[v44 as usize] = v45;
                                {
                                    let v46: i32 = v44 + 1_i32;
                                    v42.l0.set(v46);
                                    ()
                                }
                            }
                            {
                                let v47: List<char> = ofArray(v41.clone());
                                let patternInput: (LrcPtr<StringBuilder>, i32, i32) =
                                    Spiral_builder::method45(
                                        foldBack(
                                            Func2::new(
                                                move |b0: char, b1: LrcPtr<Spiral_builder::UH0>| {
                                                    (Spiral_builder::method44())(b0)(b1)
                                                },
                                            ),
                                            v47,
                                            LrcPtr::new(Spiral_builder::UH0::UH0_0),
                                        ),
                                        v2.get().clone(),
                                        v3.get().clone(),
                                        v4.get().clone(),
                                    );
                                Spiral_builder::US15::US15_0(
                                    v25,
                                    v32,
                                    patternInput.0.clone(),
                                    patternInput.1.clone(),
                                    patternInput.2.clone(),
                                )
                            }
                        } else {
                            Spiral_builder::US15::US15_1(sprintf!(
                                "parsing.none_of / unexpected char: \'{}\' / chars: {:?} / s: {:?}",
                                v25,
                                toArray(ofArray(new_array(&['\\', '`', '\"', ' ']))),
                                (v2.get().clone(), v3.get().clone(), v4.get().clone())
                            ))
                        }
                    };
                    let v96: Spiral_builder::US16 = match &v82 {
                        Spiral_builder::US15::US15_0(
                            v82_0_0,
                            v82_0_1,
                            v82_0_2,
                            v82_0_3,
                            v82_0_4,
                        ) => Spiral_builder::method57(
                            ofChar(v82_0_0.clone()),
                            v82_0_1.clone(),
                            v82_0_2.clone(),
                            v82_0_3.clone(),
                            v82_0_4.clone(),
                        ),
                        Spiral_builder::US15::US15_1(v82_1_0) => {
                            Spiral_builder::US16::US16_1(v82_1_0.clone())
                        }
                    };
                    let v341: Spiral_builder::US16 = match &v96 {
                        Spiral_builder::US16::US16_0(
                            v96_0_0,
                            v96_0_1,
                            v96_0_2,
                            v96_0_3,
                            v96_0_4,
                        ) => v96.clone(),
                        _ => {
                            let v165: Spiral_builder::US15 = if v5 {
                                Spiral_builder::US15::US15_1(sprintf!(
                                    "parsing.p_char / unexpected end of input / s: {:?}",
                                    (v2.get().clone(), v3.get().clone(), v4.get().clone())
                                ))
                            } else {
                                let v105: char = getCharAt(v1_1.get().clone(), 0_i32);
                                if v105 == '\"' {
                                    let v113: string = getSlice(
                                        v1_1.get().clone(),
                                        Some(1_i32),
                                        Some(length(v1_1.get().clone())),
                                    );
                                    let v115: string = ofChar(v105);
                                    let v118: i32 = length(v115.clone());
                                    let v119: Array<char> = new_init(&'\u{0000}', v118);
                                    let v120: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method43(v118, v120.clone()) {
                                        let v122: i32 = v120.l0.get().clone();
                                        let v123: char = getCharAt(v115.clone(), v122);
                                        v119.get_mut()[v122 as usize] = v123;
                                        {
                                            let v124: i32 = v122 + 1_i32;
                                            v120.l0.set(v124);
                                            ()
                                        }
                                    }
                                    {
                                        let v125: List<char> = ofArray(v119.clone());
                                        let patternInput_1:
                                                                 (LrcPtr<StringBuilder>,
                                                                  i32, i32) =
                                                             Spiral_builder::method45(foldBack(Func2::new(move
                                                                                                              |b0:
                                                                                                                   char,
                                                                                                               b1:
                                                                                                                   LrcPtr<Spiral_builder::UH0>|
                                                                                                              (Spiral_builder::method44())(b0)(b1)),
                                                                                               v125,
                                                                                               LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                      v2.get().clone(),
                                                                                      v3.get().clone(),
                                                                                      v4.get().clone());
                                        Spiral_builder::US15::US15_0(
                                            v105,
                                            v113,
                                            patternInput_1.0.clone(),
                                            patternInput_1.1.clone(),
                                            patternInput_1.2.clone(),
                                        )
                                    }
                                } else {
                                    let v141: i32 = length(v1_1.get().clone());
                                    let v144: i32 =
                                        indexOf(v1_1.get().clone(), string("\n")) - 1_i32;
                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                           sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                    '\"',
                                                                                                    v3.get().clone(),
                                                                                                    v4.get().clone(),
                                                                                                    v2.get().clone(),
                                                                                                    getSlice(v1_1.get().clone(),
                                                                                                             Some(0_i32),
                                                                                                             Some(if -2_i32
                                                                                                                         ==
                                                                                                                         v144
                                                                                                                     {
                                                                                                                      v141
                                                                                                                  } else {
                                                                                                                      v144
                                                                                                                  }))),
                                                                                           append(replicate(v4.get().clone()
                                                                                                                -
                                                                                                                1_i32,
                                                                                                            string(" ")),
                                                                                                  string("^"))))
                                }
                            };
                            let v282: Spiral_builder::US16 = match &v165 {
                                Spiral_builder::US15::US15_0(
                                    v165_0_0,
                                    v165_0_1,
                                    v165_0_2,
                                    v165_0_3,
                                    v165_0_4,
                                ) => {
                                    let v170: i32 = v165_0_4.clone();
                                    let v169: i32 = v165_0_3.clone();
                                    let v168: LrcPtr<StringBuilder> = v165_0_2.clone();
                                    let v167: string = v165_0_1.clone();
                                    let v172: Spiral_builder::US23 = Spiral_builder::method58(
                                        LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        v167.clone(),
                                        v168.clone(),
                                        v169,
                                        v170,
                                    );
                                    let v193: Spiral_builder::US16 = match &v172 {
                                        Spiral_builder::US23::US23_0(
                                            v172_0_0,
                                            v172_0_1,
                                            v172_0_2,
                                            v172_0_3,
                                            v172_0_4,
                                        ) => {
                                            let v179: List<string> = Spiral_builder::method62(
                                                v172_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v179 = v179.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v179 = v179.clone();
                                                                    move |i: i32| {
                                                                        item(i, v179.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v179.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v172_0_1.clone(),
                                                v172_0_2.clone(),
                                                v172_0_3.clone(),
                                                v172_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v172_1_0) => {
                                            Spiral_builder::US16::US16_1(v172_1_0.clone())
                                        }
                                    };
                                    match &v193 {
                                        Spiral_builder::US16::US16_0(
                                            v193_0_0,
                                            v193_0_1,
                                            v193_0_2,
                                            v193_0_3,
                                            v193_0_4,
                                        ) => {
                                            let v198: i32 = v193_0_4.clone();
                                            let v197: i32 = v193_0_3.clone();
                                            let v196: LrcPtr<StringBuilder> = v193_0_2.clone();
                                            let v195: string = v193_0_1.clone();
                                            let v262: Spiral_builder::US15 = if string("")
                                                == v195.clone()
                                            {
                                                Spiral_builder::US15::US15_1(sprintf!("parsing.p_char / unexpected end of input / s: {:?}",
                                                                                                           (v196.clone(),
                                                                                                            v197,
                                                                                                            v198)))
                                            } else {
                                                let v202: char = getCharAt(v195.clone(), 0_i32);
                                                if v202 == '\"' {
                                                    let v210: string = getSlice(
                                                        v195.clone(),
                                                        Some(1_i32),
                                                        Some(length(v195.clone())),
                                                    );
                                                    let v212: string = ofChar(v202);
                                                    let v215: i32 = length(v212.clone());
                                                    let v216: Array<char> =
                                                        new_init(&'\u{0000}', v215);
                                                    let v217: LrcPtr<Spiral_builder::Mut5> =
                                                        LrcPtr::new(Spiral_builder::Mut5 {
                                                            l0: MutCell::new(0_i32),
                                                        });
                                                    while Spiral_builder::method43(
                                                        v215,
                                                        v217.clone(),
                                                    ) {
                                                        let v219: i32 = v217.l0.get().clone();
                                                        let v220: char =
                                                            getCharAt(v212.clone(), v219);
                                                        v216.get_mut()[v219 as usize] = v220;
                                                        {
                                                            let v221: i32 = v219 + 1_i32;
                                                            v217.l0.set(v221);
                                                            ()
                                                        }
                                                    }
                                                    {
                                                        let v222: List<char> =
                                                            ofArray(v216.clone());
                                                        let patternInput_2:
                                                                                     (LrcPtr<StringBuilder>,
                                                                                      i32,
                                                                                      i32) =
                                                                                 Spiral_builder::method45(foldBack(Func2::new(move
                                                                                                                                  |b0:
                                                                                                                                       char,
                                                                                                                                   b1:
                                                                                                                                       LrcPtr<Spiral_builder::UH0>|
                                                                                                                                  (Spiral_builder::method44())(b0)(b1)),
                                                                                                                   v222,
                                                                                                                   LrcPtr::new(Spiral_builder::UH0::UH0_0)),
                                                                                                          v196.clone(),
                                                                                                          v197,
                                                                                                          v198);
                                                        Spiral_builder::US15::US15_0(
                                                            v202,
                                                            v210,
                                                            patternInput_2.0.clone(),
                                                            patternInput_2.1.clone(),
                                                            patternInput_2.2.clone(),
                                                        )
                                                    }
                                                } else {
                                                    let v238: i32 = length(v195.clone());
                                                    let v241: i32 =
                                                        indexOf(v195.clone(), string("\n")) - 1_i32;
                                                    Spiral_builder::US15::US15_1(sprintf!("{}\n{}\n",
                                                                                                               sprintf!("parsing.p_char / expected: \'{}\' / line: {} / col: {}\n{}{}",
                                                                                                                        '\"',
                                                                                                                        v197,
                                                                                                                        v198,
                                                                                                                        v196.clone(),
                                                                                                                        getSlice(v195.clone(),
                                                                                                                                 Some(0_i32),
                                                                                                                                 Some(if -2_i32
                                                                                                                                             ==
                                                                                                                                             v241
                                                                                                                                         {
                                                                                                                                          v238
                                                                                                                                      } else {
                                                                                                                                          v241
                                                                                                                                      }))),
                                                                                                               append(replicate(v198
                                                                                                                                    -
                                                                                                                                    1_i32,
                                                                                                                                string(" ")),
                                                                                                                      string("^"))))
                                                }
                                            };
                                            match &v262 {
                                                                 Spiral_builder::US15::US15_0(v262_0_0,
                                                                                              v262_0_1,
                                                                                              v262_0_2,
                                                                                              v262_0_3,
                                                                                              v262_0_4)
                                                                 =>
                                                                 Spiral_builder::US16::US16_0(v193_0_0.clone(),
                                                                                              v262_0_1.clone(),
                                                                                              v262_0_2.clone(),
                                                                                              v262_0_3.clone(),
                                                                                              v262_0_4.clone()),
                                                                 Spiral_builder::US15::US15_1(v262_1_0)
                                                                 =>
                                                                 Spiral_builder::US16::US16_1(sprintf!("between / expected closing delimiter / e: {:?} / input: {:?} / rest1: {:?} / rest2: {:?}",
                                                                                                       v262_1_0.clone(),
                                                                                                       (v1_1.get().clone(),
                                                                                                        v2.get().clone(),
                                                                                                        v3.get().clone(),
                                                                                                        v4.get().clone()),
                                                                                                       (v167,
                                                                                                        v168,
                                                                                                        v169,
                                                                                                        v170),
                                                                                                       (v195,
                                                                                                        v196,
                                                                                                        v197,
                                                                                                        v198))),
                                                             }
                                        }
                                        _ => Spiral_builder::US16::US16_1(string(
                                            "between / expected content",
                                        )),
                                    }
                                }
                                Spiral_builder::US15::US15_1(v165_1_0) => {
                                    Spiral_builder::US16::US16_1(v165_1_0.clone())
                                }
                            };
                            match &v282 {
                                Spiral_builder::US16::US16_0(
                                    v282_0_0,
                                    v282_0_1,
                                    v282_0_2,
                                    v282_0_3,
                                    v282_0_4,
                                ) => v282.clone(),
                                _ => {
                                    let v294:
                                                         Spiral_builder::US16 =
                                                     Spiral_builder::method60(v1_1.get().clone(),
                                                                              v2.get().clone(),
                                                                              v3.get().clone(),
                                                                              v4.get().clone(),
                                                                              LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                    |arg10_0040:
                                                                                                                                         (string,
                                                                                                                                          LrcPtr<StringBuilder>,
                                                                                                                                          i32,
                                                                                                                                          i32)|
                                                                                                                                    Spiral_builder::closure39((),
                                                                                                                                                              arg10_0040)),
                                                                                                                     LrcPtr::new(Spiral_builder::UH3::UH3_1(Func1::new(move
                                                                                                                                                                           |arg10_0040_1:
                                                                                                                                                                                (string,
                                                                                                                                                                                 LrcPtr<StringBuilder>,
                                                                                                                                                                                 i32,
                                                                                                                                                                                 i32)|
                                                                                                                                                                           Spiral_builder::closure40((),
                                                                                                                                                                                                     arg10_0040_1)),
                                                                                                                                                            LrcPtr::new(Spiral_builder::UH3::UH3_0))))));
                                    let v305: Spiral_builder::US16 = match &v294 {
                                        Spiral_builder::US16::US16_0(
                                            v294_0_0,
                                            v294_0_1,
                                            v294_0_2,
                                            v294_0_3,
                                            v294_0_4,
                                        ) => Spiral_builder::US16::US16_0(
                                            string(""),
                                            v294_0_1.clone(),
                                            v294_0_2.clone(),
                                            v294_0_3.clone(),
                                            v294_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v294_1_0) => {
                                            Spiral_builder::US16::US16_1(v294_1_0.clone())
                                        }
                                    };
                                    let v316: Spiral_builder::US23 = match &v305 {
                                        Spiral_builder::US16::US16_0(
                                            v305_0_0,
                                            v305_0_1,
                                            v305_0_2,
                                            v305_0_3,
                                            v305_0_4,
                                        ) => Spiral_builder::method63(
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                            v305_0_1.clone(),
                                            v305_0_2.clone(),
                                            v305_0_3.clone(),
                                            v305_0_4.clone(),
                                        ),
                                        Spiral_builder::US16::US16_1(v305_1_0) => {
                                            Spiral_builder::US23::US23_1(v305_1_0.clone())
                                        }
                                    };
                                    match &v316 {
                                        Spiral_builder::US23::US23_0(
                                            v316_0_0,
                                            v316_0_1,
                                            v316_0_2,
                                            v316_0_3,
                                            v316_0_4,
                                        ) => {
                                            let v323: List<string> = Spiral_builder::method62(
                                                v316_0_0.clone(),
                                                empty::<string>(),
                                            );
                                            Spiral_builder::US16::US16_0(
                                                join(
                                                    string(""),
                                                    toArray_1(delay(Func0::new({
                                                        let v323 = v323.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v323 = v323.clone();
                                                                    move |i_1: i32| {
                                                                        item(i_1, v323.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v323.clone()) - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                ),
                                                v316_0_1.clone(),
                                                v316_0_2.clone(),
                                                v316_0_3.clone(),
                                                v316_0_4.clone(),
                                            )
                                        }
                                        Spiral_builder::US23::US23_1(v316_1_0) => {
                                            Spiral_builder::US16::US16_1(v316_1_0.clone())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    match &v341 {
                        Spiral_builder::US16::US16_0(
                            v341_0_0,
                            v341_0_1,
                            v341_0_2,
                            v341_0_3,
                            v341_0_4,
                        ) => {
                            let v350: i32 = v341_0_4.clone();
                            let v349: i32 = v341_0_3.clone();
                            let v348: LrcPtr<StringBuilder> = v341_0_2.clone();
                            let v347: string = v341_0_1.clone();
                            let v346: string = v341_0_0.clone();
                            let v352: i32 = Spiral_builder::method64(v347.clone(), 0_i32);
                            let v364: Spiral_builder::US18 = if 0_i32 == v352 {
                                Spiral_builder::US18::US18_1(string(
                                    "spaces1 / expected at least one space",
                                ))
                            } else {
                                Spiral_builder::US18::US18_0(
                                    getSlice(v347.clone(), Some(v352), Some(length(v347.clone()))),
                                    v348.clone(),
                                    v349,
                                    v350,
                                )
                            };
                            match &v364 {
                                Spiral_builder::US18::US18_0(
                                    v364_0_0,
                                    v364_0_1,
                                    v364_0_2,
                                    v364_0_3,
                                ) => {
                                    let v0_1_temp: LrcPtr<Spiral_builder::UH2> =
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            v0_1.get().clone(),
                                        ));
                                    let v1_1_temp: string = v364_0_0.clone();
                                    let v2_temp: LrcPtr<StringBuilder> = v364_0_1.clone();
                                    let v3_temp: i32 = v364_0_2.clone();
                                    let v4_temp: i32 = v364_0_3.clone();
                                    v0_1.set(v0_1_temp);
                                    v1_1.set(v1_1_temp);
                                    v2.set(v2_temp);
                                    v3.set(v3_temp);
                                    v4.set(v4_temp);
                                    continue '_method55;
                                }
                                _ => Spiral_builder::US23::US23_0(
                                    Spiral_builder::method61(
                                        v0_1.get().clone(),
                                        LrcPtr::new(Spiral_builder::UH2::UH2_1(
                                            v346.clone(),
                                            LrcPtr::new(Spiral_builder::UH2::UH2_0),
                                        )),
                                    ),
                                    v347,
                                    v348,
                                    v349,
                                    v350,
                                ),
                            }
                        }
                        _ => Spiral_builder::US23::US23_0(
                            Spiral_builder::method61(
                                v0_1.get().clone(),
                                LrcPtr::new(Spiral_builder::UH2::UH2_0),
                            ),
                            v1_1.get().clone(),
                            v2.get().clone(),
                            v3.get().clone(),
                            v4.get().clone(),
                        ),
                    }
                });
            }
        }
        pub fn method54(v0_1: string) -> Spiral_builder::US22 {
            let _v0: MutCell<Option<Option<string>>> = MutCell::new(None::<Option<string>>);
            _v0.set(Some(Some(v0_1)));
            {
                let v15: Spiral_builder::US23 = Spiral_builder::method55(
                    LrcPtr::new(Spiral_builder::UH2::UH2_0),
                    defaultValue(
                        string(""),
                        match &_v0.get().clone() {
                            None => panic!("{}", string("optionm\'.of_obj / _v0=None"),),
                            Some(_v0_0_0) => _v0_0_0.clone(),
                        },
                    ),
                    StringBuilder::_ctor__Z721C83C5(string("")),
                    1_i32,
                    1_i32,
                );
                match &v15 {
                    Spiral_builder::US23::US23_0(v15_0_0, v15_0_1, v15_0_2, v15_0_3, v15_0_4) => {
                        Spiral_builder::US22::US22_0(toArray(Spiral_builder::method62(
                            v15_0_0.clone(),
                            empty::<string>(),
                        )))
                    }
                    Spiral_builder::US23::US23_1(v15_1_0) => {
                        Spiral_builder::US22::US22_1(v15_1_0.clone())
                    }
                }
            }
        }
        pub fn closure42(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options")
        }
        pub fn closure41(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: string,
            v8: Vec<std::string::String>,
            unitVar: (),
        ) {
            fn v10() {
                Spiral_builder::closure2((), ());
            }
            let v11: () = {
                v10();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v40: () = {
                v10();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v68: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v68,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v76: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v80: () = {
                    v10();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v109: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v114: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v109 = _v109.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v109.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v129: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v109.get().clone());
                let v169: DateTime = match &v129 {
                    Spiral_builder::US3::US3_0(v129_0_0) => {
                        let v143: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v129 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v143.hours(),
                            v143.minutes(),
                            v143.seconds(),
                            v143.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v174: string = {
                    let provider: string = Spiral_builder::method6();
                    v169.toString(provider)
                };
                let v566: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v582: &str = inline_colorization::color_bright_blue;
                let v584: &str = &*v566;
                let v586: &str = inline_colorization::color_reset;
                let v588: string = string("format!(\"{v582}{v584}{v586}\")");
                let v589: std::string::String = format!("{v582}{v584}{v586}");
                let v591: string = fable_library_rust::String_::fromString(v589);
                let v632: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v634: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v641: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v650: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", string("file_name")),
                        (),
                    );
                    ()
                };
                let v659: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v667: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", v7), ());
                    ()
                };
                let v676: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v685: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", string("arguments")),
                        (),
                    );
                    ()
                };
                let v693: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v698: std::string::String = format!("{:#?}", v8);
                let v728: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v698)),
                        (),
                    );
                    ()
                };
                let v736: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v745: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("options")), ());
                    ()
                };
                let v753: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v761: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v770: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("command")), ());
                    ()
                };
                let v778: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v786: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v794: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v803: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", string("cancellation_token")),
                        (),
                    );
                    ()
                };
                let v811: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v816: std::string::String = format!("{:#?}", v1_1);
                let v846: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v816)),
                        (),
                    );
                    ()
                };
                let v854: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v863: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", string("environment_variables")),
                        (),
                    );
                    ()
                };
                let v871: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v882: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", sprintf!("{:?}", v2)),
                        (),
                    );
                    ()
                };
                let v890: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v899: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("on_line")), ());
                    ()
                };
                let v907: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v912: std::string::String = format!("{:#?}", v3);
                let v942: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v912)),
                        (),
                    );
                    ()
                };
                let v950: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v959: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("stdin")), ());
                    ()
                };
                let v967: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v972: std::string::String = format!("{:#?}", v4);
                let v1002: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v972)),
                        (),
                    );
                    ()
                };
                let v1010: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1019: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("trace")), ());
                    ()
                };
                let v1027: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1038: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", if v5 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v1046: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v1055: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", string("working_directory")),
                        (),
                    );
                    ()
                };
                let v1063: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v1068: std::string::String = format!("{:#?}", v6);
                let v1098: () = {
                    Spiral_builder::closure10(
                        v634.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v1068)),
                        (),
                    );
                    ()
                };
                let v1107: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1115: () = {
                    Spiral_builder::closure10(v634.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1118: string = v634.l0.get().clone();
                let v1157: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v174,
                            v591,
                            v632,
                            Spiral_builder::closure42((), ()),
                            v1118
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1157.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1157)
            }
        }
        pub fn closure43(
            unitVar: (),
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_0(v0_1)
        }
        pub fn method65() -> Func1<
            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
            Spiral_builder::US24,
        > {
            Func1::new(
                move |v: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>| {
                    Spiral_builder::closure43((), v)
                },
            )
        }
        pub fn closure44(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US24 {
            Spiral_builder::US24::US24_1(v0_1)
        }
        pub fn method66() -> Func1<std::string::String, Spiral_builder::US24> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure44((), v))
        }
        pub fn closure46(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / child error")
        }
        pub fn closure45(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_red;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v656: std::string::String = format!("{:#?}", v0_1);
                let v686: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v656)),
                        (),
                    );
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v698: string = v626.l0.get().clone();
                let v737: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure46((), ()),
                            v698
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v737.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v737)
            }
        }
        pub fn method67(
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
        ) -> std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>> {
            v0_1
        }
        pub fn closure47(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_0(v0_1)
        }
        pub fn method68() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure47((), v))
        }
        pub fn closure48(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US26 {
            Spiral_builder::US26::US26_1(v0_1)
        }
        pub fn method69() -> Func1<std::string::String, Spiral_builder::US26> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure48((), v))
        }
        pub fn closure50(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.stdio_line")
        }
        pub fn closure49(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_red;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("e")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v656: std::string::String = format!("{:#?}", v0_1);
                let v686: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v656)),
                        (),
                    );
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v698: string = v626.l0.get().clone();
                let v737: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure50((), ()),
                            v698
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v737.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v737)
            }
        }
        pub fn closure52(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure51(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_black;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v627: string = v626.l0.get().clone();
                let v666: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure52(v0_1, ()),
                            v627
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v666.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v666)
            }
        }
        pub fn closure53(v0_1: string, unitVar: ()) {
            printfn!("{0}", v0_1);
        }
        pub fn method70(
            v0_1: std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>>,
        ) -> std::sync::Arc<std::sync::Mutex<std::sync::mpsc::Sender<std::string::String>>>
        {
            v0_1
        }
        pub fn closure54(
            unitVar: (),
            v0_1: std::sync::mpsc::SendError<std::string::String>,
        ) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method71(
        ) -> Func1<std::sync::mpsc::SendError<std::string::String>, std::string::String> {
            Func1::new(move |v: std::sync::mpsc::SendError<std::string::String>| {
                Spiral_builder::closure54((), v)
            })
        }
        pub fn method72(v0_1: Result<(), string>) -> Result<(), string> {
            v0_1
        }
        pub fn closure55(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US27>>>,
            v1_1: Option<Spiral_builder::US27>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US27>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure56(
            v0_1: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v1_1: Func1<
                Option<Spiral_builder::US27>,
                LrcPtr<MutCell<Option<Spiral_builder::US27>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US27>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US27>,
                    Some(v0_1_0_0) => {
                        let x = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US27::US27_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method73(
            v0_1: std::sync::Arc<std::sync::Mutex<Option<std::process::ChildStdin>>>,
        ) -> std::sync::Arc<std::sync::Mutex<Option<std::process::ChildStdin>>> {
            v0_1
        }
        pub fn closure57(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US28>>>,
            v1_1: Option<Spiral_builder::US28>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US28>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure58(
            v0_1: Option<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>>,
            v1_1: Func1<
                Option<Spiral_builder::US28>,
                LrcPtr<MutCell<Option<Spiral_builder::US28>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US28>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US28>,
                    Some(v0_1_0_0) => {
                        let x: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> =
                            v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US28::US28_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method74(
            v0_1: std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
        ) -> std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>> {
            v0_1
        }
        pub fn method75(
            v0_1: std::sync::MutexGuard<std::process::ChildStdin>,
        ) -> std::sync::MutexGuard<std::process::ChildStdin> {
            v0_1
        }
        pub fn method76(
            v0_1: std::thread::JoinHandle<Result<(), string>>,
        ) -> std::thread::JoinHandle<Result<(), string>> {
            v0_1
        }
        pub fn closure59(unitVar: (), v0_1: std::process::Output) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_0(v0_1)
        }
        pub fn closure60(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US29 {
            Spiral_builder::US29::US29_1(v0_1)
        }
        pub fn closure62(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / output error")
        }
        pub fn closure61(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_red;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v656: std::string::String = format!("{:#?}", v0_1);
                let v686: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v656)),
                        (),
                    );
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v698: string = v626.l0.get().clone();
                let v737: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure62((), ()),
                            v698
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v737.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v737)
            }
        }
        pub fn closure63(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US30>>>,
            v1_1: Option<Spiral_builder::US30>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US30>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure64(
            v0_1: Option<i32>,
            v1_1: Func1<
                Option<Spiral_builder::US30>,
                LrcPtr<MutCell<Option<Spiral_builder::US30>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US30>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US30>,
                    Some(v0_1_0_0) => {
                        let x: i32 = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US30::US30_0(x)
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method77(
            v0_1: std::sync::Arc<
                std::sync::Mutex<std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>>,
            >,
        ) -> std::sync::Arc<
            std::sync::Mutex<std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>>,
        > {
            v0_1
        }
        pub fn closure66(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options / result")
        }
        pub fn closure65(v0_1: i32, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_black;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: i32 = length(v1_1);
                let v628: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v635: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v644: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v653: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v670: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v679: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("std_trace_length")),
                        (),
                    );
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v626), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v707: string = v628.l0.get().clone();
                let v746: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure66((), ()),
                            v707
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v746.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v746)
            }
        }
        pub fn closure68(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure67(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            unitVar: (),
        ) {
            fn v8() {
                Spiral_builder::closure2((), ());
            }
            let v9: () = {
                v8();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v38: () = {
                v8();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v66: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v66,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v74: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v78: () = {
                    v8();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v107: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v112: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v107 = _v107.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v107.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v127: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v107.get().clone());
                let v167: DateTime = match &v127 {
                    Spiral_builder::US3::US3_0(v127_0_0) => {
                        let v141: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v127 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v141.hours(),
                            v141.minutes(),
                            v141.seconds(),
                            v141.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v172: string = {
                    let provider: string = Spiral_builder::method6();
                    v167.toString(provider)
                };
                let v564: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v580: &str = inline_colorization::color_bright_blue;
                let v582: &str = &*v564;
                let v584: &str = inline_colorization::color_reset;
                let v586: string = string("format!(\"{v580}{v582}{v584}\")");
                let v587: std::string::String = format!("{v580}{v582}{v584}");
                let v589: string = fable_library_rust::String_::fromString(v587);
                let v630: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v632: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v639: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v648: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("options")), ());
                    ()
                };
                let v657: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v665: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v674: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("command")), ());
                    ()
                };
                let v682: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v690: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v699: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v708: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", string("cancellation_token")),
                        (),
                    );
                    ()
                };
                let v716: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v721: std::string::String = format!("{:#?}", v1_1);
                let v751: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v721)),
                        (),
                    );
                    ()
                };
                let v759: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v768: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", string("environment_variables")),
                        (),
                    );
                    ()
                };
                let v776: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v787: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", sprintf!("{:?}", v2)),
                        (),
                    );
                    ()
                };
                let v795: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v804: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("on_line")), ());
                    ()
                };
                let v812: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v817: std::string::String = format!("{:#?}", v3);
                let v847: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v817)),
                        (),
                    );
                    ()
                };
                let v855: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v864: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("stdin")), ());
                    ()
                };
                let v872: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v877: std::string::String = format!("{:#?}", v4);
                let v907: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v877)),
                        (),
                    );
                    ()
                };
                let v915: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v924: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("trace")), ());
                    ()
                };
                let v932: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v943: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", if v5 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v951: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v960: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", string("working_directory")),
                        (),
                    );
                    ()
                };
                let v968: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v973: std::string::String = format!("{:#?}", v6);
                let v1003: () = {
                    Spiral_builder::closure10(
                        v632.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v973)),
                        (),
                    );
                    ()
                };
                let v1012: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1020: () = {
                    Spiral_builder::closure10(v632.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v1023: string = v632.l0.get().clone();
                let v1062: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v172,
                            v589,
                            v630,
                            Spiral_builder::closure68((), ()),
                            v1023
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v1062.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v1062)
            }
        }
        pub fn closure70(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US31>>>,
            v1_1: Option<Spiral_builder::US31>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US31>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure71(
            v0_1: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v1_1: Func1<
                Option<Spiral_builder::US31>,
                LrcPtr<MutCell<Option<Spiral_builder::US31>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US31>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US31>,
                    Some(v0_1_0_0) => {
                        let x = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US31::US31_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure73(v0_1: string, unitVar: ()) -> string {
            v0_1
        }
        pub fn closure72(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_black;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v627: string = v626.l0.get().clone();
                let v666: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure73(v0_1, ()),
                            v627
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v666.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v666)
            }
        }
        pub fn closure69(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure74(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
            v7: (),
            v8: LrcPtr<ConcurrentStack_1<string>>,
            v9: (),
        ) {
            let v11: Arc<Async<()>> = defaultOf();
            defaultOf::<()>();
            ();
            ()
        }
        pub fn closure75(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US32>>>,
            v1_1: Option<Spiral_builder::US32>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US32>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure76(
            v0_1: Option<CancellationToken>,
            v1_1: Func1<
                Option<Spiral_builder::US32>,
                LrcPtr<MutCell<Option<Spiral_builder::US32>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US32>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US32>,
                    Some(v0_1_0_0) => {
                        let x: CancellationToken = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US32::US32_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure77(v0_1: (), unitVar: ()) {
            if unbox::<bool>(&defaultOf()) == false {
                ();
                ()
            };
        }
        pub fn closure79(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async / WaitForExitAsync")
        }
        pub fn closure78(v0_1: LrcPtr<TaskCanceledException>, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                3_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Warning")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_yellow;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v656: std::string::String = format!("{:#?}", v0_1);
                let v686: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v656)),
                        (),
                    );
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v698: string = v626.l0.get().clone();
                let v737: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure79((), ()),
                            v698
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v737.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v737)
            }
        }
        pub fn closure81(unitVar: (), unitVar_1: ()) -> string {
            string("runtime.execute_with_options_async")
        }
        pub fn closure80(v0_1: i32, v1_1: string, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_blue;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: i32 = length(v1_1);
                let v628: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v635: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v644: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v653: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v670: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v679: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("output_length")),
                        (),
                    );
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v626), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v707: string = v628.l0.get().clone();
                let v746: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure81((), ()),
                            v707
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v746.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v746)
            }
        }
        pub fn method78(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> Arc<Async<(i32, string)>> {
            defaultOf()
        }
        pub fn method40(
            v0_1: string,
            v1_1: Option<CancellationToken>,
            v2: Array<(string, string)>,
            v3: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v4: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v5: bool,
            v6: Option<string>,
        ) -> (i32, string) {
            let v9: Spiral_builder::US14 = Spiral_builder::method42(Spiral_builder::method41(
                v0_1.clone(),
                v1_1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5,
                v6.clone(),
            ));
            let patternInput: (string, Spiral_builder::US1) = match &v9 {
                Spiral_builder::US14::US14_0(v9_0_0, v9_0_1) => (v9_0_0.clone(), v9_0_1.clone()),
                Spiral_builder::US14::US14_1(v9_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v9_1_0.clone()),
                ),
            };
            let v19: Spiral_builder::US1 = patternInput.1.clone();
            let v18: string = patternInput.0.clone();
            let v24: Spiral_builder::US22 = Spiral_builder::method54(match &v19 {
                Spiral_builder::US1::US1_0(v19_0_0) => match &v19 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            });
            let v30: Array<string> = match &v24 {
                Spiral_builder::US22::US22_0(v24_0_0) => v24_0_0.clone(),
                Spiral_builder::US22::US22_1(v24_1_0) => panic!(
                    "{}",
                    sprintf!("resultm.get / Result value was Error: {}", v24_1_0.clone()),
                ),
            };
            let v32: Vec<string> = v30.to_vec();
            let v34: bool = true;
            let _result: Vec<_> = v32
                .into_iter()
                .map(|x| {
                    //;
                    let v36: string = x;
                    let v38: &str = &*v36;
                    let v40: std::string::String = String::from(v38);
                    let v42: bool = true;
                    v40
                })
                .collect::<Vec<_>>();
            let v44: Vec<std::string::String> = _result;
            let v47: () = {
                Spiral_builder::closure41(
                    v0_1,
                    v1_1,
                    v2.clone(),
                    v3,
                    v4.clone(),
                    v5,
                    v6.clone(),
                    v18.clone(),
                    v44.clone(),
                    (),
                );
                ()
            };
            let _v1219: MutCell<Option<LrcPtr<(i32, string)>>> =
                MutCell::new(None::<LrcPtr<(i32, string)>>);
            {
                let x_3: LrcPtr<(i32, string)> = (Func0::new({
                    let v18 = v18.clone();
                    let v2 = v2.clone();
                    let v4 = v4.clone();
                    let v44 = v44.clone();
                    let v5 = v5.clone();
                    let v6 = v6.clone();
                    move || {
                        let v1221: std::process::Command =
                            std::process::Command::new(&*v18.clone());
                        let v1223: bool = true;
                        let mut v1221 = v1221;
                        let v1225: &mut std::process::Command =
                            std::process::Command::args(&mut v1221, &*v44.clone());
                        let v1227: std::process::Stdio = std::process::Stdio::piped();
                        let v1229: &mut std::process::Command =
                            std::process::Command::stdout(v1225, std::process::Stdio::piped());
                        let v1231: std::process::Stdio = std::process::Stdio::piped();
                        let v1233: &mut std::process::Command =
                            std::process::Command::stderr(v1229, std::process::Stdio::piped());
                        let v1235: std::process::Stdio = std::process::Stdio::piped();
                        let v1237: &mut std::process::Command =
                            std::process::Command::stdin(v1233, std::process::Stdio::piped());
                        let _v1238: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                            refCell(None::<Spiral_builder::US1>);
                        let v1243: () = {
                            Spiral_builder::closure4(
                                v6.clone(),
                                Func1::new({
                                    let _v1238 = _v1238.clone();
                                    move |v: Option<Spiral_builder::US1>| {
                                        Spiral_builder::closure3(_v1238.clone(), v)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v1258: Spiral_builder::US1 =
                            defaultValue(Spiral_builder::US1::US1_1, _v1238.get().clone());
                        let v1266: &mut std::process::Command = match &v1258 {
                            Spiral_builder::US1::US1_0(v1258_0_0) => {
                                std::process::Command::current_dir(
                                    v1237,
                                    &*match &v1258 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                )
                            }
                            _ => v1237,
                        };
                        let v1284: &mut std::process::Command = if count_2(v2.clone()) as u64
                            == 0_u64
                        {
                            v1266
                        } else {
                            let v1270: Vec<(string, string)> = v2.clone().to_vec();
                            let v1272: bool = true;
                            let _result = v1270.into_iter().fold(v1266, |acc, x| {
                                //;
                                let v1274: &mut std::process::Command = acc;
                                let patternInput_1: (string, string) = x;
                                let v1279: &mut std::process::Command = std::process::Command::env(
                                    v1274,
                                    &*patternInput_1.0.clone(),
                                    &*patternInput_1.1.clone(),
                                );
                                let v1281: bool = true;
                                v1279
                            });
                            _result
                        };
                        let v1286: Result<std::process::Child, std::io::Error> =
                            std::process::Command::spawn(v1284);
                        let v1287 = Spiral_builder::method30();
                        let v1289: Result<std::process::Child, std::string::String> =
                            v1286.map_err(|x| v1287(x));
                        let v1291: bool = true;
                        let _result = v1289.map(|x| {
                            //;
                            let v1293: std::process::Child = x;
                            let v1298: std::sync::Mutex<Option<std::process::Child>> =
                                std::sync::Mutex::new(Some(v1293));
                            let v1300: std::sync::Arc<
                                std::sync::Mutex<Option<std::process::Child>>,
                            > = std::sync::Arc::new(v1298);
                            let v1302: bool = true;
                            v1300
                        });
                        let v1304: Result<
                            std::sync::Arc<std::sync::Mutex<Option<std::process::Child>>>,
                            std::string::String,
                        > = _result;
                        let v1305 = Spiral_builder::method65();
                        let v1306 = Spiral_builder::method66();
                        let v1308: Spiral_builder::US24 = match v1304 {
                            Ok(x) => v1305(x),
                            Err(e) => v1306(e),
                        };
                        let patternInput_3: (i32, Spiral_builder::US5, Spiral_builder::US25) =
                            match &v1308 {
                                Spiral_builder::US24::US24_0(v1308_0_0) => {
                                    let v1309: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::Child>>,
                                    > = v1308_0_0.clone();
                                    let v1311: bool = true;
                                    let _result = (|| {
                                        // rust.capture;
                                        let v1312: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = Spiral_builder::method67(v1309.clone());
                                        let v1314: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1312.lock();
                                        let v1316: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v1314.unwrap();
                                        let v1318: bool = true;
                                        let mut v1316 = v1316;
                                        let v1320: &mut Option<std::process::Child> = &mut v1316;
                                        let v1322: Option<&mut std::process::Child> =
                                            v1320.as_mut();
                                        let v1324: &mut std::process::Child = v1322.unwrap();
                                        let v1326: &mut Option<std::process::ChildStdout> =
                                            &mut v1324.stdout;
                                        let v1328: Option<std::process::ChildStdout> =
                                            Option::take(v1326);
                                        let v1330: std::process::ChildStdout = v1328.unwrap();
                                        let v1332: bool = true;
                                        v1330
                                    })();
                                    let v1334: std::process::ChildStdout = _result;
                                    let v1336: bool = true;
                                    let _result = (|| {
                                        // rust.capture;
                                        let v1337: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = Spiral_builder::method67(v1309.clone());
                                        let v1339: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1337.lock();
                                        let v1341: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v1339.unwrap();
                                        let v1343: bool = true;
                                        let mut v1341 = v1341;
                                        let v1345: &mut Option<std::process::Child> = &mut v1341;
                                        let v1347: Option<&mut std::process::Child> =
                                            v1345.as_mut();
                                        let v1349: &mut std::process::Child = v1347.unwrap();
                                        let v1351: &mut Option<std::process::ChildStderr> =
                                            &mut v1349.stderr;
                                        let v1353: Option<std::process::ChildStderr> =
                                            Option::take(v1351);
                                        let v1355: std::process::ChildStderr = v1353.unwrap();
                                        let v1357: bool = true;
                                        v1355
                                    })();
                                    let v1359: std::process::ChildStderr = _result;
                                    let v1361: bool = true;
                                    let _result = (|| {
                                        // rust.capture;
                                        let v1362: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = Spiral_builder::method67(v1309.clone());
                                        let v1364: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v1362.lock();
                                        let v1366: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v1364.unwrap();
                                        let v1368: bool = true;
                                        let mut v1366 = v1366;
                                        let v1370: &mut Option<std::process::Child> = &mut v1366;
                                        let v1372: Option<&mut std::process::Child> =
                                            v1370.as_mut();
                                        let v1374: &mut std::process::Child = v1372.unwrap();
                                        let v1376: &mut Option<std::process::ChildStdin> =
                                            &mut v1374.stdin;
                                        let v1378: Option<std::process::ChildStdin> =
                                            Option::take(v1376);
                                        let v1380: std::process::ChildStdin = v1378.unwrap();
                                        let v1385: std::sync::Mutex<
                                            Option<std::process::ChildStdin>,
                                        > = std::sync::Mutex::new(Some(v1380));
                                        let v1387: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::ChildStdin>>,
                                        > = std::sync::Arc::new(v1385);
                                        let v1389: bool = true;
                                        v1387
                                    })();
                                    let v1391: std::sync::Arc<
                                        std::sync::Mutex<Option<std::process::ChildStdin>>,
                                    > = _result;
                                    let patternInput_2: (
                                        std::sync::mpsc::Sender<std::string::String>,
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    ) = {
                                        let (sender, receiver) = std::sync::mpsc::channel();
                                        (sender, std::sync::Arc::new(receiver))
                                    };
                                    let v1393: std::sync::mpsc::Sender<std::string::String> =
                                        patternInput_2.0.clone();
                                    let v1396: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v1393.clone());
                                    let v1398: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v1396);
                                    let v1400: std::sync::Mutex<
                                        std::sync::mpsc::Sender<std::string::String>,
                                    > = std::sync::Mutex::new(v1393);
                                    let v1402: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::mpsc::Sender<std::string::String>,
                                        >,
                                    > = std::sync::Arc::new(v1400);
                                    let v1404: std::sync::Mutex<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    > = std::sync::Mutex::new(patternInput_2.1.clone());
                                    let v1406: std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    > = std::sync::Arc::new(v1404);
                                    let v1408: bool = true;
                                    let __result = std::thread::spawn(move || {
                                        //;
                                        let v1410: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStdout,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v1334);
                                        let v1412: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStdout,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v1410);
                                        let v1414: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStdout,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v1412);
                                        let v1416: bool = true;
                                        let mut v1414 = v1414;
                                        let _result = v1414.try_for_each(|x| {
                                            //;
                                            let v1418: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v1420: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v1398.clone();
                                            let v1421 = Spiral_builder::method30();
                                            let v1423: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v1418.map_err(|x| v1421(x));
                                            let v1424 = Spiral_builder::method68();
                                            let v1425 = Spiral_builder::method69();
                                            let v1427: Spiral_builder::US26 = match v1423 {
                                                Ok(x) => v1424(x),
                                                Err(e) => v1425(e),
                                            };
                                            let v2910: std::string::String = match &v1427 {
                                                Spiral_builder::US26::US26_0(v1427_0_0) => {
                                                    let v1430: string =
                                                        fable_library_rust::String_::fromString(
                                                            v1427_0_0.clone(),
                                                        );
                                                    let v1432: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v1434: std::borrow::Cow<[u8]> =
                                                        v1432.encode(&*v1430).0;
                                                    let v1436: &[u8] = v1434.as_ref();
                                                    let v1438: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v1436);
                                                    let v1440: &str = v1438.unwrap();
                                                    let v1442: std::string::String =
                                                        String::from(v1440);
                                                    let v1445: string = sprintf!(
                                                        "> {}",
                                                        fable_library_rust::String_::fromString(
                                                            v1442.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v1448: () = {
                                                            Spiral_builder::closure51(
                                                                v1445.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v2139: () = {
                                                            Spiral_builder::closure53(v1445, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    v1442
                                                }
                                                Spiral_builder::US26::US26_1(v1427_1_0) => {
                                                    let v2141: std::string::String =
                                                        v1427_1_0.clone();
                                                    let v2144: () = {
                                                        Spiral_builder::closure49(
                                                            v2141.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v2904: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v2141
                                                    );
                                                    let v2906: &str = &*v2904;
                                                    String::from(v2906)
                                                }
                                            };
                                            let v2911: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = Spiral_builder::method70(v1420);
                                            let v2913: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v2911.lock();
                                            let v2915: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v2913.unwrap();
                                            let v2917: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v2915;
                                            let v2919: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v2917.send(v2910);
                                            let v2920 = Spiral_builder::method71();
                                            let v2922: Result<(), std::string::String> =
                                                v2919.map_err(|x| v2920(x));
                                            let v2924: _ = v2922;
                                            let v2926: bool = true;
                                            v2924
                                        }); //;
                                        let v2929: Result<(), string> =
                                            Spiral_builder::method72(_result.map_err(|x| x.into()));
                                        let v2933: string =
                                            string("true; v2929 });  // rust.fix_closure\'");
                                        let v2934: bool = true;
                                        v2929
                                    }); // rust.fix_closure';
                                    let v2936: std::thread::JoinHandle<Result<(), string>> =
                                        __result;
                                    let v2938: bool = true;
                                    let __result = std::thread::spawn(move || {
                                        //;
                                        let v2940: encoding_rs_io::DecodeReaderBytes<
                                            std::process::ChildStderr,
                                            Vec<u8>,
                                        > = encoding_rs_io::DecodeReaderBytesBuilder::new()
                                            .utf8_passthru(true)
                                            .build(v1359);
                                        let v2942: std::io::BufReader<
                                            encoding_rs_io::DecodeReaderBytes<
                                                std::process::ChildStderr,
                                                Vec<u8>,
                                            >,
                                        > = std::io::BufReader::new(v2940);
                                        let v2944: std::io::Lines<
                                            std::io::BufReader<
                                                encoding_rs_io::DecodeReaderBytes<
                                                    std::process::ChildStderr,
                                                    Vec<u8>,
                                                >,
                                            >,
                                        > = std::io::BufRead::lines(v2942);
                                        let v2946: bool = true;
                                        let mut v2944 = v2944;
                                        let _result = v2944.try_for_each(|x| {
                                            //;
                                            let v2948: Result<std::string::String, std::io::Error> =
                                                x;
                                            let v2950: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = v1402.clone();
                                            let v2951 = Spiral_builder::method30();
                                            let v2953: Result<
                                                std::string::String,
                                                std::string::String,
                                            > = v2948.map_err(|x| v2951(x));
                                            let v2954 = Spiral_builder::method68();
                                            let v2955 = Spiral_builder::method69();
                                            let v2957: Spiral_builder::US26 = match v2953 {
                                                Ok(x) => v2954(x),
                                                Err(e) => v2955(e),
                                            };
                                            let v4441: std::string::String = match &v2957 {
                                                Spiral_builder::US26::US26_0(v2957_0_0) => {
                                                    let v2960: string =
                                                        fable_library_rust::String_::fromString(
                                                            v2957_0_0.clone(),
                                                        );
                                                    let v2962: &encoding_rs::Encoding =
                                                        encoding_rs::UTF_8;
                                                    let v2964: std::borrow::Cow<[u8]> =
                                                        v2962.encode(&*v2960).0;
                                                    let v2966: &[u8] = v2964.as_ref();
                                                    let v2968: Result<&str, std::str::Utf8Error> =
                                                        std::str::from_utf8(v2966);
                                                    let v2970: &str = v2968.unwrap();
                                                    let v2972: std::string::String =
                                                        String::from(v2970);
                                                    let v2975: string = sprintf!(
                                                        "! {}",
                                                        fable_library_rust::String_::fromString(
                                                            v2972.clone()
                                                        )
                                                    );
                                                    if v5 {
                                                        let v2978: () = {
                                                            Spiral_builder::closure51(
                                                                v2975.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        ()
                                                    } else {
                                                        let v3667: () = {
                                                            Spiral_builder::closure53(v2975, ());
                                                            ()
                                                        };
                                                        ()
                                                    }
                                                    {
                                                        let v3669: string = sprintf!(
                                                            "\u{001b}[4;7m{}\u{001b}[0m",
                                                            v2972
                                                        );
                                                        let v3671: &str = &*v3669;
                                                        String::from(v3671)
                                                    }
                                                }
                                                Spiral_builder::US26::US26_1(v2957_1_0) => {
                                                    let v3674: std::string::String =
                                                        v2957_1_0.clone();
                                                    let v3677: () = {
                                                        Spiral_builder::closure49(
                                                            v3674.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v4435: string = sprintf!(
                                                        "\u{001b}[4;7m{}\u{001b}[0m",
                                                        v3674
                                                    );
                                                    let v4437: &str = &*v4435;
                                                    String::from(v4437)
                                                }
                                            };
                                            let v4442: std::sync::Arc<
                                                std::sync::Mutex<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                            > = Spiral_builder::method70(v2950);
                                            let v4444: Result<
                                                std::sync::MutexGuard<
                                                    std::sync::mpsc::Sender<std::string::String>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        std::sync::mpsc::Sender<
                                                            std::string::String,
                                                        >,
                                                    >,
                                                >,
                                            > = v4442.lock();
                                            let v4446: std::sync::MutexGuard<
                                                std::sync::mpsc::Sender<std::string::String>,
                                            > = v4444.unwrap();
                                            let v4448: &std::sync::mpsc::Sender<
                                                std::string::String,
                                            > = &v4446;
                                            let v4450: Result<
                                                (),
                                                std::sync::mpsc::SendError<std::string::String>,
                                            > = v4448.send(v4441);
                                            let v4451 = Spiral_builder::method71();
                                            let v4453: Result<(), std::string::String> =
                                                v4450.map_err(|x| v4451(x));
                                            let v4455: _ = v4453;
                                            let v4457: bool = true;
                                            v4455
                                        }); //;
                                        let v4460: Result<(), string> =
                                            Spiral_builder::method72(_result.map_err(|x| x.into()));
                                        let v4462: string =
                                            string("true; v4460 });  // rust.fix_closure\'");
                                        let v4463: bool = true;
                                        v4460
                                    }); // rust.fix_closure';
                                    let v4465: std::thread::JoinHandle<Result<(), string>> =
                                        __result;
                                    let _v4466: LrcPtr<MutCell<Option<Spiral_builder::US27>>> =
                                        refCell(None::<Spiral_builder::US27>);
                                    let v4471: () = {
                                        Spiral_builder::closure56(
                                            v4.clone(),
                                            Func1::new({
                                                let _v4466 = _v4466.clone();
                                                move |v_1: Option<Spiral_builder::US27>| {
                                                    Spiral_builder::closure55(_v4466.clone(), v_1)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v4486: Spiral_builder::US27 = defaultValue(
                                        Spiral_builder::US27::US27_1,
                                        _v4466.get().clone(),
                                    );
                                    match &v4486 {
                                        Spiral_builder::US27::US27_0(v4486_0_0) => {
                                            let v4491: std::sync::Arc<
                                                std::sync::Mutex<Option<std::process::ChildStdin>>,
                                            > = Spiral_builder::method73(v1391);
                                            let v4493: Result<
                                                std::sync::MutexGuard<
                                                    Option<std::process::ChildStdin>,
                                                >,
                                                std::sync::PoisonError<
                                                    std::sync::MutexGuard<
                                                        Option<std::process::ChildStdin>,
                                                    >,
                                                >,
                                            > = v4491.lock();
                                            let v4495: std::sync::MutexGuard<
                                                Option<std::process::ChildStdin>,
                                            > = v4493.unwrap();
                                            let v4497: bool = true;
                                            let mut v4495 = v4495;
                                            let v4499: &mut Option<std::process::ChildStdin> =
                                                &mut v4495;
                                            let v4501: Option<std::process::ChildStdin> =
                                                Option::take(v4499);
                                            let v4503: bool = true;
                                            let _result = v4501.map(|x| {
                                                //;
                                                let v4505: std::process::ChildStdin = x;
                                                let v4507: std::sync::Mutex<
                                                    std::process::ChildStdin,
                                                > = std::sync::Mutex::new(v4505);
                                                let v4509: std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                > = std::sync::Arc::new(v4507);
                                                let v4511: bool = true;
                                                v4509
                                            });
                                            let v4513: Option<
                                                std::sync::Arc<
                                                    std::sync::Mutex<std::process::ChildStdin>,
                                                >,
                                            > = _result;
                                            let _v4514: LrcPtr<
                                                MutCell<Option<Spiral_builder::US28>>,
                                            > = refCell(None::<Spiral_builder::US28>);
                                            let v4519: () = {
                                                Spiral_builder::closure58(
                                                    v4513,
                                                    Func1::new({
                                                        let _v4514 = _v4514.clone();
                                                        move |v_2: Option<Spiral_builder::US28>| {
                                                            Spiral_builder::closure57(
                                                                _v4514.clone(),
                                                                v_2,
                                                            )
                                                        }
                                                    }),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v4534: Spiral_builder::US28 = defaultValue(
                                                Spiral_builder::US28::US28_1,
                                                _v4514.get().clone(),
                                            );
                                            match &v4534 {
                                                Spiral_builder::US28::US28_0(v4534_0_0) => {
                                                    let v4538: std::sync::Arc<
                                                        std::sync::Mutex<std::process::ChildStdin>,
                                                    > = match &v4534 {
                                                        Spiral_builder::US28::US28_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    };
                                                    (match &v4486 {
                                                        Spiral_builder::US27::US27_0(x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    })(
                                                        v4538.clone()
                                                    );
                                                    {
                                                        let v4539: std::sync::Arc<
                                                            std::sync::Mutex<
                                                                std::process::ChildStdin,
                                                            >,
                                                        > = Spiral_builder::method74(v4538);
                                                        let v4541: Result<
                                                            std::sync::MutexGuard<
                                                                std::process::ChildStdin,
                                                            >,
                                                            std::sync::PoisonError<
                                                                std::sync::MutexGuard<
                                                                    std::process::ChildStdin,
                                                                >,
                                                            >,
                                                        > = v4539.lock();
                                                        let v4544: std::sync::MutexGuard<
                                                            std::process::ChildStdin,
                                                        > = Spiral_builder::method75(
                                                            v4541.unwrap(),
                                                        );
                                                        let v4546: bool = true;
                                                        let mut v4544 = v4544;
                                                        let v4548: bool = true;
                                                        std::io::Write::flush(&mut *v4544).unwrap();
                                                        ()
                                                    }
                                                }
                                                _ => (),
                                            }
                                        }
                                        _ => (),
                                    }
                                    {
                                        let v4549: std::sync::Arc<
                                            std::sync::Mutex<Option<std::process::Child>>,
                                        > = Spiral_builder::method67(v1309);
                                        let v4551: Result<
                                            std::sync::MutexGuard<Option<std::process::Child>>,
                                            std::sync::PoisonError<
                                                std::sync::MutexGuard<Option<std::process::Child>>,
                                            >,
                                        > = v4549.lock();
                                        let v4553: std::sync::MutexGuard<
                                            Option<std::process::Child>,
                                        > = v4551.unwrap();
                                        let v4555: bool = true;
                                        let mut v4553 = v4553;
                                        let v4557: &mut Option<std::process::Child> = &mut v4553;
                                        let v4559: Option<std::process::Child> =
                                            Option::take(v4557);
                                        let v4561: std::process::Child = v4559.unwrap();
                                        let v4563: Result<std::process::Output, std::io::Error> =
                                            v4561.wait_with_output();
                                        let v4564 = Spiral_builder::method30();
                                        let v4566: Result<
                                            std::process::Output,
                                            std::string::String,
                                        > = v4563.map_err(|x| v4564(x));
                                        let v4567: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method76(v4465);
                                        let v4570: string = string("v4567");
                                        let v4571: std::thread::JoinHandle<Result<(), string>> =
                                            Spiral_builder::method76(v2936);
                                        let v4576: string = append(
                                            append(
                                                string("vec!["),
                                                append(string("v4571, "), v4570),
                                            ),
                                            string("]"),
                                        );
                                        let v4577: Vec<
                                            std::thread::JoinHandle<Result<(), string>>,
                                        > = vec![v4571, v4567];
                                        let v4579: bool = true;
                                        v4577.into_iter().for_each(|x| {
                                            //;
                                            let v4581: std::thread::JoinHandle<Result<(), string>> =
                                                x;
                                            let v4583: Result<
                                                Result<(), string>,
                                                Box<dyn core::any::Any + 'static + Send>,
                                            > = std::thread::JoinHandle::join(v4581);
                                            let v4585: Result<(), string> = v4583.unwrap();
                                            v4585.unwrap();
                                            {
                                                let v4588: bool = true;
                                                ()
                                            }
                                        });
                                        {
                                            //;
                                            let v4591: Spiral_builder::US29 = match &v4566 {
                                                Err(v4566_1_0) => {
                                                    Spiral_builder::closure60((), v4566_1_0.clone())
                                                }
                                                Ok(v4566_0_0) => {
                                                    Spiral_builder::closure59((), v4566_0_0.clone())
                                                }
                                            };
                                            match &v4591 {
                                                Spiral_builder::US29::US29_0(v4591_0_0) => {
                                                    let v4594: std::process::ExitStatus =
                                                        v4591_0_0.clone().status;
                                                    let v4596: Option<i32> = v4594.code();
                                                    let _v4597: LrcPtr<
                                                        MutCell<Option<Spiral_builder::US30>>,
                                                    > = refCell(None::<Spiral_builder::US30>);
                                                    let v4602: () = {
                                                        Spiral_builder::closure64(
                                                            v4596,
                                                            Func1::new({
                                                                let _v4597 = _v4597.clone();
                                                                move
                                                                                                                             |v_5:
                                                                                                                                  Option<Spiral_builder::US30>|
                                                                                                                             Spiral_builder::closure63(_v4597.clone(),
                                                                                                                                                       v_5)
                                                            }),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    let v4617: Spiral_builder::US30 = defaultValue(
                                                        Spiral_builder::US30::US30_1,
                                                        _v4597.get().clone(),
                                                    );
                                                    match &v4617 {
                                                        Spiral_builder::US30::US30_0(v4617_0_0) => (
                                                            match &v4617 {
                                                                Spiral_builder::US30::US30_0(x) => {
                                                                    x.clone()
                                                                }
                                                                _ => unreachable!(),
                                                            },
                                                            Spiral_builder::US5::US5_1,
                                                            Spiral_builder::US25::US25_0(
                                                                v1406.clone(),
                                                            ),
                                                        ),
                                                        _ => {
                                                            let v4626:
                                                                                        &str =
                                                                                    &*string("runtime.execute_with_options / exit_code=None");
                                                            (
                                                                -1_i32,
                                                                Spiral_builder::US5::US5_0(
                                                                    String::from(v4626),
                                                                ),
                                                                Spiral_builder::US25::US25_0(
                                                                    v1406.clone(),
                                                                ),
                                                            )
                                                        }
                                                    }
                                                }
                                                Spiral_builder::US29::US29_1(v4591_1_0) => {
                                                    let v4637: std::string::String =
                                                        v4591_1_0.clone();
                                                    let v4640: () = {
                                                        Spiral_builder::closure61(
                                                            v4637.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    (
                                                        -2_i32,
                                                        Spiral_builder::US5::US5_0(v4637),
                                                        Spiral_builder::US25::US25_1,
                                                    )
                                                }
                                            }
                                        }
                                    }
                                }
                                Spiral_builder::US24::US24_1(v1308_1_0) => {
                                    let v5406: std::string::String = v1308_1_0.clone();
                                    let v5409: () = {
                                        Spiral_builder::closure45(v5406.clone(), ());
                                        ()
                                    };
                                    (
                                        -1_i32,
                                        Spiral_builder::US5::US5_0(v5406),
                                        Spiral_builder::US25::US25_1,
                                    )
                                }
                            };
                        let v6176: Spiral_builder::US25 = patternInput_3.2.clone();
                        let v6175: Spiral_builder::US5 = patternInput_3.1.clone();
                        let v6174: i32 = patternInput_3.0.clone();
                        let v6183: Option<
                            std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            >,
                        > = match &v6176 {
                            Spiral_builder::US25::US25_0(v6176_0_0) => Some(match &v6176 {
                                Spiral_builder::US25::US25_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => {
                                None::<
                                    std::sync::Arc<
                                        std::sync::Mutex<
                                            std::sync::Arc<
                                                std::sync::mpsc::Receiver<std::string::String>,
                                            >,
                                        >,
                                    >,
                                >
                            }
                        };
                        let v6185: bool = true;
                        let _result = v6183.map(|x| {
                            //;
                            let v6188: std::sync::Arc<
                                std::sync::Mutex<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                            > = Spiral_builder::method77(x);
                            let v6190: Result<
                                std::sync::MutexGuard<
                                    std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                                >,
                                std::sync::PoisonError<
                                    std::sync::MutexGuard<
                                        std::sync::Arc<
                                            std::sync::mpsc::Receiver<std::string::String>,
                                        >,
                                    >,
                                >,
                            > = v6188.lock();
                            let v6192: std::sync::MutexGuard<
                                std::sync::Arc<std::sync::mpsc::Receiver<std::string::String>>,
                            > = v6190.unwrap();
                            let v6194 = v6192.iter();
                            let v6196: Vec<std::string::String> = v6194.collect::<Vec<_>>();
                            let v6198: bool = true;
                            let _result: Vec<_> = v6196
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v6200: std::string::String = x;
                                    let v6202: string =
                                        fable_library_rust::String_::fromString(v6200);
                                    let v6204: bool = true;
                                    v6202
                                })
                                .collect::<Vec<_>>();
                            let v6206: Vec<string> = _result;
                            let v6215: string = join(
                                string("\n"),
                                toArray_1(ofArray_1(fable_library_rust::NativeArray_::array_from(
                                    v6206,
                                ))),
                            );
                            let v6219: bool = true;
                            v6215
                        });
                        let v6221: Option<string> = _result;
                        let v6228: Spiral_builder::US1 = match &v6175 {
                            Spiral_builder::US5::US5_0(v6175_0_0) => Spiral_builder::US1::US1_0(
                                fable_library_rust::String_::fromString(match &v6175 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            _ => Spiral_builder::US1::US1_1,
                        };
                        let v6233: string = defaultValue(
                            match &v6228 {
                                Spiral_builder::US1::US1_0(v6228_0_0) => match &v6228 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => string(""),
                            },
                            v6221,
                        );
                        let v6238: () = {
                            Spiral_builder::closure65(v6174, v6233.clone(), ());
                            ()
                        };
                        LrcPtr::new((v6174, v6233))
                    }
                }))();
                _v1219.set(Some(x_3))
            }
            {
                let v7007: LrcPtr<(i32, string)> = match &_v1219.get().clone() {
                    None => panic!("{}", string("base.capture / _v1219=None"),),
                    Some(_v1219_0_0) => _v1219_0_0.clone(),
                };
                let _v7: (i32, string) = (v7007.0.clone(), v7007.1.clone());
                (_v7.0.clone(), _v7.1.clone())
            }
        }
        pub fn closure83(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / env install error")
        }
        pub fn closure82(
            v0_1: Spiral_builder::US8,
            v1_1: string,
            v2: string,
            v3: i32,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("env")), ());
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v665: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v674: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v683: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v691: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v699: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v707: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v716: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v724: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v732: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v740: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v749: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v757: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v765: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v774: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v777: string = v629.l0.get().clone();
                let v816: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure83((), ()),
                            v777
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v816.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v816)
            }
        }
        pub fn closure84(unitVar: (), v0_1: string) -> Spiral_builder::US1 {
            Spiral_builder::US1::US1_0(v0_1)
        }
        pub fn closure85(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure88(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / Exception")
        }
        pub fn closure87(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: std::string::String = format!("{:#?}", v3);
                let v689: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v659)),
                        (),
                    );
                    ()
                };
                let v698: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v707: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v715: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v723: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v731: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v740: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v748: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v756: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v764: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v773: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v781: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v789: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v798: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v801: string = v629.l0.get().clone();
                let v840: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure88((), ()),
                            v801
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v840.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v840)
            }
        }
        pub fn closure86(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure87(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure90(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_cuda / error")
        }
        pub fn closure89(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v662: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v671: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v680: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v688: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v696: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v713: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v721: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v729: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v737: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v746: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v754: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v762: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v774: string = v629.l0.get().clone();
                let v813: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure90((), ()),
                            v774
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v813.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v813)
            }
        }
        pub fn closure91(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn method79() -> string {
            string("fs-path")
        }
        pub fn method80() -> string {
            string("command")
        }
        pub fn method81() -> string {
            string("path")
        }
        pub fn method86(v0_1: string) -> string {
            v0_1
        }
        pub fn method85(v0_1: string) -> string {
            if v0_1.clone() == string("") {
                string("")
            } else {
                let v7: Result<regex::Regex, regex::Error> =
                    regex::Regex::new(&string("^\\\\\\\\\\?\\\\"));
                let v9: regex::Regex = v7.unwrap();
                let v10: string = Spiral_builder::method86(v0_1);
                let v12: std::borrow::Cow<str> = v9.replace_all(&*v10, &*string(""));
                let v14: std::string::String = String::from(v12);
                let v30: string = fable_library_rust::String_::fromString(v14);
                replace(
                    sprintf!(
                        "{}{}",
                        toLower(ofChar(getCharAt(v30.clone(), 0_i32))),
                        getSlice(v30, Some(1_i32), None::<i32>)
                    ),
                    string("\\"),
                    string("/"),
                )
            }
        }
        pub fn method87(v0_1: i32, v1_1: LrcPtr<Spiral_builder::Mut6>) -> bool {
            v1_1.l0.get().clone() < v0_1
        }
        pub fn method88() -> char {
            std::path::MAIN_SEPARATOR
        }
        pub fn method84(v0_1: string) -> string {
            let v3: &str = &*v0_1.clone();
            let v5: std::string::String = String::from(v3);
            let v7: std::path::PathBuf = std::path::PathBuf::from(v5);
            if v7.exists() == false {
                let v11: string = Spiral_builder::method23();
                let v15: Array<string> = split(
                    Spiral_builder::method85(Spiral_builder::method15(v11.clone(), v0_1.clone())),
                    string("/"),
                    -1_i32,
                    0_i32,
                );
                let v17: i32 = count_2(v15.clone());
                let v18: LrcPtr<Spiral_builder::Mut6> = LrcPtr::new(Spiral_builder::Mut6 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(0_i32),
                    l2: MutCell::new(new_empty::<string>()),
                });
                while Spiral_builder::method87(v17, v18.clone()) {
                    let v20: i32 = v18.l0.get().clone();
                    let v23: i32 = v20.wrapping_neg() + v17 - 1_i32;
                    let matchValue: i32 = v18.l1.get().clone();
                    let v25: Array<string> = v18.l2.get().clone();
                    let v24: i32 = matchValue;
                    let v26: string = v15[v23].clone();
                    let patternInput_1: (i32, Array<string>) = if string("..") == v26.clone() {
                        (v24 + 1_i32, v25.clone())
                    } else {
                        if string(".") == v26.clone() {
                            (v24, v25.clone())
                        } else {
                            if 0_i32 == v24 {
                                if endsWith(v26.clone(), string(":"), false) {
                                    let v34: Array<string> = new_array(&[sprintf!(
                                        "{}:",
                                        getCharAt(v11.clone(), 0_i32)
                                    )]);
                                    let v35: i32 = count_2(v34.clone());
                                    let v37: i32 = v35 + count_2(v25.clone());
                                    let v38: Array<string> = new_init(&string(""), v37);
                                    let v39: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method43(v37, v39.clone()) {
                                        let v41: i32 = v39.l0.get().clone();
                                        let v46: string = if v41 < v35 {
                                            v34[v41].clone()
                                        } else {
                                            let v44: i32 = v41 - v35;
                                            v25[v44].clone()
                                        };
                                        v38.get_mut()[v41 as usize] = v46;
                                        {
                                            let v47: i32 = v41 + 1_i32;
                                            v39.l0.set(v47);
                                            ()
                                        }
                                    }
                                    (0_i32, v38.clone())
                                } else {
                                    let v48: Array<string> = new_array(&[v26]);
                                    let v49: i32 = count_2(v48.clone());
                                    let v51: i32 = v49 + count_2(v25.clone());
                                    let v52: Array<string> = new_init(&string(""), v51);
                                    let v53: LrcPtr<Spiral_builder::Mut5> =
                                        LrcPtr::new(Spiral_builder::Mut5 {
                                            l0: MutCell::new(0_i32),
                                        });
                                    while Spiral_builder::method43(v51, v53.clone()) {
                                        let v55: i32 = v53.l0.get().clone();
                                        let v60: string = if v55 < v49 {
                                            v48[v55].clone()
                                        } else {
                                            let v58: i32 = v55 - v49;
                                            v25[v58].clone()
                                        };
                                        v52.get_mut()[v55 as usize] = v60;
                                        {
                                            let v61: i32 = v55 + 1_i32;
                                            v53.l0.set(v61);
                                            ()
                                        }
                                    }
                                    (0_i32, v52.clone())
                                }
                            } else {
                                (v24 - 1_i32, v25.clone())
                            }
                        }
                    };
                    let v71: i32 = v20 + 1_i32;
                    v18.l0.set(v71);
                    v18.l1.set(patternInput_1.0.clone());
                    v18.l2.set(patternInput_1.1.clone());
                    ()
                }
                {
                    let matchValue_2: i32 = v18.l1.get().clone();
                    let v73: Array<string> = v18.l2.get().clone();
                    let v74: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                        let v73 = v73.clone();
                        move || {
                            map(
                                Func1::new({
                                    let v73 = v73.clone();
                                    move |i: i32| v73[i].clone()
                                }),
                                rangeNumeric(0_i32, 1_i32, count_2(v73.clone()) - 1_i32),
                            )
                        }
                    }));
                    join(ofChar(Spiral_builder::method88()), toArray_1(v74))
                }
            } else {
                let v88: Result<std::path::PathBuf, std::io::Error> = std::fs::canonicalize(&*v0_1);
                let v90: std::path::PathBuf = v88.unwrap();
                let v92: std::path::Display = v90.display();
                let v95: std::string::String = format!("{}", v92);
                fable_library_rust::String_::fromString(v95)
            }
        }
        pub fn method83(v0_1: string) -> string {
            Spiral_builder::method85(Spiral_builder::method84(v0_1))
        }
        pub fn method82(v0_1: string) -> string {
            Spiral_builder::method83(Spiral_builder::method15(Spiral_builder::method23(), v0_1))
        }
        pub fn closure92(unitVar: (), v0_1: std::string::String) -> string {
            Spiral_builder::method82(fable_library_rust::String_::fromString(v0_1))
        }
        pub fn method89() -> string {
            string("retries")
        }
        pub fn method90() -> string {
            string("working-directory")
        }
        pub fn closure94(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / repl error")
        }
        pub fn closure93(v0_1: u8, v1_1: u8, v2: string, v3: i32, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_blue;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v628: string = sprintf!("{}/{}", v1_1, v0_1);
                let v630: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v637: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v646: () = {
                    Spiral_builder::closure10(
                        v630.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v655: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v663: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v672: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v681: () = {
                    Spiral_builder::closure10(
                        v630.clone(),
                        sprintf!("{}", string("repl_result")),
                        (),
                    );
                    ()
                };
                let v689: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v697: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v705: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v714: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v722: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v730: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v628), ());
                    ()
                };
                let v739: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v742: string = v630.l0.get().clone();
                let v781: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure94((), ()),
                            v742
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v781.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v781)
            }
        }
        pub fn method91(v0_1: Option<string>, v1_1: u8, v2: string, v3: u8) -> (i32, string) {
            let v0_1: MutCell<Option<string>> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<u8> = MutCell::new(v1_1);
            let v2: MutCell<string> = MutCell::new(v2.clone());
            let v3: MutCell<u8> = MutCell::new(v3);
            '_method91: loop {
                break '_method91 ({
                    let patternInput: (i32, string) = Spiral_builder::method40(
                        sprintf!(
                            "dotnet repl --exit-after-run --run \"{}\" --output-path \"{}.ipynb\"",
                            v2.get().clone(),
                            v2.get().clone()
                        ),
                        None::<CancellationToken>,
                        new_array(&[
                            (string("TRACE_LEVEL"), string("Verbose")),
                            (string("AUTOMATION"), string("True")),
                        ]),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        false,
                        v0_1.get().clone(),
                    );
                    let v17: string = patternInput.1.clone();
                    let v16: i32 = patternInput.0.clone();
                    if if v16 == 0_i32 {
                        true
                    } else {
                        v3.get().clone() >= v1_1.get().clone()
                    } {
                        (v16, v17.clone())
                    } else {
                        let v23: () = {
                            Spiral_builder::closure93(
                                v1_1.get().clone(),
                                v3.get().clone(),
                                v17,
                                v16,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: Option<string> = v0_1.get().clone();
                            let v1_1_temp: u8 = v1_1.get().clone();
                            let v2_temp: string = v2.get().clone();
                            let v3_temp: u8 = v3.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            continue '_method91;
                        }
                    }
                });
            }
        }
        pub fn closure96(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / jupyter nbconvert")
        }
        pub fn closure95(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_blue;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: i32 = length(v0_1);
                let v628: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v635: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v644: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v653: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v670: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v679: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("jupyter_result_length")),
                        (),
                    );
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v626), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v707: string = v628.l0.get().clone();
                let v746: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure96((), ()),
                            v707
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v746.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v746)
            }
        }
        pub fn closure98(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib / html cell ids")
        }
        pub fn closure97(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_blue;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: i32 = length(v0_1);
                let v628: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v635: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v644: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v653: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v670: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v679: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("pwsh_replace_html_result_length")),
                        (),
                    );
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v626), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v707: string = v628.l0.get().clone();
                let v746: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure98((), ()),
                            v707
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v746.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v746)
            }
        }
        pub fn closure100(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / dib")
        }
        pub fn closure99(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_blue;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: i32 = length(v0_1);
                let v628: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v635: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v644: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v653: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v670: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v679: () = {
                    Spiral_builder::closure10(
                        v628.clone(),
                        sprintf!("{}", string("result_length")),
                        (),
                    );
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", v626), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v628.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v707: string = v628.l0.get().clone();
                let v746: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure100((), ()),
                            v707
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v746.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v746)
            }
        }
        pub fn method92() -> string {
            string("wasm")
        }
        pub fn method93() -> string {
            string("contract")
        }
        pub fn method95() -> string {
            string("")
        }
        pub fn method96() -> string {
            string("")
        }
        pub fn method94(v0_1: string) -> string {
            let v5: Array<u8> = {
                let _arg: LrcPtr<dyn Encoding> = get_UTF8();
                _arg.getBytes(v0_1)
            };
            let v7: Vec<u8> = v5.to_vec();
            let v9: std::io::Cursor<Vec<u8>> = std::io::Cursor::new(v7);
            let v11: std::io::BufReader<std::io::Cursor<Vec<u8>>> = std::io::BufReader::new(v9);
            let v13: bool = true;
            let mut v11 = v11;
            let result: sha2::Sha256 = sha2::Digest::new();
            {
                let v16: sha2::Sha256 = result;
                let v18: bool = true;
                let mut v16 = v16;
                let v19: usize = 0_i32 as usize;
                let v23: _ = [0_u8; 1024];
                let v25: bool = true;
                loop {
                    // rust.loop;
                    let v27: bool = true;
                    let mut v23 = v23;
                    let v29: Result<usize, std::io::Error> =
                        std::io::Read::read(&mut v11, &mut v23);
                    let v31: usize = v29.unwrap();
                    if v31 == v19 {
                        let v36: bool = true;
                        break;
                        ()
                    }
                    {
                        let v38: usize = v23.len();
                        let v39: u8 = v38 as u8;
                        let v42: usize = v31;
                        let v55: &_ = if v42 == v38 {
                            &v23[v19..]
                        } else {
                            &v23[v19..v42]
                        };
                        sha2::Digest::update(&mut v16, v55);
                        {
                            let v58: bool = true;
                        } // rust.loop;
                        let v60: bool = true;
                    } // rust.loop;
                    let v62: bool = true;
                } // rust.loop;
                let v64: bool = true;
                {
                    // rust.loop;
                    let v66: bool = true;
                    {
                        // rust.loop;
                        let v68: &[u8] = &sha2::Digest::finalize(v16);
                        let v70: Vec<u8> = v68.iter().map(|x| *x).collect::<Vec<_>>();
                        let v72: bool = true;
                        let _result: Vec<_> = v70
                            .into_iter()
                            .map(|x| {
                                //;
                                let v74: u8 = x;
                                let v76: std::string::String = format!("{:02x}", v74);
                                let v78: string = fable_library_rust::String_::fromString(v76);
                                let v80: bool = true;
                                v78
                            })
                            .collect::<Vec<_>>();
                        let v82: Vec<string> = _result;
                        let v84: Array<string> = fable_library_rust::NativeArray_::array_from(v82);
                        let v85: LrcPtr<dyn IEnumerable_1<string>> = delay(Func0::new({
                            let v84 = v84.clone();
                            move || {
                                map(
                                    Func1::new({
                                        let v84 = v84.clone();
                                        move |i: i32| v84[i].clone()
                                    }),
                                    rangeNumeric(0_i32, 1_i32, count_2(v84.clone()) - 1_i32),
                                )
                            }
                        }));
                        let v91: string = join(Spiral_builder::method95(), toArray_1(v85));
                        Ok::<string, std::io::Error>(v91).unwrap()
                    }
                }
            }
        }
        pub fn closure101(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US35>>>,
            v1_1: Option<Spiral_builder::US35>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US35>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure102(
            v0_1: Option<chrono::DateTime<chrono::Utc>>,
            v1_1: Func1<
                Option<Spiral_builder::US35>,
                LrcPtr<MutCell<Option<Spiral_builder::US35>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US35>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US35>,
                    Some(v0_1_0_0) => {
                        let x: chrono::DateTime<chrono::Utc> = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US35::US35_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method98() -> string {
            string("hh:mm")
        }
        pub fn method99() -> string {
            string("yyyyMMdd-HHmm-ssff-ffff-f")
        }
        pub fn method100() -> string {
            string("hhmm")
        }
        pub fn method97(v0_1: Guid, v1_1: DateTime) -> Guid {
            let v7: DateTime = {
                let _arg: DateTime =
                    DateTime::new_ymdhms_kind(1970_i32, 1_i32, 1_i32, 0_i32, 0_i32, 0_i32, 1_i32);
                _arg.toUniversalTime()
            };
            let v25: i64 = ({
                let _arg_2: DateTime = {
                    let _arg_1: DateTime = DateTime::specifyKind(v1_1, 2_i32);
                    _arg_1.toUniversalTime()
                };
                _arg_2.ticks()
            } - v7.ticks())
                / 10_i64;
            let v27: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v25);
            let _v28: LrcPtr<MutCell<Option<Spiral_builder::US35>>> =
                refCell(None::<Spiral_builder::US35>);
            let v33: () = {
                Spiral_builder::closure102(
                    v27,
                    Func1::new({
                        let _v28 = _v28.clone();
                        move |v: Option<Spiral_builder::US35>| {
                            Spiral_builder::closure101(_v28.clone(), v)
                        }
                    }),
                    (),
                );
                ()
            };
            let v48: Spiral_builder::US35 =
                defaultValue(Spiral_builder::US35::US35_1, _v28.get().clone());
            let v68: Spiral_builder::US1 = match &v48 {
                Spiral_builder::US35::US35_0(v48_0_0) => {
                    let v54: chrono::NaiveDateTime = match &v48 {
                        Spiral_builder::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v56: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v54);
                    let v58: string = string("r#\"%Y%m%d-%H%M-%S%f\"#");
                    let v59: &str = r#"%Y%m%d-%H%M-%S%f"#;
                    let v61: std::string::String = v56.format(v59).to_string();
                    let v63: string = fable_library_rust::String_::fromString(v61);
                    Spiral_builder::US1::US1_0(sprintf!(
                        "{}-{}-{}",
                        getSlice(v63.clone(), Some(0_i32), Some(17_i32)),
                        getSlice(v63.clone(), Some(18_i32), Some(21_i32)),
                        getCharAt(v63, 22_i32)
                    ))
                }
                _ => Spiral_builder::US1::US1_1,
            };
            let v72: string = match &v68 {
                Spiral_builder::US1::US1_0(v68_0_0) => match &v68 {
                    Spiral_builder::US1::US1_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string(""),
            };
            let v75: LrcPtr<TimeZoneInfo> = 0i64.into();
            let v150: u8 = if zero.hours() > 0_i32 { 1_u8 } else { 0_u8 };
            let v151: string = Spiral_builder::method98();
            let v159: string = zero.to_string(v151);
            let v162: string = sprintf!(
                "{}{}{}",
                v150,
                getSlice(v159.clone(), Some(0_i32), Some(1_i32)),
                getSlice(v159, Some(3_i32), Some(4_i32))
            );
            parse(sprintf!(
                "{}{}{}",
                v72.clone(),
                v162.clone(),
                getSlice(
                    toString(v0_1),
                    Some(length(v72) + length(v162)),
                    None::<i32>
                )
            ))
        }
        pub fn method101(v0_1: string, v1_1: string) {
            if Spiral_builder::method19(v0_1.clone()) == false {
                let v4: LrcPtr<dyn IDisposable> = Spiral_builder::method28(v0_1.clone());
                ()
            }
            {
                let v5: string = Spiral_builder::method24(v1_1.clone());
                if Spiral_builder::method19(v5.clone()) == false {
                    let v8: LrcPtr<dyn IDisposable> = Spiral_builder::method28(v5);
                    ()
                }
                if if Spiral_builder::method19(v1_1.clone()) {
                    let v11: Result<std::path::PathBuf, std::io::Error> =
                        std::fs::read_link(&*v1_1.clone());
                    v11.is_err()
                } else {
                    false
                } {
                    Spiral_builder::method32(true, v1_1.clone());
                }
                if Spiral_builder::method19(v1_1.clone()) == false {
                    let _v19: MutCell<Option<()>> = MutCell::new(None::<()>);
                    std::os::windows::fs::symlink_dir(&*v0_1, &*v1_1).unwrap();
                    _v19.set(Some(()));
                    match &_v19.get().clone() {
                        None => panic!("{}", string("runtime.run_platform / _v19=None"),),
                        Some(_v19_0_0) => _v19_0_0.clone(),
                    }
                    ();
                    ()
                }
            }
        }
        pub fn closure104(unitVar: (), unitVar_1: ()) -> string {
            string("common.retry_fn\' / loop")
        }
        pub fn closure103(v0_1: u8, v1_1: u8, v2: i32, v3: string, v4: bool, unitVar: ()) {
            fn v6() {
                Spiral_builder::closure2((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v36: () = {
                v6();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v64: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v64,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v72: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v76: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v105: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v110: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v105 = _v105.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v105.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v125: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v105.get().clone());
                let v165: DateTime = match &v125 {
                    Spiral_builder::US3::US3_0(v125_0_0) => {
                        let v139: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v125 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v139.hours(),
                            v139.minutes(),
                            v139.seconds(),
                            v139.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v170: string = {
                    let provider: string = Spiral_builder::method6();
                    v165.toString(provider)
                };
                let v562: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v578: &str = inline_colorization::color_bright_blue;
                let v580: &str = &*v562;
                let v582: &str = inline_colorization::color_reset;
                let v584: string = string("format!(\"{v578}{v580}{v582}\")");
                let v585: std::string::String = format!("{v578}{v580}{v582}");
                let v587: string = fable_library_rust::String_::fromString(v585);
                let v628: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: string = sprintf!("{}/{}", v1_1, v0_1);
                let v631: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v638: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v647: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string("is_error")), ());
                    ()
                };
                let v656: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v667: () = {
                    Spiral_builder::closure10(
                        v631.clone(),
                        sprintf!("{}", if v4 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v676: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v685: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v693: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v701: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", v629), ());
                    ()
                };
                let v709: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v718: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string("result")), ());
                    ()
                };
                let v726: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v734: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v743: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string(", ")), ());
                    ()
                };
                let v751: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v760: () = {
                    Spiral_builder::closure10(v631.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v763: string = v631.l0.get().clone();
                let v802: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v170,
                            v587,
                            v628,
                            Spiral_builder::closure104((), ()),
                            v763
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v802.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v802)
            }
        }
        pub fn method104(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
            v8: u8,
        ) -> (i32, string) {
            let v0_1: MutCell<u8> = MutCell::new(v0_1);
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<Option<CancellationToken>> = MutCell::new(v2.clone());
            let v3: MutCell<Array<(string, string)>> = MutCell::new(v3.clone());
            let v4 = MutCell::new(v4.clone());
            let v5 = MutCell::new(v5.clone());
            let v6: MutCell<bool> = MutCell::new(v6);
            let v7: MutCell<Option<string>> = MutCell::new(v7.clone());
            let v8: MutCell<u8> = MutCell::new(v8);
            '_method104: loop {
                break '_method104 ({
                    let patternInput: (i32, string) = Spiral_builder::method40(
                        v1_1.get().clone(),
                        v2.get().clone(),
                        v3.get().clone(),
                        v4.get().clone(),
                        v5.get().clone(),
                        v6.get().clone(),
                        v7.get().clone(),
                    );
                    let v9: i32 = patternInput.0.clone();
                    let v10: string = patternInput.1.clone();
                    let v14: Spiral_builder::US36 = if v9 == 0_i32 {
                        Spiral_builder::US36::US36_0(v9, v10.clone())
                    } else {
                        Spiral_builder::US36::US36_1(v9, v10)
                    };
                    let patternInput_1: (bool, i32, string) = match &v14 {
                        Spiral_builder::US36::US36_0(v14_0_0, v14_0_1) => {
                            (false, v14_0_0.clone(), v14_0_1.clone())
                        }
                        Spiral_builder::US36::US36_1(v14_1_0, v14_1_1) => {
                            (true, v14_1_0.clone(), v14_1_1.clone())
                        }
                    };
                    let v24: string = patternInput_1.2.clone();
                    let v23: i32 = patternInput_1.1.clone();
                    let v22: bool = patternInput_1.0.clone();
                    if if v22 == false {
                        true
                    } else {
                        v8.get().clone() >= v0_1.get().clone()
                    } {
                        (v23, v24.clone())
                    } else {
                        let v30: () = {
                            Spiral_builder::closure103(
                                v0_1.get().clone(),
                                v8.get().clone(),
                                v23,
                                v24,
                                v22,
                                (),
                            );
                            ()
                        };
                        {
                            let v0_1_temp: u8 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: Option<CancellationToken> = v2.get().clone();
                            let v3_temp: Array<(string, string)> = v3.get().clone();
                            let v4_temp = v4.get().clone();
                            let v5_temp = v5.get().clone();
                            let v6_temp: bool = v6.get().clone();
                            let v7_temp: Option<string> = v7.get().clone();
                            let v8_temp: u8 = v8.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            v3.set(v3_temp);
                            v4.set(v4_temp);
                            v5.set(v5_temp);
                            v6.set(v6_temp);
                            v7.set(v7_temp);
                            v8.set(v8_temp);
                            continue '_method104;
                        }
                    }
                });
            }
        }
        pub fn method103(
            v0_1: u8,
            v1_1: string,
            v2: Option<CancellationToken>,
            v3: Array<(string, string)>,
            v4: Option<Func1<(i32, string, bool), Arc<Async<()>>>>,
            v5: Option<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
            v6: bool,
            v7: Option<string>,
        ) -> (i32, string) {
            Spiral_builder::method104(v0_1, v1_1, v2, v3, v4, v5, v6, v7, 1_u8)
        }
        pub fn method102(
            v0_1: Spiral_builder::US33,
            v1_1: string,
            v2: string,
            v3: string,
            v4: Spiral_builder::US12,
        ) -> (i32, string) {
            let v68: string = sprintf!(
                "dotnet fable \"{}\" --optimize --lang {} --extension .{} --outDir \"{}\"{}{}",
                v3,
                v2.clone(),
                v2,
                v1_1,
                sprintf!(
                    " --define {}",
                    if cfg!(windows) {
                        string("_WINDOWS")
                    } else {
                        string("_LINUX")
                    }
                ),
                match &v0_1 {
                    Spiral_builder::US33::US33_0(v0_1_0_0) => {
                        let v38: Spiral_builder::US34 = match &v0_1 {
                            Spiral_builder::US33::US33_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v43: Spiral_builder::US1 = if if let Spiral_builder::US34::US34_0 = &v38
                        {
                            true
                        } else {
                            false
                        } {
                            Spiral_builder::US1::US1_0(string("Wasm"))
                        } else {
                            Spiral_builder::US1::US1_1
                        };
                        let v57: Spiral_builder::US1 = match &v43 {
                            Spiral_builder::US1::US1_0(v43_0_0) => {
                                Spiral_builder::US1::US1_0(match &v43 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v50: Spiral_builder::US1 =
                                    if if let Spiral_builder::US34::US34_1 = &v38 {
                                        true
                                    } else {
                                        false
                                    } {
                                        Spiral_builder::US1::US1_0(string("Contract"))
                                    } else {
                                        Spiral_builder::US1::US1_1
                                    };
                                match &v50 {
                                    Spiral_builder::US1::US1_0(v50_0_0) => {
                                        Spiral_builder::US1::US1_0(match &v50 {
                                            Spiral_builder::US1::US1_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => Spiral_builder::US1::US1_1,
                                }
                            }
                        };
                        sprintf!(
                            " --define {}",
                            toUpper(match &v57 {
                                Spiral_builder::US1::US1_0(v57_0_0) => match &v57 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            })
                        )
                    }
                    _ => string(""),
                }
            );
            let v74: Result<string, string> = match &v4 {
                Spiral_builder::US12::US12_0(v4_0_0) => Ok::<string, string>(v4_0_0.clone()),
                Spiral_builder::US12::US12_1(v4_1_0) => Err::<string, string>(v4_1_0.clone()),
            };
            Spiral_builder::method103(
                3_u8,
                v68,
                None::<CancellationToken>,
                new_empty::<(string, string)>(),
                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                true,
                v74.ok(),
            )
        }
        pub fn closure106(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / dotnet fable error")
        }
        pub fn closure105(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_red;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v627: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v634: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v643: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v660: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("dotnet_fable_result")),
                        (),
                    );
                    ()
                };
                let v686: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v694: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v703: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v706: string = v627.l0.get().clone();
                let v745: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure106((), ()),
                            v706
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v745.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v745)
            }
        }
        pub fn closure107(unitVar: (), v0_1: std::string::String) -> bool {
            contains(
                fable_library_rust::String_::fromString(v0_1),
                string("near-sdk"),
            )
        }
        pub fn method105() -> Func1<std::string::String, bool> {
            Func1::new(move |v: std::string::String| Spiral_builder::closure107((), v))
        }
        pub fn method106(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method107(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn method108(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure108(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US37>>>,
            v1_1: Option<Spiral_builder::US37>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US37>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure109(
            v0_1: Option<std::collections::HashMap<string, string>>,
            v1_1: Func1<
                Option<Spiral_builder::US37>,
                LrcPtr<MutCell<Option<Spiral_builder::US37>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US37>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US37>,
                    Some(v0_1_0_0) => {
                        let x: std::collections::HashMap<string, string> = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US37::US37_0(x.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn method110() -> string {
            string("a")
        }
        pub fn closure110(v0_1: u8, v1_1: i32, v2: string, v3: bool, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_blue;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v628: string = sprintf!("{}/{}", v0_1, 3_u8);
                let v630: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v637: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v646: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("is_error")), ());
                    ()
                };
                let v655: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v666: () = {
                    Spiral_builder::closure10(
                        v630.clone(),
                        sprintf!("{}", if v3 { string("true") } else { string("false") }),
                        (),
                    );
                    ()
                };
                let v675: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v684: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("retry")), ());
                    ()
                };
                let v692: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v700: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v628), ());
                    ()
                };
                let v708: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v717: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("result")), ());
                    ()
                };
                let v725: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v733: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v742: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(", ")), ());
                    ()
                };
                let v750: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v759: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v762: string = v630.l0.get().clone();
                let v801: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure104((), ()),
                            v762
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v801.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v801)
            }
        }
        pub fn method109(v0_1: Spiral_builder::US12, v1_1: string, v2: u8) -> (i32, string) {
            let v0_1: MutCell<Spiral_builder::US12> = MutCell::new(v0_1.clone());
            let v1_1: MutCell<string> = MutCell::new(v1_1.clone());
            let v2: MutCell<u8> = MutCell::new(v2);
            '_method109: loop {
                break '_method109 ({
                    let v8: string =
                        sprintf!("cargo fmt --manifest-path \"{}\" --", v1_1.get().clone());
                    let v14: Result<string, string> = match &v0_1.get().clone() {
                        Spiral_builder::US12::US12_0(v0_1_0_0) => {
                            Ok::<string, string>(v0_1_0_0.clone())
                        }
                        Spiral_builder::US12::US12_1(v0_1_1_0) => {
                            Err::<string, string>(v0_1_1_0.clone())
                        }
                    };
                    let patternInput: (i32, string) = Spiral_builder::method40(
                        v8,
                        None::<CancellationToken>,
                        new_empty::<(string, string)>(),
                        None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                        None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>, ()>>,
                        true,
                        v14.ok(),
                    );
                    let v19: string = patternInput.1.clone();
                    let v18: i32 = patternInput.0.clone();
                    let v193: Spiral_builder::US36 = if contains(
                        v19.clone(),
                        string("failed to load manifest for workspace member"),
                    ) == false
                    {
                        if v18 == 0_i32 {
                            Spiral_builder::US36::US36_0(v18, v19.clone())
                        } else {
                            Spiral_builder::US36::US36_1(v18, v19.clone())
                        }
                    } else {
                        let v31: Result<regex::Regex, regex::Error> =
                            regex::Regex::new(&string("failed to read `(?<a>.*?Cargo.toml)`"));
                        let v33: regex::Regex = v31.unwrap();
                        let v35: &str = &*v19.clone();
                        let v37: std::string::String = String::from(v35);
                        let v39: bool = true;
                        let _result = (move || {
                            // rust.capture_move;
                            let v41: Box<std::string::String> = Box::new(v37);
                            let v43: &'static mut std::string::String = Box::leak(v41);
                            let v45: regex::CaptureMatches = v33.captures_iter(v43);
                            let v47: bool = true;
                            let _result: Vec<_> = v45
                                .map(|x| {
                                    //;
                                    let v49: regex::Captures<'static> = x;
                                    let v51: Box<regex::Captures<'static>> = Box::new(v49);
                                    let v53: &'static mut regex::Captures<'static> = Box::leak(v51);
                                    let v55: regex::CaptureNames = v33.capture_names();
                                    let v57: bool = true;
                                    let _result: std::collections::HashMap<_, _> = v55
                                        .map(|x| {
                                            //;
                                            let v59: string = x.unwrap_or("").to_string().into();
                                            let v61: string = v59.clone().clone();
                                            let v63: string = v53
                                                .name(&v59)
                                                .map(|x| x.as_str())
                                                .unwrap_or("")
                                                .to_string()
                                                .into();
                                            let v66: bool = true;
                                            LrcPtr::new((v61, v63))
                                        })
                                        .map(|x| {
                                            std::sync::Arc::try_unwrap(x)
                                                .unwrap_or_else(|x| (*x).clone())
                                        })
                                        .collect();
                                    let v68: std::collections::HashMap<string, string> = _result;
                                    let v70: bool = true;
                                    v68
                                })
                                .collect::<Vec<_>>();
                            let v72: Vec<std::collections::HashMap<string, string>> = _result;
                            let v74: bool = true;
                            v72
                        })();
                        let v76: Vec<std::collections::HashMap<string, string>> = _result;
                        let v79: Option<std::collections::HashMap<string, string>> =
                            tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v76));
                        let _v80: LrcPtr<MutCell<Option<Spiral_builder::US37>>> =
                            refCell(None::<Spiral_builder::US37>);
                        let v85: () = {
                            Spiral_builder::closure109(
                                v79,
                                Func1::new({
                                    let _v80 = _v80.clone();
                                    move |v: Option<Spiral_builder::US37>| {
                                        Spiral_builder::closure108(_v80.clone(), v)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v100: Spiral_builder::US37 =
                            defaultValue(Spiral_builder::US37::US37_1, _v80.get().clone());
                        let v135: Spiral_builder::US38 = match &v100 {
                            Spiral_builder::US37::US37_0(v100_0_0) => {
                                let v105: string = Spiral_builder::method110();
                                let v107: Option<string> = std::collections::HashMap::get(
                                    &match &v100 {
                                        Spiral_builder::US37::US37_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    &v105,
                                )
                                .map(|x| x)
                                .cloned();
                                let _v108: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                                    refCell(None::<Spiral_builder::US1>);
                                let v113: () = {
                                    Spiral_builder::closure4(
                                        v107,
                                        Func1::new({
                                            let _v108 = _v108.clone();
                                            move |v_1: Option<Spiral_builder::US1>| {
                                                Spiral_builder::closure3(_v108.clone(), v_1)
                                            }
                                        }),
                                        (),
                                    );
                                    ()
                                };
                                Spiral_builder::US38::US38_0(defaultValue(
                                    Spiral_builder::US1::US1_1,
                                    _v108.get().clone(),
                                ))
                            }
                            _ => Spiral_builder::US38::US38_1,
                        };
                        let v142: Spiral_builder::US1 =
                            if let Spiral_builder::US38::US38_0(v135_0_0) = &v135 {
                                let v136: Spiral_builder::US1 = match &v135 {
                                    Spiral_builder::US38::US38_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US1::US1_0(v136_0_0) = &v136 {
                                    Spiral_builder::US1::US1_0(match &v136 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US1::US1_1
                                }
                            } else {
                                Spiral_builder::US1::US1_1
                            };
                        match &v142 {
                            Spiral_builder::US1::US1_0(v142_0_0) => {
                                let v144: string = match &v142 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if Spiral_builder::method27(v144.clone()) == false {
                                    let v148: LrcPtr<dyn IDisposable> = Spiral_builder::method28(
                                        Spiral_builder::method24(v144.clone()),
                                    );
                                    let v149: DateTime = DateTime::now();
                                    let v158: string =
                                        toString(Spiral_builder::method97(new_guid(), v149));
                                    let v183: string =
                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                         v158.clone())),
                                                                                                                                         string("\n")),
                                                                                                                                  string("version = \"0.0.1\"")),
                                                                                                                           string("\n")),
                                                                                                                    string("edition = \"2021\"")),
                                                                                                             string("\n")),
                                                                                                      string("")),
                                                                                               string("\n")),
                                                                                        string("[[bin]]")),
                                                                                 string("\n")),
                                                                          sprintf!("name = \"spiral_builder_{}\"",
                                                                                   v158)),
                                                                   string("\n")),
                                                            string("path = \"spiral_builder.rs\""));
                                    std::fs::write(&*v144, &*v183).unwrap();
                                    ();
                                    ()
                                }
                                if v18 == 0_i32 {
                                    Spiral_builder::US36::US36_0(v18, v19.clone())
                                } else {
                                    Spiral_builder::US36::US36_1(v18, v19.clone())
                                }
                            }
                            _ => Spiral_builder::US36::US36_1(v18, v19.clone()),
                        }
                    };
                    let patternInput_1: (bool, i32, string) = match &v193 {
                        Spiral_builder::US36::US36_0(v193_0_0, v193_0_1) => {
                            (false, v193_0_0.clone(), v193_0_1.clone())
                        }
                        Spiral_builder::US36::US36_1(v193_1_0, v193_1_1) => {
                            (true, v193_1_0.clone(), v193_1_1.clone())
                        }
                    };
                    let v203: string = patternInput_1.2.clone();
                    let v202: i32 = patternInput_1.1.clone();
                    let v201: bool = patternInput_1.0.clone();
                    if if v201 == false {
                        true
                    } else {
                        v2.get().clone() >= 3_u8
                    } {
                        (v202, v203.clone())
                    } else {
                        let v209: () = {
                            Spiral_builder::closure110(v2.get().clone(), v202, v203, v201, ());
                            ()
                        };
                        {
                            let v0_1_temp: Spiral_builder::US12 = v0_1.get().clone();
                            let v1_1_temp: string = v1_1.get().clone();
                            let v2_temp: u8 = v2.get().clone() + 1_u8;
                            v0_1.set(v0_1_temp);
                            v1_1.set(v1_1_temp);
                            v2.set(v2_temp);
                            continue '_method109;
                        }
                    }
                });
            }
        }
        pub fn closure112(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / cargo fmt error")
        }
        pub fn closure111(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_red;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v627: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v634: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v643: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v660: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("cargo_fmt_result")),
                        (),
                    );
                    ()
                };
                let v686: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v694: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v703: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v706: string = v627.l0.get().clone();
                let v745: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure112((), ()),
                            v706
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v745.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v745)
            }
        }
        pub fn closure114(unitVar: (), v0_1: string) -> bool {
            if contains(v0_1.clone(), string("profile [optimized] target")) == false {
                if contains(v0_1.clone(), string("profile [unoptimized] target")) == false {
                    contains(v0_1, string("profile [unoptimized + debuginfo] target")) == false
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn closure113(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(skip(
                    2_i32,
                    skipWhile(
                        Func1::new(move |v: string| Spiral_builder::closure114((), v)),
                        split(v0_1, string("\n"), -1_i32, 0_i32),
                    ),
                ))),
            )
        }
        pub fn closure117(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / Exception")
        }
        pub fn closure116(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: std::string::String = format!("{:#?}", v3);
                let v689: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v659)),
                        (),
                    );
                    ()
                };
                let v698: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v707: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v715: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v723: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v731: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v740: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v748: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v756: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v764: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v773: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v781: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v789: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v798: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v801: string = v629.l0.get().clone();
                let v840: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure117((), ()),
                            v801
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v840.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v840)
            }
        }
        pub fn closure115(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure116(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure119(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / error")
        }
        pub fn closure118(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v662: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v671: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v680: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v688: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v696: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v713: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v721: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v729: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v737: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v746: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v754: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v762: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v774: string = v629.l0.get().clone();
                let v813: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure119((), ()),
                            v774
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v813.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v813)
            }
        }
        pub fn closure121(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / wasm error")
        }
        pub fn closure120(v0_1: string, v1_1: string, v2: string, v3: i32, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v662: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v671: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v680: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("spiral_wasm_result")),
                        (),
                    );
                    ()
                };
                let v688: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v696: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v713: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v721: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v729: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v737: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v746: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v754: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v762: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v774: string = v629.l0.get().clone();
                let v813: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure121((), ()),
                            v774
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v813.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v813)
            }
        }
        pub fn closure123(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / error")
        }
        pub fn closure122(
            v0_1: string,
            v1_1: string,
            v2: i32,
            v3: string,
            v4: string,
            unitVar: (),
        ) {
            fn v6() {
                Spiral_builder::closure2((), ());
            }
            let v7: () = {
                v6();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v36: () = {
                v6();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v64: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v64,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v72: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v76: () = {
                    v6();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v105: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v110: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v105 = _v105.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v105.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v125: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v105.get().clone());
                let v165: DateTime = match &v125 {
                    Spiral_builder::US3::US3_0(v125_0_0) => {
                        let v139: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v125 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v139.hours(),
                            v139.minutes(),
                            v139.seconds(),
                            v139.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v170: string = {
                    let provider: string = Spiral_builder::method6();
                    v165.toString(provider)
                };
                let v562: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v578: &str = inline_colorization::color_bright_red;
                let v580: &str = &*v562;
                let v582: &str = inline_colorization::color_reset;
                let v584: string = string("format!(\"{v578}{v580}{v582}\")");
                let v585: std::string::String = format!("{v578}{v580}{v582}");
                let v587: string = fable_library_rust::String_::fromString(v585);
                let v628: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v630: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v637: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v646: () = {
                    Spiral_builder::closure10(
                        v630.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v655: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v663: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v672: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v681: () = {
                    Spiral_builder::closure10(
                        v630.clone(),
                        sprintf!("{}", string("cargo_result")),
                        (),
                    );
                    ()
                };
                let v689: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v697: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v705: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v714: () = {
                    Spiral_builder::closure10(
                        v630.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v722: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v730: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v738: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v747: () = {
                    Spiral_builder::closure10(
                        v630.clone(),
                        sprintf!("{}", string("wasm_path")),
                        (),
                    );
                    ()
                };
                let v755: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v763: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v780: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string("command")), ());
                    ()
                };
                let v788: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v796: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", v4), ());
                    ()
                };
                let v805: () = {
                    Spiral_builder::closure10(v630.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v808: string = v630.l0.get().clone();
                let v847: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v170,
                            v587,
                            v628,
                            Spiral_builder::closure123((), ()),
                            v808
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v847.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v847)
            }
        }
        pub fn closure125(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_rust / cleanup")
        }
        pub fn closure124(
            v0_1: string,
            v1_1: string,
            v2: bool,
            v3: string,
            v4: bool,
            v5: string,
            v6: bool,
            v7: string,
            v8: bool,
            v9: string,
            v10: bool,
            unitVar: (),
        ) {
            fn v12() {
                Spiral_builder::closure2((), ());
            }
            let v13: () = {
                v12();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v42: () = {
                v12();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v70: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                0_i32
                    >= find(
                        v70,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v78: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v82: () = {
                    v12();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v111: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v116: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v111 = _v111.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v111.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v131: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v111.get().clone());
                let v171: DateTime = match &v131 {
                    Spiral_builder::US3::US3_0(v131_0_0) => {
                        let v145: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v131 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v145.hours(),
                            v145.minutes(),
                            v145.seconds(),
                            v145.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v176: string = {
                    let provider: string = Spiral_builder::method6();
                    v171.toString(provider)
                };
                let v568: string = padLeft(toLower(string("Verbose")), 7_i32, ' ');
                let v584: &str = inline_colorization::color_bright_black;
                let v586: &str = &*v568;
                let v588: &str = inline_colorization::color_reset;
                let v590: string = string("format!(\"{v584}{v586}{v588}\")");
                let v591: std::string::String = format!("{v584}{v586}{v588}");
                let v593: string = fable_library_rust::String_::fromString(v591);
                let v634: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v636: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v643: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(
                        v636.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v661: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v687: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string("cleanup")), ());
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v718: () = {
                    Spiral_builder::closure10(
                        v636.clone(),
                        sprintf!(
                            "{}",
                            sprintf!(
                                "{:?}",
                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                    v1_1,
                                    v2,
                                    LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                        v3,
                                        v4,
                                        LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                            v5,
                                            v6,
                                            LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                                v7,
                                                v8,
                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(
                                                    v9,
                                                    v10,
                                                    LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                ))
                                            ))
                                        ))
                                    ))
                                ))
                            )
                        ),
                        (),
                    );
                    ()
                };
                let v727: () = {
                    Spiral_builder::closure10(v636.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v730: string = v636.l0.get().clone();
                let v769: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v176,
                            v593,
                            v634,
                            Spiral_builder::closure125((), ()),
                            v730
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v769.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v769)
            }
        }
        pub fn method111(v0_1: LrcPtr<Spiral_builder::UH4>) {
            let v0_1: MutCell<LrcPtr<Spiral_builder::UH4>> = MutCell::new(v0_1.clone());
            '_method111: loop {
                break '_method111 (match v0_1.get().clone().as_ref() {
                    Spiral_builder::UH4::UH4_0 => (),
                    Spiral_builder::UH4::UH4_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                        std::fs::remove_file(&*match v0_1.get().clone().as_ref() {
                            Spiral_builder::UH4::UH4_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        })
                        .unwrap();
                        ();
                        {
                            let v0_1_temp: LrcPtr<Spiral_builder::UH4> =
                                match v0_1.get().clone().as_ref() {
                                    Spiral_builder::UH4::UH4_1(_, _, x) => x.clone(),
                                    _ => unreachable!(),
                                };
                            v0_1.set(v0_1_temp);
                            continue '_method111;
                        }
                    }
                });
            }
        }
        pub fn method112(v0_1: async_walkdir::DirEntry) -> async_walkdir::DirEntry {
            v0_1
        }
        pub fn closure127(unitVar: (), v0_1: std::fs::FileType) -> Spiral_builder::US39 {
            Spiral_builder::US39::US39_0(v0_1)
        }
        pub fn closure128(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US39 {
            Spiral_builder::US39::US39_1(v0_1)
        }
        pub fn method113(v0_1: std::fs::FileType) -> std::fs::FileType {
            v0_1
        }
        pub fn method114(v0_1: Spiral_builder::US40) -> Spiral_builder::US40 {
            v0_1
        }
        pub fn method115(v0_1: async_walkdir::Filtering) -> async_walkdir::Filtering {
            v0_1
        }
        pub fn closure126(
            unitVar: (),
            v0_1: async_walkdir::DirEntry,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = async_walkdir::Filtering> + Send>>
        {
            let v2: bool = true;
            let __result = Box::pin(async {
                //;
                let v4: bool = true;
                let __result = Box::pin(async move {
                    //;
                    let v5: async_walkdir::DirEntry = Spiral_builder::method112(v0_1.clone());
                    let v7: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                    Output = Result<std::fs::FileType, std::io::Error>,
                                > + Send,
                        >,
                    > = Box::pin(async_walkdir::DirEntry::file_type(&v5));
                    let v9: Result<std::fs::FileType, std::io::Error> = v7.await;
                    let v10 = Spiral_builder::method30();
                    let v12: Result<std::fs::FileType, std::string::String> =
                        v9.map_err(|x| v10(x));
                    let v15: Spiral_builder::US39 = match &v12 {
                        Err(v12_1_0) => Spiral_builder::closure128((), v12_1_0.clone()),
                        Ok(v12_0_0) => Spiral_builder::closure127((), v12_0_0.clone()),
                    };
                    let v90: Spiral_builder::US40 = Spiral_builder::method114(
                        if let Spiral_builder::US39::US39_0(v15_0_0) = &v15 {
                            let v17: std::fs::FileType = Spiral_builder::method113(match &v15 {
                                Spiral_builder::US39::US39_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            if std::fs::FileType::is_dir(&v17) == false {
                                Spiral_builder::US40::US40_0
                            } else {
                                let v23: std::path::PathBuf =
                                    async_walkdir::DirEntry::path(&v0_1.clone());
                                let v25: std::path::Display = v23.display();
                                let v28: std::string::String = format!("{}", v25);
                                if startsWith(
                                    Spiral_builder::method24(
                                        fable_library_rust::String_::fromString(v28),
                                    ),
                                    string("fable-library-ts."),
                                    false,
                                ) {
                                    Spiral_builder::US40::US40_2
                                } else {
                                    Spiral_builder::US40::US40_1
                                }
                            }
                        } else {
                            let v57: std::path::PathBuf = async_walkdir::DirEntry::path(&v0_1);
                            let v59: std::path::Display = v57.display();
                            let v62: std::string::String = format!("{}", v59);
                            if startsWith(
                                Spiral_builder::method24(fable_library_rust::String_::fromString(
                                    v62,
                                )),
                                string("fable-library-ts."),
                                false,
                            ) {
                                Spiral_builder::US40::US40_2
                            } else {
                                Spiral_builder::US40::US40_1
                            }
                        },
                    );
                    let v94: string = string("true; v90 });  // rust.fix_closure\'");
                    let v95: bool = true;
                    v90
                }); // rust.fix_closure';
                let v97 = __result;
                let v99: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Spiral_builder::US40> + Send>,
                > = v97;
                let v101: Spiral_builder::US40 = v99.await;
                let v111: async_walkdir::Filtering = Spiral_builder::method115(match &v101 {
                    Spiral_builder::US40::US40_0 => async_walkdir::Filtering::Ignore,
                    Spiral_builder::US40::US40_1 => async_walkdir::Filtering::IgnoreDir,
                    _ => async_walkdir::Filtering::Continue,
                });
                let v113: string = string("true; v111 });  // rust.fix_closure\'");
                let v114: bool = true;
                v111
            }); // rust.fix_closure';
            let v116 = __result;
            v116
        }
        pub fn closure130(unitVar: (), v0_1: async_walkdir::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method117() -> Func1<async_walkdir::Error, std::string::String> {
            Func1::new(move |v: async_walkdir::Error| Spiral_builder::closure130((), v))
        }
        pub fn closure131(unitVar: (), v0_1: async_walkdir::DirEntry) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_0(v0_1)
        }
        pub fn closure132(unitVar: (), v0_1: std::string::String) -> Spiral_builder::US41 {
            Spiral_builder::US41::US41_1(v0_1)
        }
        pub fn closure134(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / stream_filter_map")
        }
        pub fn closure133(v0_1: std::string::String, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_red;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("error")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v656: std::string::String = format!("{:#?}", v0_1);
                let v686: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v656)),
                        (),
                    );
                    ()
                };
                let v695: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v698: string = v626.l0.get().clone();
                let v737: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure134((), ()),
                            v698
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v737.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v737)
            }
        }
        pub fn closure129(
            unitVar: (),
            v0_1: Result<async_walkdir::DirEntry, async_walkdir::Error>,
        ) -> Option<(string, string)> {
            let v1_1 = Spiral_builder::method117();
            let v3: Result<async_walkdir::DirEntry, std::string::String> =
                v0_1.map_err(|x| v1_1(x));
            let v6: Spiral_builder::US41 = match &v3 {
                Err(v3_1_0) => Spiral_builder::closure132((), v3_1_0.clone()),
                Ok(v3_0_0) => Spiral_builder::closure131((), v3_0_0.clone()),
            };
            let v920: Spiral_builder::US42 = match &v6 {
                Spiral_builder::US41::US41_0(v6_0_0) => {
                    let v9: std::path::PathBuf = async_walkdir::DirEntry::path(&v6_0_0.clone());
                    let v11: std::path::Display = v9.display();
                    let v14: std::string::String = format!("{}", v11);
                    let v34: string = fable_library_rust::String_::fromString(v14);
                    let v36: string = sprintf!("fable-library-{}\\.(?<a>[\\d.]+)$", string("ts"));
                    let v38: Result<regex::Regex, regex::Error> = regex::Regex::new(&v36);
                    let v40: regex::Regex = v38.unwrap();
                    let v42: &str = &*v34.clone();
                    let v44: std::string::String = String::from(v42);
                    let v46: bool = true;
                    let _result = (move || {
                        // rust.capture_move;
                        let v48: Box<std::string::String> = Box::new(v44);
                        let v50: &'static mut std::string::String = Box::leak(v48);
                        let v52: regex::CaptureMatches = v40.captures_iter(v50);
                        let v54: bool = true;
                        let _result: Vec<_> = v52
                            .map(|x| {
                                //;
                                let v56: regex::Captures<'static> = x;
                                let v58: Box<regex::Captures<'static>> = Box::new(v56);
                                let v60: &'static mut regex::Captures<'static> = Box::leak(v58);
                                let v62: regex::CaptureNames = v40.capture_names();
                                let v64: bool = true;
                                let _result: std::collections::HashMap<_, _> = v62
                                    .map(|x| {
                                        //;
                                        let v66: string = x.unwrap_or("").to_string().into();
                                        let v68: string = v66.clone().clone();
                                        let v70: string = v60
                                            .name(&v66)
                                            .map(|x| x.as_str())
                                            .unwrap_or("")
                                            .to_string()
                                            .into();
                                        let v73: bool = true;
                                        LrcPtr::new((v68, v70))
                                    })
                                    .map(|x| {
                                        std::sync::Arc::try_unwrap(x)
                                            .unwrap_or_else(|x| (*x).clone())
                                    })
                                    .collect();
                                let v75: std::collections::HashMap<string, string> = _result;
                                let v77: bool = true;
                                v75
                            })
                            .collect::<Vec<_>>();
                        let v79: Vec<std::collections::HashMap<string, string>> = _result;
                        let v81: bool = true;
                        v79
                    })();
                    let v83: Vec<std::collections::HashMap<string, string>> = _result;
                    let v86: Option<std::collections::HashMap<string, string>> =
                        tryItem(0_i32, fable_library_rust::NativeArray_::array_from(v83));
                    let _v87: LrcPtr<MutCell<Option<Spiral_builder::US37>>> =
                        refCell(None::<Spiral_builder::US37>);
                    let v92: () = {
                        Spiral_builder::closure109(
                            v86,
                            Func1::new({
                                let _v87 = _v87.clone();
                                move |v_2: Option<Spiral_builder::US37>| {
                                    Spiral_builder::closure108(_v87.clone(), v_2)
                                }
                            }),
                            (),
                        );
                        ()
                    };
                    let v107: Spiral_builder::US37 =
                        defaultValue(Spiral_builder::US37::US37_1, _v87.get().clone());
                    let v142: Spiral_builder::US38 = match &v107 {
                        Spiral_builder::US37::US37_0(v107_0_0) => {
                            let v112: string = Spiral_builder::method110();
                            let v114: Option<string> = std::collections::HashMap::get(
                                &match &v107 {
                                    Spiral_builder::US37::US37_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                &v112,
                            )
                            .map(|x| x)
                            .cloned();
                            let _v115: LrcPtr<MutCell<Option<Spiral_builder::US1>>> =
                                refCell(None::<Spiral_builder::US1>);
                            let v120: () = {
                                Spiral_builder::closure4(
                                    v114,
                                    Func1::new({
                                        let _v115 = _v115.clone();
                                        move |v_3: Option<Spiral_builder::US1>| {
                                            Spiral_builder::closure3(_v115.clone(), v_3)
                                        }
                                    }),
                                    (),
                                );
                                ()
                            };
                            Spiral_builder::US38::US38_0(defaultValue(
                                Spiral_builder::US1::US1_1,
                                _v115.get().clone(),
                            ))
                        }
                        _ => Spiral_builder::US38::US38_1,
                    };
                    let v149: Spiral_builder::US1 =
                        if let Spiral_builder::US38::US38_0(v142_0_0) = &v142 {
                            let v143: Spiral_builder::US1 = match &v142 {
                                Spiral_builder::US38::US38_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Spiral_builder::US1::US1_0(v143_0_0) = &v143 {
                                Spiral_builder::US1::US1_0(match &v143 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Spiral_builder::US1::US1_1
                            }
                        } else {
                            Spiral_builder::US1::US1_1
                        };
                    match &v149 {
                        Spiral_builder::US1::US1_0(v149_0_0) => Spiral_builder::US42::US42_0(
                            v34,
                            match &v149 {
                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                        _ => Spiral_builder::US42::US42_1,
                    }
                }
                Spiral_builder::US41::US41_1(v6_1_0) => {
                    let v158: () = {
                        Spiral_builder::closure133(v6_1_0.clone(), ());
                        ()
                    };
                    Spiral_builder::US42::US42_1
                }
            };
            match &v920 {
                Spiral_builder::US42::US42_0(v920_0_0, v920_0_1) => Some((
                    match &v920 {
                        Spiral_builder::US42::US42_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    },
                    match &v920 {
                        Spiral_builder::US42::US42_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    },
                )),
                _ => None::<(string, string)>,
            }
        }
        pub fn method116(
        ) -> Func1<Result<async_walkdir::DirEntry, async_walkdir::Error>, Option<(string, string)>>
        {
            Func1::new(
                move |v: Result<async_walkdir::DirEntry, async_walkdir::Error>| {
                    Spiral_builder::closure129((), v)
                },
            )
        }
        pub fn closure135(unitVar: (), _arg: (string, string)) -> (string, string) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure136(
            v0_1: LrcPtr<MutCell<Option<Spiral_builder::US42>>>,
            v1_1: Option<Spiral_builder::US42>,
        ) -> LrcPtr<MutCell<Option<Spiral_builder::US42>>> {
            v0_1.set(v1_1);
            v0_1
        }
        pub fn closure137(
            v0_1: Option<(string, string)>,
            v1_1: Func1<
                Option<Spiral_builder::US42>,
                LrcPtr<MutCell<Option<Spiral_builder::US42>>>,
            >,
            unitVar: (),
        ) {
            {
                let value: LrcPtr<MutCell<Option<Spiral_builder::US42>>> = v1_1(match &v0_1 {
                    None => None::<Spiral_builder::US42>,
                    Some(v0_1_0_0) => {
                        let x: (string, string) = v0_1_0_0.clone();
                        Some((Func0::new({
                            let x = x.clone();
                            move || Spiral_builder::US42::US42_0(x.0.clone(), x.1.clone())
                        }))())
                    }
                });
                ()
            }
            ()
        }
        pub fn closure139(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure138(v0_1: Spiral_builder::US42, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_blue;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("version")), ());
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v662: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", sprintf!("{:?}", v0_1)),
                        (),
                    );
                    ()
                };
                let v671: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v674: string = v626.l0.get().clone();
                let v713: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure139((), ()),
                            v674
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v713.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v713)
            }
        }
        pub fn closure141(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure140(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_red;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v627: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v634: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v643: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v660: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("dotnet_fable_result")),
                        (),
                    );
                    ()
                };
                let v686: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v694: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v703: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v706: string = v627.l0.get().clone();
                let v745: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure141((), ()),
                            v706
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v745.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v745)
            }
        }
        pub fn closure143(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript")
        }
        pub fn closure142(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_blue;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v668: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v671: string = v626.l0.get().clone();
                let v710: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure143((), ()),
                            v671
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v710.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v710)
            }
        }
        pub fn method118(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: LrcPtr<Spiral_builder::UH5>,
        ) -> LrcPtr<Spiral_builder::UH5> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => {
                    LrcPtr::new(Spiral_builder::UH5::UH5_1(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        Spiral_builder::method118(
                            match v0_1.as_ref() {
                                Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                            v1_1.clone(),
                        ),
                    ))
                }
            }
        }
        pub fn method119(
            v0_1: LrcPtr<Spiral_builder::UH5>,
            v1_1: List<(string, string)>,
        ) -> List<(string, string)> {
            match v0_1.as_ref() {
                Spiral_builder::UH5::UH5_0 => v1_1.clone(),
                Spiral_builder::UH5::UH5_1(v0_1_1_0, v0_1_1_1, v0_1_1_2) => cons(
                    (
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(x, _, _) => x.clone(),
                            _ => unreachable!(),
                        },
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, x, _) => x.clone(),
                            _ => unreachable!(),
                        },
                    ),
                    Spiral_builder::method119(
                        match v0_1.as_ref() {
                            Spiral_builder::UH5::UH5_1(_, _, x) => x.clone(),
                            _ => unreachable!(),
                        },
                        v1_1.clone(),
                    ),
                ),
            }
        }
        pub fn closure144(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure147(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / Exception")
        }
        pub fn closure146(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: std::string::String = format!("{:#?}", v3);
                let v689: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v659)),
                        (),
                    );
                    ()
                };
                let v698: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v707: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v715: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v723: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v731: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v740: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v748: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v756: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v764: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v773: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v781: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v789: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v798: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v801: string = v629.l0.get().clone();
                let v840: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure147((), ()),
                            v801
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v840.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v840)
            }
        }
        pub fn closure145(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure146(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure149(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_typescript / error")
        }
        pub fn closure148(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v662: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v671: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v680: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v688: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v696: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v713: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v721: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v729: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v737: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v746: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v754: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v762: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v774: string = v629.l0.get().clone();
                let v813: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure149((), ()),
                            v774
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v813.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v813)
            }
        }
        pub fn closure151(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure150(v0_1: string, v1_1: i32, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_red;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v627: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v634: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v643: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v660: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v669: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v678: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("dotnet_fable_result")),
                        (),
                    );
                    ()
                };
                let v686: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v694: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v703: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v706: string = v627.l0.get().clone();
                let v745: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure151((), ()),
                            v706
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v745.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v745)
            }
        }
        pub fn closure153(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python")
        }
        pub fn closure152(v0_1: string, unitVar: ()) {
            fn v2() {
                Spiral_builder::closure2((), ());
            }
            let v3: () = {
                v2();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v32: () = {
                v2();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v60: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v60,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v68: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v72: () = {
                    v2();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v101: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v106: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v101 = _v101.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v101.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v121: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v101.get().clone());
                let v161: DateTime = match &v121 {
                    Spiral_builder::US3::US3_0(v121_0_0) => {
                        let v135: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v121 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v135.hours(),
                            v135.minutes(),
                            v135.seconds(),
                            v135.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v166: string = {
                    let provider: string = Spiral_builder::method6();
                    v161.toString(provider)
                };
                let v558: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v574: &str = inline_colorization::color_bright_blue;
                let v576: &str = &*v558;
                let v578: &str = inline_colorization::color_reset;
                let v580: string = string("format!(\"{v574}{v576}{v578}\")");
                let v581: std::string::String = format!("{v574}{v576}{v578}");
                let v583: string = fable_library_rust::String_::fromString(v581);
                let v624: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v626: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v633: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v642: () = {
                    Spiral_builder::closure10(
                        v626.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v651: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v668: () = {
                    Spiral_builder::closure10(v626.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v671: string = v626.l0.get().clone();
                let v710: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v166,
                            v583,
                            v624,
                            Spiral_builder::closure153((), ()),
                            v671
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v710.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v710)
            }
        }
        pub fn closure154(v0_1: string, unitVar: ()) -> string {
            join(
                string("\n"),
                toArray_1(ofArray_1(split(v0_1, string("\n"), -1_i32, 0_i32))),
            )
        }
        pub fn closure157(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / Exception")
        }
        pub fn closure156(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
            unitVar: (),
        ) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("ex")), ());
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v659: std::string::String = format!("{:#?}", v3);
                let v689: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v659)),
                        (),
                    );
                    ()
                };
                let v698: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v707: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v715: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v723: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v731: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v740: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v748: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v756: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v764: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v773: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v781: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v789: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v798: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v801: string = v629.l0.get().clone();
                let v840: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure157((), ()),
                            v801
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v840.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v840)
            }
        }
        pub fn closure155(
            v0_1: string,
            v1_1: string,
            v2: string,
            v3: LrcPtr<Exception>,
        ) -> Spiral_builder::US1 {
            let v6: () = {
                Spiral_builder::closure156(v0_1, v1_1, v2, v3, ());
                ()
            };
            Spiral_builder::US1::US1_1
        }
        pub fn closure159(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.process_python / error")
        }
        pub fn closure158(v0_1: string, v1_1: string, v2: i32, v3: string, unitVar: ()) {
            fn v5() {
                Spiral_builder::closure2((), ());
            }
            let v6: () = {
                v5();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v35: () = {
                v5();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v63: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                4_i32
                    >= find(
                        v63,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v71: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v75: () = {
                    v5();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v104: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v109: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v104 = _v104.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v104.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v124: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v104.get().clone());
                let v164: DateTime = match &v124 {
                    Spiral_builder::US3::US3_0(v124_0_0) => {
                        let v138: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v124 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v138.hours(),
                            v138.minutes(),
                            v138.seconds(),
                            v138.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v169: string = {
                    let provider: string = Spiral_builder::method6();
                    v164.toString(provider)
                };
                let v561: string = padLeft(toLower(string("Critical")), 7_i32, ' ');
                let v577: &str = inline_colorization::color_bright_red;
                let v579: &str = &*v561;
                let v581: &str = inline_colorization::color_reset;
                let v583: string = string("format!(\"{v577}{v579}{v581}\")");
                let v584: std::string::String = format!("{v577}{v579}{v581}");
                let v586: string = fable_library_rust::String_::fromString(v584);
                let v627: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v629: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v636: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v645: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("exit_code")),
                        (),
                    );
                    ()
                };
                let v654: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v662: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v2), ());
                    ()
                };
                let v671: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v680: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("run_result")),
                        (),
                    );
                    ()
                };
                let v688: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v696: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v1_1), ());
                    ()
                };
                let v704: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v713: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("new_code_path")),
                        (),
                    );
                    ()
                };
                let v721: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v729: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v0_1), ());
                    ()
                };
                let v737: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v746: () = {
                    Spiral_builder::closure10(
                        v629.clone(),
                        sprintf!("{}", string("external_command")),
                        (),
                    );
                    ()
                };
                let v754: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v762: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", v3), ());
                    ()
                };
                let v771: () = {
                    Spiral_builder::closure10(v629.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v774: string = v629.l0.get().clone();
                let v813: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v169,
                            v586,
                            v627,
                            Spiral_builder::closure159((), ()),
                            v774
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v813.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v813)
            }
        }
        pub fn closure161(unitVar: (), unitVar_1: ()) -> string {
            string("spiral_builder.run / invalid subcommand")
        }
        pub fn closure160(v0_1: clap::ArgMatches, v1_1: std::string::String, unitVar: ()) {
            fn v3() {
                Spiral_builder::closure2((), ());
            }
            let v4: () = {
                v3();
                ()
            };
            let patternInput: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v33: () = {
                v3();
                ()
            };
            let patternInput_1: (
                LrcPtr<Spiral_builder::Mut0>,
                LrcPtr<Spiral_builder::Mut1>,
                LrcPtr<Spiral_builder::Mut2>,
                LrcPtr<Spiral_builder::Mut3>,
                Option<i64>,
            ) = getValue(Spiral_builder::State::trace_state().get().clone());
            let v61: Spiral_builder::US0 = (patternInput_1.3.clone()).l0.get().clone();
            if if (patternInput_1.2.clone()).l0.get().clone() == false {
                false
            } else {
                1_i32
                    >= find(
                        v61,
                        ofSeq(ofList(ofArray(new_array(&[
                            LrcPtr::new((Spiral_builder::US0::US0_0, 0_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_1, 1_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_2, 2_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_3, 3_i32)),
                            LrcPtr::new((Spiral_builder::US0::US0_4, 4_i32)),
                        ])))),
                    )
            } {
                let v69: () = {
                    Spiral_builder::closure7(patternInput.0.clone(), ());
                    ()
                };
                let v73: () = {
                    v3();
                    ()
                };
                let patternInput_2: (
                    LrcPtr<Spiral_builder::Mut0>,
                    LrcPtr<Spiral_builder::Mut1>,
                    LrcPtr<Spiral_builder::Mut2>,
                    LrcPtr<Spiral_builder::Mut3>,
                    Option<i64>,
                ) = getValue(Spiral_builder::State::trace_state().get().clone());
                let _v102: LrcPtr<MutCell<Option<Spiral_builder::US3>>> =
                    refCell(None::<Spiral_builder::US3>);
                let v107: () = {
                    Spiral_builder::closure9(
                        patternInput_2.4.clone(),
                        Func1::new({
                            let _v102 = _v102.clone();
                            move |v: Option<Spiral_builder::US3>| {
                                Spiral_builder::closure8(_v102.clone(), v)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v122: Spiral_builder::US3 =
                    defaultValue(Spiral_builder::US3::US3_1, _v102.get().clone());
                let v162: DateTime = match &v122 {
                    Spiral_builder::US3::US3_0(v122_0_0) => {
                        let v136: TimeSpan = TimeSpan::new_ticks(
                            {
                                let _arg: DateTime = DateTime::now();
                                _arg.ticks()
                            } - match &v122 {
                                Spiral_builder::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                        );
                        DateTime::new_ymdhms_milli(
                            1_i32,
                            1_i32,
                            1_i32,
                            v136.hours(),
                            v136.minutes(),
                            v136.seconds(),
                            v136.milliseconds(),
                        )
                    }
                    _ => DateTime::now(),
                };
                let v167: string = {
                    let provider: string = Spiral_builder::method6();
                    v162.toString(provider)
                };
                let v559: string = padLeft(toLower(string("Debug")), 7_i32, ' ');
                let v575: &str = inline_colorization::color_bright_blue;
                let v577: &str = &*v559;
                let v579: &str = inline_colorization::color_reset;
                let v581: string = string("format!(\"{v575}{v577}{v579}\")");
                let v582: std::string::String = format!("{v575}{v577}{v579}");
                let v584: string = fable_library_rust::String_::fromString(v582);
                let v625: i64 = (patternInput_2.0.clone()).l0.get().clone();
                let v627: LrcPtr<Spiral_builder::Mut4> = LrcPtr::new(Spiral_builder::Mut4 {
                    l0: MutCell::new(Spiral_builder::method9()),
                });
                let v634: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("{ ")), ());
                    ()
                };
                let v643: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("subcommand")),
                        (),
                    );
                    ()
                };
                let v652: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v657: std::string::String = format!("{:#?}", v1_1);
                let v687: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v657)),
                        (),
                    );
                    ()
                };
                let v696: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string("; ")), ());
                    ()
                };
                let v705: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", string("arg_matches")),
                        (),
                    );
                    ()
                };
                let v713: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" = ")), ());
                    ()
                };
                let v718: std::string::String = format!("{:#?}", v0_1);
                let v748: () = {
                    Spiral_builder::closure10(
                        v627.clone(),
                        sprintf!("{}", fable_library_rust::String_::fromString(v718)),
                        (),
                    );
                    ()
                };
                let v757: () = {
                    Spiral_builder::closure10(v627.clone(), sprintf!("{}", string(" }")), ());
                    ()
                };
                let v760: string = v627.l0.get().clone();
                let v799: string = trimEndChars(
                    trimStartChars(
                        sprintf!(
                            "{} {} #{} {} / {}",
                            v167,
                            v584,
                            v625,
                            Spiral_builder::closure161((), ()),
                            v760
                        ),
                        toArray(empty::<char>()),
                    ),
                    toArray(ofArray(new_array(&[' ', '/']))),
                );
                println!("{}", v799.clone());
                ();
                ((patternInput.1.clone()).l0.get().clone())(v799)
            }
        }
        pub fn closure162(
            unitVar: (),
            _arg: (string, string),
        ) -> LrcPtr<(std::string::String, std::string::String)> {
            let v3: &str = &*_arg.0.clone();
            let v5: std::string::String = String::from(v3);
            let v7: &str = &*_arg.1.clone();
            LrcPtr::new((v5, String::from(v7)))
        }
        pub fn closure163(unitVar: (), v0_1: serde_json::Error) -> string {
            let v3: std::string::String = format!("{}", v0_1);
            fable_library_rust::String_::fromString(v3)
        }
        pub fn method120() -> Func1<serde_json::Error, string> {
            Func1::new(move |v: serde_json::Error| Spiral_builder::closure163((), v))
        }
        pub fn method121(v0_1: Result<string, string>) -> Result<string, string> {
            v0_1
        }
        pub fn method10(
            v0_1: Spiral_builder::US0,
            v1_1: clap::ArgMatches,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> {
            let v3: bool = true;
            let __result = Box::pin(async move {
                //;
                let v6: Option<(std::string::String, clap::ArgMatches)> =
                    clap::ArgMatches::subcommand(Box::leak(Box::new(v1_1))).map(|(a, b)| {
                        (
                            Func1::new(move |v: &str| Spiral_builder::closure12((), v))(a),
                            b.clone(),
                        )
                    });
                let _v7: LrcPtr<MutCell<Option<Spiral_builder::US4>>> =
                    refCell(None::<Spiral_builder::US4>);
                let v12: () = {
                    Spiral_builder::closure14(
                        v6,
                        Func1::new({
                            let _v7 = _v7.clone();
                            move |v_1: Option<Spiral_builder::US4>| {
                                Spiral_builder::closure13(_v7.clone(), v_1)
                            }
                        }),
                        (),
                    );
                    ()
                };
                let v29: Spiral_builder::US4 =
                    defaultValue(Spiral_builder::US4::US4_1, _v7.get().clone());
                let v24112: Array<(string, string)> = if let Spiral_builder::US4::US4_0(
                    v29_0_0,
                    v29_0_1,
                ) = &v29
                {
                    let v34: clap::ArgMatches = match &v29 {
                        Spiral_builder::US4::US4_0(_, x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v33: std::string::String = match &v29 {
                        Spiral_builder::US4::US4_0(x, _) => x.clone(),
                        _ => unreachable!(),
                    };
                    if fable_library_rust::String_::fromString(v33.clone()) == string("cuda") {
                        let v38: string = Spiral_builder::method11();
                        let v40: &str = &*v38;
                        let v42: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v34.clone(), v40).cloned();
                        let _v43: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                            refCell(None::<Spiral_builder::US5>);
                        let v48: () = {
                            Spiral_builder::closure16(
                                v42,
                                Func1::new({
                                    let _v43 = _v43.clone();
                                    move |v_2: Option<Spiral_builder::US5>| {
                                        Spiral_builder::closure15(_v43.clone(), v_2)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v63: Spiral_builder::US5 =
                            defaultValue(Spiral_builder::US5::US5_1, _v43.get().clone());
                        let v70: std::string::String = match &v63 {
                            Spiral_builder::US5::US5_0(v63_0_0) => match &v63 {
                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => panic!("{}", string("Option does not have a value."),),
                        };
                        let v72: string = fable_library_rust::String_::fromString(v70);
                        let v73: string = Spiral_builder::method12();
                        let v75: &str = &*v73;
                        let v77: Option<std::string::String> =
                            clap::ArgMatches::get_one(&v34.clone(), v75).cloned();
                        let _v78: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                            refCell(None::<Spiral_builder::US5>);
                        let v83: () = {
                            Spiral_builder::closure16(
                                v77,
                                Func1::new({
                                    let _v78 = _v78.clone();
                                    move |v_3: Option<Spiral_builder::US5>| {
                                        Spiral_builder::closure15(_v78.clone(), v_3)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v98: Spiral_builder::US5 =
                            defaultValue(Spiral_builder::US5::US5_1, _v78.get().clone());
                        let v127: Spiral_builder::US6 = match &v98 {
                            Spiral_builder::US5::US5_0(v98_0_0) => {
                                let v104: string =
                                    fable_library_rust::String_::fromString(match &v98 {
                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    });
                                let v109: Spiral_builder::US7 = if string("Pip") == v104.clone() {
                                    Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_0)
                                } else {
                                    Spiral_builder::US7::US7_1
                                };
                                Spiral_builder::US6::US6_0(match &v109 {
                                    Spiral_builder::US7::US7_0(v109_0_0) => {
                                        Spiral_builder::US7::US7_0(match &v109 {
                                            Spiral_builder::US7::US7_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    }
                                    _ => {
                                        let v116: Spiral_builder::US7 = if string("Poetry") == v104
                                        {
                                            Spiral_builder::US7::US7_0(Spiral_builder::US8::US8_1)
                                        } else {
                                            Spiral_builder::US7::US7_1
                                        };
                                        match &v116 {
                                            Spiral_builder::US7::US7_0(v116_0_0) => {
                                                Spiral_builder::US7::US7_0(match &v116 {
                                                    Spiral_builder::US7::US7_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => Spiral_builder::US7::US7_1,
                                        }
                                    }
                                })
                            }
                            _ => Spiral_builder::US6::US6_1,
                        };
                        let v134: Spiral_builder::US7 =
                            if let Spiral_builder::US6::US6_0(v127_0_0) = &v127 {
                                let v128: Spiral_builder::US7 = match &v127 {
                                    Spiral_builder::US6::US6_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Spiral_builder::US7::US7_0(v128_0_0) = &v128 {
                                    Spiral_builder::US7::US7_0(match &v128 {
                                        Spiral_builder::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Spiral_builder::US7::US7_1
                                }
                            } else {
                                Spiral_builder::US7::US7_1
                            };
                        let v138: Spiral_builder::US8 = match &v134 {
                            Spiral_builder::US7::US7_0(v134_0_0) => match &v134 {
                                Spiral_builder::US7::US7_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => Spiral_builder::US8::US8_0,
                        };
                        let v139: string = Spiral_builder::method13();
                        let v141: &str = &*v139;
                        let v143: Option<Vec<std::string::String>> =
                            clap::ArgMatches::get_many(&v34.clone(), v141)
                                .map(|x| x.cloned().into_iter().collect());
                        let _v144: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                            refCell(None::<Spiral_builder::US9>);
                        let v149: () = {
                            Spiral_builder::closure18(
                                v143,
                                Func1::new({
                                    let _v144 = _v144.clone();
                                    move |v_4: Option<Spiral_builder::US9>| {
                                        Spiral_builder::closure17(_v144.clone(), v_4)
                                    }
                                }),
                                (),
                            );
                            ()
                        };
                        let v164: Spiral_builder::US9 =
                            defaultValue(Spiral_builder::US9::US9_1, _v144.get().clone());
                        let v170: Vec<std::string::String> =
                            new_empty::<std::string::String>().to_vec();
                        let v173: Vec<std::string::String> = match &v164 {
                            Spiral_builder::US9::US9_0(v164_0_0) => match &v164 {
                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                _ => unreachable!(),
                            },
                            _ => v170,
                        };
                        let v177: Result<Vec<u8>, std::io::Error> = std::fs::read(&*v72.clone());
                        let v200: Vec<u8> = Spiral_builder::method14(v177.unwrap());
                        let v202: Result<std::string::String, std::string::FromUtf8Error> =
                            std::string::String::from_utf8(v200);
                        let v204: std::string::String = v202.unwrap();
                        let v206: string = fable_library_rust::String_::fromString(v204);
                        let v229: Spiral_builder::US12 = Spiral_builder::method18(
                            Spiral_builder::method15(string("polyglot"), string(".devcontainer")),
                            string("C:\\home\\git\\polyglot\\target\\Builder\\spiral_builder"),
                        );
                        let v970: Spiral_builder::US1 = match &v229 {
                            Spiral_builder::US12::US12_0(v229_0_0) => {
                                Spiral_builder::US1::US1_0(v229_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v229_1_0) => {
                                let v235: () = {
                                    Spiral_builder::closure20(v229_1_0.clone(), ());
                                    ()
                                };
                                Spiral_builder::US1::US1_1
                            }
                        };
                        let v1718: Spiral_builder::US1 = match &v970 {
                            Spiral_builder::US1::US1_0(v970_0_0) => {
                                Spiral_builder::US1::US1_0(match &v970 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            }
                            _ => {
                                let v973: string = Spiral_builder::method23();
                                let v975: Spiral_builder::US12 = Spiral_builder::method18(
                                    Spiral_builder::method15(
                                        string("polyglot"),
                                        string(".devcontainer"),
                                    ),
                                    v973,
                                );
                                match &v975 {
                                    Spiral_builder::US12::US12_0(v975_0_0) => {
                                        Spiral_builder::US1::US1_0(v975_0_0.clone())
                                    }
                                    Spiral_builder::US12::US12_1(v975_1_0) => {
                                        let v981: () = {
                                            Spiral_builder::closure20(v975_1_0.clone(), ());
                                            ()
                                        };
                                        Spiral_builder::US1::US1_1
                                    }
                                }
                            }
                        };
                        let v1723: string = Spiral_builder::method15(
                            match &v1718 {
                                Spiral_builder::US1::US1_0(v1718_0_0) => match &v1718 {
                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            },
                            string("polyglot"),
                        );
                        let v1726: string = toLower(Spiral_builder::method23());
                        let v1730: string = toLower(v1723);
                        let v1736: Spiral_builder::US12 = if startsWith(v1726, v1730.clone(), false)
                        {
                            Spiral_builder::US12::US12_1(v1730.clone())
                        } else {
                            Spiral_builder::US12::US12_0(v1730)
                        };
                        let v1742: Result<string, string> = match &v1736 {
                            Spiral_builder::US12::US12_0(v1736_0_0) => {
                                Ok::<string, string>(v1736_0_0.clone())
                            }
                            Spiral_builder::US12::US12_1(v1736_1_0) => {
                                Err::<string, string>(v1736_1_0.clone())
                            }
                        };
                        let v1744: bool = true;
                        let _result = v1742.unwrap_or_else(|x| {
                            //;
                            let v1746: string = x;
                            let v1748: bool = true;
                            v1746
                        });
                        let v1750: string = _result;
                        let v1751: string = Spiral_builder::method24(v72.clone());
                        let v1757: string = match &v138 {
                            Spiral_builder::US8::US8_1 => {
                                Spiral_builder::method15(v1751.clone(), string("pyproject.toml"))
                            }
                            _ => {
                                Spiral_builder::method15(v1751.clone(), string("requirements.txt"))
                            }
                        };
                        let v1759: bool = true;
                        let _result: Vec<_> = v173
                            .into_iter()
                            .map(|x| {
                                //;
                                let v1761: std::string::String = x;
                                let v1763: string = fable_library_rust::String_::fromString(v1761);
                                let v1776: string = if contains(v1763.clone(), string("=")) {
                                    v1763.clone()
                                } else {
                                    if endsWith(v1763.clone(), string("]"), false) {
                                        sprintf!(
                                            "{}}}",
                                            replace(
                                                v1763.clone(),
                                                string("["),
                                                string("={version=\'*\',features=[")
                                            )
                                        )
                                    } else {
                                        sprintf!("{}=\'*\'", v1763)
                                    }
                                };
                                let v1778: bool = true;
                                v1776
                            })
                            .collect::<Vec<_>>();
                        let v1780: Vec<string> = _result;
                        let v1782: Array<string> =
                            fable_library_rust::NativeArray_::array_from(v1780);
                        let v1789: string = join(
                            string("\n"),
                            toArray_1(delay(Func0::new({
                                let v1782 = v1782.clone();
                                move || {
                                    map(
                                        Func1::new({
                                            let v1782 = v1782.clone();
                                            move |i: i32| v1782[i].clone()
                                        }),
                                        rangeNumeric(0_i32, 1_i32, count_2(v1782.clone()) - 1_i32),
                                    )
                                }
                            }))),
                        );
                        let patternInput: (i32, string) = if v1789.clone() == string("") {
                            (0_i32, string(""))
                        } else {
                            Spiral_builder::method25(v1757,
                                                         match &v138 {
                                                             Spiral_builder::US8::US8_1
                                                             =>
                                                             append(append(append(append(append(append(append(append(append(string("[tool.poetry]\nname = \"test\"\nversion = \"0.0.1\"\ndescription = \"\"\nauthors = []\n\n[tool.poetry.dependencies]\npython=\"~3.12\"\n"),
                                                                                                                            sprintf!("{}",
                                                                                                                                     v1789.clone())),
                                                                                                                     string("\n")),
                                                                                                              string("")),
                                                                                                       string("\n")),
                                                                                                string("[build-system]")),
                                                                                         string("\n")),
                                                                                  string("requires = [\"poetry-core\"]")),
                                                                           string("\n")),
                                                                    string("build-backend = \"poetry.core.masonry.api\"")),
                                                             _ =>
                                                             v1789.clone(),
                                                         });
                            Spiral_builder::method40(
                                match &v138 {
                                    Spiral_builder::US8::US8_1 => string("poetry install"),
                                    _ => string("pip install -r requirements.txt"),
                                },
                                None::<CancellationToken>,
                                new_empty::<(string, string)>(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v1751.clone()),
                            )
                        };
                        let v1848: i32 = patternInput.0.clone();
                        let patternInput_4: (
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                            Spiral_builder::US1,
                        ) = if v1848 != 0_i32 {
                            let v1855: () = {
                                Spiral_builder::closure82(
                                    v138.clone(),
                                    v72.clone(),
                                    patternInput.1.clone(),
                                    v1848,
                                    (),
                                );
                                ()
                            };
                            (
                                Spiral_builder::US1::US1_0(string("py")),
                                Spiral_builder::US1::US1_1,
                                Spiral_builder::US1::US1_1,
                            )
                        } else {
                            let v2698: string = match &v138 {
                                Spiral_builder::US8::US8_1 => {
                                    sprintf!("poetry run python \"{}\"", v72.clone())
                                }
                                _ => sprintf!("python \"{}\"", v72.clone()),
                            };
                            let v2701: Array<(string, string)> =
                                new_array(&[(string("TRACE_LEVEL"), string("Verbose"))]);
                            let patternInput_1: (i32, string) = Spiral_builder::method40(
                                v2698.clone(),
                                None::<CancellationToken>,
                                v2701.clone(),
                                None::<Func1<(i32, string, bool), Arc<Async<()>>>>,
                                None::<
                                    Func1<
                                        std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                        (),
                                    >,
                                >,
                                true,
                                Some(v1751.clone()),
                            );
                            let v2712: string = patternInput_1.1.clone();
                            let v2711: i32 = patternInput_1.0.clone();
                            let v2713: i32 = count_2(v2701.clone());
                            let v2714: Array<string> = new_init(&string(""), v2713);
                            let v2715: LrcPtr<Spiral_builder::Mut5> =
                                LrcPtr::new(Spiral_builder::Mut5 {
                                    l0: MutCell::new(0_i32),
                                });
                            while Spiral_builder::method43(v2713, v2715.clone()) {
                                let v2717: i32 = v2715.l0.get().clone();
                                let patternInput_2: (string, string) = v2701[v2717].clone();
                                let v2720: string = sprintf!(
                                    "$env:{}=\'\'{}\'\'",
                                    patternInput_2.0.clone(),
                                    patternInput_2.1.clone()
                                );
                                v2714.get_mut()[v2717 as usize] = v2720;
                                {
                                    let v2721: i32 = v2717 + 1_i32;
                                    v2715.l0.set(v2721);
                                    ()
                                }
                            }
                            {
                                let v2731: string = sprintf!(
                                    "pwsh -c \'{}; {}\'",
                                    join(string(";"), toArray_1(ofArray_1(v2714.clone()))),
                                    v2698
                                );
                                let patternInput_3: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if if v2711 == 0_i32 {
                                    true
                                } else {
                                    contains(v2712.clone(),
                                                        string("cupy_backends.cuda.api.runtime.CUDARuntimeError: cudaErrorInsufficientDriver"))
                                } {
                                    let result: LrcPtr<MutCell<Spiral_builder::US1>> =
                                        refCell(Spiral_builder::US1::US1_1);
                                    try_catch(
                                        || {
                                            result.set(Spiral_builder::closure84(
                                                (),
                                                Spiral_builder::closure85(v2712.clone(), ()),
                                            ))
                                        },
                                        |ex: LrcPtr<Exception>| {
                                            result.set(Spiral_builder::closure86(
                                                v72.clone(),
                                                v2712.clone(),
                                                v2731.clone(),
                                                ex.clone(),
                                            ))
                                        },
                                    );
                                    {
                                        let v2742: Spiral_builder::US1 = result.get().clone();
                                        let v2752: Option<string> = match &v2742 {
                                            Spiral_builder::US1::US1_0(v2742_0_0) => {
                                                Some(match &v2742 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => None::<string>,
                                        };
                                        (
                                            Spiral_builder::US1::US1_0(string("py")),
                                            Spiral_builder::US1::US1_0(v206),
                                            Spiral_builder::US1::US1_0(v2752.unwrap()),
                                        )
                                    }
                                } else {
                                    let v2761: () = {
                                        Spiral_builder::closure89(
                                            v72.clone(),
                                            v2712,
                                            v2711,
                                            v2731,
                                            (),
                                        );
                                        ()
                                    };
                                    (
                                        Spiral_builder::US1::US1_0(string("py")),
                                        Spiral_builder::US1::US1_1,
                                        Spiral_builder::US1::US1_1,
                                    )
                                };
                                (
                                    patternInput_3.0.clone(),
                                    patternInput_3.1.clone(),
                                    patternInput_3.2.clone(),
                                )
                            }
                        };
                        let v3603: Spiral_builder::US1 = patternInput_4.2.clone();
                        let v3602: Spiral_builder::US1 = patternInput_4.1.clone();
                        let v3601: Spiral_builder::US1 = patternInput_4.0.clone();
                        let v3619: Array<(string, string)> = new_array(&[
                            (
                                string("extension"),
                                match &v3601 {
                                    Spiral_builder::US1::US1_0(v3601_0_0) => match &v3601 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("code"),
                                match &v3602 {
                                    Spiral_builder::US1::US1_0(v3602_0_0) => match &v3602 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                            (
                                string("output"),
                                match &v3603 {
                                    Spiral_builder::US1::US1_0(v3603_0_0) => match &v3603 {
                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => string(""),
                                },
                            ),
                        ]);
                        let v3621: Vec<(string, string)> = v3619.to_vec();
                        let v3624: Vec<LrcPtr<(std::string::String, std::string::String)>> = v3621
                            .into_iter()
                            .map(|x| {
                                Func1::new(move |arg10_0040_9: (string, string)| {
                                    Spiral_builder::closure91((), arg10_0040_9)
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v3625: string =
                            string("std::collections::BTreeMap::from_iter(v3624.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                        let v3626: std::collections::BTreeMap<
                            std::string::String,
                            std::string::String,
                        > = std::collections::BTreeMap::from_iter(
                            v3624
                                .iter()
                                .map(|x| x.as_ref())
                                .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                        );
                        let v3628: Result<std::string::String, serde_json::Error> =
                            serde_json::to_string(&v3626);
                        let v3630: std::string::String = v3628.unwrap();
                        new_array(&[(
                            string("command_result"),
                            fable_library_rust::String_::fromString(v3630),
                        )])
                    } else {
                        if fable_library_rust::String_::fromString(v33.clone()) == string("fable") {
                            let v3638: string = Spiral_builder::method79();
                            let v3640: &str = &*v3638;
                            let v3642: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v34.clone(), v3640).cloned();
                            let _v3643: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                refCell(None::<Spiral_builder::US5>);
                            let v3648: () = {
                                Spiral_builder::closure16(
                                    v3642,
                                    Func1::new({
                                        let _v3643 = _v3643.clone();
                                        move |v_7: Option<Spiral_builder::US5>| {
                                            Spiral_builder::closure15(_v3643.clone(), v_7)
                                        }
                                    }),
                                    (),
                                );
                                ()
                            };
                            let v3663: Spiral_builder::US5 =
                                defaultValue(Spiral_builder::US5::US5_1, _v3643.get().clone());
                            let v3670: std::string::String = match &v3663 {
                                Spiral_builder::US5::US5_0(v3663_0_0) => match &v3663 {
                                    Spiral_builder::US5::US5_0(x) => x.clone(),
                                    _ => unreachable!(),
                                },
                                _ => panic!("{}", string("Option does not have a value."),),
                            };
                            let v3672: string = fable_library_rust::String_::fromString(v3670);
                            let v3673: string = Spiral_builder::method80();
                            let v3675: &str = &*v3673;
                            let v3677: Option<std::string::String> =
                                clap::ArgMatches::get_one(&v34.clone(), v3675).cloned();
                            let _v3678: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                refCell(None::<Spiral_builder::US5>);
                            let v3683: () = {
                                Spiral_builder::closure16(
                                    v3677,
                                    Func1::new({
                                        let _v3678 = _v3678.clone();
                                        move |v_8: Option<Spiral_builder::US5>| {
                                            Spiral_builder::closure15(_v3678.clone(), v_8)
                                        }
                                    }),
                                    (),
                                );
                                ()
                            };
                            let v3698: Spiral_builder::US5 =
                                defaultValue(Spiral_builder::US5::US5_1, _v3678.get().clone());
                            let v3708: Spiral_builder::US1 = match &v3698 {
                                Spiral_builder::US5::US5_0(v3698_0_0) => {
                                    Spiral_builder::US1::US1_0(
                                        fable_library_rust::String_::fromString(match &v3698 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    )
                                }
                                _ => Spiral_builder::US1::US1_1,
                            };
                            new_array(&[(
                                string("command_result"),
                                match &v3708 {
                                    Spiral_builder::US1::US1_0(v3708_0_0) => {
                                        let v3710: clap::Command = Spiral_builder::method0();
                                        let v3712: Spiral_builder::US22 =
                                            Spiral_builder::method54(sprintf!(
                                                "_ {} --fs-path \"{}\"",
                                                match &v3708 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                },
                                                v3672
                                            ));
                                        let v3718: Array<string> = match &v3712 {
                                            Spiral_builder::US22::US22_0(v3712_0_0) => {
                                                v3712_0_0.clone()
                                            }
                                            Spiral_builder::US22::US22_1(v3712_1_0) => panic!(
                                                "{}",
                                                sprintf!(
                                                    "resultm.get / Result value was Error: {}",
                                                    v3712_1_0.clone()
                                                ),
                                            ),
                                        };
                                        let v3720: Vec<string> = v3718.to_vec();
                                        let v3722: bool = true;
                                        let _result: Vec<_> = v3720
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v3724: string = x;
                                                let v3726: &str = &*v3724;
                                                let v3728: std::string::String =
                                                    String::from(v3726);
                                                let v3730: bool = true;
                                                v3728
                                            })
                                            .collect::<Vec<_>>();
                                        let v3732: Vec<std::string::String> = _result;
                                        let v3735: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<string, string>,
                                                >,
                                            >,
                                        > = Spiral_builder::method10(
                                            v0_1.clone(),
                                            clap::Command::get_matches_from(v3710, v3732),
                                        );
                                        let v3737: Result<string, string> = v3735.await;
                                        v3737.unwrap()
                                    }
                                    _ => string("{}"),
                                },
                            )])
                        } else {
                            if fable_library_rust::String_::fromString(v33.clone()) == string("dib")
                            {
                                let v3748: string = Spiral_builder::method81();
                                let v3750: &str = &*v3748;
                                let v3754: Option<string> = map_1(
                                    Func1::new(move |v_9: std::string::String| {
                                        Spiral_builder::closure92((), v_9)
                                    }),
                                    clap::ArgMatches::get_one(&v34.clone(), v3750).cloned(),
                                );
                                let v3780: string = v3754.unwrap();
                                let v3781: string = Spiral_builder::method89();
                                let v3783: &str = &*v3781;
                                let v3786: u8 = defaultValue(
                                    1_u8,
                                    clap::ArgMatches::get_one(&v34.clone(), v3783).cloned(),
                                );
                                let v3789: string = Spiral_builder::method90();
                                let v3791: &str = &*v3789;
                                let patternInput_5: (i32, string) = Spiral_builder::method91(
                                    clap::ArgMatches::get_one(&v34.clone(), v3791).cloned(),
                                    v3786,
                                    v3780.clone(),
                                    1_u8,
                                );
                                let v3796: string = patternInput_5.1.clone();
                                let v3795: i32 = patternInput_5.0.clone();
                                let patternInput_8: (i32, string) = if v3795 != 0_i32 {
                                    (v3795, v3796.clone())
                                } else {
                                    let patternInput_6: (i32, string) =
                                            Spiral_builder::method40(sprintf!("jupyter nbconvert \"{}.ipynb\" --to html --HTMLExporter.theme=dark",
                                                                              v3780.clone()),
                                                                     None::<CancellationToken>,
                                                                     new_empty::<(string,
                                                                                  string)>(),
                                                                     None::<Func1<(i32,
                                                                                   string,
                                                                                   bool),
                                                                                  Arc<Async<()>>>>,
                                                                     None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                  ()>>,
                                                                     true,
                                                                     None::<string>);
                                    let v3808: string = patternInput_6.1.clone();
                                    let v3807: i32 = patternInput_6.0.clone();
                                    let v3811: () = {
                                        Spiral_builder::closure95(v3808.clone(), v3807, ());
                                        ()
                                    };
                                    if v3807 != 0_i32 {
                                        (
                                            v3807,
                                            sprintf!(
                                                "repl_result: {}\n\njupyter_result: {}",
                                                v3796.clone(),
                                                v3808.clone()
                                            ),
                                        )
                                    } else {
                                        let patternInput_7:
                                                    (i32, string) =
                                                Spiral_builder::method40(sprintf!("pwsh -c \"$counter = 1; $path = \'{}.html\'; (Get-Content $path -Raw) -replace \'(id=\\\"cell-id=)[a-fA-F0-9]{{8}}\', {{ $_.Groups[1].Value + $counter++ }} | Set-Content $path\"",
                                                                                  replace(v3780.clone(),
                                                                                          string("\'"),
                                                                                          string("\'\'"))),
                                                                         None::<CancellationToken>,
                                                                         new_empty::<(string,
                                                                                      string)>(),
                                                                         None::<Func1<(i32,
                                                                                       string,
                                                                                       bool),
                                                                                      Arc<Async<()>>>>,
                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                      ()>>,
                                                                         true,
                                                                         None::<string>);
                                        let v4594: string = patternInput_7.1.clone();
                                        let v4593: i32 = patternInput_7.0.clone();
                                        let v4597: () = {
                                            Spiral_builder::closure97(v4594.clone(), v4593, ());
                                            ()
                                        };
                                        let v5365: string = sprintf!("{}.html", v3780.clone());
                                        let v5369: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v5365);
                                        let v5392: Vec<u8> =
                                            Spiral_builder::method14(v5369.unwrap());
                                        let v5394: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v5392);
                                        let v5396: std::string::String = v5394.unwrap();
                                        let v5419: string = replace(
                                            fable_library_rust::String_::fromString(v5396),
                                            string("\r\n"),
                                            string("\n"),
                                        );
                                        let v5420: string = sprintf!("{}.html", v3780.clone());
                                        std::fs::write(&*v5420, &*v5419).unwrap();
                                        ();
                                        {
                                            let v5424: string = sprintf!("{}.ipynb", v3780.clone());
                                            let v5428: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v5424);
                                            let v5451: Vec<u8> =
                                                Spiral_builder::method14(v5428.unwrap());
                                            let v5453: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v5451);
                                            let v5455: std::string::String = v5453.unwrap();
                                            let v5479: string = replace(
                                                replace(
                                                    fable_library_rust::String_::fromString(v5455),
                                                    string("\r\n"),
                                                    string("\n"),
                                                ),
                                                string("\\r\\n"),
                                                string("\\n"),
                                            );
                                            let v5480: string = sprintf!("{}.ipynb", v3780);
                                            std::fs::write(&*v5480, &*v5479).unwrap();
                                            ();
                                            (v4593,
                                                 sprintf!("repl_result: {}\n\njupyter_result: {}\n\npwsh_replace_html_result: {}",
                                                          v3796, v3808,
                                                          v4594))
                                        }
                                    }
                                };
                                let v5488: string = patternInput_8.1.clone();
                                let v5487: i32 = patternInput_8.0.clone();
                                let v5491: () = {
                                    Spiral_builder::closure99(v5488.clone(), v5487, ());
                                    ()
                                };
                                if v5487 != 0_i32 {
                                    panic!(
                                        "{}",
                                        sprintf!(
                                            "spiral_builder.run / dib / exit_code: {} / result: {}",
                                            v5487,
                                            v5488.clone()
                                        )
                                    );
                                }
                                new_array(&[(string("stdio"), v5488)])
                            } else {
                                let patternInput_31: (
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                    Spiral_builder::US1,
                                ) = if fable_library_rust::String_::fromString(v33.clone())
                                    == string("rust")
                                {
                                    let v6268: string = Spiral_builder::method79();
                                    let v6270: &str = &*v6268;
                                    let v6272: Option<std::string::String> =
                                        clap::ArgMatches::get_one(&v34.clone(), v6270).cloned();
                                    let _v6273: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                        refCell(None::<Spiral_builder::US5>);
                                    let v6278: () = {
                                        Spiral_builder::closure16(
                                            v6272,
                                            Func1::new({
                                                let _v6273 = _v6273.clone();
                                                move |v_10: Option<Spiral_builder::US5>| {
                                                    Spiral_builder::closure15(_v6273.clone(), v_10)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6293: Spiral_builder::US5 = defaultValue(
                                        Spiral_builder::US5::US5_1,
                                        _v6273.get().clone(),
                                    );
                                    let v6300: std::string::String = match &v6293 {
                                        Spiral_builder::US5::US5_0(v6293_0_0) => match &v6293 {
                                            Spiral_builder::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => panic!("{}", string("Option does not have a value."),),
                                    };
                                    let v6302: string =
                                        fable_library_rust::String_::fromString(v6300);
                                    let v6303: string = Spiral_builder::method13();
                                    let v6305: &str = &*v6303;
                                    let v6307: Option<Vec<std::string::String>> =
                                        clap::ArgMatches::get_many(&v34.clone(), v6305)
                                            .map(|x| x.cloned().into_iter().collect());
                                    let _v6308: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                                        refCell(None::<Spiral_builder::US9>);
                                    let v6313: () = {
                                        Spiral_builder::closure18(
                                            v6307,
                                            Func1::new({
                                                let _v6308 = _v6308.clone();
                                                move |v_11: Option<Spiral_builder::US9>| {
                                                    Spiral_builder::closure17(_v6308.clone(), v_11)
                                                }
                                            }),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6328: Spiral_builder::US9 = defaultValue(
                                        Spiral_builder::US9::US9_1,
                                        _v6308.get().clone(),
                                    );
                                    let v6334: Vec<std::string::String> =
                                        new_empty::<std::string::String>().to_vec();
                                    let v6337: Vec<std::string::String> = match &v6328 {
                                        Spiral_builder::US9::US9_0(v6328_0_0) => match &v6328 {
                                            Spiral_builder::US9::US9_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        _ => v6334,
                                    };
                                    let v6338: string = Spiral_builder::method92();
                                    let v6340: &str = &*v6338;
                                    let v6342: bool = clap::ArgMatches::get_flag(&v34, v6340);
                                    let v6343: string = Spiral_builder::method93();
                                    let v6345: &str = &*v6343;
                                    let v6354: Spiral_builder::US33 = if v6342 {
                                        Spiral_builder::US33::US33_0(Spiral_builder::US34::US34_0)
                                    } else {
                                        if clap::ArgMatches::get_flag(&v34, v6345) {
                                            Spiral_builder::US33::US33_0(
                                                Spiral_builder::US34::US34_1,
                                            )
                                        } else {
                                            Spiral_builder::US33::US33_1
                                        }
                                    };
                                    let v6355: bool = if let Spiral_builder::US0::US0_0 = &v0_1 {
                                        true
                                    } else {
                                        false
                                    };
                                    let v6359: Result<Vec<u8>, std::io::Error> =
                                        std::fs::read(&*v6302);
                                    let v6382: Vec<u8> = Spiral_builder::method14(v6359.unwrap());
                                    let v6384: Result<
                                        std::string::String,
                                        std::string::FromUtf8Error,
                                    > = std::string::String::from_utf8(v6382);
                                    let v6386: std::string::String = v6384.unwrap();
                                    let v6402: string =
                                        fable_library_rust::String_::fromString(v6386);
                                    let v6408: LrcPtr<Spiral_builder::Mut4> =
                                        LrcPtr::new(Spiral_builder::Mut4 {
                                            l0: MutCell::new(Spiral_builder::method9()),
                                        });
                                    let v6415: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string("{ ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6424: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string("extension")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6433: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string(" = ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6442: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string("rs")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6451: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string("; ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6460: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string("code")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6468: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string(" = ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6476: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", v6402.clone()),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6484: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string("; ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6493: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string("runtime")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6501: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string(" = ")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6512: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", sprintf!("{:?}", v6354.clone())),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6521: () = {
                                        Spiral_builder::closure10(
                                            v6408.clone(),
                                            sprintf!("{}", string(" }")),
                                            (),
                                        );
                                        ()
                                    };
                                    let v6525: string =
                                        Spiral_builder::method94(v6408.l0.get().clone());
                                    let v6530: Spiral_builder::US12 =
                                            Spiral_builder::method18(Spiral_builder::method15(string("polyglot"),
                                                                                              string(".devcontainer")),
                                                                     string("C:\\home\\git\\polyglot\\target\\Builder\\spiral_builder"));
                                    let v7268: Spiral_builder::US1 = match &v6530 {
                                        Spiral_builder::US12::US12_0(v6530_0_0) => {
                                            Spiral_builder::US1::US1_0(v6530_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v6530_1_0) => {
                                            let v6536: () = {
                                                Spiral_builder::closure20(v6530_1_0.clone(), ());
                                                ()
                                            };
                                            Spiral_builder::US1::US1_1
                                        }
                                    };
                                    let v8013: Spiral_builder::US1 = match &v7268 {
                                        Spiral_builder::US1::US1_0(v7268_0_0) => {
                                            Spiral_builder::US1::US1_0(match &v7268 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        }
                                        _ => {
                                            let v7271: string = Spiral_builder::method23();
                                            let v7273: Spiral_builder::US12 =
                                                Spiral_builder::method18(
                                                    Spiral_builder::method15(
                                                        string("polyglot"),
                                                        string(".devcontainer"),
                                                    ),
                                                    v7271,
                                                );
                                            match &v7273 {
                                                Spiral_builder::US12::US12_0(v7273_0_0) => {
                                                    Spiral_builder::US1::US1_0(v7273_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v7273_1_0) => {
                                                    let v7279: () = {
                                                        Spiral_builder::closure20(
                                                            v7273_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            }
                                        }
                                    };
                                    let v8018: string = Spiral_builder::method15(
                                        match &v8013 {
                                            Spiral_builder::US1::US1_0(v8013_0_0) => match &v8013 {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        },
                                        string("polyglot"),
                                    );
                                    let v8021: string = toLower(Spiral_builder::method23());
                                    let v8025: string = toLower(v8018);
                                    let v8031: Spiral_builder::US12 =
                                        if startsWith(v8021, v8025.clone(), false) {
                                            Spiral_builder::US12::US12_1(v8025.clone())
                                        } else {
                                            Spiral_builder::US12::US12_0(v8025)
                                        };
                                    let v8037: Result<string, string> = match &v8031 {
                                        Spiral_builder::US12::US12_0(v8031_0_0) => {
                                            Ok::<string, string>(v8031_0_0.clone())
                                        }
                                        Spiral_builder::US12::US12_1(v8031_1_0) => {
                                            Err::<string, string>(v8031_1_0.clone())
                                        }
                                    };
                                    let v8039: bool = true;
                                    let _result = v8037.unwrap_or_else(|x| {
                                        //;
                                        let v8041: string = x;
                                        let v8043: bool = true;
                                        v8041
                                    });
                                    let v8045: string = _result;
                                    let v8054: string = Spiral_builder::method15(
                                        Spiral_builder::method15(
                                            Spiral_builder::method15(
                                                Spiral_builder::method15(
                                                    Spiral_builder::method15(
                                                        v8045.clone(),
                                                        string("target/spiral_builder"),
                                                    ),
                                                    string("spiral_builder"),
                                                ),
                                                string("packages"),
                                            ),
                                            string("Rust"),
                                        ),
                                        v6525.clone(),
                                    );
                                    let v8055: LrcPtr<dyn IDisposable> =
                                        Spiral_builder::method28(v8054.clone());
                                    let v8058: string =
                                        Spiral_builder::method85(Spiral_builder::method15(
                                            v8054.clone(),
                                            sprintf!("{}.fs", string("spiral_builder")),
                                        ));
                                    Spiral_builder::method25(v8058.clone(), v6402);
                                    {
                                        let v8059: List<string> = empty::<string>();
                                        let v8066: string = join(
                                            string("\\n        "),
                                            toArray_1(delay(Func0::new({
                                                let v8059 = v8059.clone();
                                                move || {
                                                    map(
                                                        Func1::new({
                                                            let v8059 = v8059.clone();
                                                            move |i_1: i32| item(i_1, v8059.clone())
                                                        }),
                                                        rangeNumeric(
                                                            0_i32,
                                                            1_i32,
                                                            length_1(v8059.clone()) - 1_i32,
                                                        ),
                                                    )
                                                }
                                            }))),
                                        );
                                        let v8072: List<string> = singleton(sprintf!(
                                            "<PackageReference Include=\"{}\" Version=\"*\" />",
                                            string("Fable.Core")
                                        ));
                                        let v8080: string = join(
                                            string("\\n        "),
                                            toArray_1(delay(Func0::new({
                                                let v8072 = v8072.clone();
                                                move || {
                                                    map(
                                                        Func1::new({
                                                            let v8072 = v8072.clone();
                                                            move |i_2: i32| item(i_2, v8072.clone())
                                                        }),
                                                        rangeNumeric(
                                                            0_i32,
                                                            1_i32,
                                                            length_1(v8072.clone()) - 1_i32,
                                                        ),
                                                    )
                                                }
                                            }))),
                                        );
                                        let v8085: string =
                                            Spiral_builder::method85(Spiral_builder::method15(
                                                v8054.clone(),
                                                sprintf!("{}.fsproj", string("spiral_builder")),
                                            ));
                                        Spiral_builder::method25(v8085.clone(),
                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                         v8066)),
                                                                                                                                                         string("\n")),
                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                           v8058)),
                                                                                                                                           string("\n")),
                                                                                                                                    string("</ItemGroup>")),
                                                                                                                             string("\n")),
                                                                                                                      string("<ItemGroup>")),
                                                                                                               string("\n")),
                                                                                                        sprintf!("    {}",
                                                                                                                 v8080)),
                                                                                                 string("\n")),
                                                                                          string("</ItemGroup>")),
                                                                                   string("\n")),
                                                                            string("</Project>")));
                                        {
                                            let v8185: string = Spiral_builder::method15(
                                                v8054.clone(),
                                                string("../../.."),
                                            );
                                            let v8187: string = Spiral_builder::method15(
                                                v8185.clone(),
                                                string("Cargo.toml"),
                                            );
                                            if Spiral_builder::method27(v8187.clone()) == false {
                                                let v8190: DateTime = DateTime::now();
                                                let v8199: string = toString(
                                                    Spiral_builder::method97(new_guid(), v8190),
                                                );
                                                let v8223: string =
                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                   sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                            v8199.clone())),
                                                                                                                                            string("\n")),
                                                                                                                                     string("version = \"0.0.1\"")),
                                                                                                                              string("\n")),
                                                                                                                       string("edition = \"2021\"")),
                                                                                                                string("\n")),
                                                                                                         string("")),
                                                                                                  string("\n")),
                                                                                           string("[[bin]]")),
                                                                                    string("\n")),
                                                                             sprintf!("name = \"spiral_builder_{}\"",
                                                                                      v8199)),
                                                                      string("\n")),
                                                               string("path = \"spiral_builder.rs\""));
                                                std::fs::write(&*v8187.clone(), &*v8223).unwrap();
                                                ();
                                                ()
                                            }
                                            {
                                                let v8227: string = Spiral_builder::method15(
                                                    v8054.clone(),
                                                    string("Cargo.toml"),
                                                );
                                                if Spiral_builder::method27(v8227.clone()) == false
                                                {
                                                    let v8230: DateTime = DateTime::now();
                                                    let v8239: string = toString(
                                                        Spiral_builder::method97(new_guid(), v8230),
                                                    );
                                                    let v8263: string =
                                                            append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                       sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                v8239.clone())),
                                                                                                                                                string("\n")),
                                                                                                                                         string("version = \"0.0.1\"")),
                                                                                                                                  string("\n")),
                                                                                                                           string("edition = \"2021\"")),
                                                                                                                    string("\n")),
                                                                                                             string("")),
                                                                                                      string("\n")),
                                                                                               string("[[bin]]")),
                                                                                        string("\n")),
                                                                                 sprintf!("name = \"spiral_builder_{}\"",
                                                                                          v8239)),
                                                                          string("\n")),
                                                                   string("path = \"spiral_builder.rs\""));
                                                    std::fs::write(&*v8227.clone(), &*v8263)
                                                        .unwrap();
                                                    ();
                                                    ()
                                                }
                                                {
                                                    let v8268: string =
                                                            Spiral_builder::method15(v8045.clone(),
                                                                                     string("lib/rust/fable/fable_modules/fable-library-rust"));
                                                    let v8270: string = Spiral_builder::method15(
                                                        v8054.clone(),
                                                        string("fable_modules/fable-library-rust"),
                                                    );
                                                    Spiral_builder::method101(v8268, v8270.clone());
                                                    {
                                                        let patternInput_9: (i32, string) =
                                                            Spiral_builder::method102(
                                                                v6354.clone(),
                                                                v8054.clone(),
                                                                string("rs"),
                                                                v8085,
                                                                v8031.clone(),
                                                            );
                                                        let v8272: string =
                                                            patternInput_9.1.clone();
                                                        let v8271: i32 = patternInput_9.0.clone();
                                                        let patternInput_18: (
                                                            Spiral_builder::US1,
                                                            Spiral_builder::US1,
                                                            Spiral_builder::US1,
                                                        ) = if v8271 != 0_i32 {
                                                            let v8278: () = {
                                                                Spiral_builder::closure105(
                                                                    v8272.clone(),
                                                                    v8271,
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            (
                                                                Spiral_builder::US1::US1_0(string(
                                                                    "rs",
                                                                )),
                                                                Spiral_builder::US1::US1_1,
                                                                Spiral_builder::US1::US1_0(v8272),
                                                            )
                                                        } else {
                                                            let v9071:
                                                                            Vec<std::string::String> =
                                                                        if if let Spiral_builder::US33::US33_1
                                                                                  =
                                                                                  &v6354
                                                                              {
                                                                               true
                                                                           } else {
                                                                               false
                                                                           } {
                                                                            v6337.clone()
                                                                        } else {
                                                                            let v9045 =
                                                                                Spiral_builder::method105();
                                                                            let v9046:
                                                                                    Vec<std::string::String> =
                                                                                Spiral_builder::method106(v6337.clone());
                                                                            let v9048:
                                                                                    Vec<std::string::String> =
                                                                                v9046.into_iter().filter(|x| v9045(x.clone().clone())).collect::<Vec<_>>();
                                                                            if v9048.len()
                                                                                   as
                                                                                   i32
                                                                                   >
                                                                                   0_i32
                                                                               {
                                                                                v6337.clone()
                                                                            } else {
                                                                                let v9056:
                                                                                        &str =
                                                                                    &*string("near-sdk");
                                                                                let v9059:
                                                                                        Array<std::string::String> =
                                                                                    new_array(&[String::from(v9056)]);
                                                                                let v9062:
                                                                                        Vec<std::string::String> =
                                                                                    Spiral_builder::method107(v9059.to_vec());
                                                                                let v9063:
                                                                                        Vec<std::string::String> =
                                                                                    Spiral_builder::method108(v6337);
                                                                                let v9065:
                                                                                        bool =
                                                                                    true; let mut v9063 = v9063;
                                                                                let v9067:
                                                                                        bool =
                                                                                    true; v9063.extend(v9062);
                                                                                v9063
                                                                            }
                                                                        };
                                                            let v9073: bool = true;
                                                            let _result : Vec<_> = v9071.into_iter().map(|x| { //;
                                                                    let v9075:
                                                                            std::string::String =
                                                                        x;
                                                                    let v9077:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v9075);
                                                                    let v9090:
                                                                            string =
                                                                        if contains(v9077.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v9077.clone()
                                                                        } else {
                                                                            if endsWith(v9077.clone(),
                                                                                        string("]"),
                                                                                        false)
                                                                               {
                                                                                sprintf!("{}}}",
                                                                                         replace(v9077.clone(),
                                                                                                 string("["),
                                                                                                 string("={version=\'*\',features=[")))
                                                                            } else {
                                                                                sprintf!("{}=\'*\'",
                                                                                         v9077)
                                                                            }
                                                                        };
                                                                    let v9092:
                                                                            bool =
                                                                        true; v9090 }).collect::<Vec<_>>();
                                                            let v9094: Vec<string> = _result;
                                                            let v9096:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v9094);
                                                            let v9150:
                                                                            string =
                                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("[package]\n"),
                                                                                                                                                                                                                           sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                                                                                                                                    v6525.clone())),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("version = \"0.0.1\"")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("edition = \"2021\"")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 string("")),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("[dependencies]")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     (if if let Spiral_builder::US33::US33_1
                                                                                                                                                                =
                                                                                                                                                                &v6354
                                                                                                                                                            {
                                                                                                                                                             true
                                                                                                                                                         } else {
                                                                                                                                                             false
                                                                                                                                                         }
                                                                                                                                                         {
                                                                                                                                                          let v9122:
                                                                                                                                                                  string =
                                                                                                                                                              string("fable_library_rust = { workspace = true, features = [\"static_do_bindings\", \"datetime\", \"guid\", \"threaded\"] }");
                                                                                                                                                          v9122
                                                                                                                                                      } else {
                                                                                                                                                          string("fable_library_rust = { workspace = true }")
                                                                                                                                                      })),
                                                                                                                                              string("\n")),
                                                                                                                                       string("inline_colorization = { workspace = true }")),
                                                                                                                                string("\n")),
                                                                                                                         sprintf!("{}",
                                                                                                                                  join(string("\n"),
                                                                                                                                       toArray_1(delay(Func0::new({
                                                                                                                                                                      let v9096
                                                                                                                                                                          =
                                                                                                                                                                          v9096.clone();
                                                                                                                                                                      move
                                                                                                                                                                          ||
                                                                                                                                                                          map(Func1::new({
                                                                                                                                                                                             let v9096
                                                                                                                                                                                                 =
                                                                                                                                                                                                 v9096.clone();
                                                                                                                                                                                             move
                                                                                                                                                                                                 |i_3:
                                                                                                                                                                                                      i32|
                                                                                                                                                                                                 v9096[i_3].clone()
                                                                                                                                                                                         }),
                                                                                                                                                                              rangeNumeric(0_i32,
                                                                                                                                                                                           1_i32,
                                                                                                                                                                                           count_2(v9096.clone())
                                                                                                                                                                                               -
                                                                                                                                                                                               1_i32))
                                                                                                                                                                  })))))),
                                                                                                                  string("\n")),
                                                                                                           string("")),
                                                                                                    string("\n")),
                                                                                             (if if let Spiral_builder::US33::US33_1
                                                                                                        =
                                                                                                        &v6354
                                                                                                    {
                                                                                                     true
                                                                                                 } else {
                                                                                                     false
                                                                                                 }
                                                                                                 {
                                                                                                  append(string("[[bin]]\n"),
                                                                                                         sprintf!("name = \"spiral_builder_{}\"",
                                                                                                                  v6525.clone()))
                                                                                              } else {
                                                                                                  string("[lib]\ncrate-type = [\"cdylib\"]")
                                                                                              })),
                                                                                      string("\n")),
                                                                               string("path = \"spiral_builder.rs\" "));
                                                            let v9215:
                                                                            string =
                                                                        append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(append(string("cargo-features = [\"profile-rustflags\"]\n\n[workspace]\nresolver = \"2\"\nmembers = [\"packages/Rust/*\"]\n\n[workspace.dependencies.fable_library_rust]\n"),
                                                                                                                                                                                                                                                                                   sprintf!("path = \"{}/lib/rust/fable/fable_modules/fable-library-rust\"",
                                                                                                                                                                                                                                                                                            Spiral_builder::method85(v8045.clone()))),
                                                                                                                                                                                                                                                                            string("\n")),
                                                                                                                                                                                                                                                                     string("default-features = false")),
                                                                                                                                                                                                                                                              string("\n")),
                                                                                                                                                                                                                                                       string("features = []")),
                                                                                                                                                                                                                                                string("\n")),
                                                                                                                                                                                                                                         string("")),
                                                                                                                                                                                                                                  string("\n")),
                                                                                                                                                                                                                           string("[workspace.dependencies]")),
                                                                                                                                                                                                                    string("\n")),
                                                                                                                                                                                                             string("inline_colorization = \"~0.1\"")),
                                                                                                                                                                                                      string("\n")),
                                                                                                                                                                                               string("")),
                                                                                                                                                                                        string("\n")),
                                                                                                                                                                                 string("[profile.release]")),
                                                                                                                                                                          string("\n")),
                                                                                                                                                                   string("codegen-units = 1")),
                                                                                                                                                            string("\n")),
                                                                                                                                                     string("opt-level = \"z\"")),
                                                                                                                                              string("\n")),
                                                                                                                                       string("lto = true")),
                                                                                                                                string("\n")),
                                                                                                                         string("debug = false")),
                                                                                                                  string("\n")),
                                                                                                           string("panic = \"abort\"")),
                                                                                                    string("\n")),
                                                                                             string("overflow-checks = true")),
                                                                                      string("\n")),
                                                                               string("rustflags = [\"-C\", \"link-arg=-s\"]"));
                                                            Spiral_builder::method25(
                                                                v8227.clone(),
                                                                v9150,
                                                            );
                                                            Spiral_builder::method25(v8187, v9215);
                                                            {
                                                                let v9217: string =
                                                                    Spiral_builder::method15(
                                                                        v8270,
                                                                        string("src/Range.rs"),
                                                                    );
                                                                if Spiral_builder::method27(
                                                                    v9217.clone(),
                                                                ) {
                                                                    let v9222: Result<
                                                                        Vec<u8>,
                                                                        std::io::Error,
                                                                    > = std::fs::read(
                                                                        &*v9217.clone(),
                                                                    );
                                                                    let v9245: Vec<u8> =
                                                                        Spiral_builder::method14(
                                                                            v9222.unwrap(),
                                                                        );
                                                                    let v9247:
                                                                                    Result<std::string::String,
                                                                                           std::string::FromUtf8Error> =
                                                                                std::string::String::from_utf8(v9245);
                                                                    let v9249: std::string::String =
                                                                        v9247.unwrap();
                                                                    Spiral_builder::method25(v9217,
                                                                                                     replace(replace(fable_library_rust::String_::fromString(v9249),
                                                                                                                     string("use crate::String_::fromCharCode;"),
                                                                                                                     string("use crate::String_::fromChar;")),
                                                                                                             string("fromCharCode(c)"),
                                                                                                             string("std::char::from_u32(c).unwrap()")))
                                                                }
                                                                {
                                                                    let patternInput_10: (
                                                                        i32,
                                                                        string,
                                                                    ) = Spiral_builder::method109(
                                                                        v8031.clone(),
                                                                        v8227.clone(),
                                                                        1_u8,
                                                                    );
                                                                    let v9277: i32 =
                                                                        patternInput_10.0.clone();
                                                                    if v9277 != 0_i32 {
                                                                        let v9284: () = {
                                                                            Spiral_builder::closure111(patternInput_10.1.clone(),
                                                                                                                   v9277,
                                                                                                                   ());
                                                                            ()
                                                                        };
                                                                        ()
                                                                    }
                                                                    {
                                                                        let v10048:
                                                                                        string =
                                                                                    Spiral_builder::method15(v8054,
                                                                                                             sprintf!("{}.{}",
                                                                                                                      string("spiral_builder"),
                                                                                                                      string("rs")));
                                                                        let v10052: Result<
                                                                            Vec<u8>,
                                                                            std::io::Error,
                                                                        > = std::fs::read(
                                                                            &*v10048.clone(),
                                                                        );
                                                                        let v10075:
                                                                                        Vec<u8> =
                                                                                    Spiral_builder::method14(v10052.unwrap());
                                                                        let v10077:
                                                                                        Result<std::string::String,
                                                                                               std::string::FromUtf8Error> =
                                                                                    std::string::String::from_utf8(v10075);
                                                                        let v10079:
                                                                                        std::string::String =
                                                                                    v10077.unwrap();
                                                                        let v10095:
                                                                                        string =
                                                                                    fable_library_rust::String_::fromString(v10079);
                                                                        let v10103:
                                                                                        string =
                                                                                    append(string("pub fn main() -> Result<(), String> "),
                                                                                           "{".into());
                                                                        let v10140:
                                                                                        string =
                                                                                    append(append((if if let Spiral_builder::US33::US33_1
                                                                                                             =
                                                                                                             &v6354
                                                                                                         {
                                                                                                          true
                                                                                                      } else {
                                                                                                          false
                                                                                                      }
                                                                                                      {
                                                                                                       string("")
                                                                                                   } else {
                                                                                                       string("#[near_sdk::near_bindgen]\n#[derive(near_sdk::PanicOnDefault)]\npub struct MainState {\n}\n\n#[near_sdk::near_bindgen]\nimpl MainState {\n    pub fn state_main() {\n        Spiral_builder::method0();\n    }\n}")
                                                                                                   }),
                                                                                                  string("\n")),
                                                                                           sprintf!("{} Ok(()) }}",
                                                                                                    v10103.clone()));
                                                                        let v10141: bool = contains(
                                                                            v10095.clone(),
                                                                            v10103,
                                                                        );
                                                                        let v10233: string =
                                                                            if v10141 {
                                                                                v10095.clone()
                                                                            } else {
                                                                                let v10155:
                                                                                                string =
                                                                                            replace(replace(v10095,
                                                                                                            append(string("),)"),
                                                                                                                   ";".into()),
                                                                                                            string("));")),
                                                                                                    append(string("},)"),
                                                                                                           ";".into()),
                                                                                                    string("});"));
                                                                                let v10160:
                                                                                                Result<regex::Regex,
                                                                                                       regex::Error> =
                                                                                            regex::Regex::new(&string("\\s\\sdefaultOf\\(\\);"));
                                                                                let v10162:
                                                                                                regex::Regex =
                                                                                            v10160.unwrap();
                                                                                let v10163:
                                                                                                string =
                                                                                            Spiral_builder::method86(v10155);
                                                                                let v10165:
                                                                                                std::borrow::Cow<str> =
                                                                                            v10162.replace_all(&*v10163, &*string(" defaultOf::<()>();"));
                                                                                let v10167:
                                                                                                std::string::String =
                                                                                            String::from(v10165);
                                                                                replace(replace(replace(replace(replace(replace(replace(replace(fable_library_rust::String_::fromString(v10167),
                                                                                                                                                        string("::Slice\'_"),
                                                                                                                                                        string("::Slice__")),
                                                                                                                                                append(string("defaultOf()"),
                                                                                                                                                       ",".into()),
                                                                                                                                                string("defaultOf::<std::sync::Arc<dyn IDisposable>>(),")),
                                                                                                                                        append(string("_self"),
                                                                                                                                               "_.".into()),
                                                                                                                                        string("self.")),
                                                                                                                                append(string("get_or_insert_wit"),
                                                                                                                                       "h".into()),
                                                                                                                                string("get_or_init")),
                                                                                                                        append(string("use fable_library_rust::System::Collections::Concurrent::ConcurrentStack_1"),
                                                                                                                               ";".into()),
                                                                                                                        string("type ConcurrentStack_1<T> = T;")),
                                                                                                                append(string("use fable_library_rust::System::Threading::CancellationToken"),
                                                                                                                       ";".into()),
                                                                                                                string("type CancellationToken = ();")),
                                                                                                        append(string("use fable_library_rust::System::TimeZoneInfo"),
                                                                                                               ";".into()),
                                                                                                        string("type TimeZoneInfo = i64;")),
                                                                                                append(string("use fable_library_rust::System::Threading::Tasks::TaskCanceledException"),
                                                                                                       ";".into()),
                                                                                                string("type TaskCanceledException = ();"))
                                                                            };
                                                                        if v10141 == false {
                                                                            Spiral_builder::method25(v10048.clone(),
                                                                                                             sprintf!("{}\n\n{}\n",
                                                                                                                      v10233.clone(),
                                                                                                                      v10140));
                                                                        }
                                                                        {
                                                                            let v10240:
                                                                                            string =
                                                                                        if (if let Spiral_builder::US33::US33_1
                                                                                                   =
                                                                                                   &v6354
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            sprintf!("cargo build --release --target wasm32-unknown-unknown --manifest-path \"{}\"",
                                                                                                     v8227.clone())
                                                                                        } else {
                                                                                            sprintf!("cargo run --manifest-path \"{}\"",
                                                                                                     v8227)
                                                                                        };
                                                                            let v10251:
                                                                                            Array<(string,
                                                                                                   string)> =
                                                                                        if (if let Spiral_builder::US33::US33_1
                                                                                                   =
                                                                                                   &v6354
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            new_empty::<(string,
                                                                                                         string)>()
                                                                                        } else {
                                                                                            new_array(&[(string("TRACE_LEVEL"),
                                                                                                         string("Verbose")),
                                                                                                        (string("RUSTC_WRAPPER"),
                                                                                                         string("sccache")),
                                                                                                        (string("RUSTFLAGS"),
                                                                                                         string("-C prefer-dynamic"))])
                                                                                        };
                                                                            let v10262:
                                                                                            Result<string,
                                                                                                   string> =
                                                                                        match &v8031
                                                                                            {
                                                                                            Spiral_builder::US12::US12_0(v8031_0_0)
                                                                                            =>
                                                                                            Ok::<string,
                                                                                                 string>(v8031_0_0.clone()),
                                                                                            Spiral_builder::US12::US12_1(v8031_1_0)
                                                                                            =>
                                                                                            Err::<string,
                                                                                                  string>(v8031_1_0.clone()),
                                                                                        };
                                                                            let patternInput_11:
                                                                                            (i32,
                                                                                             string) =
                                                                                        Spiral_builder::method40(v10240.clone(),
                                                                                                                 None::<CancellationToken>,
                                                                                                                 v10251.clone(),
                                                                                                                 None::<Func1<(i32,
                                                                                                                               string,
                                                                                                                               bool),
                                                                                                                              Arc<Async<()>>>>,
                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                              ()>>,
                                                                                                                 true,
                                                                                                                 v10262.ok());
                                                                            let v10267: string =
                                                                                patternInput_11
                                                                                    .1
                                                                                    .clone();
                                                                            let v10266: i32 =
                                                                                patternInput_11
                                                                                    .0
                                                                                    .clone();
                                                                            let patternInput_17:
                                                                                            (Spiral_builder::US1,
                                                                                             Spiral_builder::US1,
                                                                                             Spiral_builder::US1) =
                                                                                        if if let Spiral_builder::US33::US33_1
                                                                                                  =
                                                                                                  &v6354
                                                                                              {
                                                                                               true
                                                                                           } else {
                                                                                               false
                                                                                           }
                                                                                           {
                                                                                            let v10269:
                                                                                                    i32 =
                                                                                                count_2(v10251.clone());
                                                                                            let v10270:
                                                                                                    Array<string> =
                                                                                                new_init(&string(""),
                                                                                                         v10269);
                                                                                            let v10271:
                                                                                                    LrcPtr<Spiral_builder::Mut5> =
                                                                                                LrcPtr::new(Spiral_builder::Mut5{l0:
                                                                                                                                     MutCell::new(0_i32),});
                                                                                            while Spiral_builder::method43(v10269,
                                                                                                                           v10271.clone())
                                                                                                  {
                                                                                                let v10273:
                                                                                                        i32 =
                                                                                                    v10271.l0.get().clone();
                                                                                                let patternInput_12:
                                                                                                        (string,
                                                                                                         string) =
                                                                                                    v10251[v10273].clone();
                                                                                                let v10276:
                                                                                                        string =
                                                                                                    sprintf!("$env:{}=\'\'{}\'\'",
                                                                                                             patternInput_12.0.clone(),
                                                                                                             patternInput_12.1.clone());
                                                                                                v10270.get_mut()[v10273
                                                                                                                     as
                                                                                                                     usize]
                                                                                                    =
                                                                                                    v10276;
                                                                                                {
                                                                                                    let v10277:
                                                                                                            i32 =
                                                                                                        v10273
                                                                                                            +
                                                                                                            1_i32;
                                                                                                    v10271.l0.set(v10277);
                                                                                                    ()
                                                                                                }
                                                                                            }
                                                                                            {
                                                                                                let v10296:
                                                                                                        string =
                                                                                                    sprintf!("pwsh -c \'{}\'",
                                                                                                             join(string(";"),
                                                                                                                  toArray_1(ofArray_1(new_array(&[join(string(";"),
                                                                                                                                                       toArray_1(ofArray_1(v10270.clone()))),
                                                                                                                                                  v10240])))));
                                                                                                let patternInput_13:
                                                                                                        (Spiral_builder::US1,
                                                                                                         Spiral_builder::US1,
                                                                                                         Spiral_builder::US1) =
                                                                                                    if v10266
                                                                                                           ==
                                                                                                           0_i32
                                                                                                       {
                                                                                                        let result_1:
                                                                                                                LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                            refCell(Spiral_builder::US1::US1_1);
                                                                                                        try_catch(||
                                                                                                                      result_1.set(Spiral_builder::closure84((),
                                                                                                                                                             Spiral_builder::closure113(v10267.clone(),
                                                                                                                                                                                        ()))),
                                                                                                                  |ex_1:
                                                                                                                       LrcPtr<Exception>|
                                                                                                                      result_1.set(Spiral_builder::closure115(v10048.clone(),
                                                                                                                                                              v10267.clone(),
                                                                                                                                                              v10296.clone(),
                                                                                                                                                              ex_1.clone())));
                                                                                                        {
                                                                                                            let v10302:
                                                                                                                    Spiral_builder::US1 =
                                                                                                                result_1.get().clone();
                                                                                                            let v10312:
                                                                                                                    Option<string> =
                                                                                                                match &v10302
                                                                                                                    {
                                                                                                                    Spiral_builder::US1::US1_0(v10302_0_0)
                                                                                                                    =>
                                                                                                                    Some(match &v10302
                                                                                                                             {
                                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                                             =>
                                                                                                                             x.clone(),
                                                                                                                             _
                                                                                                                             =>
                                                                                                                             unreachable!(),
                                                                                                                         }),
                                                                                                                    _
                                                                                                                    =>
                                                                                                                    None::<string>,
                                                                                                                };
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_0(v10233.clone()),
                                                                                                             Spiral_builder::US1::US1_0(v10312.unwrap()))
                                                                                                        }
                                                                                                    } else {
                                                                                                        let v10320:
                                                                                                                () =
                                                                                                            {
                                                                                                                Spiral_builder::closure118(v10048.clone(),
                                                                                                                                           v10267.clone(),
                                                                                                                                           v10266,
                                                                                                                                           v10296,
                                                                                                                                           ());
                                                                                                                ()
                                                                                                            };
                                                                                                        (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                         Spiral_builder::US1::US1_1,
                                                                                                         Spiral_builder::US1::US1_1)
                                                                                                    };
                                                                                                (patternInput_13.0.clone(),
                                                                                                 patternInput_13.1.clone(),
                                                                                                 patternInput_13.2.clone())
                                                                                            }
                                                                                        } else {
                                                                                            let v11155:
                                                                                                    string =
                                                                                                sprintf!("target/spiral_builder/{}/target/wasm32-unknown-unknown/release/spiral_builder_{}.wasm",
                                                                                                         string("spiral_builder"),
                                                                                                         v6525.clone());
                                                                                            let v11158:
                                                                                                    string =
                                                                                                sprintf!("pwsh -c \"pwsh {} {} -Linux -EnvironmentVariables NEAR_RPC_TIMEOUT_SECS=100\"",
                                                                                                         string("scripts/invoke-block.ps1"),
                                                                                                         sprintf!("\'workspace/target/release/spiral_wasm -w {}\'",
                                                                                                                  v11155.clone()));
                                                                                            let patternInput_16:
                                                                                                    (Spiral_builder::US1,
                                                                                                     Spiral_builder::US1,
                                                                                                     Spiral_builder::US1) =
                                                                                                if v10266
                                                                                                       ==
                                                                                                       0_i32
                                                                                                   {
                                                                                                    let patternInput_14:
                                                                                                            (i32,
                                                                                                             string) =
                                                                                                        Spiral_builder::method40(v11158.clone(),
                                                                                                                                 None::<CancellationToken>,
                                                                                                                                 new_empty::<(string,
                                                                                                                                              string)>(),
                                                                                                                                 None::<Func1<(i32,
                                                                                                                                               string,
                                                                                                                                               bool),
                                                                                                                                              Arc<Async<()>>>>,
                                                                                                                                 None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                                              ()>>,
                                                                                                                                 true,
                                                                                                                                 Some(v8045));
                                                                                                    let v11170:
                                                                                                            string =
                                                                                                        patternInput_14.1.clone();
                                                                                                    let v11169:
                                                                                                            i32 =
                                                                                                        patternInput_14.0.clone();
                                                                                                    let patternInput_15:
                                                                                                            (Spiral_builder::US1,
                                                                                                             Spiral_builder::US1,
                                                                                                             Spiral_builder::US1) =
                                                                                                        if v11169
                                                                                                               ==
                                                                                                               0_i32
                                                                                                           {
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_0(v10233),
                                                                                                             Spiral_builder::US1::US1_0(v11170.clone()))
                                                                                                        } else {
                                                                                                            let v11177:
                                                                                                                    () =
                                                                                                                {
                                                                                                                    Spiral_builder::closure120(v10048.clone(),
                                                                                                                                               v10267.clone(),
                                                                                                                                               v11170,
                                                                                                                                               v11169,
                                                                                                                                               ());
                                                                                                                    ()
                                                                                                                };
                                                                                                            (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                             Spiral_builder::US1::US1_1,
                                                                                                             Spiral_builder::US1::US1_1)
                                                                                                        };
                                                                                                    (patternInput_15.0.clone(),
                                                                                                     patternInput_15.1.clone(),
                                                                                                     patternInput_15.2.clone())
                                                                                                } else {
                                                                                                    let v12014:
                                                                                                            () =
                                                                                                        {
                                                                                                            Spiral_builder::closure122(v10048.clone(),
                                                                                                                                       v10267,
                                                                                                                                       v10266,
                                                                                                                                       v11155,
                                                                                                                                       v11158,
                                                                                                                                       ());
                                                                                                            ()
                                                                                                        };
                                                                                                    (Spiral_builder::US1::US1_0(string("rs")),
                                                                                                     Spiral_builder::US1::US1_1,
                                                                                                     Spiral_builder::US1::US1_1)
                                                                                                };
                                                                                            (patternInput_16.0.clone(),
                                                                                             patternInput_16.1.clone(),
                                                                                             patternInput_16.2.clone())
                                                                                        };
                                                                            let v12889:
                                                                                            string =
                                                                                        if (if let Spiral_builder::US33::US33_1
                                                                                                   =
                                                                                                   &v6354
                                                                                               {
                                                                                                true
                                                                                            } else {
                                                                                                false
                                                                                            })
                                                                                               !=
                                                                                               true
                                                                                           {
                                                                                            string("wasm32-unknown-unknown/release")
                                                                                        } else {
                                                                                            string("debug")
                                                                                        };
                                                                            let v12892:
                                                                                            string =
                                                                                        Spiral_builder::method15(v8185.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v12889.clone(),
                                                                                                                          v6525.clone(),
                                                                                                                          string("")));
                                                                            let v12895:
                                                                                            string =
                                                                                        Spiral_builder::method15(v8185.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v12889.clone(),
                                                                                                                          v6525.clone(),
                                                                                                                          string(".wasm")));
                                                                            let v12898:
                                                                                            string =
                                                                                        Spiral_builder::method15(v8185.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v12889.clone(),
                                                                                                                          v6525.clone(),
                                                                                                                          string(".pdb")));
                                                                            let v12901:
                                                                                            string =
                                                                                        Spiral_builder::method15(v8185.clone(),
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v12889.clone(),
                                                                                                                          v6525.clone(),
                                                                                                                          string(".exe")));
                                                                            let v12904:
                                                                                            string =
                                                                                        Spiral_builder::method15(v8185,
                                                                                                                 sprintf!("target/{}/spiral_builder_{}{}",
                                                                                                                          v12889,
                                                                                                                          v6525,
                                                                                                                          string(".d")));
                                                                            let v12905:
                                                                                            bool =
                                                                                        Spiral_builder::method27(v12892.clone());
                                                                            let v12906:
                                                                                            bool =
                                                                                        Spiral_builder::method27(v12895.clone());
                                                                            let v12907:
                                                                                            bool =
                                                                                        Spiral_builder::method27(v12898.clone());
                                                                            let v12908:
                                                                                            bool =
                                                                                        Spiral_builder::method27(v12901.clone());
                                                                            let v12909:
                                                                                            bool =
                                                                                        Spiral_builder::method27(v12904.clone());
                                                                            let v12912: () = {
                                                                                Spiral_builder::closure124(v10048,
                                                                                                                       v12904.clone(),
                                                                                                                       v12909,
                                                                                                                       v12901.clone(),
                                                                                                                       v12908,
                                                                                                                       v12898.clone(),
                                                                                                                       v12907,
                                                                                                                       v12895.clone(),
                                                                                                                       v12906,
                                                                                                                       v12892.clone(),
                                                                                                                       v12905,
                                                                                                                       ());
                                                                                ()
                                                                            };
                                                                            let v13691: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v12905 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v12892,
                                                                                                                                   v12905,
                                                                                                                                   LrcPtr::new(Spiral_builder::UH4::UH4_0)))
                                                                            } else {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_0)
                                                                            };
                                                                            let v13693: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v12906 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v12895,
                                                                                                                                   v12906,
                                                                                                                                   v13691.clone()))
                                                                            } else {
                                                                                v13691
                                                                            };
                                                                            let v13695: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v12907 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v12898,
                                                                                                                                   v12907,
                                                                                                                                   v13693.clone()))
                                                                            } else {
                                                                                v13693
                                                                            };
                                                                            let v13697: LrcPtr<
                                                                                Spiral_builder::UH4,
                                                                            > = if v12908 {
                                                                                LrcPtr::new(Spiral_builder::UH4::UH4_1(v12901,
                                                                                                                                   v12908,
                                                                                                                                   v13695.clone()))
                                                                            } else {
                                                                                v13695
                                                                            };
                                                                            Spiral_builder::method111(if v12909
                                                                                                                 {
                                                                                                                  LrcPtr::new(Spiral_builder::UH4::UH4_1(v12904,
                                                                                                                                                         v12909,
                                                                                                                                                         v13697.clone()))
                                                                                                              } else {
                                                                                                                  v13697
                                                                                                              });
                                                                            (
                                                                                patternInput_17
                                                                                    .0
                                                                                    .clone(),
                                                                                patternInput_17
                                                                                    .1
                                                                                    .clone(),
                                                                                patternInput_17
                                                                                    .2
                                                                                    .clone(),
                                                                            )
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        (
                                                            patternInput_18.0.clone(),
                                                            patternInput_18.1.clone(),
                                                            patternInput_18.2.clone(),
                                                        )
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    let patternInput_30: (
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                        Spiral_builder::US1,
                                    ) = if fable_library_rust::String_::fromString(v33.clone())
                                        == string("typescript")
                                    {
                                        let v13706: string = Spiral_builder::method79();
                                        let v13708: &str = &*v13706;
                                        let v13710: Option<std::string::String> =
                                            clap::ArgMatches::get_one(&v34.clone(), v13708)
                                                .cloned();
                                        let _v13711: LrcPtr<MutCell<Option<Spiral_builder::US5>>> =
                                            refCell(None::<Spiral_builder::US5>);
                                        let v13716: () = {
                                            Spiral_builder::closure16(
                                                v13710,
                                                Func1::new({
                                                    let _v13711 = _v13711.clone();
                                                    move |v_14: Option<Spiral_builder::US5>| {
                                                        Spiral_builder::closure15(
                                                            _v13711.clone(),
                                                            v_14,
                                                        )
                                                    }
                                                }),
                                                (),
                                            );
                                            ()
                                        };
                                        let v13731: Spiral_builder::US5 = defaultValue(
                                            Spiral_builder::US5::US5_1,
                                            _v13711.get().clone(),
                                        );
                                        let v13738: std::string::String = match &v13731 {
                                            Spiral_builder::US5::US5_0(v13731_0_0) => match &v13731
                                            {
                                                Spiral_builder::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => panic!(
                                                "{}",
                                                string("Option does not have a value."),
                                            ),
                                        };
                                        let v13740: string =
                                            fable_library_rust::String_::fromString(v13738);
                                        let v13741: string = Spiral_builder::method13();
                                        let v13743: &str = &*v13741;
                                        let v13745: Option<Vec<std::string::String>> =
                                            clap::ArgMatches::get_many(&v34.clone(), v13743)
                                                .map(|x| x.cloned().into_iter().collect());
                                        let _v13746: LrcPtr<MutCell<Option<Spiral_builder::US9>>> =
                                            refCell(None::<Spiral_builder::US9>);
                                        let v13751: () = {
                                            Spiral_builder::closure18(
                                                v13745,
                                                Func1::new({
                                                    let _v13746 = _v13746.clone();
                                                    move |v_15: Option<Spiral_builder::US9>| {
                                                        Spiral_builder::closure17(
                                                            _v13746.clone(),
                                                            v_15,
                                                        )
                                                    }
                                                }),
                                                (),
                                            );
                                            ()
                                        };
                                        let v13766: Spiral_builder::US9 = defaultValue(
                                            Spiral_builder::US9::US9_1,
                                            _v13746.get().clone(),
                                        );
                                        let v13772: Vec<std::string::String> =
                                            new_empty::<std::string::String>().to_vec();
                                        let v13775: Vec<std::string::String> = match &v13766 {
                                            Spiral_builder::US9::US9_0(v13766_0_0) => match &v13766
                                            {
                                                Spiral_builder::US9::US9_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => v13772,
                                        };
                                        let v13776: bool = if let Spiral_builder::US0::US0_0 = &v0_1
                                        {
                                            true
                                        } else {
                                            false
                                        };
                                        let v13780: Result<Vec<u8>, std::io::Error> =
                                            std::fs::read(&*v13740);
                                        let v13803: Vec<u8> =
                                            Spiral_builder::method14(v13780.unwrap());
                                        let v13805: Result<
                                            std::string::String,
                                            std::string::FromUtf8Error,
                                        > = std::string::String::from_utf8(v13803);
                                        let v13807: std::string::String = v13805.unwrap();
                                        let v13823: string =
                                            fable_library_rust::String_::fromString(v13807);
                                        let v13832: string = Spiral_builder::method94(sprintf!(
                                            "{:?}",
                                            (string("ts"), v13823.clone())
                                        ));
                                        let v13837:
                                                        Spiral_builder::US12 =
                                                    Spiral_builder::method18(Spiral_builder::method15(string("polyglot"),
                                                                                                      string(".devcontainer")),
                                                                             string("C:\\home\\git\\polyglot\\target\\Builder\\spiral_builder"));
                                        let v14578: Spiral_builder::US1 = match &v13837 {
                                            Spiral_builder::US12::US12_0(v13837_0_0) => {
                                                Spiral_builder::US1::US1_0(v13837_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v13837_1_0) => {
                                                let v13843: () = {
                                                    Spiral_builder::closure20(
                                                        v13837_1_0.clone(),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                Spiral_builder::US1::US1_1
                                            }
                                        };
                                        let v15326: Spiral_builder::US1 = match &v14578 {
                                            Spiral_builder::US1::US1_0(v14578_0_0) => {
                                                Spiral_builder::US1::US1_0(match &v14578 {
                                                    Spiral_builder::US1::US1_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                            }
                                            _ => {
                                                let v14581: string = Spiral_builder::method23();
                                                let v14583: Spiral_builder::US12 =
                                                    Spiral_builder::method18(
                                                        Spiral_builder::method15(
                                                            string("polyglot"),
                                                            string(".devcontainer"),
                                                        ),
                                                        v14581,
                                                    );
                                                match &v14583 {
                                                    Spiral_builder::US12::US12_0(v14583_0_0) => {
                                                        Spiral_builder::US1::US1_0(
                                                            v14583_0_0.clone(),
                                                        )
                                                    }
                                                    Spiral_builder::US12::US12_1(v14583_1_0) => {
                                                        let v14589: () = {
                                                            Spiral_builder::closure20(
                                                                v14583_1_0.clone(),
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        Spiral_builder::US1::US1_1
                                                    }
                                                }
                                            }
                                        };
                                        let v15331: string = Spiral_builder::method15(
                                            match &v15326 {
                                                Spiral_builder::US1::US1_0(v15326_0_0) => {
                                                    match &v15326 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            },
                                            string("polyglot"),
                                        );
                                        let v15334: string = toLower(Spiral_builder::method23());
                                        let v15338: string = toLower(v15331);
                                        let v15344: Spiral_builder::US12 =
                                            if startsWith(v15334, v15338.clone(), false) {
                                                Spiral_builder::US12::US12_1(v15338.clone())
                                            } else {
                                                Spiral_builder::US12::US12_0(v15338)
                                            };
                                        let v15350: Result<string, string> = match &v15344 {
                                            Spiral_builder::US12::US12_0(v15344_0_0) => {
                                                Ok::<string, string>(v15344_0_0.clone())
                                            }
                                            Spiral_builder::US12::US12_1(v15344_1_0) => {
                                                Err::<string, string>(v15344_1_0.clone())
                                            }
                                        };
                                        let v15352: bool = true;
                                        let _result = v15350.unwrap_or_else(|x| {
                                            //;
                                            let v15354: string = x;
                                            let v15356: bool = true;
                                            v15354
                                        });
                                        let v15358: string = _result;
                                        let v15367: string = Spiral_builder::method15(
                                            Spiral_builder::method15(
                                                Spiral_builder::method15(
                                                    Spiral_builder::method15(
                                                        Spiral_builder::method15(
                                                            v15358.clone(),
                                                            string("target/spiral_builder"),
                                                        ),
                                                        string("spiral_builder"),
                                                    ),
                                                    string("packages"),
                                                ),
                                                string("TypeScript"),
                                            ),
                                            v13832.clone(),
                                        );
                                        let v15368: LrcPtr<dyn IDisposable> =
                                            Spiral_builder::method28(v15367.clone());
                                        let v15371: string =
                                            Spiral_builder::method85(Spiral_builder::method15(
                                                v15367.clone(),
                                                sprintf!("{}.fs", string("spiral_builder")),
                                            ));
                                        Spiral_builder::method25(v15371.clone(), v13823);
                                        {
                                            let v15372: List<string> = empty::<string>();
                                            let v15379: string = join(
                                                string("\\n        "),
                                                toArray_1(delay(Func0::new({
                                                    let v15372 = v15372.clone();
                                                    move || {
                                                        map(
                                                            Func1::new({
                                                                let v15372 = v15372.clone();
                                                                move |i_4: i32| {
                                                                    item(i_4, v15372.clone())
                                                                }
                                                            }),
                                                            rangeNumeric(
                                                                0_i32,
                                                                1_i32,
                                                                length_1(v15372.clone()) - 1_i32,
                                                            ),
                                                        )
                                                    }
                                                }))),
                                            );
                                            let v15385: List<string> = singleton(sprintf!(
                                                "<PackageReference Include=\"{}\" Version=\"*\" />",
                                                string("Fable.Core")
                                            ));
                                            let v15393: string = join(
                                                string("\\n        "),
                                                toArray_1(delay(Func0::new({
                                                    let v15385 = v15385.clone();
                                                    move || {
                                                        map(
                                                            Func1::new({
                                                                let v15385 = v15385.clone();
                                                                move |i_5: i32| {
                                                                    item(i_5, v15385.clone())
                                                                }
                                                            }),
                                                            rangeNumeric(
                                                                0_i32,
                                                                1_i32,
                                                                length_1(v15385.clone()) - 1_i32,
                                                            ),
                                                        )
                                                    }
                                                }))),
                                            );
                                            let v15398: string =
                                                Spiral_builder::method85(Spiral_builder::method15(
                                                    v15367.clone(),
                                                    sprintf!("{}.fsproj", string("spiral_builder")),
                                                ));
                                            Spiral_builder::method25(v15398.clone(),
                                                                             append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                        sprintf!("    {}",
                                                                                                                                                                                 v15379)),
                                                                                                                                                                 string("\n")),
                                                                                                                                                          sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                   v15371)),
                                                                                                                                                   string("\n")),
                                                                                                                                            string("</ItemGroup>")),
                                                                                                                                     string("\n")),
                                                                                                                              string("<ItemGroup>")),
                                                                                                                       string("\n")),
                                                                                                                sprintf!("    {}",
                                                                                                                         v15393)),
                                                                                                         string("\n")),
                                                                                                  string("</ItemGroup>")),
                                                                                           string("\n")),
                                                                                    string("</Project>")));
                                            {
                                                let v15498: string = Spiral_builder::method15(
                                                    v15358.clone(),
                                                    string("lib/typescript/fable/fable_modules"),
                                                );
                                                let v15500: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::new(&*v15498.clone());
                                                let v15503: async_walkdir::WalkDir =
                                                    async_walkdir::WalkDir::filter(v15500, |x| {
                                                        Func1::new(
                                                            move |v_16: async_walkdir::DirEntry| {
                                                                Spiral_builder::closure126((), v_16)
                                                            },
                                                        )(
                                                            x
                                                        )
                                                    });
                                                let v15504 = Spiral_builder::method116();
                                                let v15506 = tokio_stream::StreamExt::filter_map(
                                                    v15503,
                                                    |x| v15504(x),
                                                );
                                                let v15508: std::pin::Pin<
                                                    Box<
                                                        dyn std::future::Future<
                                                            Output = Vec<(string, string)>,
                                                        >,
                                                    >,
                                                > = Box::pin(tokio_stream::StreamExt::collect(
                                                    v15506,
                                                ));
                                                let v15510: Vec<(string, string)> = v15508.await;
                                                let v15512: rayon::vec::IntoIter<(string, string)> =
                                                    rayon::iter::IntoParallelIterator::into_par_iter(
                                                        v15510,
                                                    );
                                                let v15515: rayon::iter::Map<
                                                    rayon::vec::IntoIter<(string, string)>,
                                                    _,
                                                > = rayon::iter::ParallelIterator::map(
                                                    v15512,
                                                    |x| {
                                                        Func1::new(move
                                                                                                                          |arg10_0040_43:
                                                                                                                               (string,
                                                                                                                                string)|
                                                                                                                          Spiral_builder::closure135((),
                                                                                                                                                     arg10_0040_43))(x)
                                                    },
                                                );
                                                let v15517: Vec<(string, string)> =
                                                    rayon::iter::ParallelIterator::collect(v15515);
                                                let v15520: Option<(string, string)> = tryItem(
                                                    0_i32,
                                                    fable_library_rust::NativeArray_::array_from(
                                                        v15517,
                                                    ),
                                                );
                                                let _v15521: LrcPtr<
                                                    MutCell<Option<Spiral_builder::US42>>,
                                                > = refCell(None::<Spiral_builder::US42>);
                                                let v15526: () = {
                                                    Spiral_builder::closure137(
                                                        v15520,
                                                        Func1::new({
                                                            let _v15521 = _v15521.clone();
                                                            move
                                                                                                              |v_17:
                                                                                                                   Option<Spiral_builder::US42>|
                                                                                                              Spiral_builder::closure136(_v15521.clone(),
                                                                                                                                         v_17)
                                                        }),
                                                        (),
                                                    );
                                                    ()
                                                };
                                                let v15543: Spiral_builder::US42 = defaultValue(
                                                    Spiral_builder::US42::US42_1,
                                                    _v15521.get().clone(),
                                                );
                                                let v15549: () = {
                                                    Spiral_builder::closure138(v15543.clone(), ());
                                                    ()
                                                };
                                                match &v15543 {
                                                    Spiral_builder::US42::US42_0(
                                                        v15543_0_0,
                                                        v15543_0_1,
                                                    ) => {
                                                        let v16286: string = match &v15543 {
                                                            Spiral_builder::US42::US42_0(_, x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        };
                                                        Spiral_builder::method101(Spiral_builder::method15(v15498,
                                                                                                                   sprintf!("fable-library-{}.{}",
                                                                                                                            string("ts"),
                                                                                                                            v16286.clone())),
                                                                                          Spiral_builder::method15(v15367.clone(),
                                                                                                                   sprintf!("fable_modules/fable-library-{}.{}",
                                                                                                                            string("ts"),
                                                                                                                            v16286)))
                                                    }
                                                    _ => (),
                                                }
                                                {
                                                    let patternInput_19: (i32, string) =
                                                        Spiral_builder::method102(
                                                            Spiral_builder::US33::US33_1,
                                                            v15367.clone(),
                                                            string("ts"),
                                                            v15398,
                                                            v15344.clone(),
                                                        );
                                                    let v16293: string = patternInput_19.1.clone();
                                                    let v16292: i32 = patternInput_19.0.clone();
                                                    let patternInput_23: (
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                    ) = if v16292 != 0_i32 {
                                                        let v16299: () = {
                                                            Spiral_builder::closure140(
                                                                v16293.clone(),
                                                                v16292,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        (
                                                            Spiral_builder::US1::US1_0(string(
                                                                "ts",
                                                            )),
                                                            Spiral_builder::US1::US1_1,
                                                            Spiral_builder::US1::US1_0(v16293),
                                                        )
                                                    } else {
                                                        let v17070: bool = true;
                                                        let _result : Vec<_> = v13775.into_iter().map(|x| { //;
                                                                    let v17072:
                                                                            std::string::String =
                                                                        x;
                                                                    let v17074:
                                                                            string =
                                                                        fable_library_rust::String_::fromString(v17072);
                                                                    let v17080:
                                                                            string =
                                                                        if contains(v17074.clone(),
                                                                                    string("="))
                                                                           {
                                                                            v17074.clone()
                                                                        } else {
                                                                            sprintf!("\"{}\":\"*\"",
                                                                                     v17074)
                                                                        };
                                                                    let v17082:
                                                                            bool =
                                                                        true; v17080 }).collect::<Vec<_>>();
                                                        let v17084: Vec<string> = _result;
                                                        let v17086:
                                                                            Array<string> =
                                                                        fable_library_rust::NativeArray_::array_from(v17084);
                                                        let v17109:
                                                                            string =
                                                                        append(append(append(append(append(append(append(string("{"),
                                                                                                                         sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                  v13832)),
                                                                                                                  string("  \"dependencies\": {")),
                                                                                                           join(string(",\n"),
                                                                                                                toArray_1(delay(Func0::new({
                                                                                                                                               let v17086
                                                                                                                                                   =
                                                                                                                                                   v17086.clone();
                                                                                                                                               move
                                                                                                                                                   ||
                                                                                                                                                   map(Func1::new({
                                                                                                                                                                      let v17086
                                                                                                                                                                          =
                                                                                                                                                                          v17086.clone();
                                                                                                                                                                      move
                                                                                                                                                                          |i_6:
                                                                                                                                                                               i32|
                                                                                                                                                                          v17086[i_6].clone()
                                                                                                                                                                  }),
                                                                                                                                                       rangeNumeric(0_i32,
                                                                                                                                                                    1_i32,
                                                                                                                                                                    count_2(v17086.clone())
                                                                                                                                                                        -
                                                                                                                                                                        1_i32))
                                                                                                                                           }))))),
                                                                                                    string("  },")),
                                                                                             string("    \"devDependencies\": {")),
                                                                                      string("  },")),
                                                                               string("}"));
                                                        let v17111: string =
                                                            Spiral_builder::method15(
                                                                v15367.clone(),
                                                                string("package.json"),
                                                            );
                                                        let v17114: string =
                                                            Spiral_builder::method15(
                                                                Spiral_builder::method15(
                                                                    v15367.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                        Spiral_builder::method25(v17111, v17109);
                                                        Spiral_builder::method25(
                                                            v17114,
                                                            string(""),
                                                        );
                                                        {
                                                            let v17117: string =
                                                                Spiral_builder::method15(
                                                                    v15367,
                                                                    sprintf!(
                                                                        "{}.{}",
                                                                        string("spiral_builder"),
                                                                        string("ts")
                                                                    ),
                                                                );
                                                            let v17120: () = {
                                                                Spiral_builder::closure142(
                                                                    v17117.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v17854: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v17117.clone());
                                                            let v17877: Vec<u8> =
                                                                Spiral_builder::method14(
                                                                    v17854.unwrap(),
                                                                );
                                                            let v17879: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v17877,
                                                            );
                                                            let v17881: std::string::String =
                                                                v17879.unwrap();
                                                            let v17897:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v17881);
                                                            let v17903:
                                                                                bool =
                                                                            contains(v17897.clone(),
                                                                                     string("// spiral_builder.process_typescript"));
                                                            let v17941: string = if v17903 {
                                                                v17897.clone()
                                                            } else {
                                                                let v17908:
                                                                                        string =
                                                                                    replace(v17897,
                                                                                            sprintf!("\"./fable_modules/fable-library-ts.{}/",
                                                                                                     v15543.clone()),
                                                                                            sprintf!("\"{}/lib/typescript/fable/fable_modules/fable-library-ts.{}/",
                                                                                                     v15358,
                                                                                                     v15543.clone()));
                                                                let v17913: Result<
                                                                    regex::Regex,
                                                                    regex::Error,
                                                                > = regex::Regex::new(&string(
                                                                    "\\s\\sdefaultOf\\(\\);",
                                                                ));
                                                                let v17915: regex::Regex =
                                                                    v17913.unwrap();
                                                                let v17916: string =
                                                                    Spiral_builder::method86(
                                                                        v17908,
                                                                    );
                                                                let v17918: std::borrow::Cow<str> =
                                                                    v17915.replace_all(
                                                                        &*v17916,
                                                                        &*string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                    );
                                                                let v17920: std::string::String =
                                                                    String::from(v17918);
                                                                fable_library_rust::String_::fromString(v17920)
                                                            };
                                                            if v17903 == false {
                                                                Spiral_builder::method25(v17117.clone(),
                                                                                                     sprintf!("{}\n\n{}\n",
                                                                                                              v17941.clone(),
                                                                                                              string("// spiral_builder.process_typescript")));
                                                            }
                                                            {
                                                                let v17944: string = sprintf!(
                                                                    "bun run \"{}\"",
                                                                    v17117.clone()
                                                                );
                                                                let v17946: string =
                                                                    Spiral_builder::method3(
                                                                        string("PATH"),
                                                                    );
                                                                let v17979: Spiral_builder::US1 =
                                                                    if v17946.clone() == string("")
                                                                    {
                                                                        Spiral_builder::US1::US1_1
                                                                    } else {
                                                                        Spiral_builder::US1::US1_0(
                                                                            sprintf!(
                                                                                "{}{}{}",
                                                                                string(
                                                                                    "~/.bun/bin"
                                                                                ),
                                                                                if cfg!(windows) {
                                                                                    string(";")
                                                                                } else {
                                                                                    string(":")
                                                                                },
                                                                                v17946
                                                                            ),
                                                                        )
                                                                    };
                                                                let v17994:
                                                                                    Array<(string,
                                                                                           string)> =
                                                                                toArray(Spiral_builder::method119(Spiral_builder::method118(match &v17979
                                                                                                                                                {
                                                                                                                                                Spiral_builder::US1::US1_0(v17979_0_0)
                                                                                                                                                =>
                                                                                                                                                LrcPtr::new(Spiral_builder::UH5::UH5_1(string("PATH"),
                                                                                                                                                                                       match &v17979
                                                                                                                                                                                           {
                                                                                                                                                                                           Spiral_builder::US1::US1_0(x)
                                                                                                                                                                                           =>
                                                                                                                                                                                           x.clone(),
                                                                                                                                                                                           _
                                                                                                                                                                                           =>
                                                                                                                                                                                           unreachable!(),
                                                                                                                                                                                       },
                                                                                                                                                                                       LrcPtr::new(Spiral_builder::UH5::UH5_0))),
                                                                                                                                                _
                                                                                                                                                =>
                                                                                                                                                LrcPtr::new(Spiral_builder::UH5::UH5_0),
                                                                                                                                            },
                                                                                                                                            LrcPtr::new(Spiral_builder::UH5::UH5_1(string("TRACE_LEVEL"),
                                                                                                                                                                                   string("Verbose"),
                                                                                                                                                                                   LrcPtr::new(Spiral_builder::UH5::UH5_0)))),
                                                                                                                  empty::<(string,
                                                                                                                           string)>()));
                                                                let v18007:
                                                                                    Result<string,
                                                                                           string> =
                                                                                match &v15344
                                                                                    {
                                                                                    Spiral_builder::US12::US12_0(v15344_0_0)
                                                                                    =>
                                                                                    Ok::<string,
                                                                                         string>(v15344_0_0.clone()),
                                                                                    Spiral_builder::US12::US12_1(v15344_1_0)
                                                                                    =>
                                                                                    Err::<string,
                                                                                          string>(v15344_1_0.clone()),
                                                                                };
                                                                let patternInput_20:
                                                                                    (i32,
                                                                                     string) =
                                                                                Spiral_builder::method40(v17944.clone(),
                                                                                                         None::<CancellationToken>,
                                                                                                         v17994.clone(),
                                                                                                         None::<Func1<(i32,
                                                                                                                       string,
                                                                                                                       bool),
                                                                                                                      Arc<Async<()>>>>,
                                                                                                         None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                      ()>>,
                                                                                                         true,
                                                                                                         v18007.ok());
                                                                let v18012: string =
                                                                    patternInput_20.1.clone();
                                                                let v18011: i32 =
                                                                    patternInput_20.0.clone();
                                                                let v18013: i32 =
                                                                    count_2(v17994.clone());
                                                                let v18014: Array<string> =
                                                                    new_init(&string(""), v18013);
                                                                let v18015: LrcPtr<
                                                                    Spiral_builder::Mut5,
                                                                > = LrcPtr::new(
                                                                    Spiral_builder::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    },
                                                                );
                                                                while Spiral_builder::method43(
                                                                    v18013,
                                                                    v18015.clone(),
                                                                ) {
                                                                    let v18017: i32 =
                                                                        v18015.l0.get().clone();
                                                                    let patternInput_21: (
                                                                        string,
                                                                        string,
                                                                    ) = v17994[v18017].clone();
                                                                    let v18020: string = sprintf!(
                                                                        "$env:{}=\'\'{}\'\'",
                                                                        patternInput_21.0.clone(),
                                                                        patternInput_21.1.clone()
                                                                    );
                                                                    v18014.get_mut()
                                                                        [v18017 as usize] = v18020;
                                                                    {
                                                                        let v18021: i32 =
                                                                            v18017 + 1_i32;
                                                                        v18015.l0.set(v18021);
                                                                        ()
                                                                    }
                                                                }
                                                                {
                                                                    let v18031: string = sprintf!(
                                                                        "pwsh -c \'{}; {}\'",
                                                                        join(
                                                                            string(";"),
                                                                            toArray_1(ofArray_1(
                                                                                v18014.clone()
                                                                            ))
                                                                        ),
                                                                        v17944
                                                                    );
                                                                    let patternInput_22: (
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                    ) = if v18011 == 0_i32 {
                                                                        let result_2:
                                                                                                LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                            refCell(Spiral_builder::US1::US1_1);
                                                                        try_catch(||
                                                                                                      result_2.set(Spiral_builder::closure84((),
                                                                                                                                             Spiral_builder::closure144(v18012.clone(),
                                                                                                                                                                        ()))),
                                                                                                  |ex_2:
                                                                                                       LrcPtr<Exception>|
                                                                                                      result_2.set(Spiral_builder::closure145(v17117.clone(),
                                                                                                                                              v18012.clone(),
                                                                                                                                              v18031.clone(),
                                                                                                                                              ex_2.clone())));
                                                                        {
                                                                            let v18037:
                                                                                                    Spiral_builder::US1 =
                                                                                                result_2.get().clone();
                                                                            let v18047:
                                                                                                    Option<string> =
                                                                                                match &v18037
                                                                                                    {
                                                                                                    Spiral_builder::US1::US1_0(v18037_0_0)
                                                                                                    =>
                                                                                                    Some(match &v18037
                                                                                                             {
                                                                                                             Spiral_builder::US1::US1_0(x)
                                                                                                             =>
                                                                                                             x.clone(),
                                                                                                             _
                                                                                                             =>
                                                                                                             unreachable!(),
                                                                                                         }),
                                                                                                    _
                                                                                                    =>
                                                                                                    None::<string>,
                                                                                                };
                                                                            (Spiral_builder::US1::US1_0(string("ts")),
                                                                                             Spiral_builder::US1::US1_0(v17941),
                                                                                             Spiral_builder::US1::US1_0(v18047.unwrap()))
                                                                        }
                                                                    } else {
                                                                        let v18055: () = {
                                                                            Spiral_builder::closure148(v17117,
                                                                                                                           v18012,
                                                                                                                           v18011,
                                                                                                                           v18031,
                                                                                                                           ());
                                                                            ()
                                                                        };
                                                                        (Spiral_builder::US1::US1_0(string("ts")),
                                                                                         Spiral_builder::US1::US1_1,
                                                                                         Spiral_builder::US1::US1_1)
                                                                    };
                                                                    (
                                                                        patternInput_22.0.clone(),
                                                                        patternInput_22.1.clone(),
                                                                        patternInput_22.2.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    };
                                                    (
                                                        patternInput_23.0.clone(),
                                                        patternInput_23.1.clone(),
                                                        patternInput_23.2.clone(),
                                                    )
                                                }
                                            }
                                        }
                                    } else {
                                        let patternInput_29: (
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                            Spiral_builder::US1,
                                        ) = if fable_library_rust::String_::fromString(v33.clone())
                                            == string("python")
                                        {
                                            let v18898: string = Spiral_builder::method79();
                                            let v18900: &str = &*v18898;
                                            let v18902: Option<std::string::String> =
                                                clap::ArgMatches::get_one(&v34.clone(), v18900)
                                                    .cloned();
                                            let _v18903: LrcPtr<
                                                MutCell<Option<Spiral_builder::US5>>,
                                            > = refCell(None::<Spiral_builder::US5>);
                                            let v18908: () = {
                                                Spiral_builder::closure16(
                                                    v18902,
                                                    Func1::new({
                                                        let _v18903 = _v18903.clone();
                                                        move |v_20: Option<Spiral_builder::US5>| {
                                                            Spiral_builder::closure15(
                                                                _v18903.clone(),
                                                                v_20,
                                                            )
                                                        }
                                                    }),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v18923: Spiral_builder::US5 = defaultValue(
                                                Spiral_builder::US5::US5_1,
                                                _v18903.get().clone(),
                                            );
                                            let v18930: std::string::String = match &v18923 {
                                                Spiral_builder::US5::US5_0(v18923_0_0) => {
                                                    match &v18923 {
                                                        Spiral_builder::US5::US5_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => panic!(
                                                    "{}",
                                                    string("Option does not have a value."),
                                                ),
                                            };
                                            let v18932: string =
                                                fable_library_rust::String_::fromString(v18930);
                                            let v18933: string = Spiral_builder::method13();
                                            let v18935: &str = &*v18933;
                                            let v18937: Option<Vec<std::string::String>> =
                                                clap::ArgMatches::get_many(&v34.clone(), v18935)
                                                    .map(|x| x.cloned().into_iter().collect());
                                            let _v18938: LrcPtr<
                                                MutCell<Option<Spiral_builder::US9>>,
                                            > = refCell(None::<Spiral_builder::US9>);
                                            let v18943: () = {
                                                Spiral_builder::closure18(
                                                    v18937,
                                                    Func1::new({
                                                        let _v18938 = _v18938.clone();
                                                        move |v_21: Option<Spiral_builder::US9>| {
                                                            Spiral_builder::closure17(
                                                                _v18938.clone(),
                                                                v_21,
                                                            )
                                                        }
                                                    }),
                                                    (),
                                                );
                                                ()
                                            };
                                            let v18958: Spiral_builder::US9 = defaultValue(
                                                Spiral_builder::US9::US9_1,
                                                _v18938.get().clone(),
                                            );
                                            let v18964: Vec<std::string::String> =
                                                new_empty::<std::string::String>().to_vec();
                                            let v18967: Vec<std::string::String> = match &v18958 {
                                                Spiral_builder::US9::US9_0(v18958_0_0) => {
                                                    match &v18958 {
                                                        Spiral_builder::US9::US9_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                }
                                                _ => v18964,
                                            };
                                            let v18968: bool =
                                                if let Spiral_builder::US0::US0_0 = &v0_1 {
                                                    true
                                                } else {
                                                    false
                                                };
                                            let v18972: Result<Vec<u8>, std::io::Error> =
                                                std::fs::read(&*v18932);
                                            let v18995: Vec<u8> =
                                                Spiral_builder::method14(v18972.unwrap());
                                            let v18997: Result<
                                                std::string::String,
                                                std::string::FromUtf8Error,
                                            > = std::string::String::from_utf8(v18995);
                                            let v18999: std::string::String = v18997.unwrap();
                                            let v19015: string =
                                                fable_library_rust::String_::fromString(v18999);
                                            let v19024: string = Spiral_builder::method94(
                                                sprintf!("{:?}", (string("py"), v19015.clone())),
                                            );
                                            let v19029:
                                                                Spiral_builder::US12 =
                                                            Spiral_builder::method18(Spiral_builder::method15(string("polyglot"),
                                                                                                              string(".devcontainer")),
                                                                                     string("C:\\home\\git\\polyglot\\target\\Builder\\spiral_builder"));
                                            let v19770: Spiral_builder::US1 = match &v19029 {
                                                Spiral_builder::US12::US12_0(v19029_0_0) => {
                                                    Spiral_builder::US1::US1_0(v19029_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v19029_1_0) => {
                                                    let v19035: () = {
                                                        Spiral_builder::closure20(
                                                            v19029_1_0.clone(),
                                                            (),
                                                        );
                                                        ()
                                                    };
                                                    Spiral_builder::US1::US1_1
                                                }
                                            };
                                            let v20518: Spiral_builder::US1 = match &v19770 {
                                                Spiral_builder::US1::US1_0(v19770_0_0) => {
                                                    Spiral_builder::US1::US1_0(match &v19770 {
                                                        Spiral_builder::US1::US1_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    })
                                                }
                                                _ => {
                                                    let v19773: string = Spiral_builder::method23();
                                                    let v19775: Spiral_builder::US12 =
                                                        Spiral_builder::method18(
                                                            Spiral_builder::method15(
                                                                string("polyglot"),
                                                                string(".devcontainer"),
                                                            ),
                                                            v19773,
                                                        );
                                                    match &v19775 {
                                                        Spiral_builder::US12::US12_0(
                                                            v19775_0_0,
                                                        ) => Spiral_builder::US1::US1_0(
                                                            v19775_0_0.clone(),
                                                        ),
                                                        Spiral_builder::US12::US12_1(
                                                            v19775_1_0,
                                                        ) => {
                                                            let v19781: () = {
                                                                Spiral_builder::closure20(
                                                                    v19775_1_0.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            Spiral_builder::US1::US1_1
                                                        }
                                                    }
                                                }
                                            };
                                            let v20523: string = Spiral_builder::method15(
                                                match &v20518 {
                                                    Spiral_builder::US1::US1_0(v20518_0_0) => {
                                                        match &v20518 {
                                                            Spiral_builder::US1::US1_0(x) => {
                                                                x.clone()
                                                            }
                                                            _ => unreachable!(),
                                                        }
                                                    }
                                                    _ => panic!(
                                                        "{}",
                                                        string("Option does not have a value."),
                                                    ),
                                                },
                                                string("polyglot"),
                                            );
                                            let v20526: string =
                                                toLower(Spiral_builder::method23());
                                            let v20530: string = toLower(v20523);
                                            let v20536: Spiral_builder::US12 =
                                                if startsWith(v20526, v20530.clone(), false) {
                                                    Spiral_builder::US12::US12_1(v20530.clone())
                                                } else {
                                                    Spiral_builder::US12::US12_0(v20530)
                                                };
                                            let v20542: Result<string, string> = match &v20536 {
                                                Spiral_builder::US12::US12_0(v20536_0_0) => {
                                                    Ok::<string, string>(v20536_0_0.clone())
                                                }
                                                Spiral_builder::US12::US12_1(v20536_1_0) => {
                                                    Err::<string, string>(v20536_1_0.clone())
                                                }
                                            };
                                            let v20544: bool = true;
                                            let _result = v20542.unwrap_or_else(|x| {
                                                //;
                                                let v20546: string = x;
                                                let v20548: bool = true;
                                                v20546
                                            });
                                            let v20550: string = _result;
                                            let v20559: string = Spiral_builder::method15(
                                                Spiral_builder::method15(
                                                    Spiral_builder::method15(
                                                        Spiral_builder::method15(
                                                            Spiral_builder::method15(
                                                                v20550.clone(),
                                                                string("target/spiral_builder"),
                                                            ),
                                                            string("spiral_builder"),
                                                        ),
                                                        string("packages"),
                                                    ),
                                                    string("Python"),
                                                ),
                                                v19024.clone(),
                                            );
                                            let v20560: LrcPtr<dyn IDisposable> =
                                                Spiral_builder::method28(v20559.clone());
                                            let v20563: string =
                                                Spiral_builder::method85(Spiral_builder::method15(
                                                    v20559.clone(),
                                                    sprintf!("{}.fs", string("spiral_builder")),
                                                ));
                                            Spiral_builder::method25(v20563.clone(), v19015);
                                            {
                                                let v20564: List<string> = empty::<string>();
                                                let v20571: string = join(
                                                    string("\\n        "),
                                                    toArray_1(delay(Func0::new({
                                                        let v20564 = v20564.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v20564 = v20564.clone();
                                                                    move |i_7: i32| {
                                                                        item(i_7, v20564.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v20564.clone())
                                                                        - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                );
                                                let v20577:
                                                                    List<string> =
                                                                singleton(sprintf!("<PackageReference Include=\"{}\" Version=\"*\" />",
                                                                                   string("Fable.Core")));
                                                let v20585: string = join(
                                                    string("\\n        "),
                                                    toArray_1(delay(Func0::new({
                                                        let v20577 = v20577.clone();
                                                        move || {
                                                            map(
                                                                Func1::new({
                                                                    let v20577 = v20577.clone();
                                                                    move |i_8: i32| {
                                                                        item(i_8, v20577.clone())
                                                                    }
                                                                }),
                                                                rangeNumeric(
                                                                    0_i32,
                                                                    1_i32,
                                                                    length_1(v20577.clone())
                                                                        - 1_i32,
                                                                ),
                                                            )
                                                        }
                                                    }))),
                                                );
                                                let v20590: string = Spiral_builder::method85(
                                                    Spiral_builder::method15(
                                                        v20559.clone(),
                                                        sprintf!(
                                                            "{}.fsproj",
                                                            string("spiral_builder")
                                                        ),
                                                    ),
                                                );
                                                Spiral_builder::method25(v20590.clone(),
                                                                                     append(append(append(append(append(append(append(append(append(append(append(append(append(string("<Project Sdk=\"Microsoft.NET.Sdk\">\n<PropertyGroup>\n    <TargetFramework>net9.0</TargetFramework>\n    <LangVersion>preview</LangVersion>\n    <RollForward>Major</RollForward>\n    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>\n    <PublishAot>false</PublishAot>\n    <PublishTrimmed>false</PublishTrimmed>\n    <PublishSingleFile>true</PublishSingleFile>\n    <SelfContained>true</SelfContained>\n    <Version>0.0.1-alpha.1</Version>\n    <OutputType>Exe</OutputType>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'FreeBSD\'))\">\n    <DefineConstants>_FREEBSD</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Linux\'))\">\n    <DefineConstants>_LINUX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'OSX\'))\">\n    <DefineConstants>_OSX</DefineConstants>\n</PropertyGroup>\n<PropertyGroup Condition=\"$([MSBuild]::IsOSPlatform(\'Windows\'))\">\n    <DefineConstants>_WINDOWS</DefineConstants>\n</PropertyGroup>\n<ItemGroup>\n"),
                                                                                                                                                                                sprintf!("    {}",
                                                                                                                                                                                         v20571)),
                                                                                                                                                                         string("\n")),
                                                                                                                                                                  sprintf!("    <Compile Include=\"{}\" />",
                                                                                                                                                                           v20563)),
                                                                                                                                                           string("\n")),
                                                                                                                                                    string("</ItemGroup>")),
                                                                                                                                             string("\n")),
                                                                                                                                      string("<ItemGroup>")),
                                                                                                                               string("\n")),
                                                                                                                        sprintf!("    {}",
                                                                                                                                 v20585)),
                                                                                                                 string("\n")),
                                                                                                          string("</ItemGroup>")),
                                                                                                   string("\n")),
                                                                                            string("</Project>")));
                                                Spiral_builder::method101(
                                                    Spiral_builder::method15(
                                                        Spiral_builder::method15(
                                                            v20550,
                                                            string(
                                                                "lib/python/fable/fable_modules",
                                                            ),
                                                        ),
                                                        string("fable_library"),
                                                    ),
                                                    Spiral_builder::method15(
                                                        v20559.clone(),
                                                        string("fable_modules/fable_library"),
                                                    ),
                                                );
                                                {
                                                    let patternInput_24: (i32, string) =
                                                        Spiral_builder::method102(
                                                            Spiral_builder::US33::US33_1,
                                                            v20559.clone(),
                                                            string("py"),
                                                            v20590,
                                                            v20536.clone(),
                                                        );
                                                    let v20697: string = patternInput_24.1.clone();
                                                    let v20696: i32 = patternInput_24.0.clone();
                                                    let patternInput_28: (
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                        Spiral_builder::US1,
                                                    ) = if v20696 != 0_i32 {
                                                        let v20703: () = {
                                                            Spiral_builder::closure150(
                                                                v20697.clone(),
                                                                v20696,
                                                                (),
                                                            );
                                                            ()
                                                        };
                                                        (
                                                            Spiral_builder::US1::US1_0(string(
                                                                "py",
                                                            )),
                                                            Spiral_builder::US1::US1_1,
                                                            Spiral_builder::US1::US1_0(v20697),
                                                        )
                                                    } else {
                                                        let v21474: bool = true;
                                                        let _result : Vec<_> = v18967.into_iter().map(|x| { //;
                                                                        let v21476:
                                                                                std::string::String =
                                                                            x;
                                                                        let v21478:
                                                                                string =
                                                                            fable_library_rust::String_::fromString(v21476);
                                                                        let v21484:
                                                                                string =
                                                                            if contains(v21478.clone(),
                                                                                        string("="))
                                                                               {
                                                                                v21478.clone()
                                                                            } else {
                                                                                sprintf!("\"{}\":\"*\"",
                                                                                         v21478)
                                                                            };
                                                                        let v21486:
                                                                                bool =
                                                                            true; v21484 }).collect::<Vec<_>>();
                                                        let v21488: Vec<string> = _result;
                                                        let v21490:
                                                                                Array<string> =
                                                                            fable_library_rust::NativeArray_::array_from(v21488);
                                                        let v21513:
                                                                                string =
                                                                            append(append(append(append(append(append(append(string("{"),
                                                                                                                             sprintf!("  \"name\": \"spiral_builder_{}\",",
                                                                                                                                      v19024)),
                                                                                                                      string("  \"dependencies\": {")),
                                                                                                               join(string(",\n"),
                                                                                                                    toArray_1(delay(Func0::new({
                                                                                                                                                   let v21490
                                                                                                                                                       =
                                                                                                                                                       v21490.clone();
                                                                                                                                                   move
                                                                                                                                                       ||
                                                                                                                                                       map(Func1::new({
                                                                                                                                                                          let v21490
                                                                                                                                                                              =
                                                                                                                                                                              v21490.clone();
                                                                                                                                                                          move
                                                                                                                                                                              |i_9:
                                                                                                                                                                                   i32|
                                                                                                                                                                              v21490[i_9].clone()
                                                                                                                                                                      }),
                                                                                                                                                           rangeNumeric(0_i32,
                                                                                                                                                                        1_i32,
                                                                                                                                                                        count_2(v21490.clone())
                                                                                                                                                                            -
                                                                                                                                                                            1_i32))
                                                                                                                                               }))))),
                                                                                                        string("  },")),
                                                                                                 string("    \"devDependencies\": {")),
                                                                                          string("  },")),
                                                                                   string("}"));
                                                        let v21515: string =
                                                            Spiral_builder::method15(
                                                                v20559.clone(),
                                                                string("package.json"),
                                                            );
                                                        let v21518: string =
                                                            Spiral_builder::method15(
                                                                Spiral_builder::method15(
                                                                    v20559.clone(),
                                                                    string("../.."),
                                                                ),
                                                                string("package.json"),
                                                            );
                                                        Spiral_builder::method25(v21515, v21513);
                                                        Spiral_builder::method25(
                                                            v21518,
                                                            string(""),
                                                        );
                                                        {
                                                            let v21521: string =
                                                                Spiral_builder::method15(
                                                                    v20559,
                                                                    sprintf!(
                                                                        "{}.{}",
                                                                        string("spiral_builder"),
                                                                        string("py")
                                                                    ),
                                                                );
                                                            let v21524: () = {
                                                                Spiral_builder::closure152(
                                                                    v21521.clone(),
                                                                    (),
                                                                );
                                                                ()
                                                            };
                                                            let v22258: Result<
                                                                Vec<u8>,
                                                                std::io::Error,
                                                            > = std::fs::read(&*v21521.clone());
                                                            let v22281: Vec<u8> =
                                                                Spiral_builder::method14(
                                                                    v22258.unwrap(),
                                                                );
                                                            let v22283: Result<
                                                                std::string::String,
                                                                std::string::FromUtf8Error,
                                                            > = std::string::String::from_utf8(
                                                                v22281,
                                                            );
                                                            let v22285: std::string::String =
                                                                v22283.unwrap();
                                                            let v22301:
                                                                                    string =
                                                                                fable_library_rust::String_::fromString(v22285);
                                                            let v22307:
                                                                                    bool =
                                                                                contains(v22301.clone(),
                                                                                         string("# spiral_builder.process_python"));
                                                            let v22348: string = if v22307 {
                                                                v22301.clone()
                                                            } else {
                                                                let v22315: string = replace(
                                                                    v22301,
                                                                    append(
                                                                        string("),)"),
                                                                        ";".into(),
                                                                    ),
                                                                    string("));"),
                                                                );
                                                                let v22320: Result<
                                                                    regex::Regex,
                                                                    regex::Error,
                                                                > = regex::Regex::new(&string(
                                                                    "\\s\\sdefaultOf\\(\\);",
                                                                ));
                                                                let v22322: regex::Regex =
                                                                    v22320.unwrap();
                                                                let v22323: string =
                                                                    Spiral_builder::method86(
                                                                        v22315,
                                                                    );
                                                                let v22325: std::borrow::Cow<str> =
                                                                    v22322.replace_all(
                                                                        &*v22323,
                                                                        &*string(
                                                                            " defaultOf::<()>();",
                                                                        ),
                                                                    );
                                                                let v22327: std::string::String =
                                                                    String::from(v22325);
                                                                fable_library_rust::String_::fromString(v22327)
                                                            };
                                                            if v22307 == false {
                                                                Spiral_builder::method25(v21521.clone(),
                                                                                                         sprintf!("{}\n\n{}\n",
                                                                                                                  v22348.clone(),
                                                                                                                  string("# spiral_builder.process_python")));
                                                            }
                                                            {
                                                                let v22351: string = sprintf!(
                                                                    "python \"{}\"",
                                                                    v21521.clone()
                                                                );
                                                                let v22354: Array<(
                                                                    string,
                                                                    string,
                                                                )> = new_array(&[(
                                                                    string("TRACE_LEVEL"),
                                                                    string("Verbose"),
                                                                )]);
                                                                let v22365:
                                                                                        Result<string,
                                                                                               string> =
                                                                                    match &v20536
                                                                                        {
                                                                                        Spiral_builder::US12::US12_0(v20536_0_0)
                                                                                        =>
                                                                                        Ok::<string,
                                                                                             string>(v20536_0_0.clone()),
                                                                                        Spiral_builder::US12::US12_1(v20536_1_0)
                                                                                        =>
                                                                                        Err::<string,
                                                                                              string>(v20536_1_0.clone()),
                                                                                    };
                                                                let patternInput_25:
                                                                                        (i32,
                                                                                         string) =
                                                                                    Spiral_builder::method40(v22351.clone(),
                                                                                                             None::<CancellationToken>,
                                                                                                             v22354.clone(),
                                                                                                             None::<Func1<(i32,
                                                                                                                           string,
                                                                                                                           bool),
                                                                                                                          Arc<Async<()>>>>,
                                                                                                             None::<Func1<std::sync::Arc<std::sync::Mutex<std::process::ChildStdin>>,
                                                                                                                          ()>>,
                                                                                                             true,
                                                                                                             v22365.ok());
                                                                let v22370: string =
                                                                    patternInput_25.1.clone();
                                                                let v22369: i32 =
                                                                    patternInput_25.0.clone();
                                                                let v22371: i32 =
                                                                    count_2(v22354.clone());
                                                                let v22372: Array<string> =
                                                                    new_init(&string(""), v22371);
                                                                let v22373: LrcPtr<
                                                                    Spiral_builder::Mut5,
                                                                > = LrcPtr::new(
                                                                    Spiral_builder::Mut5 {
                                                                        l0: MutCell::new(0_i32),
                                                                    },
                                                                );
                                                                while Spiral_builder::method43(
                                                                    v22371,
                                                                    v22373.clone(),
                                                                ) {
                                                                    let v22375: i32 =
                                                                        v22373.l0.get().clone();
                                                                    let patternInput_26: (
                                                                        string,
                                                                        string,
                                                                    ) = v22354[v22375].clone();
                                                                    let v22378: string = sprintf!(
                                                                        "$env:{}=\'\'{}\'\'",
                                                                        patternInput_26.0.clone(),
                                                                        patternInput_26.1.clone()
                                                                    );
                                                                    v22372.get_mut()
                                                                        [v22375 as usize] = v22378;
                                                                    {
                                                                        let v22379: i32 =
                                                                            v22375 + 1_i32;
                                                                        v22373.l0.set(v22379);
                                                                        ()
                                                                    }
                                                                }
                                                                {
                                                                    let v22389: string = sprintf!(
                                                                        "pwsh -c \'{}; {}\'",
                                                                        join(
                                                                            string(";"),
                                                                            toArray_1(ofArray_1(
                                                                                v22372.clone()
                                                                            ))
                                                                        ),
                                                                        v22351
                                                                    );
                                                                    let patternInput_27: (
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                        Spiral_builder::US1,
                                                                    ) = if v22369 == 0_i32 {
                                                                        let result_3:
                                                                                                    LrcPtr<MutCell<Spiral_builder::US1>> =
                                                                                                refCell(Spiral_builder::US1::US1_1);
                                                                        try_catch(||
                                                                                                          result_3.set(Spiral_builder::closure84((),
                                                                                                                                                 Spiral_builder::closure154(v22370.clone(),
                                                                                                                                                                            ()))),
                                                                                                      |ex_3:
                                                                                                           LrcPtr<Exception>|
                                                                                                          result_3.set(Spiral_builder::closure155(v21521.clone(),
                                                                                                                                                  v22370.clone(),
                                                                                                                                                  v22389.clone(),
                                                                                                                                                  ex_3.clone())));
                                                                        {
                                                                            let v22395:
                                                                                                        Spiral_builder::US1 =
                                                                                                    result_3.get().clone();
                                                                            let v22405:
                                                                                                        Option<string> =
                                                                                                    match &v22395
                                                                                                        {
                                                                                                        Spiral_builder::US1::US1_0(v22395_0_0)
                                                                                                        =>
                                                                                                        Some(match &v22395
                                                                                                                 {
                                                                                                                 Spiral_builder::US1::US1_0(x)
                                                                                                                 =>
                                                                                                                 x.clone(),
                                                                                                                 _
                                                                                                                 =>
                                                                                                                 unreachable!(),
                                                                                                             }),
                                                                                                        _
                                                                                                        =>
                                                                                                        None::<string>,
                                                                                                    };
                                                                            (Spiral_builder::US1::US1_0(string("py")),
                                                                                                 Spiral_builder::US1::US1_0(v22348),
                                                                                                 Spiral_builder::US1::US1_0(v22405.unwrap()))
                                                                        }
                                                                    } else {
                                                                        let v22413: () = {
                                                                            Spiral_builder::closure158(v21521,
                                                                                                                               v22370,
                                                                                                                               v22369,
                                                                                                                               v22389,
                                                                                                                               ());
                                                                            ()
                                                                        };
                                                                        (Spiral_builder::US1::US1_0(string("py")),
                                                                                             Spiral_builder::US1::US1_1,
                                                                                             Spiral_builder::US1::US1_1)
                                                                    };
                                                                    (
                                                                        patternInput_27.0.clone(),
                                                                        patternInput_27.1.clone(),
                                                                        patternInput_27.2.clone(),
                                                                    )
                                                                }
                                                            }
                                                        }
                                                    };
                                                    (
                                                        patternInput_28.0.clone(),
                                                        patternInput_28.1.clone(),
                                                        patternInput_28.2.clone(),
                                                    )
                                                }
                                            }
                                        } else {
                                            let v23255: () = {
                                                Spiral_builder::closure160(v34, v33, ());
                                                ()
                                            };
                                            (
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                                Spiral_builder::US1::US1_1,
                                            )
                                        };
                                        (
                                            patternInput_29.0.clone(),
                                            patternInput_29.1.clone(),
                                            patternInput_29.2.clone(),
                                        )
                                    };
                                    (
                                        patternInput_30.0.clone(),
                                        patternInput_30.1.clone(),
                                        patternInput_30.2.clone(),
                                    )
                                };
                                let v24087: Spiral_builder::US1 = patternInput_31.2.clone();
                                let v24086: Spiral_builder::US1 = patternInput_31.1.clone();
                                let v24085: Spiral_builder::US1 = patternInput_31.0.clone();
                                new_array(&[
                                    (
                                        string("extension"),
                                        match &v24085 {
                                            Spiral_builder::US1::US1_0(v24085_0_0) => match &v24085
                                            {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("code"),
                                        match &v24086 {
                                            Spiral_builder::US1::US1_0(v24086_0_0) => match &v24086
                                            {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                    (
                                        string("output"),
                                        match &v24087 {
                                            Spiral_builder::US1::US1_0(v24087_0_0) => match &v24087
                                            {
                                                Spiral_builder::US1::US1_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            _ => string(""),
                                        },
                                    ),
                                ])
                            }
                        }
                    }
                } else {
                    new_array(&[
                        (string("extension"), string("")),
                        (string("code"), string("")),
                        (string("output"), string("")),
                    ])
                };
                let v24114: Vec<(string, string)> = v24112.to_vec();
                let v24117: Vec<LrcPtr<(std::string::String, std::string::String)>> = v24114
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |arg10_0040_59: (string, string)| {
                            Spiral_builder::closure162((), arg10_0040_59)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v24118: string =
                string("std::collections::BTreeMap::from_iter(v24117.iter().map(|x| x.as_ref()).map(|&(ref k, ref v)| (k.clone(), v.clone())))");
                let v24119: std::collections::BTreeMap<std::string::String, std::string::String> =
                    std::collections::BTreeMap::from_iter(
                        v24117
                            .iter()
                            .map(|x| x.as_ref())
                            .map(|&(ref k, ref v)| (k.clone(), v.clone())),
                    );
                let v24121: Result<std::string::String, serde_json::Error> =
                    serde_json::to_string(&v24119);
                let v24122 = Spiral_builder::method120();
                let v24124: Result<std::string::String, string> = v24121.map_err(|x| v24122(x));
                let v24126: bool = true;
                let _result = v24124.map(|x| {
                    //;
                    let v24128: std::string::String = x;
                    let v24130: string = fable_library_rust::String_::fromString(v24128);
                    let v24132: bool = true;
                    v24130
                });
                let v24135: Result<string, string> = Spiral_builder::method121(_result);
                let v24139: string = string("true; v24135 });  // rust.fix_closure\'");
                let v24140: bool = true;
                v24135
            }); // rust.fix_closure';
            let v24142 = __result;
            v24142
        }
        pub fn closure1(unitVar: (), v0_1: Array<string>) -> i32 {
            let v3: () = {
                Spiral_builder::closure2((), ());
                ()
            };
            let v19: LrcPtr<Spiral_builder::Mut3> =
                (getValue(Spiral_builder::State::trace_state().get().clone()))
                    .3
                    .clone();
            let v33: () = {
                Spiral_builder::closure6(v0_1, ());
                ()
            };
            let v768: clap::Command = Spiral_builder::method0();
            let v770: clap::ArgMatches = clap::Command::get_matches(v768);
            let v772: std::pin::Pin<Box<dyn std::future::Future<Output = Result<string, string>>>> =
                Spiral_builder::method10(v19.l0.get().clone(), v770);
            let v774 = tokio::runtime::Builder::new_multi_thread()
                .enable_all()
                .build()
                .unwrap();
            let v776: Result<string, string> = v774.handle().block_on(v772);
            let v778: string = v776.unwrap();
            if if let Spiral_builder::US0::US0_2 = &v19.l0.get().clone() {
                true
            } else {
                false
            } {
                let v783: () = {
                    Spiral_builder::closure53(v778, ());
                    ()
                };
                ()
            }
            0_i32
        }
        pub fn v0() -> Func0<()> {
            static v0: OnceInit<Func0<()>> = OnceInit::new();
            v0.get_or_init(|| Func0::new(move || Spiral_builder::closure0((), ())))
                .clone()
        }
        pub fn tests() {
            (Spiral_builder::v0())();
        }
        pub fn v1() -> Func1<Array<string>, i32> {
            static v1: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v1.get_or_init(|| Func1::new(move |v: Array<string>| Spiral_builder::closure1((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Spiral_builder::v1())(args)
        }
    }
}
pub use module_7e2cd9e0::*;
#[path = "../../../lib/fsharp/Common.rs"]
mod module_ad43931;
pub use module_ad43931::*;
#[path = "../../../lib/spiral/async_.rs"]
mod module_67c461a2;
pub use module_67c461a2::*;
#[path = "../../../lib/spiral/common.rs"]
mod module_181b15d6;
pub use module_181b15d6::*;
#[path = "../../../lib/spiral/crypto.rs"]
mod module_90d9c778;
pub use module_90d9c778::*;
#[path = "../../../lib/spiral/date_time.rs"]
mod module_e43a8385;
pub use module_e43a8385::*;
#[path = "../../../lib/spiral/file_system.rs"]
mod module_a7db9b47;
pub use module_a7db9b47::*;
#[path = "../../../lib/spiral/lib.rs"]
mod module_98e448fc;
pub use module_98e448fc::*;
#[path = "../../../lib/spiral/networking.rs"]
mod module_268024e5;
pub use module_268024e5::*;
#[path = "../../../lib/spiral/platform.rs"]
mod module_7d8ad484;
pub use module_7d8ad484::*;
#[path = "../../../lib/spiral/runtime.rs"]
mod module_485aae07;
pub use module_485aae07::*;
#[path = "../../../lib/spiral/sm.rs"]
mod module_582b4305;
pub use module_582b4305::*;
#[path = "../../../lib/spiral/threading.rs"]
mod module_d5afb6f5;
pub use module_d5afb6f5::*;
#[path = "../../../lib/spiral/trace.rs"]
mod module_9e77af3a;
pub use module_9e77af3a::*;
pub mod Polyglot {
    pub use crate::module_ad43931::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Spiral_builder::main(array_from(args));
}
