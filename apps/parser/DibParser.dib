#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

# DibParser (Polyglot)

#!fsharp

#!import ../nbs/Testing.dib

#!fsharp

#r @"../../../../../../../.nuget/packages/fparsec/2.0.0-beta2/lib/netstandard2.1/FParsec.dll"
#r @"../../../../../../../.nuget/packages/fparsec/2.0.0-beta2/lib/netstandard2.1/FParsecCS.dll"

#!fsharp

#!import ../nbs/Common.fs

#!fsharp

open Common
open FParsec

#!markdown

## escapeCell (test)

#!fsharp

//// test

let inline escapeCell input =
    input
    |> String.split [| '\n' |]
    |> Array.map (function
        | line when line |> String.startsWith "\\#!" || line |> String.startsWith "\\#r" ->
            System.Text.RegularExpressions.Regex.Replace (line, "^\\\\#", "#")
        | line -> line
    )
    |> String.concat "\n"

#!fsharp

//// test

$"a{nl}\\#!magic{nl}b{nl}"
|> escapeCell
|> _equal (
    $"a{nl}#!magic{nl}b{nl}"
)

#!fsharp

type Block =
    {
        magic : string
        content : string
    }

#!markdown

## magicMarker

#!fsharp

let magicMarker : Parser<string, unit> = pstring "#!"

#!fsharp

//// test

"#!magic"
|> run magicMarker
|> _equal (
    Success ("#!", (), Position ("", 2, 1, 3))
)

#!fsharp

//// test

"##!magic"
|> run magicMarker
|> _equal (
    Failure (
        $"Error in Ln: 1 Col: 1{nl}##!magic{nl}^{nl}Expecting: '#!'{nl}",
        ParserError (
            Position ("", 0, 1, 1),
            (),
            ErrorMessageList (ExpectedString "#!")
        ),
        ()
    )
)

#!markdown

## magicCommand

#!fsharp

let magicCommand =
    magicMarker
    >>. manyTill anyChar newline
    |>> (String.Concat >> String.trim)

#!fsharp

//// test

"""#!magic

a"""
|> run magicCommand
|> _equal (
    Success ("magic", (), Position ("", 8, 2, 1))
)

#!fsharp

//// test

""" #!magic

a"""
|> run magicCommand
|> _equal (
    Failure (
        $"Error in Ln: 1 Col: 1{nl} #!magic{nl}^{nl}Expecting: '#!'{nl}",
        ParserError (
            Position ("", 0, 1, 1),
            (),
            ErrorMessageList (ExpectedString "#!")
        ),
        ()
    )
)

#!fsharp

let content =
    (newline >>. magicMarker) <|> (eof >>. preturn "")
    |> attempt
    |> lookAhead
    |> manyTill anyChar
    |>> (String.Concat >> String.trim)

#!fsharp

//// test

"""#!magic


a


"""
|> run content
|> _equal (
    Success ("""#!magic


a""", (), Position ("", 14, 7, 1))
)

#!fsharp

let block =
    pipe2
        magicCommand
        content
        (fun magic content ->
            {
                magic = magic
                content = content
            })

#!fsharp

//// test

"""#!magic


a


"""
|> run block
|> _equal (
    Success (
        { magic = "magic"; content = "a" },
        (),
        Position ("", 14, 7, 1)
    )
)

#!fsharp

let blocks =
    skipMany newline
    >>. sepEndBy block (skipMany1 newline)

#!fsharp

//// test


"""#!magic1

a

\#!magic2

b

"""
|> escapeCell
|> run blocks
|> _equal (
    Success (
        [
            { magic = "magic1"; content = "a" }
            { magic = "magic2"; content = "b" }
        ],
        (),
        Position ("", 26, 9, 1)
    )
)

#!fsharp

let inline formatBlock kernel (block : Block) =
    match kernel, block with
    | _, { magic = "markdown"; content = content } ->
        content
        |> String.split [| '\n' |]
        |> Array.map (String.trimEnd [||])
        |> Array.filter (String.endsWith " (test)" >> not)
        |> Array.map (function
            | "" -> "///"
            | line -> System.Text.RegularExpressions.Regex.Replace (line, "^\\s*", "$&/// ")
        )
        |> String.concat "\n"
    | "fsharp", { magic = "fsharp"; content = content } ->
        let trimmedContent = content |> String.trim
        if trimmedContent |> String.startsWith "//// test" || trimmedContent |> String.startsWith "//// ignore"
        then ""
        else
            content
            |> String.split [| '\n' |]
            |> Array.filter (String.trimStart [||] >> String.startsWith "#r" >> not)
            |> String.concat "\n"
    | _ -> ""

#!fsharp

//// test

"""#!markdown


a

    b

c


\#!markdown


c


\#!fsharp


let a = 1"""
|> escapeCell
|> run block
|> function
    | Success (block, _, _) -> formatBlock "fsharp" block
    | Failure (msg, _, _) -> failwith msg
|> _equal """/// a
///
    /// b
///
/// c"""

#!fsharp

let inline formatBlocks kernel blocks =
    blocks
    |> List.map (formatBlock kernel)
    |> List.filter ((<>) "")
    |> String.concat "\n\n"
    |> fun s -> s + "\n"

#!fsharp

//// test

"""#!markdown


a

b


\#!markdown


c


\#!fsharp


let a = 1

\#!markdown

d (test)

\#!fsharp

//// test

let a = 2

\#!markdown

e

\#!fsharp

let a = 3"""
|> escapeCell
|> run blocks
|> function
    | Success (blocks, _, _) -> formatBlocks "fsharp" blocks
    | Failure (msg, _, _) -> failwith msg
|> _equal """/// a
///
/// b

/// c

let a = 1

/// e

let a = 3
"""

#!fsharp

let inline parse kernel input =
    match run blocks input with
    | Success (blocks, _, _) ->
        let inline indentBlock (block : Block) =
            { block with
                content =
                    block.content
                    |> String.split [| '\n' |]
                    |> Array.map (fun line ->
                        if line |> String.trimEnd [||] = ""
                        then ""
                        else $"    {line}"
                    )
                    |> String.concat "\n"
            }

        let blocks = blocks |> List.filter (fun block -> block.magic = kernel || block.magic = "markdown")
        
        match blocks with
        | { magic = "markdown"; content = content } :: _
            when kernel = "fsharp"
            && content |> String.startsWith "# "
            && content |> String.endsWith ")"
            ->
            let moduleName, namespaceName =
                System.Text.RegularExpressions.Regex.Match (content, @"# (.*) \((.*)\)$")
                |> fun m -> m.Groups.[1].Value, m.Groups.[2].Value

            let moduleBlock =
                {
                    magic = "fsharp"
                    content =
                        $"""#if !INTERACTIVE
namespace {namespaceName}
#endif

module {moduleName} ="""
                }

            blocks
            |> List.indexed
            |> List.fold
                (fun blocks (index, block) ->
                    match index with
                    | 0 -> blocks
                    | 1 -> indentBlock block :: moduleBlock :: blocks
                    | _ -> indentBlock block :: blocks
                )
                []
            |> List.rev
        | _ -> blocks
        |> Result.Ok
    | Failure (errorMsg, _, _) -> Result.Error errorMsg

#!fsharp

//// test

let example1 =
    """#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[{"aliases":[],"name":"fsharp"},{"aliases":[],"name":"fsharp"}]}}

\#!markdown

# TestModule (TestNamespace)

\#!fsharp

\#!import file.dib

\#!fsharp

\#r "nuget:Expecto"

\#!markdown

## ParserLibrary

\#!fsharp

open System

\#!markdown

## x (test)

\#!fsharp

//// ignore

let x = 1

\#!markdown

### TextInput

\#!fsharp

type Position =
    {
        line : int
        column : int
    }"""
    |> escapeCell

#!fsharp

//// test

example1
|> parse "fsharp"
|> Result.toOption
|> Option.get
|> (formatBlocks "fsharp")
|> _equal """#if !INTERACTIVE
namespace TestNamespace
#endif

module TestModule =

    /// ## ParserLibrary

    open System

    /// ### TextInput

    type Position =
        {
            line : int
            column : int
        }
"""

#!fsharp

//// test

example1
|> parse "markdown"
|> Result.toOption
|> Option.get
|> (formatBlocks "markdown")
|> _equal """/// # TestModule (TestNamespace)

/// ## ParserLibrary

/// ### TextInput
"""

#!fsharp

let inline parseDibCode kernel file = async {
    let getLocals () = $"kernel: {kernel} / file: {file} / {getLocals ()}"
    trace Debug (fun () -> "parseDibCode") getLocals
    let! input = File.ReadAllTextAsync file |> Async.AwaitTask
    match parse kernel input with
    | Result.Ok blocks -> return blocks |> formatBlocks kernel
    | Result.Error msg -> return failwith msg
}

#!fsharp

let inline writeDibCode kernel file = async {
    let getLocals () = $"kernel: {kernel} / file: {file} / {getLocals ()}"
    trace Debug (fun () -> "writeDibCode") getLocals
    let! output = parseDibCode kernel file
    let outputFileName =
        match kernel with
        | "fsharp" -> file |> String.replace ".dib" ".fs"
        | _ -> failwith "Unknown kernel"
    do! File.WriteAllTextAsync (outputFileName, output) |> Async.AwaitTask
}

#!fsharp

//// test

let paths =
    match Environment.GetEnvironmentVariable "OUTPUT" with
    | "" | null -> [||]
    | path when System.IO.File.Exists path -> [| path |]
    | path when path |> String.contains ";" -> path |> String.split [| ';' |]
    | _ -> [| System.IO.Path.Combine (System.IO.Directory.GetCurrentDirectory (), "DibParser.dib") |]

paths
|> Array.map (writeDibCode "fsharp")
|> Async.Parallel
|> Async.Ignore
|> Async.RunSynchronously
