open rust_operators

type core_state =
    heap {
        dark_mode : leptos.rw_signal bool
        debug : leptos.rw_signal bool
        url_hash : leptos.rw_signal rust.std_string
    }

type core_state_data =
    heap {
        dark_mode : bool
        debug : bool
        url_hash : rust.std_string
    }

type state =
    heap {
        cache : leptos.rw_signal (rust.hash_map rust.std_string (rust.weak_rc (rust.ref_cell (leptos.rw_signal rust.std_string))))
    }

type state_data =
    heap {
        cache : rust.hash_map rust.std_string rust.std_string
    }


type global_state =
    heap {
        core_state : leptos.rw_signal core_state
        state : leptos.rw_signal state
        loading : leptos.rw_signal (rust.hash_map rust.std_string (leptos.rw_signal bool))
    }

inl build_database () : async.future_pin (result rust.rexie rust.rexie_error) =
    leptos.log $'"state.build_database ()"'

    fun () =>
        inl rexie : async.future_pin (resultm.result' rust.rexie rust.rexie_error) =
            !\($'"Box::pin(rexie::Rexie::builder(\\\"database\\\").version(1).add_object_store(rexie::ObjectStore::new(\\\"store\\\")).build())"')
        inl rexie : resultm.result' rust.rexie rust.rexie_error = rexie |> async.await
        inl rexie : rust.rexie = rexie |> resultm.unbox |> resultm.get
        Ok rexie
    |> async.future_init 2 0

inl get_core_state_data_key () =
    "core-state-data"

inl get_state_data_key () =
    "state-data"

inl get_data forall t. (id : string) (rexie : rust.rexie) : async.future_pin (resultm.result' (option t) rust.std_string) =
    leptos.log $'"state.get_data () / id: " + !id + ""'
    fun () =>
        inl store_name = "store"
        inl store_names = ;[ store_name ]
        inl transaction =
            rexie
            |> store.transaction_read_only store_names
            |> resultm.try'
        inl rexie_store =
            transaction
            |> store.transaction_store store_name
            |> resultm.try'
        inl mode_value : rust.js_value =
            rexie_store
            |> store.store_get id
            |> async.await
            |> resultm.map_error' fun (x : rust.rexie_error) => x |> sm'.format'
            |> resultm.try'
        inl mode_data =
            mode_value
            |> sm'.wasm_from_value
            |> resultm.try'
        match mode_data |> optionm'.unbox with
        | Some mode_data =>
            inl data =
                mode_data
                |> sm'.deserialize_vec
                |> resultm.try'
                |> am'.from_vec
            inl data_len = length data
            leptos.log $'"state.get_data () / data_len: " + string !data_len + ""'
            inl data = data |> fun (a x : _ i32 _) => x
            inl data : resultm.result' t rust.std_string = data |> sm'.borsh_deserialize
            inl data = data |> resultm.try'
            Some data
        | None => None
        |> Ok |> resultm.box
    |> async.future_init 3 0

inl set_data forall t. (id : string) (data : t) (rexie : rust.rexie) : async.future_pin (resultm.result' () rust.rexie_error) =
    inl data_len : i64 = data |> sm'.format_debug |> sm.length
    leptos.log $'"state.set_data () / data_len: " + string !data_len + ""'
    inl rexie = join rexie
    fun () =>
        inl transaction : rust.rexie_transaction = !\($'"!rexie.transaction(&[\\\"store\\\"], rexie::TransactionMode::ReadWrite)?"')
        inl store : rust.rexie_store = !\($'"!transaction.store(\\\"store\\\")?"')

        !\($'"let mut data = Vec::new()"')
        !\($'"borsh::BorshSerialize::serialize(&!data, &mut data).unwrap()"')
        inl data : rust.vec u8 = !\($'"data"')

        inl data_js_value : rust.js_value = !\($'"serde_wasm_bindgen::to_value(&!data).unwrap()"')
        inl id = id |> sm'.as_str
        !\($'"!store.put(&!data_js_value, Some(&!id.into())).await?"')
        !\($'"!transaction.done().await?"')

        Ok () |> resultm.box
    |> async.future_init 5 0

inl use_database () =
    leptos.log $'"state.use_database (0)"'

    inl core_state_data_key = get_core_state_data_key ()
    inl state_data_key = get_state_data_key ()
    inl global_state : global_state = leptos.use_context () |> optionm'.unwrap

    inl database : leptos.resource (option ()) rust.rexie =
        leptos.create_local_resource
            fun () => None
            fun _ =>
                fun () =>
                    leptos.log $'"state.use_database (1) / database create_local_resource"'
                    build_database () |> async.await |> resultm.get
                |> async.future_init 6 0

    inl core_state_data : leptos.resource (optionm'.option' rust.rexie) (option core_state_data) =
        leptos.create_local_resource
            fun () =>
                database
                |> leptos.resource_get
            fun (database : optionm'.option' rust.rexie) =>
                fun () =>
                    inl database_log = database |> sm'.format_debug
                    leptos.log $'"state.use_database (2) / core_state_data create_local_resource / database: " + !database_log + ""'
                    match database |> optionm'.unbox with
                    | Some database =>
                        database
                        |> get_data core_state_data_key
                        |> async.await
                        |> resultm.unbox
                        |> resultm.get
                    | None => None
                |> async.future_init 4 0

    leptos.create_effect fun () =>
        leptos.log $'"state.use_database (3) / effect core_state_data / ##1"'

        match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
        | Ok (Some storage) =>
            inl core_state_data = core_state_data |> leptos.resource_get |> optionm'.unbox
            inl core_state_data_log = core_state_data |> sm'.format_debug
            leptos.log $'"state.use_database (4) / effect core_state_data / ##2 / core_state_data: " + !core_state_data_log + ""'

            inl core_state_data =
                match core_state_data with
                | Some (Some core_state_data) =>
                    Some core_state_data
                | _ =>
                    storage
                    |> store.storage_get core_state_data_key
                    |> resultm.ok
                    |> optionm'.flatten
                    |> optionm.map fun (value : rust.std_string) =>
                        inl value = join value
                        value |> sm'.from_std_string |> sm'.deserialize |> resultm.ok' |> optionm'.unbox
                    |> optionm'.flatten

            inl core_state_data_log = core_state_data |> sm'.format_debug
            leptos.log $'"state.use_database (5) / effect core_state_data / ##3 / core_state_data: " + !core_state_data_log + ""'

            match core_state_data with
            | Some core_state_data =>
                rust.move fun () =>
                    leptos.signal_get_untracked global_state.core_state .dark_mode
                    |> leptos.signal_set core_state_data.dark_mode

                    leptos.signal_get_untracked global_state.core_state .debug
                    |> leptos.signal_set core_state_data.debug

                    leptos.signal_get_untracked global_state.core_state .url_hash
                    |> leptos.signal_set core_state_data.url_hash
                |> leptos.batch
            | _ => ()
        | _ => ()

    inl state_data : leptos.resource (optionm'.option' rust.rexie) (option state_data) =
        leptos.create_local_resource
            fun () =>
                database
                |> leptos.resource_get
            fun (database : optionm'.option' rust.rexie) =>
                fun () =>
                    inl database_log = database |> sm'.format_debug
                    leptos.log $'"state.use_database (6) / state_data create_local_resource / database: " + !database_log + ""'
                    match database |> optionm'.unbox with
                    | Some database =>
                        database
                        |> get_data state_data_key
                        |> async.await
                        |> resultm.unbox
                        |> resultm.get
                    | None => None
                |> async.future_init 4 0

    inl new_signal_map : leptos.memo (optionm'.option' (rust.hash_map rust.std_string (rust.rc (rust.ref_cell (leptos.rw_signal rust.std_string))))) =
        leptos.create_memo fun () =>
            leptos.log $'"state.use_database (7) / new_signal_map memo"'

            match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some _storage) =>
                inl state_data = state_data |> leptos.resource_get |> optionm'.unbox |> optionm'.flatten
                inl state_data_len : i64 = state_data |> sm'.format_debug |> sm.length
                leptos.log $'"state.use_database (8) / new_signal_map memo / state_data: " + string !state_data_len + ""'

                match state_data with
                | Some state_data =>
                    state_data.cache
                    |> mapm.map fun value =>
                        inl value = join value
                        value
                        |> leptos.create_rw_signal
                        |> rust.new_ref_cell
                        |> rust.new_rc
                    |> Some
                | _ => None
            | _ => None
            |> optionm'.box

    leptos.create_effect fun () =>
        leptos.log $'"state.use_database (7) / effect state_data / ##1"'

        inl new_signal_map =
            new_signal_map
            |> leptos.memo_get
            |> optionm'.unbox

        match new_signal_map with
        | Some new_signal_map =>
            rust.move fun () =>
                leptos.log $'"state.use_database (7) / effect state_data / ##2"'
                leptos.signal_get global_state.state .cache
                |> leptos.signal_update fun _ =>
                    new_signal_map
                    |> mapm.map fun value =>
                        inl value = join value
                        value
                        |> rust.rc_downgrade
            |> leptos.batch
            leptos.log $'"state.use_database (7) / effect state_data / ##3"'
        | None => ()

    inl set_core_state_data_action = leptos.create_action fun value =>
        inl value_log = value |> sm'.format_debug
        inl database =
            database
            |> leptos.resource_get
            |> optionm'.unbox
        fun () =>
            match database with
            | Some database =>
                leptos.log $'"state.use_database (9) / set_core_state_data_action / value: " + string !value_log + ""'
                database
                |> set_data core_state_data_key value
                |> async.await
                |> resultm.unbox
                |> resultm.get
            | None => leptos.log $'"state.use_database (10) / set_core_state_data_action / database=None"'
        |> async.future_init 1 1

    let loading = leptos.create_memo fun () =>
        leptos.log $'"state.use_database () / loading create_memo"'
        global_state.loading |> leptos.signal_get_untracked

    let (loaded, set_loaded) = leptos.create_signal false

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"state.use_database (11) / effect new_core_state_data / ##1 / loaded: " + string !loaded + ""'

        inl new_core_state_data : core_state_data =
            heap {
                dark_mode =
                    leptos.signal_get_untracked global_state.core_state .dark_mode
                    |> leptos.signal_get

                debug =
                    leptos.signal_get_untracked global_state.core_state .debug
                    |> leptos.signal_get

                url_hash =
                    leptos.signal_get_untracked global_state.core_state .url_hash
                    |> leptos.signal_get
            }

        inl new_core_state_data_log = new_core_state_data |> sm'.format_debug
        leptos.log $'"state.use_database (12) / effect new_core_state_data / ##2 / new_core_state_data: " + string !new_core_state_data_log + ""'

        inl dark_mode_loading =
            loading
            |> leptos.memo_get
            |> mapm.get ("dark_mode_key" |> sm'.to_std_string)
            |> optionm'.unbox
            |> optionm.map leptos.signal_get
            |> optionm'.default_value false

        leptos.log $'"state.use_database (13) / effect new_core_state_data / ##3 / dark_mode_loading: " + string !dark_mode_loading + ""'

        if not dark_mode_loading then
            if not loaded
            then set_loaded |> leptos.signal_set true
            else
                leptos.log $'"state.use_database (14) / effect new_core_state_data / ##4"'

                match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
                | Ok (Some storage) =>
                    set_core_state_data_action |> leptos.action_dispatch new_core_state_data
                    storage |> store.storage_set core_state_data_key new_core_state_data
                | _ => ()

    inl set_state_data_action = leptos.create_action fun value =>
        inl value_len : i64 = value |> sm'.format_debug |> sm.length
        inl database =
            database
            |> leptos.resource_get
            |> optionm'.unbox
        fun () =>
            match database with
            | Some database =>
                leptos.log $'"state.use_database (15) / set_state_data_action / database=Some(_) / value_len: " + string !value_len + ""'
                database
                |> set_data state_data_key value
                |> async.await
                |> resultm.unbox
                |> resultm.get
            | None => leptos.log $'"state.use_database (16) / set_state_data_action / database=None"'
        |> async.future_init 1 1

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"state.use_database (17) / effect new_state_data / ##1 / loaded: " + string !loaded + ""'

        inl new_state_data : state_data =
            heap {
                cache =
                    leptos.signal_get global_state.state .cache
                    |> leptos.signal_get
                    |> mapm.map (
                        optionm'.rc_upgrade
                        >> optionm.map (rust.ref_cell_borrow >> leptos.signal_get)
                        >> optionm'.default_value ("" |> sm'.to_std_string)
                    )
            }

        inl new_state_data_len : i64 = new_state_data |> sm'.format_debug |> sm.length
        leptos.log $'"state.use_database (18) / effect new_state_data / ##2 / new_state_data_len: " + string !new_state_data_len + ""'
        if not loaded
        then set_loaded |> leptos.signal_set true
        else
            leptos.log $'"state.use_database (19) / effect new_state_data / ##4"'

            match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some storage) =>
                set_state_data_action |> leptos.action_dispatch new_state_data
            | _ => ()

            leptos.log $'"state.use_database (19.1) / effect new_state_data / ##5"'

    database

inl use_request forall t u.
    (url : () -> optionm'.option' string)
    (map : u -> t)
    : rust.func0 (option (result t rust.std_string))
    =

    inl global_state : global_state = leptos.use_context () |> optionm'.unwrap

    inl json
        : leptos.resource
            (optionm'.option' string)
            (resultm.result' (optionm'.option' string) string)
        =
        leptos.create_local_resource
            fun () => url ()
            fun url =>
                inl url_log = url |> sm'.format_debug
                leptos.log $'"use_request (1) / json create_local_resource / url: " + string !url_log + ""'
                fun () =>
                    match url |> optionm'.unbox with
                    | Some url =>
                        url
                        |> networking.new_request_get
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> networking.response_text
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> sm'.from_std_string
                        |> Some
                    | None => None
                    |> optionm'.box
                    |> Ok
                    |> resultm.box
                |> async.future_init 3 1

    inl signal : leptos.memo (optionm'.option' (rust.rc (rust.ref_cell (leptos.rw_signal rust.std_string)))) =
        leptos.create_memo fun () =>
            inl url = url ()
            inl url_log = url |> sm'.format_pretty'
            leptos.log $'"use_request (2) / signal memo / url: " + string !url_log + ""'

            match url |> optionm'.unbox with
            | Some url =>
                inl cache =
                    leptos.signal_get global_state.state .cache
                    |> leptos.signal_get
                inl key = url |> sm'.to_std_string
                cache
                |> mapm.get key
                |> optionm'.unbox
                |> function
                    | Some set_cache =>
                        set_cache
                        |> optionm'.rc_upgrade
                    | None =>
                        ""
                        |> sm'.to_std_string
                        |> leptos.create_rw_signal
                        |> rust.new_ref_cell
                        |> rust.new_rc
                        |> Some
            | _ => None
            |> optionm'.box

    leptos.create_effect fun () =>
        inl url = url ()
        inl url_log = url |> sm'.format_pretty'
        leptos.log $'"use_request (2) / effect / url: " + string !url_log + ""'

        inl signal = signal |> leptos.memo_get |> optionm'.unbox

        inl json =
            json
            |> leptos.resource_get
            |> optionm'.unbox
            |> optionm.map resultm.unbox
            |> optionm.map (resultm.map optionm'.unbox)
            |> resultm.flatten_option

        inl signal_log = signal |> sm'.format_debug
        inl json_len : i64 = json |> sm'.format_debug |> sm.length
        leptos.log $'"use_request (3) / effect / json_len: " + string !json_len + " / signal: " + string !signal_log + ""'

        match json, signal, url |> optionm'.unbox with
        | Some (Ok json), Some signal, Some url =>
            rust.move fun () =>
                inl cache =
                    leptos.signal_get global_state.state .cache
                    |> leptos.signal_get
                inl key = url |> sm'.to_std_string
                inl value = json |> sm'.to_std_string

                signal
                |> rust.ref_cell_borrow
                |> leptos.signal_set value

                cache |> mapm.insert key (signal |> rust.rc_downgrade)

                |> ignore

                leptos.signal_get global_state.state .cache
                |> leptos.signal_set cache
            |> leptos.batch
        | _ => ()

    inl result : leptos.memo (resultm.result' (optionm'.option' u) rust.std_string) =
        leptos.create_memo fun () =>
            inl url = url ()
            inl url_log = url |> sm'.format_pretty'
            leptos.log $'"use_request (4) / result memo / url: " + string !url_log + ""'

            inl json_cache =
                match url |> optionm'.unbox with
                | Some url =>
                    leptos.log $'"use_request (5) / result memo / url: " + string !url + ""'
                    leptos.signal_get global_state.state .cache
                    |> leptos.signal_get
                    |> mapm.get (url |> sm'.to_std_string)
                    |> optionm'.map (optionm'.rc_upgrade >> optionm.map rust.ref_cell_borrow)
                    |> optionm'.unbox
                    |> optionm'.flatten
                    |> optionm.map
                        (leptos.signal_get >> sm'.from_std_string >> sm'.deserialize >> resultm.try')
                | None => None

            json_cache
            |> optionm'.box
            |> Ok
            |> resultm.box
            |> fun result =>
                inl result_len : i64 = result |> sm'.format_debug |> sm.length
                leptos.log $'"use_request (6) / result create_memo / result_len: " + string !result_len + ""'
                result

    inl result : rust.func0 (option (result t rust.std_string)) =
        rust.move fun () =>
            leptos.log $'"use_request (7) / result move"'
            result
            |> leptos.memo_get
            |> resultm.unbox
            |> resultm.map fun result =>
                result
                |> optionm'.unbox
                |> optionm.map map
            |> function
                | Ok (Some x) => Some (Ok x)
                | Error x => Some (Error x)
                | _ => None
            |> fun result =>
                inl result_len : i64 = result |> sm'.format_debug |> sm.length
                leptos.log $'"use_request (8) / result move / result_len: " + string !result_len + ""'
                result

    result
