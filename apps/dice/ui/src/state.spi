open rust_operators

type core_state =
    heap {
        dark_mode : leptos.rw_signal bool
        debug : leptos.rw_signal bool
        url_hash : leptos.rw_signal rust.std_string
    }

type core_state_data =
    heap {
        dark_mode : bool
        debug : bool
        url_hash : rust.std_string
    }

type state =
    heap {
        cache : leptos.rw_signal (rust.hash_map rust.std_string (leptos.rw_signal rust.std_string))
    }

type state_data =
    heap {
        cache : rust.hash_map rust.std_string rust.std_string
    }


type global_state =
    heap {
        core_state : leptos.rw_signal core_state
        state : leptos.rw_signal state
        loading : leptos.rw_signal (rust.hash_map rust.std_string (leptos.rw_signal bool))
    }

inl build_database () : async.future_pin (result rust.rexie rust.rexie_error) =
    leptos.log $'"state.build_database ()"'

    fun () =>
        inl rexie : async.future_pin (resultm.result' rust.rexie rust.rexie_error) =
            !\($'"Box::pin(rexie::Rexie::builder(\\\"database\\\").version(1).add_object_store(rexie::ObjectStore::new(\\\"store\\\")).build())"')
        inl rexie : resultm.result' rust.rexie rust.rexie_error = rexie |> async.await
        inl rexie : rust.rexie = rexie |> resultm.unbox |> resultm.get
        Ok rexie
    |> async.future_init 2 0

inl get_core_state_data_key () =
    "core-state-data"

inl get_state_data_key () =
    "state-data"

inl get_data forall t. (id : string) (rexie : rust.rexie) : async.future_pin (resultm.result' (option t) rust.std_string) =
    leptos.log $'"state.get_data () / id: " + !id + ""'
    fun () =>
        inl store_name = "store"
        inl store_names = ;[ store_name ]
        inl transaction =
            rexie
            |> store.transaction_read_only store_names
            |> resultm.try'
        inl rexie_store =
            transaction
            |> store.transaction_store store_name
            |> resultm.try'
        inl mode_value : rust.js_value =
            rexie_store
            |> store.store_get id
            |> async.await
            |> resultm.map_error' fun (x : rust.rexie_error) => x |> sm'.format'
            |> resultm.try'
        inl mode_data =
            mode_value
            |> sm'.wasm_from_value
            |> resultm.try'
        match mode_data |> optionm'.unbox with
        | Some mode_data =>
            inl data =
                mode_data
                |> sm'.deserialize_vec
                |> resultm.try'
                |> am'.from_vec
            inl data_len = length data
            leptos.log $'"state.get_data () / data_len: " + string !data_len + ""'
            inl data = data |> fun (a x : _ i32 _) => x
            inl data : resultm.result' t rust.std_string = data |> sm'.borsh_deserialize
            inl data = data |> resultm.try'
            Some data
        | None => None
        |> Ok |> resultm.box
    |> async.future_init 3 0

inl set_data forall t. (id : string) (data : t) (rexie : rust.rexie) : async.future_pin (resultm.result' () rust.rexie_error) =
    inl data_log = data |> sm'.format_debug
    leptos.log $'"state.set_data () / data: " + string !data_log + ""'
    inl rexie = join rexie
    fun () =>
        inl transaction : rust.rexie_transaction = !\($'"!rexie.transaction(&[\\\"store\\\"], rexie::TransactionMode::ReadWrite)?"')
        inl store : rust.rexie_store = !\($'"!transaction.store(\\\"store\\\")?"')

        !\($'"let mut data = Vec::new()"')
        !\($'"borsh::BorshSerialize::serialize(&!data, &mut data).unwrap()"')
        inl data : rust.vec u8 = !\($'"data"')

        inl data_js_value : rust.js_value = !\($'"serde_wasm_bindgen::to_value(&!data).unwrap()"')
        inl id = id |> sm'.as_str
        !\($'"!store.put(&!data_js_value, Some(&!id.into())).await?"')
        !\($'"!transaction.done().await?"')

        Ok () |> resultm.box
    |> async.future_init 5 0

inl use_database () =
    leptos.log $'"state.use_database ()"'

    inl core_state_data_key = get_core_state_data_key ()
    inl state_data_key = get_state_data_key ()
    inl global_state : global_state = leptos.use_context () |> optionm'.unwrap

    inl database : leptos.resource (option ()) rust.rexie =
        leptos.create_local_resource
            fun () => None
            fun _ =>
                fun () =>
                    leptos.log $'"state.use_database () / database create_local_resource"'
                    build_database () |> async.await |> resultm.get
                |> async.future_init 6 0

    inl core_state_data : leptos.resource (optionm'.option' rust.rexie) (option core_state_data) =
        leptos.create_local_resource
            fun () =>
                database
                |> leptos.resource_get
            fun (database : optionm'.option' rust.rexie) =>
                fun () =>
                    inl database_log = database |> sm'.format_debug
                    leptos.log $'"state.use_database () / core_state_data create_local_resource / database: " + !database_log + ""'
                    match database |> optionm'.unbox with
                    | Some database =>
                        database
                        |> get_data core_state_data_key
                        |> async.await
                        |> resultm.unbox
                        |> resultm.get
                    | None => None
                |> async.future_init 4 0

    leptos.create_effect fun () =>
        leptos.log $'"state.use_database () / effect core_state_data / ##1"'

        match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
        | Ok (Some storage) =>
            inl core_state_data = core_state_data |> leptos.resource_get |> optionm'.unbox
            inl core_state_data_log = core_state_data |> sm'.format_debug
            leptos.log $'"state.use_database () / effect core_state_data / ##2 / core_state_data: " + !core_state_data_log + ""'

            inl core_state_data =
                match core_state_data with
                | Some (Some core_state_data) =>
                    Some core_state_data
                | _ =>
                    storage
                    |> store.storage_get core_state_data_key
                    |> resultm.ok
                    |> optionm'.flatten
                    |> optionm.map fun (value : rust.std_string) =>
                        inl value = join value
                        value |> sm'.from_std_string |> sm'.deserialize |> resultm.ok' |> optionm'.unbox
                    |> optionm'.flatten

            inl core_state_data_log = core_state_data |> sm'.format_debug
            leptos.log $'"state.use_database () / effect core_state_data / ##3 / core_state_data: " + !core_state_data_log + ""'

            match core_state_data with
            | Some core_state_data =>
                rust.move fun () =>
                    leptos.rw_signal_get_untracked global_state.core_state .dark_mode
                    |> leptos.rw_signal_update fun _ => core_state_data.dark_mode

                    leptos.rw_signal_get_untracked global_state.core_state .debug
                    |> leptos.rw_signal_update fun _ => core_state_data.debug

                    leptos.rw_signal_get_untracked global_state.core_state .url_hash
                    |> leptos.rw_signal_update fun _ => core_state_data.url_hash
                |> leptos.batch
            | _ => ()
        | _ => ()

    inl state_data : leptos.resource (optionm'.option' rust.rexie) (option state_data) =
        leptos.create_local_resource
            fun () =>
                database
                |> leptos.resource_get
            fun (database : optionm'.option' rust.rexie) =>
                fun () =>
                    inl database_log = database |> sm'.format_debug
                    leptos.log $'"state.use_database () / state_data create_local_resource / database: " + !database_log + ""'
                    match database |> optionm'.unbox with
                    | Some database =>
                        database
                        |> get_data state_data_key
                        |> async.await
                        |> resultm.unbox
                        |> resultm.get
                    | None => None
                |> async.future_init 4 0

    leptos.create_effect fun () =>
        leptos.log $'"state.use_database () / effect state_data / ##1"'

        match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
        | Ok (Some _storage) =>
            inl state_data = state_data |> leptos.resource_get |> optionm'.unbox |> optionm'.flatten
            inl state_data_log = state_data |> sm'.format_debug
            leptos.log $'"state.use_database () / effect state_data / ##2 / state_data: " + !state_data_log + ""'

            inl state_data_log = state_data |> sm'.format_debug
            leptos.log $'"state.use_database () / effect state_data / ##3 / state_data: " + !state_data_log + ""'

            match state_data with
            | Some state_data =>
                rust.move fun () =>
                    leptos.rw_signal_get_untracked global_state.state .cache
                    |> leptos.rw_signal_update fun _ =>
                        state_data.cache
                        |> mapm.map fun x =>
                            inl x = join x
                            x |> leptos.create_rw_signal
                |> leptos.batch
            | _ => ()
        | _ => ()

    inl set_core_state_data_action = leptos.create_action fun value =>
        inl value_log = value |> sm'.format_debug
        inl database =
            database
            |> leptos.resource_get
            |> optionm'.unbox
        fun () =>
            match database with
            | Some database =>
                leptos.log $'"state.use_database () / set_core_state_data_action / value: " + string !value_log + ""'
                database
                |> set_data core_state_data_key value
                |> async.await
                |> resultm.unbox
                |> resultm.get
            | None => leptos.log $'"state.use_database () / set_core_state_data_action / database=None"'
        |> async.future_init 1 1

    let loading = leptos.create_memo fun () =>
        leptos.log $'"state.use_database () / loading create_memo"'
        global_state.loading |> leptos.rw_signal_get_untracked

    let (loaded, set_loaded) = leptos.create_signal false

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"state.use_database () / effect new_core_state_data / ##1 / loaded: " + string !loaded + ""'

        inl new_core_state_data : core_state_data =
            heap {
                dark_mode =
                    leptos.rw_signal_get_untracked global_state.core_state .dark_mode
                    |> leptos.rw_signal_get

                debug =
                    leptos.rw_signal_get_untracked global_state.core_state .debug
                    |> leptos.rw_signal_get

                url_hash =
                    leptos.rw_signal_get_untracked global_state.core_state .url_hash
                    |> leptos.rw_signal_get
            }

        inl new_core_state_data_log = new_core_state_data |> sm'.format_debug
        leptos.log $'"state.use_database () / effect new_core_state_data / ##2 / new_core_state_data: " + string !new_core_state_data_log + ""'

        inl dark_mode_loading =
            loading
            |> leptos.memo_get
            |> mapm.get ("dark_mode_key" |> sm'.to_std_string)
            |> optionm'.unbox
            |> optionm.map leptos.rw_signal_get
            |> optionm'.default_value false

        leptos.log $'"state.use_database () / effect new_core_state_data / ##3 / dark_mode_loading: " + string !dark_mode_loading + ""'

        if not dark_mode_loading then
            if not loaded
            then true |> leptos.signal_set set_loaded
            else
                leptos.log $'"state.use_database () / effect new_core_state_data / ##4"'

                match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
                | Ok (Some storage) =>
                    set_core_state_data_action |> leptos.action_dispatch new_core_state_data
                    storage |> store.storage_set core_state_data_key new_core_state_data
                | _ => ()

    inl set_state_data_action = leptos.create_action fun value =>
        inl value_log = value |> sm'.format_debug
        inl database =
            database
            |> leptos.resource_get
            |> optionm'.unbox
        fun () =>
            match database with
            | Some database =>
                leptos.log $'"state.use_database () / set_state_data_action / database=Some(_) / value: " + string !value_log + ""'
                database
                |> set_data state_data_key value
                |> async.await
                |> resultm.unbox
                |> resultm.get
            | None => leptos.log $'"state.use_database () / set_state_data_action / database=None"'
        |> async.future_init 1 1

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"state.use_database () / effect new_state_data / ##1 / loaded: " + string !loaded + ""'

        inl new_state_data : state_data =
            heap {
                cache =
                    leptos.rw_signal_get_untracked global_state.state .cache
                    |> leptos.rw_signal_get
                    |> mapm.map leptos.rw_signal_get
            }

        inl new_state_data_log = new_state_data |> sm'.format_debug
        leptos.log $'"state.use_database () / effect new_state_data / ##2 / new_state_data: " + string !new_state_data_log + ""'
        if not loaded
        then true |> leptos.signal_set set_loaded
        else
            leptos.log $'"state.use_database () / effect new_state_data / ##4"'

            match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some storage) =>
                set_state_data_action |> leptos.action_dispatch new_state_data
            | _ => ()

    database
