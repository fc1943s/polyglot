open rust_operators


// type state =
//     heap {
//         test : leptos.rw_signal u8
//     }

// type state_data =
//     heap {
//         test : u8
//     }

type global_state = state_core.global_state

inl use_database () =
    leptos.log $'"state.use_database (1)"'

    inl global_state : global_state = leptos.use_context () |> optionm'.unwrap

    inl database : leptos.resource (option ()) rust.rexie =
        leptos.create_local_resource
            fun () => None
            fun _ =>
                fun () =>
                    leptos.log $'"state.use_database (2) / database create_local_resource"'
                    state_core.build_database () |> async.await |> resultm.get
                |> async.future_init 6 0

    state_core.use_core_database database global_state

    global_state

inl use_request forall t u.
    (url : leptos.memo (optionm'.option' string))
    (map : u -> t)
    : rust.func0 (option (result t rust.std_string))
    =

    inl global_state : global_state = leptos.use_context () |> optionm'.unwrap

    inl json
        : leptos.resource
            (optionm'.option' string)
            (resultm.result' (optionm'.option' string) string)
        =
        leptos.create_local_resource
            fun () => url |> leptos.memo_get
            fun url =>
                inl url_log = url |> sm'.format_debug
                leptos.log $'"state.use_request (1) / json create_local_resource / url: " + string !url_log + ""'
                fun () =>
                    match url |> optionm'.unbox with
                    | Some url =>
                        url
                        |> networking.new_request_get
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> networking.response_text
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> sm'.from_std_string
                        |> Some
                    | None => None
                    |> optionm'.box
                    |> Ok
                    |> resultm.box
                |> async.future_init 3 1

    inl database : leptos.resource (option ()) rust.rexie =
        leptos.create_local_resource
            fun () => None
            fun _ =>
                fun () =>
                    leptos.log $'"state.request (2) / database create_local_resource"'
                    state_core.build_database () |> async.await |> resultm.get
                |> async.future_init 6 1

    inl state_data_resource
        : leptos.resource
            (optionm'.option' rust.rexie * (optionm'.option' string))
            (option string)
        =
        leptos.create_local_resource
            fun () =>
                (database |> leptos.resource_get), (url |> leptos.memo_get)
            fun ((database : optionm'.option' rust.rexie), url) =>
                fun () =>
                    inl database_log = database |> sm'.format_debug
                    leptos.log $'"state.use_database (3) / state_data create_local_resource / database: " + !database_log + ""'
                    match database |> optionm'.unbox, url |> optionm'.unbox with
                    | Some database, Some url =>
                        database
                        |> state_core.get_data url
                        |> async.await
                        |> resultm.unbox
                        |> resultm.map (optionm.map sm'.from_std_string)
                        |> resultm.get
                    | _ => None
                |> async.future_init 4 1

    inl state_data_memo : leptos.memo (optionm'.option' string) =
        leptos.create_memo fun () =>
            leptos.log $'"state.use_database (4) / new_signal_map memo"'

            match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some _storage) =>
                inl state_data = state_data_resource |> leptos.resource_get |> optionm'.unbox |> optionm'.flatten
                inl state_data_len : i64 = state_data |> sm'.format_debug |> sm.length
                leptos.log $'"state.use_database (5) / new_signal_map memo / state_data: " + string !state_data_len + ""'

                state_data
            | _ => None
            |> optionm'.box

    // leptos.create_effect fun () =>
    //     leptos.log $'"state.use_database (6) / effect state_data / ##1"'

    //     leptos.log $'"state.use_database (7) / effect state_data / ##2"'
    //     leptos.signal_get global_state.state .test
    //     |> leptos.signal_update fun n =>
    //         leptos.log $'"state.use_database (8) / effect state_data / state.test signal_update / n: " + string !n + ""'
    //         n + 1
    //     leptos.log $'"state.use_database (9) / effect state_data / ##3"'

    let (loaded, set_loaded) = leptos.create_signal false

    inl set_state_data_action = leptos.create_action fun (value : heap rust.std_string) =>
        inl value_len : i64 = value |> sm'.format_debug |> sm.length
        fun () =>
            inl database =
                database
                |> leptos.resource_get
                |> optionm'.unbox
            inl url = url |> leptos.memo_get |> optionm'.unbox
            match database, url with
            | Some database, Some url =>
                leptos.log $'"state.use_database (10) / set_state_data_action / database=Some(_) / value_len: " + string !value_len + ""'
                database
                |> state_core.set_data url value
                |> async.await
                |> resultm.unbox
                |> resultm.get
            | _ => leptos.log $'"state.use_database (11) / set_state_data_action / database,url=None"'
        |> async.future_init 3 1

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"state.use_database (12) / effect new_state_data / ##1 / loaded: " + string !loaded + ""'

        // inl new_state_data_len : i64 = new_state_data |> sm'.format_debug |> sm.length
        // leptos.log $'"state.use_database (13) / effect new_state_data / ##2 / new_state_data_len: " + string !new_state_data_len + ""'
        if not loaded then
            set_loaded
            |> leptos.signal_update fun _ =>
                leptos.log $'"state.use_database (14) / effect new_state_data / set_loaded |> signal_update true"'
                true
        else
            leptos.log $'"state.use_database (15) / effect new_state_data / ##4"'

            match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
            | Ok (Some storage) =>
                inl json : resultm.result' rust.std_string rust.std_string =
                    json
                    |> leptos.resource_get
                    |> optionm'.unbox
                    |> optionm.map resultm.unbox
                    |> optionm.map (resultm.map optionm'.unbox)
                    |> function
                        | Some (Ok (Some value)) =>
                            inl new_state_data = value |> sm'.to_std_string |> heap
                            set_state_data_action |> leptos.action_dispatch new_state_data

                            value |> sm'.to_std_string |> Ok
                            // |> resultm.try'
                            // |> resultm.unbox
                            // |> resultm.map (Some >> optionm'.box)
                        | Some (Error error) => error |> sm'.to_std_string |> Error
                        | _ => "state.use_request (5) / json Error" |> sm'.to_std_string |> Error
                    |> resultm.box
                //                   |> optionm'.unbox
                // |> optionm'.flatten
                // |> optionm.map
                //     (leptos.signal_get >> sm'.from_std_string >> sm'.deserialize >> resultm.try')

                inl json_len : i64 = json |> sm'.format_debug |> sm.length

                leptos.log $'"state.use_request (6) / effect / json_len: " + string !json_len + ""'


            | _ => ()

            leptos.log $'"state.use_database (16) / effect new_state_data / ##5"'

    // inl signal : leptos.memo (optionm'.option' (rust.rc (rust.ref_cell (leptos.rw_signal rust.std_string)))) =
    //     leptos.create_memo fun () =>
    //         inl url = url ()
    //         inl url_log = url |> sm'.format_pretty'
    //         leptos.log $'"use_request (2) / signal memo / url: " + string !url_log + ""'

    //         match url |> optionm'.unbox with
    //         | Some url =>
    //             inl cache =
    //                 leptos.signal_get global_state.state .cache
    //                 |> leptos.signal_get
    //             inl key = url |> sm'.to_std_string
    //             cache
    //             |> mapm.get key
    //             |> optionm'.unbox
    //             |> function
    //                 | Some set_cache =>
    //                     leptos.log $'"use_request (2.1) / signal memo / rc_upgrade"'
    //                     set_cache
    //                 | None =>
    //                     leptos.log $'"use_request (2.1) / signal memo / \\\"\\\" |> create_rw_signal"'
    //                     ""
    //                     |> sm'.to_std_string
    //                     |> leptos.create_rw_signal
    //                     |> rust.new_ref_cell
    //                     |> rust.new_rc
    //             |> Some
    //         | _ => None
    //         |> optionm'.box

    // leptos.create_effect fun () =>
    //     inl url = url ()
    //     inl url_log = url |> sm'.format_pretty'
    //     leptos.log $'"use_request (3) / effect / url: " + string !url_log + ""'

    //     inl signal = signal |> leptos.memo_get |> optionm'.unbox

    //     inl json =
    //         json
    //         |> leptos.resource_get
    //         |> optionm'.unbox
    //         |> optionm.map resultm.unbox
    //         |> optionm.map (resultm.map optionm'.unbox)
    //         |> resultm.flatten_option

    //     inl signal_log = signal |> sm'.format_debug
    //     inl json_len : i64 = json |> sm'.format_debug |> sm.length
    //     leptos.log $'"use_request (4) / effect / json_len: " + string !json_len + " / signal: " + string !signal_log + ""'

    //     match json, signal, url |> optionm'.unbox with
    //     | Some (Ok json), Some signal, Some url =>
    //         rust.move fun () =>
    //             inl cache =
    //                 leptos.signal_get global_state.state .cache
    //                 |> leptos.signal_get
    //             inl key = url |> sm'.to_std_string
    //             inl value = json |> sm'.to_std_string

    //             signal
    //             |> rust.ref_cell_borrow
    //             |> leptos.signal_update fun _ =>
    //                 leptos.log $'"use_request (5) / effect / signal signal_update"'
    //                 value

    //             cache
    //             |> mapm.insert key (signal |> rust.rc_clone)
    //             |> ignore

    //             leptos.signal_get global_state.state .cache
    //             |> leptos.signal_update fun _ =>
    //                 leptos.log $'"use_request (6) / effect / state.cache signal_update"'
    //                 cache
    //         |> leptos.batch
    //     | _ => ()

    inl result_memo : leptos.memo (resultm.result' u rust.std_string) =
        leptos.create_memo fun () =>
            inl url = url |> leptos.memo_get
            inl url_log = url |> sm'.format_pretty'
            leptos.log $'"state.use_request (3) / result memo / url: " + string !url_log + ""'

            inl json_cache =
                match url |> optionm'.unbox with
                | Some url =>
                    leptos.log $'"state.use_request (4) / result memo / url: " + string !url + ""'

                    inl state_data = state_data_memo |> leptos.memo_get |> optionm'.unbox
                    inl state_data_len : i64 = state_data |> sm'.format_debug |> sm.length
                    leptos.log $'"state.use_database (5) / new_signal_map memo / state_data_len: " + string !state_data_len + ""'

                    inl json : option (result (option string) string) =
                        json
                        |> leptos.resource_get
                        |> optionm'.unbox
                        |> optionm.map resultm.unbox
                        |> optionm.map (resultm.map optionm'.unbox)

                    inl json : result u rust.std_string =
                        match json, state_data with
                        | Some (Ok (Some value)), _ | _, Some value =>
                            value
                            |> sm'.deserialize
                            |> resultm.unbox
                            // |> resultm.try'
                            // |> resultm.unbox
                            // |> resultm.map (Some >> optionm'.box)
                        | Some (Error error), _ => error |> sm'.to_std_string |> Error
                        | _ => "state.use_request (5) / json Error" |> sm'.to_std_string |> Error
                    //                   |> optionm'.unbox
                    // |> optionm'.flatten
                    // |> optionm.map
                    //     (leptos.signal_get >> sm'.from_std_string >> sm'.deserialize >> resultm.try')

                    inl json_len : i64 = json |> sm'.format_debug |> sm.length
                    leptos.log $'"state.use_request (6) / effect / json_len: " + string !json_len + ""'

                    json
                    // |> leptos.resource_get
                    // |> fun x =>
                    //     x
                        // |> optionm'.unbox
                        // |> optionm.map resultm.unbox
                        // |> optionm.map (resultm.map optionm'.unbox)
                    // |> optionm'.unbox
                    // |> optionm.map resultm.unbox
                    // |> optionm.map (resultm.map optionm'.unbox)
                    // |> resultm.flatten_option
                | None => "state.use_request (7) / json Error" |> sm'.to_std_string |> Error
                |> resultm.box

            json_cache
            |> fun result =>
                inl result_len : i64 = result |> sm'.format_debug |> sm.length
                leptos.log $'"state.use_request (8) / result create_memo / result_len: " + string !result_len + ""'
                result

    inl result : rust.func0 (option (result t rust.std_string)) =
        rust.move fun () =>
            leptos.log $'"state.use_request (9) / result move"'
            result_memo
            |> leptos.memo_get
            |> resultm.unbox
            |> resultm.map fun result =>
                result
                // |> optionm'.unbox
                // |> optionm.map map
                |> map
            |> function
                | Ok x => Some (Ok x)
                | Error x => Some (Error x)
                | _ => None
            |> fun result =>
                inl result_log =
                    inl result_log = result |> sm'.format_debug
                    inl max = 200i32
                    if sm.length result_log <= max
                    then result_log
                    else result_log |> sm'.substring 0 max |> fun x => $'!x + "..."'
                leptos.log $'"state.use_request (10) / result move / result_log: " + string !result_log + ""'
                result

    result
