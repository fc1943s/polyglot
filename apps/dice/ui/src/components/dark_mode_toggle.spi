inl dark_mode_toggle () =
    leptos.log $'"ui.dark_mode_toggle ()"'
    inl global_state : state.global_state = leptos.use_context ()

    inl database : leptos.resource (option ()) rust.rexie =
        leptos.create_local_resource
            fun () => None
            fun _ =>
                fun () =>
                    leptos.log $'"ui.dark_mode_toggle () / database create_local_resource"'
                    state.build_database () |> async.await |> resultm.get
                |> async.future_init 0 0

    inl dark_mode : leptos.resource (optionm'.option' rust.rexie) (option bool) =
        leptos.create_local_resource
            fun () =>
                database
                |> leptos.resource_get
            fun (database : optionm'.option' rust.rexie) =>
                fun () =>
                    inl database_log = database |> format_debug
                    leptos.log $'"ui.dark_mode_toggle () / dark_mode create_local_resource / database: " + string !database_log + ""'
                    match database |> optionm'.unbox with
                    | Some database => database |> state.get_dark_mode |> async.await |> resultm.unwrap
                    | None => None
                |> async.future_init 3 0

    leptos.create_effect fun () =>
        leptos.log $'"ui.dark_mode_toggle () / create_effect 1 / ##1"'

        match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
        | Ok (Some storage) =>
            inl dark_mode = dark_mode |> leptos.resource_get |> optionm'.unbox
            inl dark_mode_log = dark_mode |> format_debug
            leptos.log $'"ui.dark_mode_toggle () / dark_mode effect 0 / ##1.1 / dark_mode1: " + string !dark_mode_log + ""'

            inl dark_mode =
                match dark_mode with
                | Some (Some dark_mode) =>
                    Some dark_mode
                | _ =>
                    storage
                    |> store.storage_get (state.get_dark_mode_key ())
                    |> resultm.ok
                    |> optionm'.unbox
                    |> optionm.map optionm'.unbox
                    |> optionm'.flatten
                    |> optionm.map fun (value : rust.std_string) =>
                        inl value = join value
                        value |> sm'.from_std_string |> sm'.deserialize |> resultm.ok |> optionm'.unbox
                    |> optionm'.flatten

            inl dark_mode_log = dark_mode |> format_debug
            leptos.log $'"ui.dark_mode_toggle () / dark_mode effect 0 / ##1.1 / dark_mode2: " + string !dark_mode_log + ""'

            match dark_mode with
            | Some dark_mode =>
                global_state.state |> leptos.signal_get_untracked
                |> fun state => state.dark_mode
                |> leptos.rw_signal_set dark_mode
            | _ => ()
        | _ => ()

    inl set_dark_mode_action = leptos.create_action fun value =>
        leptos.log $'"ui.dark_mode_toggle () / set_dark_mode_action / value: " + string !value + ""'
        inl database =
            database
            |> leptos.resource_get
            |> optionm'.unbox
            |> optionm.value
        fun () =>
            database |> state.set_dark_mode value |> async.await |> resultm.unwrap
        |> async.future_init 5 1

    let loading = leptos.create_memo fun () =>
        leptos.log $'"ui.dark_mode_toggle () / loading create_memo"'
        global_state.loading |> leptos.signal_get_untracked

    let (loaded, set_loaded) = leptos.create_signal false

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get
        leptos.log $'"ui.dark_mode_toggle () / create_effect 2 / ##1 / loaded: " + string !loaded + ""'

        inl dark_mode =
            global_state.state |> leptos.signal_get_untracked
            |> fun state => state.dark_mode
            |> leptos.rw_signal_get

        leptos.log $'"ui.dark_mode_toggle () / create_effect 2 / ##2 / dark_mode: " + string !dark_mode + ""'

        inl dark_mode_loading =
            loading
            |> leptos.memo_get
            |> mapm.get (state.get_dark_mode_key ())
            |> optionm'.unbox
            |> optionm.map leptos.rw_signal_get
            |> optionm'.default_value false

        leptos.log $'"ui.dark_mode_toggle () / create_effect 2 / ##3 / dark_mode_loading: " + string !dark_mode_loading + ""'

        if not dark_mode_loading then
            if not loaded
            then set_loaded |> leptos.signal_set true
            else
                leptos.log $'"ui.dark_mode_toggle () / create_effect 2 / ##4 / dark_mode: " + string !dark_mode + ""'

                match leptos.window () |> store.local_storage |> resultm.unbox |> resultm.map optionm'.unbox with
                | Ok (Some storage) =>
                    set_dark_mode_action |> leptos.action_dispatch dark_mode
                    storage |> store.storage_set (state.get_dark_mode_key ()) dark_mode
                | _ => ()

    inl on_click (_event : leptos.event) =
        global_state.state |> leptos.rw_signal_get
        |> fun state => state.dark_mode |> leptos.signal_update fun x =>
            not x

    inl on_click = join on_click

    inl get_dark_mode () =
        global_state.state |> leptos.rw_signal_get
        |> fun state => state.dark_mode |> leptos.rw_signal_get

    inl get_dark_mode = join get_dark_mode

    $'"<label for=\\\"AcceptConditions\\\" class=\\\"relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\\\"><input type=\\\"checkbox\\\" id=\\\"AcceptConditions\\\" class=\\\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\\\" on:change=move |event| !on_click(event) prop:checked={move || !get_dark_mode()} /><span class=\\\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white text-gray-400 transition-all peer-checked:start-6 peer-checked:text-green-600\\\"><svg data-unchecked-icon xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-4 w-4\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" /></svg><svg data-checked-icon xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"hidden h-4 w-4\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"> <path fill-rule=\\\"evenodd\\\" d=\\\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\\\" clip-rule=\\\"evenodd\\\" /></svg></span><span class=\\\"absolute inset-0 rounded-full bg-gray-300 transition peer-checked:bg-green-500\\\"></span></label>"'
    |> leptos.to_view
