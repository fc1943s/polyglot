open rust_operators

inl global_state_log_render () : _ leptos.pre =
    inl global_state : state.global_state = leptos.use_context ()

    inl global_state_resource : leptos.resource state.global_state state.global_state =
        leptos.create_local_resource_rc
            fun () => global_state
            fun global_state =>
                fun () =>
                    leptos.log $'"settings.global_state_log_render () / global_state_resource create_local_resource"'
                    // open state
                    // inl global_state : global_state = global_state
                    // inl global_state : rust.rc global_state = $"!global_state |> unbox"
                    // inl global_state : rust.rc (rust.rc global_state) = $"!global_state |> unbox"
                    // inl global_state : rust.rc (rust.rc (rust.rc global_state)) = $"!global_state |> unbox"
                    // inl global_state : $"`global_state" = $"!global_state |> unbox"
                    global_state
                |> async.future_init 2 0

    inl global_state_json = leptos.create_memo fun () =>
        match global_state_resource |> leptos.resource_get |> optionm'.unbox with
        | Some global_state =>
        //     // inl json : resultm.result' rust.std_string rust.std_string = !\($'"serde_json::to_string_pretty(&!global_state).map_err(|x| x.to_string())"')
        //     // match json |> resultm.unbox with
        //     // | Ok global_state => global_state |> sm'.from_std_string
        //     // | Error error => $'"Error: " + string !error + ""'
            "{}"
        | None => "Loading..."

    inl global_state_json = leptos.create_memo fun () =>
        global_state_json |> leptos.memo_get

    leptos.pre [
        $'"class=\\\"[padding:7px] [font-size:11px] [line-height:11px]\\\""'
    ] fun () =>
        global_state_json |> leptos.memo_get |> leptos.text_fragment

inl render () =
    ;[
        leptos.accordion "View" fun () =>
            leptos.view_map_grid fun () =>
                leptos.grid_pair
                    { class = $'"items-center"' }
                    ("Dark Mode" |> leptos.text_view |> leptos.view_to_fragment)
                    (dark_mode_toggle.render () |> leptos.element_to_fragment)
                |> leptos.element_to_fragment
            |> leptos.element_to_fragment
        |> leptos.element_to_view

        leptos.accordion "Connection" fun () =>
            leptos.view_map_grid fun () =>
                leptos.grid_pair
                    { class = $'"items-baseline"' }
                    ("Explorer Backend Host" |> leptos.text_view |> leptos.view_to_fragment)
                    (explorer_backend_host_input.render () |> leptos.element_to_fragment)
                |> leptos.element_to_fragment
            |> leptos.element_to_fragment
        |> leptos.element_to_view

        // leptos.accordion "Global State" fun () =>
        //     global_state_log_render ()
        //     |> leptos.element_to_fragment
        // |> leptos.element_to_view
    ]
