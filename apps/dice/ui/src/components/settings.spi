open rust_operators

inl global_state_log_render () : _ leptos.pre =
    leptos.log $'"settings.global_state_log_render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    inl global_state_json = leptos.create_memo fun () =>
        leptos.log $'"settings.global_state_log_render () / global_state_json memo"'

        inl global_state = join global_state
        inl json : resultm.result' rust.std_string rust.std_string = !\($'"serde_json::to_string_pretty(&!global_state).map_err(|x| x.to_string())"')
        match json |> resultm.unbox with
        | Ok json => json |> sm'.from_std_string
        | Error error => $'"Error: " + string !error + ""'

    leptos.pre [
        $'"class=\\\"[padding:7px] [font-size:11px] [line-height:11px]\\\""'
    ] fun () =>
        global_state_json |> leptos.move_to_fragment (leptos.memo_get >> leptos.text_fragment)

inl render () =
    ;[
        leptos.accordion "View" true fun () =>
            leptos.view_map_grid fun () =>
                leptos.grid_pair
                    { class = $'"items-center"' }
                    ("Dark Mode" |> leptos.text_fragment)
                    (dark_mode_toggle.render () |> leptos.element_to_fragment)
                |> leptos.element_to_fragment
            |> leptos.element_to_fragment
        |> leptos.element_to_view

        leptos.accordion "Connection" true fun () =>
            leptos.view_map_grid fun () =>
                leptos.grid_pair
                    { class = $'"items-baseline"' }
                    ("Explorer Backend Host" |> leptos.text_fragment)
                    (explorer_backend_host_input.render () |> leptos.element_to_fragment)
                |> leptos.element_to_fragment
            |> leptos.element_to_fragment
        |> leptos.element_to_view

        leptos.accordion "Global State" false fun () =>
            global_state_log_render ()
            |> leptos.element_to_fragment
        |> leptos.element_to_view
    ]
