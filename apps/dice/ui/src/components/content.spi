open rust_operators

inl render () : _ leptos.div =
    leptos.log $'"content.render ()"'

    inl location = leptos.use_location ()
    inl navigate = leptos.use_navigate ()
    inl url = leptos.use_url ()
    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap
    inl (tab, set_tab) = menu_tabs.History |> leptos.create_signal

    inl (loaded, set_loaded) = false |> leptos.create_signal

    leptos.create_effect fun () =>
        inl loaded = loaded |> leptos.signal_get

        inl hash = location |> leptos.location_hash |> leptos.memo_get
        inl new_url_hash : string = $'$"{!url}{!hash}"'
        leptos.log $'"content.render () / effect 1 / new_url_hash: " + !new_url_hash + " / loaded: " + string !loaded + ""'

        if not loaded then
            inl hash = join hash
            if !\($'"!hash == \\\"\\\""') then
                inl url_hash =
                    leptos.rw_signal_get_untracked global_state.core_state .url_hash
                    |> leptos.rw_signal_get
                    |> sm'.from_std_string

                leptos.log $'"content.render () / effect 1 / url_hash: " + !url_hash + ""'

                if url_hash |> sm'.contains "#" then
                    navigate url_hash

            true |> leptos.signal_set set_loaded
        else
            leptos.rw_signal_get_untracked global_state.core_state .url_hash
            |> leptos.rw_signal_set (new_url_hash |> sm'.to_std_string)

    leptos.create_effect fun () =>
        inl hash = location |> leptos.location_hash |> leptos.memo_get
        inl hash = hash |> sm'.strip_prefix '#' |> optionm'.unwrap_or #""
        inl hash_url = hash |> leptos.url_try_from

        inl hash_url = hash_url |> resultm.unwrap

        inl hash_url_log = hash_url |> sm'.format_pretty
        leptos.log $'"content.render () / effect 2 / hash_url: " + string !hash_url_log + ""'

        inl tab =
            if hash_url |> leptos.url_pathname |> sm'.starts_with ("/settings" |> sm'.to_std_string)
            then menu_tabs.Settings
            else menu_tabs.History

        inl tab_log = tab |> sm'.format_pretty
        leptos.log $'"content.render () / effect 2 / new_tab: " + string !tab_log + ""'

        tab |> leptos.signal_set set_tab

    leptos.div [
        $'"class=\\\"bg-gray-50 flex flex-1 flex-col items-stretch min-h-screen text-gray-700 text-sm\\\""'
    ] fun () =>
        ;[
            rust.move (fun () => tab) fun tab =>
                open menu_tabs
                match tab |> leptos.signal_get with
                | History => history.render ()
                | Settings => settings.render () |> leptos.views_to_view
                | _ => ;[] |> leptos.views_to_view
            |> leptos.closure_to_view

            leptos.div [
                $'"class=\\\"flex flex-1 min-w-max\\\""'
            ] fun () =>
                leptos.div [
                    $'"class=\\\"flex flex-1 [align-items:flex-end]\\\""'
                ] fun () =>
                    menu_tabs.render tab
                    |> leptos.views_to_fragment
                |> leptos.element_to_fragment
            |> leptos.element_to_view
        ]
        |> leptos.views_to_fragment
