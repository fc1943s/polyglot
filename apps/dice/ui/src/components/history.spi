open rust_operators
open model.near.backend

inl transaction_render (transaction : transaction) : _ leptos.div =
    leptos.div [
        $'"class=\\\"flex flex-1 flex-col\\\""'
    ] fun () =>
        ;[
            leptos.divider fun () =>
                "Transaction" |> leptos.text_fragment
            |> leptos.element_to_view

            leptos.div [
                $'"class=\\\"grid flex-1\\\""'
            ] fun () =>
                ;[
                    leptos.grid_pair
                        { padding = Some ""; class = "" }
                        fun () => "Block Timestamp" |> leptos.text_fragment
                        fun () =>
                            transaction.block_timestamp
                            |> date_time.from_timestamp'
                            |> optionm.map (date_time.format' "%Y-%m-%d %H:%M:%S" >> sm'.from_std_string)
                            |> resultm.from_option
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; class = "" }
                        fun () => "Signer" |> leptos.text_fragment
                        fun () =>
                            transaction.signer_id
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; class = "" }
                        fun () => "Receiver" |> leptos.text_fragment
                        fun () =>
                            transaction.receiver_id
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; class = "" }
                        fun () => "Actions" |> leptos.text_fragment
                        fun () =>
                            // (a transaction.actions : _ i32 _)
                            // |> am'.try_pick function
                            //     | FunctionCall { method_name args gas deposit } as x =>
                            //         inl method_name = join method_name
                            //         inl args = join args
                            //         inl call = $'"" + !method_name "(" + !args + ")"'

                            //         leptos.grid_pair
                            //             { padding = Some ""; class = "" }
                            //             fun () => "Function Call" |> leptos.text_fragment
                            //             fun () => call |> leptos.text_fragment
                            //         |> leptos.element_to_fragment
                            //         |> Some
                            //     | AddKey { public_key access_key } as x =>
                            //         x
                            //         |> sm'.format_pretty'
                            //         |> sm'.from_std_string
                            //         |> leptos.text_fragment
                            //         |> Some
                            //     | DeployContract { code } as x =>
                            //         x
                            //         |> sm'.format_pretty'
                            //         |> sm'.from_std_string
                            //         |> leptos.text_fragment
                            //         |> Some
                            //     | Transfer { deposit } as x =>
                            //         x
                            //         |> sm'.format_pretty'
                            //         |> sm'.from_std_string
                            //         |> leptos.text_fragment
                            //         |> Some
                            //     | _ => None
                            // |> optionm'.default_with fun () =>
                                    leptos.span [
                                        $'"class=\\\"flex items-center\\\""'
                                    ] fun () =>
                                        ;[
                                            leptos.x_red_svg () |> leptos.element_to_view
                                            "None" |> leptos.text_view
                                        ] |> leptos.views_to_fragment
                                    |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; class = "" }
                        fun () => "Status" |> leptos.text_fragment
                        fun () =>
                            transaction.status
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view
                ]
                |> leptos.views_to_fragment
            |> leptos.element_to_view
        ]
        |> leptos.views_to_fragment

inl render () =
    leptos.log $'"history.render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    inl url_input = leptos.create_memo fun () =>
        leptos.log $'"history.render () / url_input create_memo"'

        inl id = "i574n.near"

        inl input_obj : rust.hash_map rust.std_string (rust.rc input_data') =
            ;[
                "0" |> sm'.to_std_string,
                IdInput { id = id |> sm'.to_std_string } |> input_data_box |> rust.new_rc

                "1" |> sm'.to_std_string,
                IdInput { id = id |> sm'.to_std_string } |> input_data_box |> rust.new_rc

                "2" |> sm'.to_std_string,
                TransactionListByAccountIdInput
                    {
                        account_id = id |> sm'.to_std_string
                        limit = 10
                        cursor = None
                    }
                |> input_data_box |> rust.new_rc
            ]
            |> mapm.from_array

        input_obj
        |> sm'.serialize
        |> resultm.unwrap'
        |> sm'.encode_uri_component
        |> sm'.format'

    inl url = leptos.create_memo fun () =>
        leptos.log $'"history.render () / url create_memo"'

        inl explorer_backend_host =
            leptos.rw_signal_get_untracked global_state.state .explorer_backend_host
            |> leptos.rw_signal_get

        inl url_input = url_input |> leptos.memo_get

        inl url : string = $'"https://" + string !explorer_backend_host + "/trpc/account.transactionsCount,contract.byId,transaction.listByAccountId?batch=1&input=" + string !url_input + ""'
        leptos.log $'"history.render () / url: " + !url + ""'
        url

    inl json : leptos.resource string (resultm.result' string string) =
        leptos.create_local_resource
            fun () => url |> leptos.memo_get
            fun url =>
                fun () =>
                    leptos.log $'"history.render () / json create_local_resource"'
                    url
                    |> networking.new_request_get
                    |> async.await
                    |> resultm.map_error' sm'.format'
                    |> resultm.try'
                    |> networking.response_text
                    |> async.await
                    |> resultm.map_error' sm'.format'
                    |> resultm.try'
                    |> sm'.from_std_string
                    |> Ok
                    |> resultm.box
                |> async.future_init 2 0

    inl result_wrapper : leptos.memo (option (resultm.result' (a i32 result_wrapper') string)) =
        leptos.create_memo fun () =>
            leptos.log $'"history.render () / result_wrapper create_memo"'

            json
            |> leptos.resource_get
            |> optionm'.map fun json =>
                json
                |> resultm.unbox
                |> resultm.map fun json =>
                    json
                    |> sm'.deserialize
                    |> resultm.map_error' sm'.format'
                    |> resultm.try'
                    |> am'.from_vec
                |> resultm.box
            |> optionm'.unbox

    inl result_wrapper : rust.func0 (option (result (a i32 result_wrapper) string)) =
        rust.move (fun () => result_wrapper) fun result_wrapper' =>
            leptos.log $'"history.render () / result_wrapper move"'

            result_wrapper
            |> leptos.memo_get
            |> optionm.map fun result_wrapper =>
                result_wrapper
                |> resultm.unbox
                |> resultm.map (am.map result_wrapper_unbox)

    inl result_data : rust.func0 (option (result result_data string)) =
        rust.move (fun () => result_wrapper) fun result_wrapper =>
            leptos.log $'"history.render () / result_data move"'

            result_wrapper
            |> rust.func0_get
            |> optionm.map fun result_wrapper =>
                result_wrapper
                |> resultm.map fun result =>
                    result
                    |> am'.try_pick fun result =>
                        result.result
                        |> optionm.map fun result =>
                            result.data
                    |> resultm.from_option
                |> resultm.flatten

    inl transactions_count : rust.func0 (option (result account_transactions_count string)) =
        rust.move (fun () => result_data) fun result_data' =>
            leptos.log $'"history.render () / transaction_count move"'

            result_data
            |> rust.func0_get
            |> optionm.map (resultm.map function
                | AccountTransactionsCount account_transactions_count =>
                    Some account_transactions_count
                | _ => None)
            |> resultm.flatten_option

    inl transaction_list : rust.func0 (option (result transaction_list_by_account_id string)) =
        rust.move (fun () => result_data) fun result_data' =>
            leptos.log $'"history.render () / transaction_list move"'

            result_data
            |> rust.func0_get
            |> optionm.map (resultm.map function
                | TransactionListByAccountId transaction_list_by_account_id =>
                    Some transaction_list_by_account_id
                | _ => None)
            |> resultm.flatten_option

    inl cursor : rust.func0 (option (result transaction_cursor string)) =
        rust.move (fun () => transaction_list) fun transaction_list' =>
            leptos.log $'"history.render () / cursor move"'

            transaction_list
            |> rust.func0_get
            |> optionm.map fun transaction_list =>
                transaction_list
                |> resultm.map fun result =>
                    result.cursor
                    |> resultm.from_option
                |> resultm.flatten

    inl transactions : rust.func0 (option (result (array transaction) string)) =
        rust.move (fun () => 0i32) fun transaction_list' =>
            leptos.log $'"history.render () / transactions move"'

            transaction_list
            |> rust.func0_get
            |> optionm.map fun transaction_list =>
                transaction_list
                |> resultm.map fun result =>
                    result.items

    ;[
        leptos.accordion "History" true fun () =>
            transactions |> leptos.move_to_fragment fun transactions =>
                match transactions |> rust.func0_get with
                | Some (Ok transactions) =>
                    leptos.div [
                        $'"class=\\\"grid flex-1 p-[10px] [gap:10px] [grid-template-columns:repeat(auto-fill,minmax(400px,1fr))]\\\""'
                    ] fun () =>
                        leptos.for
                            transactions
                            (fun transaction => transaction.hash)
                            (transaction_render >> leptos.element_to_fragment)
                        |> leptos.view_to_fragment
                    |> leptos.element_to_fragment
                | Some (Error error) =>
                    ;[
                        leptos.x_red_svg () |> leptos.element_to_view
                        error |> leptos.text_view
                    ]
                    |> leptos.views_to_fragment
                | _ =>
                    leptos.div [
                        $'"class=\\\"grid place-content-center py-[10vh]\\\""'
                    ] fun () =>
                        leptos.div [
                            $'"class=\\\"flex flex-1 [gap:4px] items-center\\\""'
                        ] fun () =>
                            ;[
                                leptos.loading_svg () |> leptos.element_to_view
                                $'"Loading..."' |> leptos.text_view
                            ]
                            |> leptos.views_to_fragment
                        |> leptos.element_to_fragment
                    |> leptos.element_to_fragment
        |> leptos.element_to_view

        if leptos.rw_signal_get_untracked global_state.core_state .debug |> leptos.rw_signal_get then
            leptos.accordion "Debug" true fun () =>
                ;[
                    leptos.grid_pair
                        { padding = None; class = "" }
                        fun () => "JSON" |> leptos.text_fragment
                        fun () => json |> leptos.move_to_fragment fun json =>
                            json
                            |> leptos.resource_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_fragment
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; class = "" }
                        fun () => "Result Wrapper" |> leptos.text_fragment
                        fun () => result_wrapper |> leptos.move_to_fragment fun result_wrapper =>
                            result_wrapper
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_fragment
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; class = "" }
                        fun () => "Transactions Count" |> leptos.text_fragment
                        fun () => transactions_count |> leptos.move_to_fragment fun transactions_count =>
                            transactions_count
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_fragment
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; class = "" }
                        fun () => "Cursor" |> leptos.text_fragment
                        fun () => cursor |> leptos.move_to_fragment fun cursor =>
                            cursor
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_fragment
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; class = "" }
                        fun () => "Transactions" |> leptos.text_fragment
                        fun () => transaction_list |> leptos.move_to_fragment fun transaction_list =>
                            transaction_list
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_fragment
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view
                ]
                |> leptos.views_to_fragment
            |> leptos.element_to_view
        else ;[] |> leptos.views_to_view
    ]
