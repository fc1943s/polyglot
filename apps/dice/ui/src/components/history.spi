open rust_operators
open model.near.backend

inl transaction_render (transaction : transaction) : _ leptos.div =
    print_static "<history.transaction_render>"

    leptos.div [
        $'"class=\\\"flex flex-1 flex-col\\\""'
    ] fun () =>
        ;[
            leptos.divider fun () =>
                "Transaction" |> leptos.text_fragment
            |> leptos.element_to_view

            leptos.div [
                $'"class=\\\"grid flex-1 divide-y-[1px] divide-gray-200/[.15]\\\""'
            ] fun () =>
                ;[
                    leptos.grid_pair
                        { padding = Some ""; cols = None; class = "items-center py-[4px]" }
                        fun () => "Block Timestamp" |> leptos.text_fragment
                        fun () =>
                            transaction.block_timestamp
                            |> date_time.from_timestamp'
                            |> optionm.map (
                                date_time.to_local
                                >> date_time.format'' "%Y-%m-%d %H:%M:%S" >> sm'.from_std_string)
                            |> resultm.from_option
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; cols = None; class = "items-center py-[4px]" }
                        fun () => "Signer" |> leptos.text_fragment
                        fun () =>
                            transaction.signer_id
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; cols = None; class = "items-center py-[4px]" }
                        fun () => "Receiver" |> leptos.text_fragment
                        fun () =>
                            transaction.receiver_id
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some "sm:pr-[10px]"; cols = None; class = "items-center py-[4px]" }
                        fun () => "Actions" |> leptos.text_fragment
                        fun () =>
                            a transaction.actions
                            |> am'.map_vec function
                                | FunctionCall { method_name args gas deposit } =>
                                    leptos.grid_pair
                                        { padding = Some "items-center"; cols = Some ""; class = "" }
                                        fun () => "Function Call" |> leptos.text_fragment
                                        fun () =>
                                            leptos.div [
                                                $'"class=\\\"flex flex-1 flex-col\\\""'
                                            ] fun () =>
                                                ;[
                                                    leptos.grid_pair
                                                        { padding = Some ""; cols = None; class = "" }
                                                        fun () => "Method" |> leptos.text_fragment
                                                        fun () =>
                                                            method_name
                                                            |> to_string
                                                            |> leptos.text_fragment
                                                    |> leptos.element_to_view

                                                    leptos.grid_pair
                                                        { padding = Some ""; cols = None; class = "" }
                                                        fun () => "Args" |> leptos.text_fragment
                                                        fun () =>
                                                            args
                                                            |> sm'.base64_decode
                                                            |> to_string
                                                            |> leptos.text_fragment
                                                    |> leptos.element_to_view

                                                    leptos.grid_pair
                                                        { padding = Some ""; cols = None; class = "" }
                                                        fun () => "Gas" |> leptos.text_fragment
                                                        fun () =>
                                                            gas
                                                            |> sm'.format'
                                                            |> to_string
                                                            |> leptos.text_fragment
                                                    |> leptos.element_to_view

                                                    leptos.grid_pair
                                                        { padding = Some ""; cols = None; class = "" }
                                                        fun () => "Deposit" |> leptos.text_fragment
                                                        fun () =>
                                                            deposit
                                                            |> to_string
                                                            |> leptos.text_fragment
                                                    |> leptos.element_to_view
                                                ]
                                                |> leptos.views_to_fragment
                                            |> leptos.element_to_fragment
                                    |> leptos.element_to_view
                                | AddKey { public_key access_key } =>
                                    leptos.grid_pair
                                        { padding = Some "items-center"; cols = None; class = "" }
                                        fun () => "Add Key" |> leptos.text_fragment
                                        fun () =>
                                            inl text : string = $'"Public Key: " + string !public_key + ""'
                                            text |> leptos.text_fragment
                                    |> leptos.element_to_view
                                | DeployContract { code } =>
                                    leptos.grid_pair
                                        { padding = Some "items-center"; cols = Some ""; class = "" }
                                        fun () => "Contract Deploy" |> leptos.text_fragment
                                        fun () =>
                                            leptos.div [
                                                $'"class=\\\"flex flex-1 flex-col\\\""'
                                            ] fun () =>
                                                ;[
                                                    leptos.grid_pair
                                                        { padding = Some ""; cols = None; class = "" }
                                                        fun () => "Code Hash" |> leptos.text_fragment
                                                        fun () =>
                                                            code
                                                            |> sm'.from_std_string
                                                            |> leptos.text_fragment
                                                    |> leptos.element_to_view
                                                ]
                                                |> leptos.views_to_fragment
                                            |> leptos.element_to_fragment
                                    |> leptos.element_to_view
                                | Transfer { deposit } =>
                                    leptos.grid_pair
                                        { padding = Some "items-center"; cols = None; class = "" }
                                        fun () => "Transfer" |> leptos.text_fragment
                                        fun () =>
                                            deposit |> sm'.from_std_string |> leptos.text_fragment
                                    |> leptos.element_to_view
                            |> fun (a x : _ i32 _) => x
                            |> leptos.views_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; cols = None; class = "items-center py-[4px]" }
                        fun () => "Status" |> leptos.text_fragment
                        fun () =>
                            transaction.status
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; cols = None; class = "items-center py-[4px]" }
                        fun () => "Hash" |> leptos.text_fragment
                        fun () =>
                            transaction.hash
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = Some ""; cols = None; class = "items-center py-[4px]" }
                        fun () => "Block Hash" |> leptos.text_fragment
                        fun () =>
                            transaction.block_hash
                            |> to_string
                            |> leptos.text_fragment
                    |> leptos.element_to_view
                ]
                |> leptos.views_to_fragment
            |> leptos.element_to_view
        ]
        |> leptos.views_to_fragment

inl render () =
    print_static "<history.render>"
    leptos.log $'"history.render ()"'

    inl global_state : state.global_state = leptos.use_context () |> optionm'.unwrap

    inl url_input = leptos.create_memo fun () =>
        leptos.log $'"history.render () / url_input create_memo"'

        inl id = "i574n.near"

        inl input_obj : rust.hash_map rust.std_string (rust.rc input_data') =
            ;[
                "0" |> sm'.to_std_string,
                IdInput { id = id |> sm'.to_std_string } |> input_data_box |> rust.new_rc

                "1" |> sm'.to_std_string,
                IdInput { id = id |> sm'.to_std_string } |> input_data_box |> rust.new_rc

                "2" |> sm'.to_std_string,
                TransactionListByAccountIdInput
                    {
                        account_id = id |> sm'.to_std_string
                        limit = 10
                        cursor = None
                    }
                |> input_data_box |> rust.new_rc
            ]
            |> mapm.from_array

        input_obj
        |> sm'.serialize
        |> resultm.unwrap'
        |> sm'.encode_uri_component
        |> sm'.format'
        |> Some
        |> optionm'.box
        |> fun x =>
            inl x_log = x |> sm'.format_debug
            leptos.log $'"history.render () / url_input create_memo / result: " + string !x_log + ""'
            x

    inl url = leptos.create_memo fun () =>
        url_input
        |> leptos.memo_get
        |> optionm'.unbox
        |> optionm.map fun url_input =>
            inl explorer_backend_host =
                leptos.rw_signal_get_untracked global_state.state .explorer_backend_host
                |> leptos.rw_signal_get

            $'"https://" + string !explorer_backend_host + "/trpc/account.transactionsCount,contract.byId,transaction.listByAccountId?batch=1&input=" + string !url_input + ""'
        |> optionm'.box
        |> fun x =>
            inl x_log = x |> sm'.format_debug
            leptos.log $'"history.render () / url create_memo / result: " + string !x_log + ""'
            x

    inl json : leptos.resource (optionm'.option' string) (resultm.result' (optionm'.option' string) string) =
        leptos.create_local_resource
            fun () => url |> leptos.memo_get
            fun url =>
                leptos.log $'"history.render () / json create_local_resource"'
                fun () =>
                    match url |> optionm'.unbox with
                    | Some url =>
                        url
                        |> networking.new_request_get
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> networking.response_text
                        |> async.await
                        |> resultm.map_error' sm'.format'
                        |> resultm.try'
                        |> sm'.from_std_string
                        |> Some
                    | None => None
                    |> optionm'.box
                    |> Ok
                    |> resultm.box
                |> async.future_init 2 1

    inl result_wrapper : leptos.memo (resultm.result' (optionm'.option' (a i32 result_wrapper')) string) =
        leptos.create_memo fun () =>
            json
            |> leptos.resource_get
            |> optionm'.unbox
            |> function
                | None => Ok None
                | Some json =>
                    json
                    |> resultm.unbox
                    |> resultm.map fun json =>
                        match json |> optionm'.unbox with
                        | Some json =>
                            json
                            |> sm'.deserialize
                            |> resultm.map_error' sm'.format'
                            |> resultm.try'
                            |> am'.from_vec
                            |> Some
                        | None => None
            |> resultm.map optionm'.box
            |> resultm.box
            |> fun x =>
                inl x_log = x |> sm'.format_debug
                leptos.log $'"history.render () / result_wrapper create_memo / result length: " + (!x_log |> string |> String.length |> string) + ""'
                x

    inl result_wrapper : rust.func0 (option (result (a i32 result_wrapper) string)) =
        rust.move fun () =>
            result_wrapper
            |> leptos.memo_get
            |> resultm.unbox
            |> resultm.map fun result_wrapper =>
                result_wrapper
                |> optionm'.unbox
                |> optionm.map (am.map result_wrapper_unbox)
            |> function
                | Ok (Some x) => Some (Ok x)
                | Error x => Some (Error x)
                | _ => None
            |> fun x =>
                inl x_log = x |> sm'.format_debug
                leptos.log $'"history.render () / result_wrapper move / result length: " + (!x_log |> string |> String.length |> string) + ""'
                x

    inl result_data : rust.func0 (option (result result_data string)) =
        rust.move fun () =>
            result_wrapper
            |> rust.func0_get
            |> optionm.map fun result_wrapper =>
                result_wrapper
                |> resultm.map fun result =>
                    result
                    |> am'.try_pick fun result =>
                        result.result
                        |> optionm.map fun result =>
                            result.data
                    |> resultm.from_option
                |> resultm.flatten
            |> fun x =>
                inl x_log = x |> sm'.format_debug
                leptos.log $'"history.render () / result_data move / result length: " + (!x_log |> string |> String.length |> string) + ""'
                x

    inl transactions_count : rust.func0 (option (result account_transactions_count string)) =
        rust.move fun () =>
            result_data
            |> rust.func0_get
            |> optionm.map (resultm.map function
                | AccountTransactionsCount account_transactions_count =>
                    Some account_transactions_count
                | _ => None)
            |> resultm.flatten_option
            |> fun x =>
                inl x_log = x |> sm'.format_debug
                leptos.log $'"history.render () / transaction_count move / result length: " + (!x_log |> string |> String.length |> string) + ""'
                x

    inl transaction_list : rust.func0 (option (result transaction_list_by_account_id string)) =
        rust.move fun () =>
            result_data
            |> rust.func0_get
            |> optionm.map (resultm.map function
                | TransactionListByAccountId transaction_list_by_account_id =>
                    Some transaction_list_by_account_id
                | _ => None)
            |> resultm.flatten_option
            |> fun x =>
                inl x_log = x |> sm'.format_debug
                leptos.log $'"history.render () / transaction_list move / result length: " + (!x_log |> string |> String.length |> string) + ""'
                x

    inl cursor : rust.func0 (option (result transaction_cursor string)) =
        rust.move fun () =>
            transaction_list
            |> rust.func0_get
            |> optionm.map fun transaction_list =>
                transaction_list
                |> resultm.map fun result =>
                    result.cursor
                    |> resultm.from_option
                |> resultm.flatten
            |> fun x =>
                inl x_log = x |> sm'.format_debug
                leptos.log $'"history.render () / cursor move / result length: " + (!x_log |> string |> String.length |> string) + ""'
                x

    inl transactions : rust.func0 (option (result (array_base transaction) string)) =
        rust.move fun () =>
            transaction_list
            |> rust.func0_get
            |> optionm.map fun transaction_list =>
                transaction_list
                |> resultm.map fun result =>
                    result.items
            |> fun x =>
                inl x_log = x |> sm'.format_debug
                leptos.log $'"history.render () / transactions move / result length: " + (!x_log |> string |> String.length |> string) + ""'
                x

    ;[
        leptos.accordion "History" true fun () =>
            match transactions |> rust.func0_get with
            | Some (Ok transactions) =>
                leptos.div [
                    $'"class=\\\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\\\""'
                ] fun () =>
                    leptos.for
                        transactions
                        fun transaction => transaction.hash
                        fun transaction =>
                            transaction
                            |> transaction_render
                            |> leptos.element_to_fragment
                    |> leptos.view_to_fragment
                |> leptos.element_to_fragment
            | Some (Error error) =>
                ;[
                    leptos.x_red_svg () |> leptos.element_to_view
                    error |> leptos.text_view
                ]
                |> leptos.views_to_fragment
            | _ =>
                leptos.div [
                    $'"class=\\\"grid place-content-center py-[10vh]\\\""'
                ] fun () =>
                    leptos.div [
                        $'"class=\\\"flex flex-1 [gap:4px] items-center\\\""'
                    ] fun () =>
                        ;[
                            leptos.loading_svg () |> leptos.element_to_view
                            $'"Loading..."' |> leptos.text_view
                        ]
                        |> leptos.views_to_fragment
                    |> leptos.element_to_fragment
                |> leptos.element_to_fragment
        |> leptos.element_to_view

        if leptos.rw_signal_get_untracked global_state.core_state .debug |> leptos.rw_signal_get then
            leptos.accordion "Debug" true fun () =>
                ;[
                    leptos.grid_pair
                        { padding = None; cols = None; class = "" }
                        fun () => "JSON" |> leptos.text_fragment
                        fun () =>
                            json
                            |> leptos.resource_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; cols = None; class = "" }
                        fun () => "Result Wrapper" |> leptos.text_fragment
                        fun () =>
                            result_wrapper
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; cols = None; class = "" }
                        fun () => "Transactions Count" |> leptos.text_fragment
                        fun () =>
                            transactions_count
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; cols = None; class = "" }
                        fun () => "Cursor" |> leptos.text_fragment
                        fun () =>
                            cursor
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view

                    leptos.grid_pair
                        { padding = None; cols = None; class = "" }
                        fun () => "Transactions" |> leptos.text_fragment
                        fun () =>
                            transaction_list
                            |> rust.func0_get
                            |> sm'.format_pretty'
                            |> sm'.from_std_string
                            |> leptos.text_block_pre
                            |> leptos.element_to_fragment
                    |> leptos.element_to_view
                ]
                |> leptos.views_to_fragment
            |> leptos.element_to_view
        else ;[] |> leptos.views_to_view
    ]
