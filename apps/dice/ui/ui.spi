inl types () =
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::ev::Event\")>] type leptos_ev_Event = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::ev::MouseEvent\")>] type leptos_ev_MouseEvent = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::html::Button\")>] type leptos_html_Button = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::html::Details\")>] type leptos_html_Details = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::html::Div\")>] type leptos_html_Div = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::html::Input\")>] type leptos_html_Input = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::html::Label\")>] type leptos_html_Label = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::Action<$0, $1>\")>] type leptos_Action<'T, 'U> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::Fragment\")>] type leptos_Fragment = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::HtmlElement<$0>\")>] type leptos_HtmlElement<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::IntoView\")>] type leptos_IntoView = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::RwSignal<$0>\")>] type leptos_RwSignal<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::ReadSignal<$0>\")>] type leptos_ReadSignal<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::WriteSignal<$0>\")>] type leptos_WriteSignal<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::Memo<$0>\")>] type leptos_Memo<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::Resource<$0, $1>\")>] type leptos_Resource<'T, 'U> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"leptos::View\")>] type leptos_View = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"rexie::Error\")>] type rexie_Error = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"rexie::Rexie\")>] type rexie_Rexie = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"rexie::Store\")>] type rexie_Store = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"rexie::Transaction\")>] type rexie_Transaction = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"serde_json::Value\")>] type serde_json_Value = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"serde_json::Error\")>] type serde_json_Error = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"wasm_bindgen::JsValue\")>] type wasm_bindgen_JsValue = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"wasm_bindgen::closure::Closure<$0>\")>] type wasm_bindgen_closure_Closure<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::collections::HashMap<$0, $1>\")>] type std_collections_HashMap<'K, 'V> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::rc::Rc<$0>\")>] type std_rc_Rc<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Box<$0>\")>] type Box<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::pin::Pin<$0>\")>] type std_pin_Pin<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::sync::Arc<$0>\")>] type std_sync_Arc<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::string::String\")>] type std_string_String = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"js_sys::Function\")>] type js_sys_Function = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"web_sys::Window\")>] type web_sys_Window = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"web_sys::Document\")>] type web_sys_Document = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"web_sys::Storage\")>] type web_sys_Storage = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"web_sys::HtmlElement\")>] type web_sys_HtmlElement = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"dyn $0\")>] type Dyn<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Fn() -> $0\")>] type Fn<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"FnOnce() -> $0\")>] type FnOnce<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Fn()\")>] type FnUnit = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"std::future::Future<Output = $0>\")>] type Future<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"impl $0\")>] type Impl<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"&$0\")>] type Ref<'T> = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"str\")>] type Str = class end"
    global "[<Fable.Core.Erase; Fable.Core.Emit(\"Vec<$0>\")>] type Vec<'T> = class end"


nominal async t = $"Async<`t>"

nominal event = $"leptos_ev_Event"
nominal mouse_event = $"leptos_ev_MouseEvent"
nominal button = $"leptos_html_Button"
nominal details = $"leptos_html_Details"
nominal div = $"leptos_html_Div"
nominal input = $"leptos_html_Input"
nominal label = $"leptos_html_Label"
nominal action t u = $"leptos_Action<`t, `u>"
nominal fragment = $"leptos_Fragment"
nominal leptos_html_element t = $"leptos_HtmlElement<`t>"
nominal into_view = $"leptos_IntoView"
nominal memo t = $"leptos_Memo<`t>"
nominal rw_signal t = $"leptos_RwSignal<`t>"
nominal read_signal t = $"leptos_ReadSignal<`t>"
nominal write_signal t = $"leptos_WriteSignal<`t>"
nominal resource t u = $"leptos_Resource<`t, `u>"
nominal view = $"leptos_View"
nominal rexie = $"rexie_Rexie"
nominal rexie_store = $"rexie_Store"
nominal rexie_transaction = $"rexie_Transaction"
nominal rexie_error = $"rexie_Error"
nominal json_value = $"serde_json_Value"
nominal json_error = $"serde_json_Error"
nominal js_value = $"wasm_bindgen_JsValue"
nominal closure t = $"wasm_bindgen_closure_Closure<`t>"
nominal hash_map k v = $"std_collections_HashMap<`k, `v>"
nominal rc t = $"std_rc_Rc<`t>"
nominal box t = $"Box<`t>"
nominal pin t = $"std_pin_Pin<`t>"
nominal arc t = $"std_sync_Arc<`t>"
nominal std_string = $"std_string_String"
nominal js_function = $"js_sys_Function"
nominal window = $"web_sys_Window"
nominal document = $"web_sys_Document"
nominal html_element = $"web_sys_HtmlElement"
nominal storage = $"web_sys_Storage"
nominal dyn' t = $"Dyn<`t>"
nominal fn' t = $"Fn<`t>"
nominal fn_once t = $"FnOnce<`t>"
nominal fn_unit = $"FnUnit"
nominal future t = $"Future<`t>"
nominal impl t = $"Impl<`t>"
nominal ref' t = $"Ref<`t>"
nominal result' t u = $"Result<`t, `u>"
nominal str = $"Str"
nominal vec t = $"Vec<`t>"

inl result_get forall t e. (source : result t e) : t =
    match source with
    | Ok x => x
    | Error x => failwith $'$"Result value was Error: {!x}"'

inl result_map forall t e u. (fn : t -> u) (source : result t e) : result u e =
    match source with
    | Ok x => fn x |> Ok
    | Error x => Error x

inl result_unbox forall t u. (x : result' t u) : result t u =
    inl ok x : result t u = Ok x
    inl error x : result t u = Error x
    $"match !x with Ok x -> !ok x | Error x -> !error x"

inl result_box forall t u. (x : result t u) : result' t u =
    match x with
    | Ok x => $"Ok !x"
    | Error err => $"Error !err"

inl (~!\) forall t. (code : string) : t =
    rust.emit_expr () code

inl (~!\\) forall t u. ((args : t), (code : string)) : u =
    rust.emit_expr args code

inl try forall t u. (x : result' t u) : t =
    !\($'"!x?"')

inl result_unwrap forall t u. (x : result' t u) : t =
    !\($'"!x.unwrap()"')

inl result_ok forall t. (x : result' t _) : optionm'.option' t =
    !\($'"!x.ok()"')

inl optionm'_map forall t u. (fn : t -> u) (x : optionm'.option' t) : optionm'.option' u =
    !\\(fn, $'"!x.map(|x| $0(x))"')

inl optionm'_flatten x =
    match x with
    | Some (Some x) => Some x
    | _ => None

inl raw_string_literal (s : string) : ref' str =
    !\($"\"r#\\\"\" + !s + \"\\\"#\"")

inl (~#) (s : string) : ref' str =
    raw_string_literal s

inl as_str (s : string) : ref' str =
    inl s = join s
    !\($'$"fable_library_rust::String_::LrcStr::as_str(&!s)"')

inl from_std_string (str : std_string) : string =
    inl str = join str
    !\($'"fable_library_rust::String_::fromString(!str)"')

inl to_std_string (s : string) : std_string =
    inl s = s |> as_str
    !\($'$"String::from(!s)"')

inl new_box forall t. (x : t) : box t =
    inl x = join x
    !\($'"Box::new(!x)"')

inl closure_wrap forall t. (x : box t) : closure t =
    inl x = join x
    !\($'"wasm_bindgen::closure::Closure::wrap(!x)"')

inl box_fn forall t. (x : () -> ()) : box t =
    inl x = join x
    !\($'"Box::new(move || !x())"')

inl closure_forget forall t. (closure : closure t) =
    !\($'"!closure.forget()"') : ()

inl new_pin forall t. (x : t) : pin (box t) =
    inl x = join x
    !\($'"Box::pin(!x)"')

inl new_hash_map () : hash_map _ _ =
    !\($'"std::collections::HashMap::new()"')

inl map_get forall k v. (key : k) (map : hash_map k v) : optionm'.option' v =
    inl key = join key
    !\($'"std::collections::HashMap::get(&!map, &!key).map(|x| *x)"')

inl format x : std_string =
    !\\(x, $'@@$"format\!(""{{}}"", $0)"')

inl format_debug x : std_string =
    !\\(x, $'@@$"format\!(""{{:?}}"", $0)"')

inl format_pretty x : std_string =
    !\\(x, $'@@$"format\!(""{{:#?}}"", $0)"')

inl future_init forall t. (depth : u8) (flag : u8) (x : () -> t) : pin (box (dyn' (future t))) =
    if flag = 1
    then !\($'"let __future_init = Box::pin(async move { //"')
    else !\($'"let __future_init = Box::pin(async { //"')
    let x' = x ()
    inl x' = join x'
    if depth = 4 || depth = 5
    then !\($'"!x' }}}})"')
    elif depth = 3
    then !\($'"!x' }}})"')
    else !\($'"!x' }})"')
    if depth = 0 || depth = 3
    then !\($'"{ { // "')
    elif depth = 2
    then !\($'"{ // "')
    elif depth = 5
    then !\($'"{ { { { { { // "')
    !\($'"__future_init"')

inl await forall t. (x : pin (box (dyn' (future t)))) : t =
    !\($'"!x.await"')

inl mount_to_body (view_fn : () -> impl into_view) =
    !\\(view_fn, $'"leptos::mount_to_body(|| $0())"') : ()

inl log_string (text : string) =
    !\\((), $'@@"leptos::logging::log\!(""" + !text + @@""")"') : ()

inl log (text : string) =
    !\\(text, $'@@$"leptos::logging::log\!(""{{}}"", $0)"') : ()

inl log_debug (text : string) =
    !\\(text, $'@@$"leptos::logging::log\!(""{{:?}}"", $0)"') : ()

inl log_pretty (text : string) =
    !\\(text, $'@@$"leptos::logging::log\!(""{{:#?}}"", $0)"') : ()

inl to_view (macro : string) : impl into_view =
    !\($'"leptos::view\! { " + !macro + " }"')

inl to_fragment (macro : string) : fragment =
    !\($'"leptos::view\! { " + !macro + " }"')

inl fragment_to_view (fragment : fragment) : impl into_view =
    !\($'"leptos::IntoView::into_view(!fragment)"')

inl to_view' (macro : leptos_html_element div) : impl into_view =
    !\($'"leptos::view\! { {!macro} }"')

inl create_signal forall t. (value : t) : read_signal t * write_signal t =
    !\($'$"leptos::create_signal(!value)"')

inl create_rw_signal forall t. (value : t) : rw_signal t =
    !\($'$"leptos::create_rw_signal(!value)"')

inl create_local_resource forall t u. (source : () -> t) (fetcher : t -> pin (box (dyn' (future u)))) : resource t u =
    inl source = join source
    !\\(fetcher, $'"leptos::create_local_resource(move || !source(), |x| async move { $0(x).await })"')

inl create_action forall t u. (action_fn : t -> pin (box (dyn' (future u)))) : action t u =
    inl action_fn = join action_fn
    !\($'"leptos::create_action(move |value: &`t| !action_fn(*value))"')

inl action_dispatch forall t. (value : t) (action : action t ()) =
    inl value = join value
    !\($'"leptos::Action::dispatch(&!action, !value)"')

inl use_context forall t. () : t =
    !\($'"leptos::use_context::<std::rc::Rc<`t>>().unwrap().into()"')

inl rw_signal_get forall t. (signal : rw_signal t) : t =
    inl signal = join signal
    !\($'$"leptos::SignalGet::get(&!signal)"')

inl signal_get forall t. (signal : read_signal t) : t =
    inl signal = join signal
    !\($'$"leptos::SignalGet::get(&!signal)"')

inl signal_update forall t. (fn : t -> t) (signal : rw_signal t) =
    inl fn = join fn
    inl signal = join signal
    !\($'$"leptos::SignalUpdate::update(&!signal, |x| *x = !fn(*x))"') : ()

inl signal_get_untracked forall t. (signal : rw_signal t) : t =
    inl signal = join signal
    !\($'$"leptos::SignalGetUntracked::get_untracked(&!signal)"')

inl rw_signal_set forall t. (value : t) (signal : rw_signal t) =
    inl value = join value
    inl signal = join signal
    !\($'$"leptos::SignalSet::set(&!signal, !value)"') : ()

inl storage_get forall t. (key : string) (storage : storage) : result' (optionm'.option' t) js_value =
    inl storage = join storage
    inl key = key |> as_str
    !\($'$"web_sys::Storage::get_item(&!storage, !key)"')

inl as_ref forall t. (closure : closure t) : ref' js_value =
    !\($'"wasm_bindgen::closure::Closure::as_ref(&!closure)"')

inl unchecked_ref (ref : ref' js_value) : ref' js_function =
    !\($'"wasm_bindgen::JsCast::unchecked_ref(!ref)"')

inl storage_set forall t. (key : string) (value : t) (storage : storage) =
    inl storage = join storage
    inl key = key |> as_str
    inl value = value |> format |> from_std_string |> as_str
    !\($'$"web_sys::Storage::set(&!storage, !key, !value).unwrap()"') : ()

inl signal_set forall t. (value : t) (signal : write_signal t) =
    inl value = join value
    inl signal = join signal
    !\($'$"leptos::SignalSet::set(&!signal, !value)"') : ()

inl memo_get forall t. (memo : memo t) : t =
    !\($'$"!memo()"')

inl resource_get forall t u. (resource : resource t u) : optionm'.option' u =
    inl resource = join resource
    !\($'$"leptos::SignalGet::get(&!resource)"')

inl create_effect (fn : () -> ()) : () =
    inl fn = join fn
    !\($'"leptos::create_effect(move |_| { !fn() })"')

inl create_memo forall t. (fn : () -> t) : memo t =
    inl fn = join fn
    !\($'"leptos::create_memo(move |_| { !fn() })"')

let window () : window =
    !\($'"leptos::leptos_dom::window()"')

let local_storage (window : window) : result' (optionm'.option' storage) js_value =
    inl window = join window
    !\($'"!window.local_storage()"')

inl store_get forall t. (key : string) (store : rexie_store) : pin (box (dyn' (future t))) =
    inl key = #key
    inl key : ref' js_value = !\\(key, $'"$0.into()"')
    !\($'$"Box::pin(rexie::Store::get(&!store, !key))"')

inl deserialize forall t. (json : string) : result' t json_error =
    inl json : std_string = json |> to_std_string
    !\($'"serde_json::from_str(&!json)"')

inl deref forall t. (ref : ref' t) : t =
    inl ref = join ref
    !\($'"*!ref"')

type state =
    {
        dark_mode : rw_signal bool
    }

type global_state =
    heap {
        state : rw_signal state
        loading : rw_signal (hash_map string (rw_signal bool))
    }

inl get_dark_mode_key () =
    "dark-mode"

inl explorer_backend_host_input () =
    inl (explorer_backend_host, set_explorer_backend_host) = create_signal("explorer-backend-mainnet-prod-24ktefolwq-uc.a.run.app" |> to_std_string)

    inl input' : leptos_html_element input =
        !\\((explorer_backend_host, set_explorer_backend_host), $'$"leptos::view\! {{ <input class=\\\"bg-gray-50 dark:bg-gray-900 flex-1 h-8\\\" prop:value=$0 on:keyup=move |event: web_sys::KeyboardEvent| {{ $1(leptos::event_target_value(&event)) }} /> }}"')
    $"!input' |> unbox" : impl into_view

inl build_database () : pin (box (dyn' (future (result rexie rexie_error)))) =
    log $'"ui.build_database ()"'

    fun () =>
        inl rexie : pin (box (dyn' (future (result' rexie rexie_error)))) = !\($'"Box::pin(rexie::Rexie::builder(\\\"database\\\").version(1).add_object_store(rexie::ObjectStore::new(\\\"store\\\")).build())"')
        inl rexie : result' rexie rexie_error = rexie |> await
        inl rexie : rexie = rexie |> result_unwrap
        Ok rexie
    |> future_init 1 0

inl get_dark_mode (rexie : rexie) : pin (box (dyn' (future (result' (option bool) rexie_error)))) =
    log $'"ui.get_dark_mode ()"'
    inl rexie = join rexie
    fun () =>
        inl transaction : rexie_transaction = !\($'"!rexie.transaction(&[\\\"store\\\"], rexie::TransactionMode::ReadOnly)?"')
        inl store : rexie_store = !\($'"!transaction.store(\\\"store\\\")?"')
        inl mode_value : result' js_value rexie_error = store |> store_get "data" |> await
        inl mode_value : js_value = mode_value |> try
        inl mode_data : optionm'.option' json_value = !\($'"serde_wasm_bindgen::from_value(!mode_value).unwrap()"')
        match mode_data |> optionm'.unbox with
        | Some mode_data =>
            inl mode_data = join mode_data
            inl data : vec u8 = !\($'"serde_json::from_value(!mode_data).unwrap()"')
            inl data_log = data |> format_debug
            log $'"ui.get_dark_mode () / data: " + string !data_log + ""'
            inl data = join data
            inl json : std_string = !\($'"borsh::BorshDeserialize::deserialize(&mut !data.as_slice()).unwrap()"')
            log $'"ui.get_dark_mode () / json: " + string !json + ""'

            inl obj : json_value =
                json
                |> from_std_string
                |> deserialize
                |> result_ok
                |> optionm'.unbox
                |> optionm.value
            inl dark_mode_key = get_dark_mode_key ()
            inl dark_mode_key = #dark_mode_key
            inl dark_mode : optionm'.option' bool = !\($'"!obj[!dark_mode_key].as_bool()"')
            inl dark_mode = dark_mode |> optionm'.unbox
            Ok dark_mode
        | None => Ok None
        |> result_box
    |> future_init 2 0

inl set_dark_mode (mode : bool) (rexie : rexie) : pin (box (dyn' (future (result' () rexie_error)))) =
    log $'"ui.set_dark_mode () / mode: " + string !mode + ""'
    inl rexie = join rexie
    fun () =>
        inl transaction : rexie_transaction = !\($'"!rexie.transaction(&[\\\"store\\\"], rexie::TransactionMode::ReadWrite)?"')
        inl store : rexie_store = !\($'"!transaction.store(\\\"store\\\")?"')
        inl dark_mode_key = get_dark_mode_key ()
        inl dark_mode_key = #dark_mode_key
        inl mode_value : std_string = !\($'"serde_json::json!!({ !dark_mode_key: !mode }).to_string()"')

        !\($'"let mut data = Vec::new()"')
        !\($'"borsh::BorshSerialize::serialize(&!mode_value, &mut data).unwrap()"')
        inl data : vec u8 = !\($'"data"')

        inl mode_js_value : js_value = !\($'"serde_wasm_bindgen::to_value(&!data).unwrap()"')
        !\($'"!store.put(&!mode_js_value, Some(&\\\"data\\\".into())).await?"')
        !\($'"!transaction.done().await?"')

        Ok () |> result_box
    |> future_init 4 0

inl dark_mode_toggle () =
    log $'"ui.dark_mode_toggle ()"'
    inl global_state : global_state = use_context ()

    inl database : resource (option ()) rexie =
        create_local_resource
            fun () => None
            fun _ =>
                fun () =>
                    log $'"ui.dark_mode_toggle () / database create_local_resource"'
                    build_database () |> await |> result_get
                |> future_init 0 0

    inl dark_mode : resource (optionm'.option' rexie) (option bool) =
        create_local_resource
            fun () =>
                database
                |> resource_get
            fun (database : optionm'.option' rexie) =>
                fun () =>
                    inl database_log = database |> format_debug
                    log $'"ui.dark_mode_toggle () / dark_mode create_local_resource / database: " + string !database_log + ""'
                    match database |> optionm'.unbox with
                    | Some database => database |> get_dark_mode |> await |> result_unwrap
                    | None => None
                |> future_init 3 0

    create_effect fun () =>
        log $'"ui.dark_mode_toggle () / create_effect 1 / ##1"'

        match window () |> local_storage |> result_unbox |> result_map optionm'.unbox with
        | Ok (Some storage) =>
            inl dark_mode = dark_mode |> resource_get |> optionm'.unbox
            inl dark_mode_log = dark_mode |> format_debug
            log $'"ui.dark_mode_toggle () / dark_mode effect 0 / ##1.1 / dark_mode1: " + string !dark_mode_log + ""'

            inl dark_mode =
                match dark_mode with
                | Some (Some dark_mode) =>
                    Some dark_mode
                | _ =>
                    storage
                    |> storage_get (get_dark_mode_key ())
                    |> result_ok
                    |> optionm'.unbox
                    |> optionm.map optionm'.unbox
                    |> optionm'_flatten
                    |> optionm.map fun (value : std_string) =>
                        inl value = join value
                        value |> from_std_string |> deserialize |> result_ok |> optionm'.unbox
                    |> optionm'_flatten

            inl dark_mode_log = dark_mode |> format_debug
            log $'"ui.dark_mode_toggle () / dark_mode effect 0 / ##1.1 / dark_mode2: " + string !dark_mode_log + ""'

            match dark_mode with
            | Some dark_mode =>
                global_state.state |> signal_get_untracked
                |> fun state => state.dark_mode
                |> rw_signal_set dark_mode
            | _ => ()
        | _ => ()

    inl set_dark_mode_action = create_action fun value =>
        log $'"ui.dark_mode_toggle () / set_dark_mode_action / value: " + string !value + ""'
        inl database =
            database
            |> resource_get
            |> optionm'.unbox
            |> optionm.value
        fun () =>
            database |> set_dark_mode value |> await |> result_unwrap
        |> future_init 5 1

    let loading = create_memo fun () =>
        log $'"ui.dark_mode_toggle () / loading create_memo"'
        global_state.loading |> signal_get_untracked

    let (loaded, set_loaded) = create_signal false

    create_effect fun () =>
        inl loaded = loaded |> signal_get
        log $'"ui.dark_mode_toggle () / create_effect 2 / ##1 / loaded: " + string !loaded + ""'

        inl dark_mode =
            global_state.state |> signal_get_untracked
            |> fun state => state.dark_mode
            |> rw_signal_get

        log $'"ui.dark_mode_toggle () / create_effect 2 / ##2 / dark_mode: " + string !dark_mode + ""'

        inl dark_mode_loading =
            loading
            |> memo_get
            |> map_get (get_dark_mode_key ())
            |> optionm'.unbox
            |> optionm.map rw_signal_get
            |> optionm'.default_value false

        log $'"ui.dark_mode_toggle () / create_effect 2 / ##3 / dark_mode_loading: " + string !dark_mode_loading + ""'

        if not dark_mode_loading then
            if not loaded
            then set_loaded |> signal_set true
            else
                log $'"ui.dark_mode_toggle () / create_effect 2 / ##4 / dark_mode: " + string !dark_mode + ""'

                match window () |> local_storage |> result_unbox |> result_map optionm'.unbox with
                | Ok (Some storage) =>
                    set_dark_mode_action |> action_dispatch dark_mode
                    storage |> storage_set (get_dark_mode_key ()) dark_mode
                | _ => ()

    inl on_click (_event : event) =
        global_state.state |> rw_signal_get
        |> fun state => state.dark_mode |> signal_update fun x =>
            not x

    inl on_click = join on_click

    inl get_dark_mode () =
        global_state.state |> rw_signal_get
        |> fun state => state.dark_mode |> rw_signal_get

    inl get_dark_mode = join get_dark_mode

    $'"<label for=\\\"AcceptConditions\\\" class=\\\"relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\\\"><input type=\\\"checkbox\\\" id=\\\"AcceptConditions\\\" class=\\\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\\\" on:change=move |event| !on_click(event) prop:checked={move || !get_dark_mode()} /><span class=\\\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white text-gray-400 transition-all peer-checked:start-6 peer-checked:text-green-600\\\"><svg data-unchecked-icon xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-4 w-4\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" /></svg><svg data-checked-icon xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"hidden h-4 w-4\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"> <path fill-rule=\\\"evenodd\\\" d=\\\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\\\" clip-rule=\\\"evenodd\\\" /></svg></span><span class=\\\"absolute inset-0 rounded-full bg-gray-300 transition peer-checked:bg-green-500\\\"></span></label>"'
    |> to_view

inl content () =
    inl font_size = 14i32
    inl font_size : string = $"string !font_size"
    inl font_size = font_size |> as_str

    inl explorer_backend_host_input' = explorer_backend_host_input ()
    inl explorer_backend_host_input' : leptos_html_element input = $"!explorer_backend_host_input' |> unbox"

    inl dark_mode_toggle' = dark_mode_toggle ()
    inl dark_mode_toggle' : leptos_html_element label = $"!dark_mode_toggle' |> unbox"

    inl title = "view"
    inl children =
        $'"<div class=\\\"flex items-center\\\"><div>dark_mode:</div>{!dark_mode_toggle'}</div>"'
        |> to_view
    inl children : leptos_html_element div = $"!children |> unbox"

    inl title = title |> to_std_string
    inl children = join children
    inl accordion' =
        $'"<details class=\\\"group [&_summary::-webkit-details-marker]:hidden\\\" open><summary class=\\\"group flex items-center justify-between rounded-lg px-4 py-2 text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-200\\\"><div class=\\\"flex items-center gap-2\\\"><span class=\\\"text-sm font-medium\\\">{!title}</span></div><span class=\\\"shrink-0 transition duration-300 group-open:-rotate-180\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-5 w-5\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" /></svg></span></summary>{!children}</details>"'
        |> to_view
    inl view_accordion' : leptos_html_element details = $"!accordion' |> unbox"

    inl title = "connection"
    inl children =
        $'"<div class=\\\"flex items-baseline\\\" style=\\\"align-items: baseline;\\\"><div>explorer_backend_host:</div>{!explorer_backend_host_input'}</div>"'
        |> to_view
    inl children : leptos_html_element div = $"!children |> unbox"

    inl title = title |> to_std_string
    inl children = join children
    inl accordion' =
        $'"<details class=\\\"group [&_summary::-webkit-details-marker]:hidden\\\" open><summary class=\\\"group flex items-center justify-between rounded-lg px-4 py-2 text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-200\\\"><div class=\\\"flex items-center gap-2\\\"><span class=\\\"text-sm font-medium\\\">{!title}</span></div><span class=\\\"shrink-0 transition duration-300 group-open:-rotate-180\\\"><svg xmlns=\\\"http://www.w3.org/2000/svg\\\" class=\\\"h-5 w-5\\\" viewBox=\\\"0 0 20 20\\\" fill=\\\"currentColor\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\\\" clip-rule=\\\"evenodd\\\" /></svg></span></summary>{!children}</details>"'
        |> to_view
    inl connection_accordion' : leptos_html_element details = $"!accordion' |> unbox"

    inl result : leptos_html_element div =
        !\\(font_size, $'"leptos::view\! { <div class=\\\"bg-gray-50 dark:bg-gray-900 flex flex-1 flex-col items-stretch min-h-screen min-w-full text-gray-700 dark:text-gray-200 text-sm\\\" style=\\\"font-size: \\\".to_owned() + *$0 + \\\"px;\\\">{!view_accordion'}{!connection_accordion'}</div> }"')
    $"!result |> unbox" : impl into_view

inl home () =
    log $'"ui.home ()"'

    inl global_state : global_state = use_context ()

    inl content' = content ()
    inl content' : leptos_html_element div = $"!content' |> unbox"

    inl get_dark_mode () =
        global_state.state |> rw_signal_get
        |> fun state => state.dark_mode |> rw_signal_get

    inl get_dark_mode = join get_dark_mode

    $'"<div class=\\\"flex flex-1\\\" class:dark={move || !get_dark_mode()}>{!content'}</div>"' |> to_view

inl app () =
    log $'"ui.app ()"'

    !\($'"leptos_meta::provide_meta_context()"')

    inl global_state : global_state =
        heap {
            state =
                create_rw_signal
                    {
                        dark_mode = create_rw_signal true
                    }
            loading = new_hash_map () |> create_rw_signal
        }

    !\($'$"leptos::provide_context::<std::rc::Rc<`global_state>>(!global_state)"')

    inl home' = home ()
    inl home' : leptos_html_element div = $"!home' |> unbox"
    inl home' : view = !\($'"leptos::IntoView::into_view(!home')"')

    $"!home' |> unbox" : impl into_view

inl main (args : array string) =
    log $'"main / args: " + string !args + ""'

    !\($'"let _ = console_log::init_with_level(log::Level::Debug)"')
    !\($'"console_error_panic_hook::set_once()"')

    inl body : optionm'.option' html_element = !\($'"leptos::document().body()"')
    inl body = body |> optionm'.unbox
    inl body_log = body |> format_debug

    log $'"main / mount_to_body / body: " + string !body_log + ""'

    let mount () =
        fun () =>
            app ()
        |> mount_to_body

    match body with
    | Some _ =>
        mount ()
    | _ =>
        inl fn : box (dyn' fn_unit) = box_fn mount
        inl fn_closure = fn |> closure_wrap
        inl fn = fn_closure |> as_ref |> unchecked_ref

        !\($'"leptos::document().add_event_listener_with_callback(\\\"DOMContentLoaded\\\", !fn).unwrap()"')

        fn_closure |> closure_forget

    0i32

inl main () =
    types ()

    $"let main args = !main args" : ()
