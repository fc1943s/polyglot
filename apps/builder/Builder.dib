#!meta

{"kernelInfo":{"defaultKernelName":"fsharp","items":[]}}

#!markdown

# Builder (Polyglot)

#!fsharp

#!import ../nbs/Testing.dib

#!fsharp

#r @"../../../../../../../.nuget/packages/fsharp.control.asyncseq/3.2.1/lib/netstandard2.1/FSharp.Control.AsyncSeq.dll"
#r @"../../../../../../../.nuget/packages/system.reactive/5.0.0/lib/net5.0/System.Reactive.dll"
#r @"../../../../../../../.nuget/packages/system.reactive.linq/6.0.1-preview.1/lib/netstandard2.0/System.Reactive.Linq.dll"
#r @"../../../../../../../.nuget/packages/argu/6.1.1/lib/netstandard2.0/Argu.dll"
#r @"../../../../../../../.nuget/packages/system.commandline/2.0.0-beta4.22272.1/lib/net6.0/System.CommandLine.dll"
#r @"../../../../../../../.nuget/packages/asyncio/0.1.69/lib/netstandard2.0/AsyncIO.dll"
#r @"../../../../../../../.nuget/packages/netmq/4.0.1.12/lib/netstandard2.1/NetMQ.dll"

#!fsharp

#!import ../nbs/Common.fs
#!import ../nbs/Async.fs
#!import ../nbs/AsyncSeq.fs
#!import ../nbs/Networking.fs
#!import ../nbs/Runtime.fs
#!import ../nbs/FileSystem.fs

#!fsharp

open Common
open FileSystem

#!markdown

## buildCode

#!fsharp

let buildCode path name code = async {
    let getLocals () = $"path: {path} / name: {name} / code.Length: {code |> String.length} / {getLocals ()}"
    trace Debug (fun () -> "build") getLocals

    let targetPath = path </> "target"
    System.IO.Directory.CreateDirectory targetPath |> ignore

    let filePath = targetPath </> $"{name}.fs" |> System.IO.Path.GetFullPath
    do! System.IO.File.WriteAllTextAsync (filePath, code) |> Async.AwaitTask

    let repositoryRoot = path |> FileSystem.findParent ".paket" false

    let fsprojPath = targetPath </> $"{name}.fsproj"
    let fsprojCode = $"""<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFramework>net8.0</TargetFramework>
        <LangVersion>preview</LangVersion>
        <RollForward>Major</RollForward>
        <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>
        <Version>0.0.1-alpha.1</Version>
        <OutputType>Exe</OutputType>
    </PropertyGroup>

    <ItemGroup>
        <Compile Include="{repositoryRoot}/nbs/Common.fs" />
        <Compile Include="{repositoryRoot}/nbs/Async.fs" />
        <Compile Include="{repositoryRoot}/nbs/AsyncSeq.fs" />
        <Compile Include="{repositoryRoot}/nbs/Networking.fs" />
        <Compile Include="{repositoryRoot}/nbs/Runtime.fs" />
        <Compile Include="{repositoryRoot}/nbs/FileSystem.fs" />
        <Compile Include="{filePath}" />
    </ItemGroup>

    <Import Project="{repositoryRoot}/.paket/Paket.Restore.targets" />
</Project>
"""
    do! System.IO.File.WriteAllTextAsync (fsprojPath, fsprojCode) |> Async.AwaitTask

    let paketReferencesCode = $"FSharp.Core

Argu
FParsec
FSharp.Control.AsyncSeq
NetMQ
System.CommandLine
System.Reactive.Linq
"
    do! System.IO.File.WriteAllTextAsync (targetPath </> "paket.references", paketReferencesCode) |> Async.AwaitTask

    let! exitCode, _result =
        Runtime.executeWithOptionsAsync
            {
                Command = "dotnet build -c Release"
                CancellationToken = None
                OnLine = None
                WorkingDirectory = Some targetPath
            }

    return exitCode
}

#!fsharp

//// test

let tempFolder = FileSystem.getSourceDirectory () </> "target/test"
buildCode tempFolder "test" "1 + 1"
|> Async.runWithTimeoutStrict 20000
|> _equal (Some 0)

#!fsharp

//// test

let tempFolder = FileSystem.getSourceDirectory () </> "target/test"
buildCode tempFolder "test" "1 + a"
|> Async.runWithTimeoutStrict 20000
|> _equal (Some 1)

#!fsharp

let buildFile path = async {
    let fullPath = path |> System.IO.Path.GetFullPath
    let dir = fullPath |> System.IO.Path.GetDirectoryName
    let fileName = fullPath |> System.IO.Path.GetFileNameWithoutExtension
    let! code = fullPath |> System.IO.File.ReadAllTextAsync |> Async.AwaitTask

    return! code |> buildCode dir fileName
}

#!markdown

## Arguments

#!fsharp

[<RequireQualifiedAccess>]
type Arguments =
    | [<Argu.ArguAttributes.MainCommand; Argu.ArguAttributes.ExactlyOnce; Argu.ArguAttributes.Last>]
        Paths of paths : string list

    interface Argu.IArgParserTemplate with
        member s.Usage =
            match s with
            | Paths _ -> nameof Arguments.Paths

#!markdown

## main

#!fsharp

[<EntryPoint>]
let main args =
    let argsMap = args |> Runtime.parseArgsMap<Arguments>

    let paths =
        match argsMap.[nameof Arguments.Paths] with
        | [ Arguments.Paths paths ] -> paths
        | _ -> []

    paths
    |> List.map buildFile
    |> Async.Parallel
    |> Async.runWithTimeout 30000
    |> function
        | Some results -> results |> Array.sum
        | None -> 1

#!fsharp

//// test

let args =
    System.Environment.GetEnvironmentVariable "ARGS"
    |> Runtime.splitArgs
    |> Seq.toArray

match args with
| [||] -> 0
| args -> if main args = 0 then 0 else failwith "main failed"
